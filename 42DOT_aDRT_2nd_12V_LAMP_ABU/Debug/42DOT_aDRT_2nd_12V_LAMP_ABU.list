
42DOT_aDRT_2nd_12V_LAMP_ABU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc0  08007bc0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08007bc0  08007bc0  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bc0  08007bc0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc4  08007bc4  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08007bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  2000002c  08007bf4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08007bf4  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ef7  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003694  00000000  00000000  00042f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  000465e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a8  00000000  00000000  00047d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002819e  00000000  00000000  000492b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019596  00000000  00000000  0007144e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103095  00000000  00000000  0008a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018da79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061f8  00000000  00000000  0018dacc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007b88 	.word	0x08007b88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	08007b88 	.word	0x08007b88

08000218 <HAL_TIM_PeriodElapsedCallback>:

#include "ctrl_routine.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a68      	ldr	r2, [pc, #416]	; (80003c8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000226:	4293      	cmp	r3, r2
 8000228:	f040 80c9 	bne.w	80003be <HAL_TIM_PeriodElapsedCallback+0x1a6>
		if( timer6_cmd_num == 0 ) {
 800022c:	4b67      	ldr	r3, [pc, #412]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d103      	bne.n	800023c <HAL_TIM_PeriodElapsedCallback+0x24>
			LampSWRead(&Input_Status);
 8000234:	4866      	ldr	r0, [pc, #408]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000236:	f000 fb61 	bl	80008fc <LampSWRead>
 800023a:	e05a      	b.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0xda>

		} else if( timer6_cmd_num == 1 ) {
 800023c:	4b63      	ldr	r3, [pc, #396]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d104      	bne.n	800024e <HAL_TIM_PeriodElapsedCallback+0x36>
			LampControl(&Lamp_Status, &Input_Status);
 8000244:	4962      	ldr	r1, [pc, #392]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000246:	4863      	ldr	r0, [pc, #396]	; (80003d4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000248:	f000 fe3c 	bl	8000ec4 <LampControl>
 800024c:	e051      	b.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0xda>

		} else if( timer6_cmd_num == 2 ) {
 800024e:	4b5f      	ldr	r3, [pc, #380]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b02      	cmp	r3, #2
 8000254:	d104      	bne.n	8000260 <HAL_TIM_PeriodElapsedCallback+0x48>
			ButtonControl(&Button_Status, &Input_Status);
 8000256:	495e      	ldr	r1, [pc, #376]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000258:	485f      	ldr	r0, [pc, #380]	; (80003d8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800025a:	f001 fbd9 	bl	8001a10 <ButtonControl>
 800025e:	e048      	b.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0xda>

		} else if( timer6_cmd_num == 3 ) {
 8000260:	4b5a      	ldr	r3, [pc, #360]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b03      	cmp	r3, #3
 8000266:	d102      	bne.n	800026e <HAL_TIM_PeriodElapsedCallback+0x56>
			DoorControl();
 8000268:	f001 f9ae 	bl	80015c8 <DoorControl>
 800026c:	e041      	b.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0xda>

		} else if( timer6_cmd_num == 4 ) {
 800026e:	4b57      	ldr	r3, [pc, #348]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b04      	cmp	r3, #4
 8000274:	d102      	bne.n	800027c <HAL_TIM_PeriodElapsedCallback+0x64>
			DistantDoorControl();
 8000276:	f001 fb7f 	bl	8001978 <DistantDoorControl>
 800027a:	e03a      	b.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0xda>
			//usdoor_control();
		} else if( timer6_cmd_num == 5 ) {
 800027c:	4b53      	ldr	r3, [pc, #332]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b05      	cmp	r3, #5
 8000282:	d102      	bne.n	800028a <HAL_TIM_PeriodElapsedCallback+0x72>
			RF_DoorControl(); // key door control
 8000284:	f001 f95a 	bl	800153c <RF_DoorControl>
 8000288:	e033      	b.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0xda>

		} else if( timer6_cmd_num == 6 ) {
 800028a:	4b50      	ldr	r3, [pc, #320]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b06      	cmp	r3, #6
 8000290:	d104      	bne.n	800029c <HAL_TIM_PeriodElapsedCallback+0x84>
			CurrentDataReceive();
 8000292:	f002 f97b 	bl	800258c <CurrentDataReceive>
			CMS_Control();
 8000296:	f001 fca7 	bl	8001be8 <CMS_Control>
 800029a:	e02a      	b.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0xda>
		} else if( timer6_cmd_num == 7 ) {
 800029c:	4b4b      	ldr	r3, [pc, #300]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b07      	cmp	r3, #7
 80002a2:	d104      	bne.n	80002ae <HAL_TIM_PeriodElapsedCallback+0x96>
			boardingpass_AVAS_control();
 80002a4:	f001 fcc0 	bl	8001c28 <boardingpass_AVAS_control>
			doorwaring_AVAS_control();
 80002a8:	f001 fd14 	bl	8001cd4 <doorwaring_AVAS_control>
 80002ac:	e021      	b.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0xda>

		} else if( timer6_cmd_num == 8 ) {
 80002ae:	4b47      	ldr	r3, [pc, #284]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b08      	cmp	r3, #8
 80002b4:	d10c      	bne.n	80002d0 <HAL_TIM_PeriodElapsedCallback+0xb8>
			LampDataConv(lamp_tx_data, &lamp_tx_flag);
 80002b6:	4949      	ldr	r1, [pc, #292]	; (80003dc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80002b8:	4849      	ldr	r0, [pc, #292]	; (80003e0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80002ba:	f001 fbf5 	bl	8001aa8 <LampDataConv>
			CanTxMessage(CAN_ID_12VLAMPINFO, FDCAN_DLC_BYTES_8, lamp_tx_data, &lamp_tx_flag);
 80002be:	4b47      	ldr	r3, [pc, #284]	; (80003dc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80002c0:	4a47      	ldr	r2, [pc, #284]	; (80003e0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80002c2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80002c6:	f240 1021 	movw	r0, #289	; 0x121
 80002ca:	f000 fa9b 	bl	8000804 <CanTxMessage>
 80002ce:	e010      	b.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0xda>

		} else if( timer6_cmd_num == 9 ) {
 80002d0:	4b3e      	ldr	r3, [pc, #248]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b09      	cmp	r3, #9
 80002d6:	d10c      	bne.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0xda>
			CANReStart();
 80002d8:	f000 fae8 	bl	80008ac <CANReStart>

			test_tx_flag = 1 ;
 80002dc:	4b41      	ldr	r3, [pc, #260]	; (80003e4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80002de:	2201      	movs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
			CanTx1Message(CAN_ID_TEST, FDCAN_DLC_BYTES_8, testdata, &test_tx_flag);
 80002e2:	4b40      	ldr	r3, [pc, #256]	; (80003e4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80002e4:	4a40      	ldr	r2, [pc, #256]	; (80003e8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80002e6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80002ea:	f44f 704d 	mov.w	r0, #820	; 0x334
 80002ee:	f000 fab3 	bl	8000858 <CanTx1Message>
		}

		if( ++timer6_cmd_num == 10 ) {
 80002f2:	4b36      	ldr	r3, [pc, #216]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	3301      	adds	r3, #1
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4b34      	ldr	r3, [pc, #208]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80002fc:	701a      	strb	r2, [r3, #0]
 80002fe:	4b33      	ldr	r3, [pc, #204]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b0a      	cmp	r3, #10
 8000304:	d15b      	bne.n	80003be <HAL_TIM_PeriodElapsedCallback+0x1a6>
			timer6_cmd_num = 0;
 8000306:	4b31      	ldr	r3, [pc, #196]	; (80003cc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
			/*
			 * stop mode enable condition
			 */
			if( (ign1_status==0) && (Input_Status.door_open_status==0) && (Input_Status.charge_door_status==0) && (Input_Status.RKE_lock==0)
 800030c:	4b37      	ldr	r3, [pc, #220]	; (80003ec <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d12d      	bne.n	8000370 <HAL_TIM_PeriodElapsedCallback+0x158>
 8000314:	4b2e      	ldr	r3, [pc, #184]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000316:	7b5b      	ldrb	r3, [r3, #13]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d129      	bne.n	8000370 <HAL_TIM_PeriodElapsedCallback+0x158>
 800031c:	4b2c      	ldr	r3, [pc, #176]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800031e:	7b9b      	ldrb	r3, [r3, #14]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d125      	bne.n	8000370 <HAL_TIM_PeriodElapsedCallback+0x158>
 8000324:	4b2a      	ldr	r3, [pc, #168]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000326:	799b      	ldrb	r3, [r3, #6]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d121      	bne.n	8000370 <HAL_TIM_PeriodElapsedCallback+0x158>
					&& (Input_Status.RKE_unlock==0) && (stop_lamp_on==0) ) {
 800032c:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800032e:	79db      	ldrb	r3, [r3, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d11d      	bne.n	8000370 <HAL_TIM_PeriodElapsedCallback+0x158>
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d119      	bne.n	8000370 <HAL_TIM_PeriodElapsedCallback+0x158>
				if( ++stop_mode_cnt > 1500 ) {
 800033c:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	b29a      	uxth	r2, r3
 8000344:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000346:	801a      	strh	r2, [r3, #0]
 8000348:	4b2a      	ldr	r3, [pc, #168]	; (80003f4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000350:	4293      	cmp	r3, r2
 8000352:	d919      	bls.n	8000388 <HAL_TIM_PeriodElapsedCallback+0x170>
					stop_enable = 1;
 8000354:	4b28      	ldr	r3, [pc, #160]	; (80003f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
					stop_mode_cnt = 1495;
 800035a:	4b26      	ldr	r3, [pc, #152]	; (80003f4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800035c:	f240 52d7 	movw	r2, #1495	; 0x5d7
 8000360:	801a      	strh	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET); // US snesor board power off
 8000362:	2200      	movs	r2, #0
 8000364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000368:	4824      	ldr	r0, [pc, #144]	; (80003fc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800036a:	f004 fadf 	bl	800492c <HAL_GPIO_WritePin>
				if( ++stop_mode_cnt > 1500 ) {
 800036e:	e00b      	b.n	8000388 <HAL_TIM_PeriodElapsedCallback+0x170>



				}
			} else {
				stop_mode_cnt = 0;
 8000370:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000372:	2200      	movs	r2, #0
 8000374:	801a      	strh	r2, [r3, #0]
				stop_enable = 0;
 8000376:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000378:	2200      	movs	r2, #0
 800037a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET); // US snesor board power on
 800037c:	2201      	movs	r2, #1
 800037e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000382:	481e      	ldr	r0, [pc, #120]	; (80003fc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000384:	f004 fad2 	bl	800492c <HAL_GPIO_WritePin>

			}

		if ((ign1_status==0) && (ign1_status != ign1_status_old)){
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d112      	bne.n	80003b6 <HAL_TIM_PeriodElapsedCallback+0x19e>
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000392:	781a      	ldrb	r2, [r3, #0]
 8000394:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	429a      	cmp	r2, r3
 800039a:	d00c      	beq.n	80003b6 <HAL_TIM_PeriodElapsedCallback+0x19e>
			param.gnrl_2_flag = 1;
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800039e:	2201      	movs	r2, #1
 80003a0:	731a      	strb	r2, [r3, #12]
			savedata = pBrake_status;
 80003a2:	4b19      	ldr	r3, [pc, #100]	; (8000408 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80003a4:	781a      	ldrb	r2, [r3, #0]
 80003a6:	4b19      	ldr	r3, [pc, #100]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80003a8:	701a      	strb	r2, [r3, #0]
			GnrlParamSave(&param,savedata);
 80003aa:	4b18      	ldr	r3, [pc, #96]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	4619      	mov	r1, r3
 80003b0:	4814      	ldr	r0, [pc, #80]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80003b2:	f002 fa3b 	bl	800282c <GnrlParamSave>

		}

		ign1_status_old = ign1_status;
 80003b6:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80003b8:	781a      	ldrb	r2, [r3, #0]
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80003bc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40001000 	.word	0x40001000
 80003cc:	200003d0 	.word	0x200003d0
 80003d0:	20000280 	.word	0x20000280
 80003d4:	200003b8 	.word	0x200003b8
 80003d8:	200003f8 	.word	0x200003f8
 80003dc:	20000241 	.word	0x20000241
 80003e0:	200003b0 	.word	0x200003b0
 80003e4:	20000132 	.word	0x20000132
 80003e8:	200002f8 	.word	0x200002f8
 80003ec:	200003fe 	.word	0x200003fe
 80003f0:	200001ec 	.word	0x200001ec
 80003f4:	20000464 	.word	0x20000464
 80003f8:	20000093 	.word	0x20000093
 80003fc:	48000c00 	.word	0x48000c00
 8000400:	2000019f 	.word	0x2000019f
 8000404:	20000094 	.word	0x20000094
 8000408:	200003fc 	.word	0x200003fc
 800040c:	20000470 	.word	0x20000470

08000410 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]


	if ( hfdcan->Instance == FDCAN2 ) {
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a11      	ldr	r2, [pc, #68]	; (8000464 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d10c      	bne.n	800043e <HAL_FDCAN_RxFifo0Callback+0x2e>
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &can2_rx_header, can2_rx_data);
 8000424:	4b10      	ldr	r3, [pc, #64]	; (8000468 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000426:	4a11      	ldr	r2, [pc, #68]	; (800046c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000428:	2140      	movs	r1, #64	; 0x40
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f003 f9f6 	bl	800381c <HAL_FDCAN_GetRxMessage>
		LocalToABU(&can2_rx_header, can2_rx_data);
 8000430:	490d      	ldr	r1, [pc, #52]	; (8000468 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8000432:	480e      	ldr	r0, [pc, #56]	; (800046c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000434:	f000 f824 	bl	8000480 <LocalToABU>
		can_not_receive_cnt = 0;
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <HAL_FDCAN_RxFifo0Callback+0x60>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
	}

	if( hfdcan->Instance == FDCAN1 ) {
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a0c      	ldr	r2, [pc, #48]	; (8000474 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d109      	bne.n	800045c <HAL_FDCAN_RxFifo0Callback+0x4c>
			HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &can1_rx_header, can1_rx_data);
 8000448:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <HAL_FDCAN_RxFifo0Callback+0x68>)
 800044a:	4a0c      	ldr	r2, [pc, #48]	; (800047c <HAL_FDCAN_RxFifo0Callback+0x6c>)
 800044c:	2140      	movs	r1, #64	; 0x40
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f003 f9e4 	bl	800381c <HAL_FDCAN_GetRxMessage>
			usToABU(&can1_rx_header, can1_rx_data);
 8000454:	4908      	ldr	r1, [pc, #32]	; (8000478 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000456:	4809      	ldr	r0, [pc, #36]	; (800047c <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000458:	f000 f97c 	bl	8000754 <usToABU>

		}
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40006800 	.word	0x40006800
 8000468:	20000468 	.word	0x20000468
 800046c:	20000320 	.word	0x20000320
 8000470:	200000fc 	.word	0x200000fc
 8000474:	40006400 	.word	0x40006400
 8000478:	200003a4 	.word	0x200003a4
 800047c:	20000250 	.word	0x20000250

08000480 <LocalToABU>:



void LocalToABU(FDCAN_RxHeaderTypeDef *rxheader, uint8_t *rxdata)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
	switch(rxheader->Identifier) {
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f240 3233 	movw	r2, #819	; 0x333
 8000492:	4293      	cmp	r3, r2
 8000494:	d01b      	beq.n	80004ce <LocalToABU+0x4e>
 8000496:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 800049a:	f080 8131 	bcs.w	8000700 <LocalToABU+0x280>
 800049e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80004a2:	f000 80d7 	beq.w	8000654 <LocalToABU+0x1d4>
 80004a6:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80004aa:	f200 8129 	bhi.w	8000700 <LocalToABU+0x280>
 80004ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004b2:	d045      	beq.n	8000540 <LocalToABU+0xc0>
 80004b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004b8:	f200 8122 	bhi.w	8000700 <LocalToABU+0x280>
 80004bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004c0:	d02d      	beq.n	800051e <LocalToABU+0x9e>
 80004c2:	f240 1243 	movw	r2, #323	; 0x143
 80004c6:	4293      	cmp	r3, r2
 80004c8:	f000 80a7 	beq.w	800061a <LocalToABU+0x19a>
			Us_rear.us_rear_dist_cnt = rxdata[7];
			break;
		 	*/

	}
}
 80004cc:	e118      	b.n	8000700 <LocalToABU+0x280>
		pBrake_status = rxdata[0];
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	781a      	ldrb	r2, [r3, #0]
 80004d2:	4b8d      	ldr	r3, [pc, #564]	; (8000708 <LocalToABU+0x288>)
 80004d4:	701a      	strb	r2, [r3, #0]
		vehicle_vel = rxdata[1];
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b21a      	sxth	r2, r3
 80004de:	4b8b      	ldr	r3, [pc, #556]	; (800070c <LocalToABU+0x28c>)
 80004e0:	801a      	strh	r2, [r3, #0]
		brake_status = rxdata[2];
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	789a      	ldrb	r2, [r3, #2]
 80004e6:	4b8a      	ldr	r3, [pc, #552]	; (8000710 <LocalToABU+0x290>)
 80004e8:	701a      	strb	r2, [r3, #0]
		gear_position = rxdata[3];
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	78da      	ldrb	r2, [r3, #3]
 80004ee:	4b89      	ldr	r3, [pc, #548]	; (8000714 <LocalToABU+0x294>)
 80004f0:	701a      	strb	r2, [r3, #0]
		testAVAS = rxdata[4];
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	791a      	ldrb	r2, [r3, #4]
 80004f6:	4b88      	ldr	r3, [pc, #544]	; (8000718 <LocalToABU+0x298>)
 80004f8:	701a      	strb	r2, [r3, #0]
		if(testAVAS){
 80004fa:	4b87      	ldr	r3, [pc, #540]	; (8000718 <LocalToABU+0x298>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d006      	beq.n	8000510 <LocalToABU+0x90>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000508:	4884      	ldr	r0, [pc, #528]	; (800071c <LocalToABU+0x29c>)
 800050a:	f004 fa0f 	bl	800492c <HAL_GPIO_WritePin>
		break;
 800050e:	e0f7      	b.n	8000700 <LocalToABU+0x280>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000516:	4881      	ldr	r0, [pc, #516]	; (800071c <LocalToABU+0x29c>)
 8000518:	f004 fa08 	bl	800492c <HAL_GPIO_WritePin>
		break;
 800051c:	e0f0      	b.n	8000700 <LocalToABU+0x280>
		hazard_sw_on = rxdata[0]&0x01;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b7d      	ldr	r3, [pc, #500]	; (8000720 <LocalToABU+0x2a0>)
 800052a:	701a      	strb	r2, [r3, #0]
		stop_lamp_on = (rxdata[0]&0x10) >> 4;
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	111b      	asrs	r3, r3, #4
 8000532:	b2db      	uxtb	r3, r3
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b7a      	ldr	r3, [pc, #488]	; (8000724 <LocalToABU+0x2a4>)
 800053c:	701a      	strb	r2, [r3, #0]
		break;
 800053e:	e0df      	b.n	8000700 <LocalToABU+0x280>
		ign1_status = rxdata[0]&0x01;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b77      	ldr	r3, [pc, #476]	; (8000728 <LocalToABU+0x2a8>)
 800054c:	701a      	strb	r2, [r3, #0]
		DRV_door_open = (rxdata[0]&0x08) >> 3;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	10db      	asrs	r3, r3, #3
 8000554:	b2db      	uxtb	r3, r3
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b73      	ldr	r3, [pc, #460]	; (800072c <LocalToABU+0x2ac>)
 800055e:	701a      	strb	r2, [r3, #0]
		DRV_door_close = (rxdata[0]&0x10) >> 4;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	111b      	asrs	r3, r3, #4
 8000566:	b2db      	uxtb	r3, r3
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b70      	ldr	r3, [pc, #448]	; (8000730 <LocalToABU+0x2b0>)
 8000570:	701a      	strb	r2, [r3, #0]
		PS_door_open = (rxdata[0]&0x20) >> 5;
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	115b      	asrs	r3, r3, #5
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b6c      	ldr	r3, [pc, #432]	; (8000734 <LocalToABU+0x2b4>)
 8000582:	701a      	strb	r2, [r3, #0]
		PS_door_close = (rxdata[0]&0x40) >> 6;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	119b      	asrs	r3, r3, #6
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b69      	ldr	r3, [pc, #420]	; (8000738 <LocalToABU+0x2b8>)
 8000594:	701a      	strb	r2, [r3, #0]
		vehicle_vel = rxdata[1] | (rxdata[2]<<8);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	b21a      	sxth	r2, r3
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	3302      	adds	r3, #2
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	021b      	lsls	r3, r3, #8
 80005a6:	b21b      	sxth	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b21a      	sxth	r2, r3
 80005ac:	4b57      	ldr	r3, [pc, #348]	; (800070c <LocalToABU+0x28c>)
 80005ae:	801a      	strh	r2, [r3, #0]
		brake_status = rxdata[5]&0x01;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	3305      	adds	r3, #5
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b54      	ldr	r3, [pc, #336]	; (8000710 <LocalToABU+0x290>)
 80005be:	701a      	strb	r2, [r3, #0]
		gear_position = (rxdata[5]&0x06) >> 1;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	3305      	adds	r3, #5
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	105b      	asrs	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b50      	ldr	r3, [pc, #320]	; (8000714 <LocalToABU+0x294>)
 80005d2:	701a      	strb	r2, [r3, #0]
		check_pBrake_status = (rxdata[5]&0x38) >> 3;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	3305      	adds	r3, #5
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	10db      	asrs	r3, r3, #3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	f003 0307 	and.w	r3, r3, #7
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b55      	ldr	r3, [pc, #340]	; (800073c <LocalToABU+0x2bc>)
 80005e6:	701a      	strb	r2, [r3, #0]
		auto_mode = (rxdata[6]&0x02) >> 1;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	3306      	adds	r3, #6
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	105b      	asrs	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b51      	ldr	r3, [pc, #324]	; (8000740 <LocalToABU+0x2c0>)
 80005fa:	701a      	strb	r2, [r3, #0]
		if(check_pBrake_status == 0){
 80005fc:	4b4f      	ldr	r3, [pc, #316]	; (800073c <LocalToABU+0x2bc>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d105      	bne.n	8000610 <LocalToABU+0x190>
		pBrake_status = romdata;
 8000604:	4b4f      	ldr	r3, [pc, #316]	; (8000744 <LocalToABU+0x2c4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b3f      	ldr	r3, [pc, #252]	; (8000708 <LocalToABU+0x288>)
 800060c:	701a      	strb	r2, [r3, #0]
		break;
 800060e:	e077      	b.n	8000700 <LocalToABU+0x280>
			pBrake_status = check_pBrake_status;
 8000610:	4b4a      	ldr	r3, [pc, #296]	; (800073c <LocalToABU+0x2bc>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <LocalToABU+0x288>)
 8000616:	701a      	strb	r2, [r3, #0]
		break;
 8000618:	e072      	b.n	8000700 <LocalToABU+0x280>
		light_data = rxdata[4] | (rxdata[5]<<8);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	3304      	adds	r3, #4
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b21a      	sxth	r2, r3
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3305      	adds	r3, #5
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	b21b      	sxth	r3, r3
 800062c:	4313      	orrs	r3, r2
 800062e:	b21b      	sxth	r3, r3
 8000630:	b29a      	uxth	r2, r3
 8000632:	4b45      	ldr	r3, [pc, #276]	; (8000748 <LocalToABU+0x2c8>)
 8000634:	801a      	strh	r2, [r3, #0]
		distant_data = rxdata[6] | (rxdata[7]<<8);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	3306      	adds	r3, #6
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b21a      	sxth	r2, r3
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	3307      	adds	r3, #7
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b21b      	sxth	r3, r3
 8000648:	4313      	orrs	r3, r2
 800064a:	b21b      	sxth	r3, r3
 800064c:	b29a      	uxth	r2, r3
 800064e:	4b3f      	ldr	r3, [pc, #252]	; (800074c <LocalToABU+0x2cc>)
 8000650:	801a      	strh	r2, [r3, #0]
		break;
 8000652:	e055      	b.n	8000700 <LocalToABU+0x280>
		akit_command.turn_left_on = rxdata[1]&0x01;
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	3301      	adds	r3, #1
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b3b      	ldr	r3, [pc, #236]	; (8000750 <LocalToABU+0x2d0>)
 8000662:	701a      	strb	r2, [r3, #0]
		akit_command.turn_right_on = (rxdata[1]&0x02) >> 1;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	105b      	asrs	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b36      	ldr	r3, [pc, #216]	; (8000750 <LocalToABU+0x2d0>)
 8000676:	705a      	strb	r2, [r3, #1]
		akit_command.tail_on = rxdata[2]&0x01;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	3302      	adds	r3, #2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b32      	ldr	r3, [pc, #200]	; (8000750 <LocalToABU+0x2d0>)
 8000686:	709a      	strb	r2, [r3, #2]
		akit_command.head_low_on = (rxdata[2]&0x02) >> 1;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	3302      	adds	r3, #2
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	105b      	asrs	r3, r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <LocalToABU+0x2d0>)
 800069a:	70da      	strb	r2, [r3, #3]
		akit_command.head_high_on = (rxdata[2]&0x04) >> 2;
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	3302      	adds	r3, #2
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	109b      	asrs	r3, r3, #2
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <LocalToABU+0x2d0>)
 80006ae:	711a      	strb	r2, [r3, #4]
		akit_command.lamp_off = (rxdata[2]&0x08) >> 3;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	3302      	adds	r3, #2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	10db      	asrs	r3, r3, #3
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b23      	ldr	r3, [pc, #140]	; (8000750 <LocalToABU+0x2d0>)
 80006c2:	715a      	strb	r2, [r3, #5]
		akit_command.door_open = rxdata[0]&0x01;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <LocalToABU+0x2d0>)
 80006d0:	719a      	strb	r2, [r3, #6]
		akit_command.door_close = (rxdata[0]&0x02) >> 1;
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	105b      	asrs	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <LocalToABU+0x2d0>)
 80006e2:	71da      	strb	r2, [r3, #7]
		if( (rxdata[0]&0x03) == 0x03 ) {
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f003 0303 	and.w	r3, r3, #3
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	d106      	bne.n	80006fe <LocalToABU+0x27e>
			akit_command.door_open = akit_command.door_close = 0;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <LocalToABU+0x2d0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	71da      	strb	r2, [r3, #7]
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <LocalToABU+0x2d0>)
 80006f8:	79da      	ldrb	r2, [r3, #7]
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <LocalToABU+0x2d0>)
 80006fc:	719a      	strb	r2, [r3, #6]
		break;
 80006fe:	bf00      	nop
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200003fc 	.word	0x200003fc
 800070c:	20000472 	.word	0x20000472
 8000710:	20000291 	.word	0x20000291
 8000714:	200000e9 	.word	0x200000e9
 8000718:	200003cf 	.word	0x200003cf
 800071c:	48000800 	.word	0x48000800
 8000720:	200000ff 	.word	0x200000ff
 8000724:	200001ec 	.word	0x200001ec
 8000728:	200003fe 	.word	0x200003fe
 800072c:	20000374 	.word	0x20000374
 8000730:	200000f5 	.word	0x200000f5
 8000734:	2000019d 	.word	0x2000019d
 8000738:	200000f4 	.word	0x200000f4
 800073c:	200000fe 	.word	0x200000fe
 8000740:	20000292 	.word	0x20000292
 8000744:	200003c0 	.word	0x200003c0
 8000748:	2000034a 	.word	0x2000034a
 800074c:	20000068 	.word	0x20000068
 8000750:	200001e4 	.word	0x200001e4

08000754 <usToABU>:

void usToABU(FDCAN_RxHeaderTypeDef *rxheader, uint8_t *rxdata)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	switch(rxheader->Identifier) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b10      	cmp	r3, #16
 8000764:	d022      	beq.n	80007ac <usToABU+0x58>
 8000766:	2b20      	cmp	r3, #32
 8000768:	d141      	bne.n	80007ee <usToABU+0x9a>

	case CAN_ID_USFRONTINFO:
		Us_front.us_front_head1 = rxdata[0];
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <usToABU+0xa8>)
 8000770:	701a      	strb	r2, [r3, #0]
		Us_front.us_front_head2 = rxdata[1];
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	785a      	ldrb	r2, [r3, #1]
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <usToABU+0xa8>)
 8000778:	705a      	strb	r2, [r3, #1]
		Us_front.us_front_id = rxdata[2];
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	789a      	ldrb	r2, [r3, #2]
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <usToABU+0xa8>)
 8000780:	709a      	strb	r2, [r3, #2]
		Us_front.us_front_ob_detect = rxdata[3];
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	78da      	ldrb	r2, [r3, #3]
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <usToABU+0xa8>)
 8000788:	70da      	strb	r2, [r3, #3]
		Us_front.us_front_ob_dist = rxdata[4];
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	791a      	ldrb	r2, [r3, #4]
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <usToABU+0xa8>)
 8000790:	711a      	strb	r2, [r3, #4]
		Us_front.us_front_cksm = rxdata[5];
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	795a      	ldrb	r2, [r3, #5]
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <usToABU+0xa8>)
 8000798:	715a      	strb	r2, [r3, #5]
		Us_front.us_front_dist_lpf = rxdata[6];
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	799a      	ldrb	r2, [r3, #6]
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <usToABU+0xa8>)
 80007a0:	719a      	strb	r2, [r3, #6]
		Us_front.us_front_dist_cnt = rxdata[7];
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	79da      	ldrb	r2, [r3, #7]
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <usToABU+0xa8>)
 80007a8:	71da      	strb	r2, [r3, #7]

		break;
 80007aa:	e020      	b.n	80007ee <usToABU+0x9a>

	case CAN_ID_USREARINFO:
		Us_rear.us_rear_head1 = rxdata[0];
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	781a      	ldrb	r2, [r3, #0]
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <usToABU+0xac>)
 80007b2:	701a      	strb	r2, [r3, #0]
		Us_rear.us_rear_head2 = rxdata[1];
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	785a      	ldrb	r2, [r3, #1]
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <usToABU+0xac>)
 80007ba:	705a      	strb	r2, [r3, #1]
		Us_rear.us_rear_id = rxdata[2];
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	789a      	ldrb	r2, [r3, #2]
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <usToABU+0xac>)
 80007c2:	709a      	strb	r2, [r3, #2]
		Us_rear.us_rear_ob_detect = rxdata[3];
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	78da      	ldrb	r2, [r3, #3]
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <usToABU+0xac>)
 80007ca:	70da      	strb	r2, [r3, #3]
		Us_rear.us_rear_ob_dist = rxdata[4];
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	791a      	ldrb	r2, [r3, #4]
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <usToABU+0xac>)
 80007d2:	711a      	strb	r2, [r3, #4]
		Us_rear.us_rear_cksm = rxdata[5];
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	795a      	ldrb	r2, [r3, #5]
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <usToABU+0xac>)
 80007da:	715a      	strb	r2, [r3, #5]
		Us_rear.us_rear_dist_lpf = rxdata[6];
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	799a      	ldrb	r2, [r3, #6]
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <usToABU+0xac>)
 80007e2:	719a      	strb	r2, [r3, #6]
		Us_rear.us_rear_dist_cnt = rxdata[7];
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	79da      	ldrb	r2, [r3, #7]
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <usToABU+0xac>)
 80007ea:	71da      	strb	r2, [r3, #7]

		break;
 80007ec:	bf00      	nop

	}
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	200003c4 	.word	0x200003c4
 8000800:	20000300 	.word	0x20000300

08000804 <CanTxMessage>:

void CanTxMessage(uint32_t id, uint32_t length, uint8_t *data, uint8_t *flag)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	603b      	str	r3, [r7, #0]
	if( *flag ) {
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d013      	beq.n	8000842 <CanTxMessage+0x3e>
		can2_tx_header.Identifier = id;
 800081a:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <CanTxMessage+0x4c>)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	6013      	str	r3, [r2, #0]
		can2_tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <CanTxMessage+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
		can2_tx_header.IdType = FDCAN_STANDARD_ID;
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <CanTxMessage+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
		can2_tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <CanTxMessage+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
		can2_tx_header.DataLength = length;
 8000832:	4a07      	ldr	r2, [pc, #28]	; (8000850 <CanTxMessage+0x4c>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]

		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &can2_tx_header, data);
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4905      	ldr	r1, [pc, #20]	; (8000850 <CanTxMessage+0x4c>)
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <CanTxMessage+0x50>)
 800083e:	f002 ffa8 	bl	8003792 <HAL_FDCAN_AddMessageToTxFifoQ>
	}

	(*flag) = 0;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000021c 	.word	0x2000021c
 8000854:	20000400 	.word	0x20000400

08000858 <CanTx1Message>:

void CanTx1Message(uint32_t id, uint32_t length, uint8_t *data, uint8_t *flag)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	603b      	str	r3, [r7, #0]
	if( *flag ) {
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d013      	beq.n	8000896 <CanTx1Message+0x3e>
		can1_tx_header.Identifier = id;
 800086e:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <CanTx1Message+0x4c>)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6013      	str	r3, [r2, #0]
		can1_tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <CanTx1Message+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
		can1_tx_header.IdType = FDCAN_STANDARD_ID;
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <CanTx1Message+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
		can1_tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <CanTx1Message+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
		can1_tx_header.DataLength = length;
 8000886:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <CanTx1Message+0x4c>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]

		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &can1_tx_header, data);
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	4905      	ldr	r1, [pc, #20]	; (80008a4 <CanTx1Message+0x4c>)
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <CanTx1Message+0x50>)
 8000892:	f002 ff7e 	bl	8003792 <HAL_FDCAN_AddMessageToTxFifoQ>
	}

	(*flag) = 0;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200001b8 	.word	0x200001b8
 80008a8:	20000294 	.word	0x20000294

080008ac <CANReStart>:


void CANReStart()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	if( ++can_not_receive_cnt > 4 ) {
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <CANReStart+0x48>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <CANReStart+0x48>)
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <CANReStart+0x48>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b04      	cmp	r3, #4
 80008c2:	d915      	bls.n	80008f0 <CANReStart+0x44>
		if( can_not_receive_cnt == 5 ) {
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <CANReStart+0x48>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b05      	cmp	r3, #5
 80008ca:	d102      	bne.n	80008d2 <CANReStart+0x26>
			HAL_FDCAN_Stop(&hfdcan2);
 80008cc:	480a      	ldr	r0, [pc, #40]	; (80008f8 <CANReStart+0x4c>)
 80008ce:	f002 fef0 	bl	80036b2 <HAL_FDCAN_Stop>
		}
		if( can_not_receive_cnt > 5) {
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <CANReStart+0x48>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b05      	cmp	r3, #5
 80008d8:	d90a      	bls.n	80008f0 <CANReStart+0x44>
			if( HAL_FDCAN_Start(&hfdcan2) != HAL_OK ) {
 80008da:	4807      	ldr	r0, [pc, #28]	; (80008f8 <CANReStart+0x4c>)
 80008dc:	f002 fec1 	bl	8003662 <HAL_FDCAN_Start>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <CANReStart+0x3e>
				Error_Handler();
 80008e6:	f001 ff9b 	bl	8002820 <Error_Handler>
			}
			can_not_receive_cnt = 0;
 80008ea:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <CANReStart+0x48>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200000fc 	.word	0x200000fc
 80008f8:	20000400 	.word	0x20000400

080008fc <LampSWRead>:

uint8_t boardingpassAVAS_first_step = 0;


void LampSWRead(struct InputStatus_s *input_status)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	if( auto_mode == 1 ) {
 8000904:	4b8a      	ldr	r3, [pc, #552]	; (8000b30 <LampSWRead+0x234>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d13a      	bne.n	8000982 <LampSWRead+0x86>
		Input_Status_Raw.turnlamp_LH = akit_command.turn_left_on;
 800090c:	4b89      	ldr	r3, [pc, #548]	; (8000b34 <LampSWRead+0x238>)
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	4b89      	ldr	r3, [pc, #548]	; (8000b38 <LampSWRead+0x23c>)
 8000912:	715a      	strb	r2, [r3, #5]
		Input_Status_Raw.turnlamp_RH = akit_command.turn_right_on;
 8000914:	4b87      	ldr	r3, [pc, #540]	; (8000b34 <LampSWRead+0x238>)
 8000916:	785a      	ldrb	r2, [r3, #1]
 8000918:	4b87      	ldr	r3, [pc, #540]	; (8000b38 <LampSWRead+0x23c>)
 800091a:	711a      	strb	r2, [r3, #4]
		Input_Status_Raw.taillamp = akit_command.tail_on;
 800091c:	4b85      	ldr	r3, [pc, #532]	; (8000b34 <LampSWRead+0x238>)
 800091e:	789a      	ldrb	r2, [r3, #2]
 8000920:	4b85      	ldr	r3, [pc, #532]	; (8000b38 <LampSWRead+0x23c>)
 8000922:	701a      	strb	r2, [r3, #0]
		Input_Status_Raw.headlamp_L = akit_command.head_low_on;
 8000924:	4b83      	ldr	r3, [pc, #524]	; (8000b34 <LampSWRead+0x238>)
 8000926:	78da      	ldrb	r2, [r3, #3]
 8000928:	4b83      	ldr	r3, [pc, #524]	; (8000b38 <LampSWRead+0x23c>)
 800092a:	70da      	strb	r2, [r3, #3]
		if( (akit_command.tail_on==0) && (akit_command.head_low_on==0) ) {
 800092c:	4b81      	ldr	r3, [pc, #516]	; (8000b34 <LampSWRead+0x238>)
 800092e:	789b      	ldrb	r3, [r3, #2]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10b      	bne.n	800094c <LampSWRead+0x50>
 8000934:	4b7f      	ldr	r3, [pc, #508]	; (8000b34 <LampSWRead+0x238>)
 8000936:	78db      	ldrb	r3, [r3, #3]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d107      	bne.n	800094c <LampSWRead+0x50>
			Input_Status_Raw.headlamp_H = 0;
 800093c:	4b7e      	ldr	r3, [pc, #504]	; (8000b38 <LampSWRead+0x23c>)
 800093e:	2200      	movs	r2, #0
 8000940:	705a      	strb	r2, [r3, #1]
			Input_Status_Raw.headlamp_H_passing = akit_command.head_high_on;
 8000942:	4b7c      	ldr	r3, [pc, #496]	; (8000b34 <LampSWRead+0x238>)
 8000944:	791a      	ldrb	r2, [r3, #4]
 8000946:	4b7c      	ldr	r3, [pc, #496]	; (8000b38 <LampSWRead+0x23c>)
 8000948:	709a      	strb	r2, [r3, #2]
 800094a:	e006      	b.n	800095a <LampSWRead+0x5e>
		} else {
			Input_Status_Raw.headlamp_H_passing = 0;
 800094c:	4b7a      	ldr	r3, [pc, #488]	; (8000b38 <LampSWRead+0x23c>)
 800094e:	2200      	movs	r2, #0
 8000950:	709a      	strb	r2, [r3, #2]
			Input_Status_Raw.headlamp_H = akit_command.head_high_on;
 8000952:	4b78      	ldr	r3, [pc, #480]	; (8000b34 <LampSWRead+0x238>)
 8000954:	791a      	ldrb	r2, [r3, #4]
 8000956:	4b78      	ldr	r3, [pc, #480]	; (8000b38 <LampSWRead+0x23c>)
 8000958:	705a      	strb	r2, [r3, #1]
		}
		if( akit_command.lamp_off == 1 ) {
 800095a:	4b76      	ldr	r3, [pc, #472]	; (8000b34 <LampSWRead+0x238>)
 800095c:	795b      	ldrb	r3, [r3, #5]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d145      	bne.n	80009ee <LampSWRead+0xf2>
			Input_Status_Raw.taillamp = Input_Status_Raw.headlamp_L = Input_Status_Raw.headlamp_H = Input_Status_Raw.headlamp_H_passing = 0;
 8000962:	4b75      	ldr	r3, [pc, #468]	; (8000b38 <LampSWRead+0x23c>)
 8000964:	2200      	movs	r2, #0
 8000966:	709a      	strb	r2, [r3, #2]
 8000968:	4b73      	ldr	r3, [pc, #460]	; (8000b38 <LampSWRead+0x23c>)
 800096a:	789a      	ldrb	r2, [r3, #2]
 800096c:	4b72      	ldr	r3, [pc, #456]	; (8000b38 <LampSWRead+0x23c>)
 800096e:	705a      	strb	r2, [r3, #1]
 8000970:	4b71      	ldr	r3, [pc, #452]	; (8000b38 <LampSWRead+0x23c>)
 8000972:	785a      	ldrb	r2, [r3, #1]
 8000974:	4b70      	ldr	r3, [pc, #448]	; (8000b38 <LampSWRead+0x23c>)
 8000976:	70da      	strb	r2, [r3, #3]
 8000978:	4b6f      	ldr	r3, [pc, #444]	; (8000b38 <LampSWRead+0x23c>)
 800097a:	78da      	ldrb	r2, [r3, #3]
 800097c:	4b6e      	ldr	r3, [pc, #440]	; (8000b38 <LampSWRead+0x23c>)
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e035      	b.n	80009ee <LampSWRead+0xf2>
		}
	} else if ( auto_mode == 0 ) {
 8000982:	4b6b      	ldr	r3, [pc, #428]	; (8000b30 <LampSWRead+0x234>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d131      	bne.n	80009ee <LampSWRead+0xf2>
		Input_Status_Raw.turnlamp_LH = READ_PIN_DI_0;			// DI 0
 800098a:	2101      	movs	r1, #1
 800098c:	486b      	ldr	r0, [pc, #428]	; (8000b3c <LampSWRead+0x240>)
 800098e:	f003 ffb5 	bl	80048fc <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b68      	ldr	r3, [pc, #416]	; (8000b38 <LampSWRead+0x23c>)
 8000998:	715a      	strb	r2, [r3, #5]
		Input_Status_Raw.turnlamp_RH = READ_PIN_DI_1;			// DI 1
 800099a:	2102      	movs	r1, #2
 800099c:	4867      	ldr	r0, [pc, #412]	; (8000b3c <LampSWRead+0x240>)
 800099e:	f003 ffad 	bl	80048fc <HAL_GPIO_ReadPin>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b64      	ldr	r3, [pc, #400]	; (8000b38 <LampSWRead+0x23c>)
 80009a8:	711a      	strb	r2, [r3, #4]
		Input_Status_Raw.taillamp = READ_PIN_DI_2;				// DI 2
 80009aa:	2104      	movs	r1, #4
 80009ac:	4863      	ldr	r0, [pc, #396]	; (8000b3c <LampSWRead+0x240>)
 80009ae:	f003 ffa5 	bl	80048fc <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b60      	ldr	r3, [pc, #384]	; (8000b38 <LampSWRead+0x23c>)
 80009b8:	701a      	strb	r2, [r3, #0]
		Input_Status_Raw.headlamp_L = READ_PIN_DI_3;			// DI 3
 80009ba:	2108      	movs	r1, #8
 80009bc:	485f      	ldr	r0, [pc, #380]	; (8000b3c <LampSWRead+0x240>)
 80009be:	f003 ff9d 	bl	80048fc <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b5c      	ldr	r3, [pc, #368]	; (8000b38 <LampSWRead+0x23c>)
 80009c8:	70da      	strb	r2, [r3, #3]
		Input_Status_Raw.headlamp_H = READ_PIN_DI_5;			// DI 5
 80009ca:	2104      	movs	r1, #4
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f003 ff94 	bl	80048fc <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b57      	ldr	r3, [pc, #348]	; (8000b38 <LampSWRead+0x23c>)
 80009da:	705a      	strb	r2, [r3, #1]
		Input_Status_Raw.headlamp_H_passing = READ_PIN_DI_6;	// DI 6
 80009dc:	2108      	movs	r1, #8
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f003 ff8b 	bl	80048fc <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b53      	ldr	r3, [pc, #332]	; (8000b38 <LampSWRead+0x23c>)
 80009ec:	709a      	strb	r2, [r3, #2]
	}

	Input_Status_Raw.charge_door_status = READ_PIN_DI_4;		// DI 3
 80009ee:	2102      	movs	r1, #2
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f003 ff82 	bl	80048fc <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b4e      	ldr	r3, [pc, #312]	; (8000b38 <LampSWRead+0x23c>)
 80009fe:	739a      	strb	r2, [r3, #14]
	if( ign1_status == 0 ) {
 8000a00:	4b4f      	ldr	r3, [pc, #316]	; (8000b40 <LampSWRead+0x244>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d115      	bne.n	8000a34 <LampSWRead+0x138>
		if( pBrake_status == 1 ) {
 8000a08:	4b4e      	ldr	r3, [pc, #312]	; (8000b44 <LampSWRead+0x248>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d111      	bne.n	8000a34 <LampSWRead+0x138>
			Input_Status_Raw.RKE_lock = READ_PIN_DI_7;			// DI 7
 8000a10:	2110      	movs	r1, #16
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a16:	f003 ff71 	bl	80048fc <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b46      	ldr	r3, [pc, #280]	; (8000b38 <LampSWRead+0x23c>)
 8000a20:	719a      	strb	r2, [r3, #6]
			Input_Status_Raw.RKE_unlock = READ_PIN_DI_8;		// DI 8
 8000a22:	2120      	movs	r1, #32
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f003 ff68 	bl	80048fc <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b41      	ldr	r3, [pc, #260]	; (8000b38 <LampSWRead+0x23c>)
 8000a32:	71da      	strb	r2, [r3, #7]
		}
	}
	Input_Status_Raw.door_open_status = READ_PIN_DI_9;			// DI 9
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f003 ff5f 	bl	80048fc <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b3d      	ldr	r3, [pc, #244]	; (8000b38 <LampSWRead+0x23c>)
 8000a44:	735a      	strb	r2, [r3, #13]
	Input_Status_Raw.accel_sw = READ_PIN_DI_11;					// DI 11
 8000a46:	2110      	movs	r1, #16
 8000a48:	483c      	ldr	r0, [pc, #240]	; (8000b3c <LampSWRead+0x240>)
 8000a4a:	f003 ff57 	bl	80048fc <HAL_GPIO_ReadPin>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <LampSWRead+0x23c>)
 8000a54:	721a      	strb	r2, [r3, #8]
	Input_Status_Raw.decel_sw = READ_PIN_DI_12;					// DI 12
 8000a56:	2104      	movs	r1, #4
 8000a58:	483b      	ldr	r0, [pc, #236]	; (8000b48 <LampSWRead+0x24c>)
 8000a5a:	f003 ff4f 	bl	80048fc <HAL_GPIO_ReadPin>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b35      	ldr	r3, [pc, #212]	; (8000b38 <LampSWRead+0x23c>)
 8000a64:	725a      	strb	r2, [r3, #9]
	Input_Status_Raw.drive_mode_sw = READ_PIN_DI_13;			// DI 13
 8000a66:	2108      	movs	r1, #8
 8000a68:	4837      	ldr	r0, [pc, #220]	; (8000b48 <LampSWRead+0x24c>)
 8000a6a:	f003 ff47 	bl	80048fc <HAL_GPIO_ReadPin>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <LampSWRead+0x23c>)
 8000a74:	729a      	strb	r2, [r3, #10]
	Input_Status_Raw.logging_sw = READ_PIN_DI_14;				// DI 14
 8000a76:	2110      	movs	r1, #16
 8000a78:	4833      	ldr	r0, [pc, #204]	; (8000b48 <LampSWRead+0x24c>)
 8000a7a:	f003 ff3f 	bl	80048fc <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <LampSWRead+0x23c>)
 8000a84:	72da      	strb	r2, [r3, #11]
	Input_Status_Raw.marker_sw = READ_PIN_DI_15^0x01;			// DI 15
 8000a86:	2120      	movs	r1, #32
 8000a88:	482f      	ldr	r0, [pc, #188]	; (8000b48 <LampSWRead+0x24c>)
 8000a8a:	f003 ff37 	bl	80048fc <HAL_GPIO_ReadPin>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	f083 0301 	eor.w	r3, r3, #1
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <LampSWRead+0x23c>)
 8000a98:	731a      	strb	r2, [r3, #12]

	if( Input_Status_Raw.headlamp_L == 1 ) {	// For Simulator
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <LampSWRead+0x23c>)
 8000a9c:	78db      	ldrb	r3, [r3, #3]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d102      	bne.n	8000aa8 <LampSWRead+0x1ac>
		Input_Status_Raw.taillamp = 1;
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <LampSWRead+0x23c>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
	}

	InputSWChatt(input_status);		// Switch Input Chattering Function
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 f851 	bl	8000b50 <InputSWChatt>

	Input_Status_Prev.taillamp = Input_Status_Raw.taillamp;
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <LampSWRead+0x23c>)
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <LampSWRead+0x250>)
 8000ab4:	701a      	strb	r2, [r3, #0]
	Input_Status_Prev.headlamp_L = Input_Status_Raw.headlamp_L;
 8000ab6:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <LampSWRead+0x23c>)
 8000ab8:	78da      	ldrb	r2, [r3, #3]
 8000aba:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <LampSWRead+0x250>)
 8000abc:	70da      	strb	r2, [r3, #3]
	Input_Status_Prev.headlamp_H = Input_Status_Raw.headlamp_H;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <LampSWRead+0x23c>)
 8000ac0:	785a      	ldrb	r2, [r3, #1]
 8000ac2:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <LampSWRead+0x250>)
 8000ac4:	705a      	strb	r2, [r3, #1]
	Input_Status_Prev.headlamp_H_passing = Input_Status_Raw.headlamp_H_passing;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <LampSWRead+0x23c>)
 8000ac8:	789a      	ldrb	r2, [r3, #2]
 8000aca:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <LampSWRead+0x250>)
 8000acc:	709a      	strb	r2, [r3, #2]
	Input_Status_Prev.turnlamp_LH = Input_Status_Raw.turnlamp_LH;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <LampSWRead+0x23c>)
 8000ad0:	795a      	ldrb	r2, [r3, #5]
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <LampSWRead+0x250>)
 8000ad4:	715a      	strb	r2, [r3, #5]
	Input_Status_Prev.turnlamp_RH = Input_Status_Raw.turnlamp_RH;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <LampSWRead+0x23c>)
 8000ad8:	791a      	ldrb	r2, [r3, #4]
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <LampSWRead+0x250>)
 8000adc:	711a      	strb	r2, [r3, #4]
	Input_Status_Prev.RKE_lock = Input_Status_Raw.RKE_lock;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <LampSWRead+0x23c>)
 8000ae0:	799a      	ldrb	r2, [r3, #6]
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <LampSWRead+0x250>)
 8000ae4:	719a      	strb	r2, [r3, #6]
	Input_Status_Prev.RKE_unlock = Input_Status_Raw.RKE_unlock;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <LampSWRead+0x23c>)
 8000ae8:	79da      	ldrb	r2, [r3, #7]
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <LampSWRead+0x250>)
 8000aec:	71da      	strb	r2, [r3, #7]
	Input_Status_Prev.door_open_status = Input_Status_Raw.door_open_status;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <LampSWRead+0x23c>)
 8000af0:	7b5a      	ldrb	r2, [r3, #13]
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <LampSWRead+0x250>)
 8000af4:	735a      	strb	r2, [r3, #13]
	Input_Status_Prev.accel_sw = Input_Status_Raw.accel_sw;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <LampSWRead+0x23c>)
 8000af8:	7a1a      	ldrb	r2, [r3, #8]
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <LampSWRead+0x250>)
 8000afc:	721a      	strb	r2, [r3, #8]
	Input_Status_Prev.decel_sw = Input_Status_Raw.decel_sw;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <LampSWRead+0x23c>)
 8000b00:	7a5a      	ldrb	r2, [r3, #9]
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <LampSWRead+0x250>)
 8000b04:	725a      	strb	r2, [r3, #9]
	Input_Status_Prev.drive_mode_sw = Input_Status_Raw.drive_mode_sw;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <LampSWRead+0x23c>)
 8000b08:	7a9a      	ldrb	r2, [r3, #10]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <LampSWRead+0x250>)
 8000b0c:	729a      	strb	r2, [r3, #10]
	Input_Status_Prev.logging_sw = Input_Status_Raw.logging_sw;
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <LampSWRead+0x23c>)
 8000b10:	7ada      	ldrb	r2, [r3, #11]
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <LampSWRead+0x250>)
 8000b14:	72da      	strb	r2, [r3, #11]
	Input_Status_Prev.marker_sw = Input_Status_Raw.marker_sw;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <LampSWRead+0x23c>)
 8000b18:	7b1a      	ldrb	r2, [r3, #12]
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <LampSWRead+0x250>)
 8000b1c:	731a      	strb	r2, [r3, #12]
	Input_Status_Prev.charge_door_status = Input_Status_Raw.charge_door_status;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <LampSWRead+0x23c>)
 8000b20:	7b9a      	ldrb	r2, [r3, #14]
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <LampSWRead+0x250>)
 8000b24:	739a      	strb	r2, [r3, #14]
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000292 	.word	0x20000292
 8000b34:	200001e4 	.word	0x200001e4
 8000b38:	20000478 	.word	0x20000478
 8000b3c:	48000800 	.word	0x48000800
 8000b40:	200003fe 	.word	0x200003fe
 8000b44:	200003fc 	.word	0x200003fc
 8000b48:	48001000 	.word	0x48001000
 8000b4c:	200001a0 	.word	0x200001a0

08000b50 <InputSWChatt>:

void InputSWChatt(struct InputStatus_s *input_status)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	if( Input_Status_Prev.taillamp == Input_Status_Raw.taillamp ) {
 8000b58:	4b96      	ldr	r3, [pc, #600]	; (8000db4 <InputSWChatt+0x264>)
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	4b96      	ldr	r3, [pc, #600]	; (8000db8 <InputSWChatt+0x268>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d111      	bne.n	8000b88 <InputSWChatt+0x38>
		if( ++Chattering.taillamp_cnt > 2 ) {
 8000b64:	4b95      	ldr	r3, [pc, #596]	; (8000dbc <InputSWChatt+0x26c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	4b93      	ldr	r3, [pc, #588]	; (8000dbc <InputSWChatt+0x26c>)
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	4b92      	ldr	r3, [pc, #584]	; (8000dbc <InputSWChatt+0x26c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d90a      	bls.n	8000b8e <InputSWChatt+0x3e>
			Input_Status.taillamp = Input_Status_Raw.taillamp;
 8000b78:	4b8f      	ldr	r3, [pc, #572]	; (8000db8 <InputSWChatt+0x268>)
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	4b90      	ldr	r3, [pc, #576]	; (8000dc0 <InputSWChatt+0x270>)
 8000b7e:	701a      	strb	r2, [r3, #0]
			Chattering.taillamp_cnt = 3;
 8000b80:	4b8e      	ldr	r3, [pc, #568]	; (8000dbc <InputSWChatt+0x26c>)
 8000b82:	2203      	movs	r2, #3
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e002      	b.n	8000b8e <InputSWChatt+0x3e>
		}
	} else {
		Chattering.taillamp_cnt = 0;
 8000b88:	4b8c      	ldr	r3, [pc, #560]	; (8000dbc <InputSWChatt+0x26c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
	}

	if( Input_Status_Prev.headlamp_L == Input_Status_Raw.headlamp_L ) {
 8000b8e:	4b89      	ldr	r3, [pc, #548]	; (8000db4 <InputSWChatt+0x264>)
 8000b90:	78da      	ldrb	r2, [r3, #3]
 8000b92:	4b89      	ldr	r3, [pc, #548]	; (8000db8 <InputSWChatt+0x268>)
 8000b94:	78db      	ldrb	r3, [r3, #3]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d111      	bne.n	8000bbe <InputSWChatt+0x6e>
		if( ++Chattering.headalamp_low_cnt > 2 ) {
 8000b9a:	4b88      	ldr	r3, [pc, #544]	; (8000dbc <InputSWChatt+0x26c>)
 8000b9c:	785b      	ldrb	r3, [r3, #1]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b86      	ldr	r3, [pc, #536]	; (8000dbc <InputSWChatt+0x26c>)
 8000ba4:	705a      	strb	r2, [r3, #1]
 8000ba6:	4b85      	ldr	r3, [pc, #532]	; (8000dbc <InputSWChatt+0x26c>)
 8000ba8:	785b      	ldrb	r3, [r3, #1]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d90a      	bls.n	8000bc4 <InputSWChatt+0x74>
			input_status->headlamp_L = Input_Status_Raw.headlamp_L;
 8000bae:	4b82      	ldr	r3, [pc, #520]	; (8000db8 <InputSWChatt+0x268>)
 8000bb0:	78da      	ldrb	r2, [r3, #3]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	70da      	strb	r2, [r3, #3]
			Chattering.headalamp_low_cnt = 3;
 8000bb6:	4b81      	ldr	r3, [pc, #516]	; (8000dbc <InputSWChatt+0x26c>)
 8000bb8:	2203      	movs	r2, #3
 8000bba:	705a      	strb	r2, [r3, #1]
 8000bbc:	e002      	b.n	8000bc4 <InputSWChatt+0x74>
		}
	} else {
		Chattering.headalamp_low_cnt = 0;
 8000bbe:	4b7f      	ldr	r3, [pc, #508]	; (8000dbc <InputSWChatt+0x26c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	705a      	strb	r2, [r3, #1]
	}

	if( Input_Status_Prev.headlamp_H == Input_Status_Raw.headlamp_H ) {
 8000bc4:	4b7b      	ldr	r3, [pc, #492]	; (8000db4 <InputSWChatt+0x264>)
 8000bc6:	785a      	ldrb	r2, [r3, #1]
 8000bc8:	4b7b      	ldr	r3, [pc, #492]	; (8000db8 <InputSWChatt+0x268>)
 8000bca:	785b      	ldrb	r3, [r3, #1]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d111      	bne.n	8000bf4 <InputSWChatt+0xa4>
		if( ++Chattering.headalamp_high_cnt > 2 ) {
 8000bd0:	4b7a      	ldr	r3, [pc, #488]	; (8000dbc <InputSWChatt+0x26c>)
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b78      	ldr	r3, [pc, #480]	; (8000dbc <InputSWChatt+0x26c>)
 8000bda:	709a      	strb	r2, [r3, #2]
 8000bdc:	4b77      	ldr	r3, [pc, #476]	; (8000dbc <InputSWChatt+0x26c>)
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d90a      	bls.n	8000bfa <InputSWChatt+0xaa>
			input_status->headlamp_H = Input_Status_Raw.headlamp_H;
 8000be4:	4b74      	ldr	r3, [pc, #464]	; (8000db8 <InputSWChatt+0x268>)
 8000be6:	785a      	ldrb	r2, [r3, #1]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	705a      	strb	r2, [r3, #1]
			Chattering.headalamp_high_cnt = 3;
 8000bec:	4b73      	ldr	r3, [pc, #460]	; (8000dbc <InputSWChatt+0x26c>)
 8000bee:	2203      	movs	r2, #3
 8000bf0:	709a      	strb	r2, [r3, #2]
 8000bf2:	e002      	b.n	8000bfa <InputSWChatt+0xaa>
		}
	} else {
		Chattering.headalamp_high_cnt = 0;
 8000bf4:	4b71      	ldr	r3, [pc, #452]	; (8000dbc <InputSWChatt+0x26c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	709a      	strb	r2, [r3, #2]
	}

	if( Input_Status_Prev.headlamp_H_passing == Input_Status_Raw.headlamp_H_passing ) {
 8000bfa:	4b6e      	ldr	r3, [pc, #440]	; (8000db4 <InputSWChatt+0x264>)
 8000bfc:	789a      	ldrb	r2, [r3, #2]
 8000bfe:	4b6e      	ldr	r3, [pc, #440]	; (8000db8 <InputSWChatt+0x268>)
 8000c00:	789b      	ldrb	r3, [r3, #2]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d111      	bne.n	8000c2a <InputSWChatt+0xda>
		if( ++Chattering.headlamp_high_passing_cnt > 2 ) {
 8000c06:	4b6d      	ldr	r3, [pc, #436]	; (8000dbc <InputSWChatt+0x26c>)
 8000c08:	78db      	ldrb	r3, [r3, #3]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b6b      	ldr	r3, [pc, #428]	; (8000dbc <InputSWChatt+0x26c>)
 8000c10:	70da      	strb	r2, [r3, #3]
 8000c12:	4b6a      	ldr	r3, [pc, #424]	; (8000dbc <InputSWChatt+0x26c>)
 8000c14:	78db      	ldrb	r3, [r3, #3]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d90a      	bls.n	8000c30 <InputSWChatt+0xe0>
			input_status->headlamp_H_passing = Input_Status_Raw.headlamp_H_passing;
 8000c1a:	4b67      	ldr	r3, [pc, #412]	; (8000db8 <InputSWChatt+0x268>)
 8000c1c:	789a      	ldrb	r2, [r3, #2]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	709a      	strb	r2, [r3, #2]
			Chattering.headlamp_high_passing_cnt = 3;
 8000c22:	4b66      	ldr	r3, [pc, #408]	; (8000dbc <InputSWChatt+0x26c>)
 8000c24:	2203      	movs	r2, #3
 8000c26:	70da      	strb	r2, [r3, #3]
 8000c28:	e002      	b.n	8000c30 <InputSWChatt+0xe0>
		}
	} else {
		Chattering.headlamp_high_passing_cnt = 0;
 8000c2a:	4b64      	ldr	r3, [pc, #400]	; (8000dbc <InputSWChatt+0x26c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	70da      	strb	r2, [r3, #3]
	}

	if( Input_Status_Prev.turnlamp_LH == Input_Status_Raw.turnlamp_LH ) {
 8000c30:	4b60      	ldr	r3, [pc, #384]	; (8000db4 <InputSWChatt+0x264>)
 8000c32:	795a      	ldrb	r2, [r3, #5]
 8000c34:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <InputSWChatt+0x268>)
 8000c36:	795b      	ldrb	r3, [r3, #5]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d111      	bne.n	8000c60 <InputSWChatt+0x110>
		if( ++Chattering.turnlamp_left_cnt > 2 ) {
 8000c3c:	4b5f      	ldr	r3, [pc, #380]	; (8000dbc <InputSWChatt+0x26c>)
 8000c3e:	791b      	ldrb	r3, [r3, #4]
 8000c40:	3301      	adds	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b5d      	ldr	r3, [pc, #372]	; (8000dbc <InputSWChatt+0x26c>)
 8000c46:	711a      	strb	r2, [r3, #4]
 8000c48:	4b5c      	ldr	r3, [pc, #368]	; (8000dbc <InputSWChatt+0x26c>)
 8000c4a:	791b      	ldrb	r3, [r3, #4]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d90a      	bls.n	8000c66 <InputSWChatt+0x116>
			input_status->turnlamp_LH = Input_Status_Raw.turnlamp_LH;
 8000c50:	4b59      	ldr	r3, [pc, #356]	; (8000db8 <InputSWChatt+0x268>)
 8000c52:	795a      	ldrb	r2, [r3, #5]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	715a      	strb	r2, [r3, #5]
			Chattering.turnlamp_left_cnt = 3;
 8000c58:	4b58      	ldr	r3, [pc, #352]	; (8000dbc <InputSWChatt+0x26c>)
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	711a      	strb	r2, [r3, #4]
 8000c5e:	e002      	b.n	8000c66 <InputSWChatt+0x116>
		}
	} else {
		Chattering.turnlamp_left_cnt = 0;
 8000c60:	4b56      	ldr	r3, [pc, #344]	; (8000dbc <InputSWChatt+0x26c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	711a      	strb	r2, [r3, #4]
	}

	if( Input_Status_Prev.turnlamp_RH == Input_Status_Raw.turnlamp_RH ) {
 8000c66:	4b53      	ldr	r3, [pc, #332]	; (8000db4 <InputSWChatt+0x264>)
 8000c68:	791a      	ldrb	r2, [r3, #4]
 8000c6a:	4b53      	ldr	r3, [pc, #332]	; (8000db8 <InputSWChatt+0x268>)
 8000c6c:	791b      	ldrb	r3, [r3, #4]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d111      	bne.n	8000c96 <InputSWChatt+0x146>
		if( ++Chattering.turnlamp_right_cnt > 2 ) {
 8000c72:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <InputSWChatt+0x26c>)
 8000c74:	795b      	ldrb	r3, [r3, #5]
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b50      	ldr	r3, [pc, #320]	; (8000dbc <InputSWChatt+0x26c>)
 8000c7c:	715a      	strb	r2, [r3, #5]
 8000c7e:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <InputSWChatt+0x26c>)
 8000c80:	795b      	ldrb	r3, [r3, #5]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d90a      	bls.n	8000c9c <InputSWChatt+0x14c>
			input_status->turnlamp_RH = Input_Status_Raw.turnlamp_RH;
 8000c86:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <InputSWChatt+0x268>)
 8000c88:	791a      	ldrb	r2, [r3, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	711a      	strb	r2, [r3, #4]
			Chattering.turnlamp_right_cnt = 3;
 8000c8e:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <InputSWChatt+0x26c>)
 8000c90:	2203      	movs	r2, #3
 8000c92:	715a      	strb	r2, [r3, #5]
 8000c94:	e002      	b.n	8000c9c <InputSWChatt+0x14c>
		}
	} else {
		Chattering.turnlamp_right_cnt = 0;
 8000c96:	4b49      	ldr	r3, [pc, #292]	; (8000dbc <InputSWChatt+0x26c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	715a      	strb	r2, [r3, #5]
	}

	if( Input_Status_Prev.RKE_lock == Input_Status_Raw.RKE_lock ) {
 8000c9c:	4b45      	ldr	r3, [pc, #276]	; (8000db4 <InputSWChatt+0x264>)
 8000c9e:	799a      	ldrb	r2, [r3, #6]
 8000ca0:	4b45      	ldr	r3, [pc, #276]	; (8000db8 <InputSWChatt+0x268>)
 8000ca2:	799b      	ldrb	r3, [r3, #6]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d115      	bne.n	8000cd4 <InputSWChatt+0x184>
		if( ++Chattering.RKE_lock_cnt > 2 ) {
 8000ca8:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <InputSWChatt+0x26c>)
 8000caa:	799b      	ldrb	r3, [r3, #6]
 8000cac:	3301      	adds	r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <InputSWChatt+0x26c>)
 8000cb2:	719a      	strb	r2, [r3, #6]
 8000cb4:	4b41      	ldr	r3, [pc, #260]	; (8000dbc <InputSWChatt+0x26c>)
 8000cb6:	799b      	ldrb	r3, [r3, #6]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d90e      	bls.n	8000cda <InputSWChatt+0x18a>
			RF_door_close_sig_on = input_status->RKE_lock = Input_Status_Raw.RKE_lock;
 8000cbc:	4b3e      	ldr	r3, [pc, #248]	; (8000db8 <InputSWChatt+0x268>)
 8000cbe:	799a      	ldrb	r2, [r3, #6]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	719a      	strb	r2, [r3, #6]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	799a      	ldrb	r2, [r3, #6]
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <InputSWChatt+0x274>)
 8000cca:	701a      	strb	r2, [r3, #0]
			Chattering.RKE_lock_cnt = 3;
 8000ccc:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <InputSWChatt+0x26c>)
 8000cce:	2203      	movs	r2, #3
 8000cd0:	719a      	strb	r2, [r3, #6]
 8000cd2:	e002      	b.n	8000cda <InputSWChatt+0x18a>
		}
	} else {
		Chattering.RKE_lock_cnt = 0;
 8000cd4:	4b39      	ldr	r3, [pc, #228]	; (8000dbc <InputSWChatt+0x26c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	719a      	strb	r2, [r3, #6]
	}

	if( Input_Status_Prev.RKE_unlock == Input_Status_Raw.RKE_unlock ) {
 8000cda:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <InputSWChatt+0x264>)
 8000cdc:	79da      	ldrb	r2, [r3, #7]
 8000cde:	4b36      	ldr	r3, [pc, #216]	; (8000db8 <InputSWChatt+0x268>)
 8000ce0:	79db      	ldrb	r3, [r3, #7]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d115      	bne.n	8000d12 <InputSWChatt+0x1c2>
		if( ++Chattering.RKE_unlock_cnt > 1 ) {
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <InputSWChatt+0x26c>)
 8000ce8:	79db      	ldrb	r3, [r3, #7]
 8000cea:	3301      	adds	r3, #1
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <InputSWChatt+0x26c>)
 8000cf0:	71da      	strb	r2, [r3, #7]
 8000cf2:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <InputSWChatt+0x26c>)
 8000cf4:	79db      	ldrb	r3, [r3, #7]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d90e      	bls.n	8000d18 <InputSWChatt+0x1c8>
			RF_door_open_sig_on = input_status->RKE_unlock = Input_Status_Raw.RKE_unlock;
 8000cfa:	4b2f      	ldr	r3, [pc, #188]	; (8000db8 <InputSWChatt+0x268>)
 8000cfc:	79da      	ldrb	r2, [r3, #7]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	71da      	strb	r2, [r3, #7]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	79da      	ldrb	r2, [r3, #7]
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <InputSWChatt+0x278>)
 8000d08:	701a      	strb	r2, [r3, #0]
			Chattering.RKE_unlock_cnt = 3;
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <InputSWChatt+0x26c>)
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	71da      	strb	r2, [r3, #7]
 8000d10:	e002      	b.n	8000d18 <InputSWChatt+0x1c8>
		}
	} else {
		Chattering.RKE_unlock_cnt = 0;
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <InputSWChatt+0x26c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	71da      	strb	r2, [r3, #7]
	}

	if( Input_Status_Prev.door_open_status == Input_Status_Raw.door_open_status ) {
 8000d18:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <InputSWChatt+0x264>)
 8000d1a:	7b5a      	ldrb	r2, [r3, #13]
 8000d1c:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <InputSWChatt+0x268>)
 8000d1e:	7b5b      	ldrb	r3, [r3, #13]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d111      	bne.n	8000d48 <InputSWChatt+0x1f8>
		if( ++Chattering.door_open_status_cnt > 2 ) {
 8000d24:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <InputSWChatt+0x26c>)
 8000d26:	7b5b      	ldrb	r3, [r3, #13]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <InputSWChatt+0x26c>)
 8000d2e:	735a      	strb	r2, [r3, #13]
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <InputSWChatt+0x26c>)
 8000d32:	7b5b      	ldrb	r3, [r3, #13]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d90a      	bls.n	8000d4e <InputSWChatt+0x1fe>
			input_status->door_open_status = Input_Status_Raw.door_open_status;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <InputSWChatt+0x268>)
 8000d3a:	7b5a      	ldrb	r2, [r3, #13]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	735a      	strb	r2, [r3, #13]
			Chattering.door_open_status_cnt = 3;
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <InputSWChatt+0x26c>)
 8000d42:	2203      	movs	r2, #3
 8000d44:	735a      	strb	r2, [r3, #13]
 8000d46:	e002      	b.n	8000d4e <InputSWChatt+0x1fe>
		}
	} else {
		Chattering.door_open_status_cnt = 0;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <InputSWChatt+0x26c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	735a      	strb	r2, [r3, #13]
	}

	if( Input_Status_Prev.accel_sw == Input_Status_Raw.accel_sw ) {
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <InputSWChatt+0x264>)
 8000d50:	7a1a      	ldrb	r2, [r3, #8]
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <InputSWChatt+0x268>)
 8000d54:	7a1b      	ldrb	r3, [r3, #8]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d111      	bne.n	8000d7e <InputSWChatt+0x22e>
		if( ++Chattering.accel_sw_cnt > 2 ) {
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <InputSWChatt+0x26c>)
 8000d5c:	7a1b      	ldrb	r3, [r3, #8]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <InputSWChatt+0x26c>)
 8000d64:	721a      	strb	r2, [r3, #8]
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <InputSWChatt+0x26c>)
 8000d68:	7a1b      	ldrb	r3, [r3, #8]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d90a      	bls.n	8000d84 <InputSWChatt+0x234>
			input_status->accel_sw = Input_Status_Raw.accel_sw;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <InputSWChatt+0x268>)
 8000d70:	7a1a      	ldrb	r2, [r3, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	721a      	strb	r2, [r3, #8]
			Chattering.accel_sw_cnt = 3;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <InputSWChatt+0x26c>)
 8000d78:	2203      	movs	r2, #3
 8000d7a:	721a      	strb	r2, [r3, #8]
 8000d7c:	e002      	b.n	8000d84 <InputSWChatt+0x234>
		}
	} else {
		Chattering.accel_sw_cnt = 0;
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <InputSWChatt+0x26c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	721a      	strb	r2, [r3, #8]
	}

	if( Input_Status_Prev.decel_sw == Input_Status_Raw.decel_sw ) {
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <InputSWChatt+0x264>)
 8000d86:	7a5a      	ldrb	r2, [r3, #9]
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <InputSWChatt+0x268>)
 8000d8a:	7a5b      	ldrb	r3, [r3, #9]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d11d      	bne.n	8000dcc <InputSWChatt+0x27c>
		if( ++Chattering.decel_sw_cnt > 2 ) {
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <InputSWChatt+0x26c>)
 8000d92:	7a5b      	ldrb	r3, [r3, #9]
 8000d94:	3301      	adds	r3, #1
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <InputSWChatt+0x26c>)
 8000d9a:	725a      	strb	r2, [r3, #9]
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <InputSWChatt+0x26c>)
 8000d9e:	7a5b      	ldrb	r3, [r3, #9]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d916      	bls.n	8000dd2 <InputSWChatt+0x282>
			input_status->decel_sw = Input_Status_Raw.decel_sw;
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <InputSWChatt+0x268>)
 8000da6:	7a5a      	ldrb	r2, [r3, #9]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	725a      	strb	r2, [r3, #9]
			Chattering.decel_sw_cnt = 3;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <InputSWChatt+0x26c>)
 8000dae:	2203      	movs	r2, #3
 8000db0:	725a      	strb	r2, [r3, #9]
 8000db2:	e00e      	b.n	8000dd2 <InputSWChatt+0x282>
 8000db4:	200001a0 	.word	0x200001a0
 8000db8:	20000478 	.word	0x20000478
 8000dbc:	20000310 	.word	0x20000310
 8000dc0:	20000280 	.word	0x20000280
 8000dc4:	20000290 	.word	0x20000290
 8000dc8:	20000134 	.word	0x20000134
		}
	} else {
		Chattering.decel_sw_cnt = 0;
 8000dcc:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <InputSWChatt+0x368>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	725a      	strb	r2, [r3, #9]
	}

	if( Input_Status_Prev.drive_mode_sw == Input_Status_Raw.drive_mode_sw ) {
 8000dd2:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <InputSWChatt+0x36c>)
 8000dd4:	7a9a      	ldrb	r2, [r3, #10]
 8000dd6:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <InputSWChatt+0x370>)
 8000dd8:	7a9b      	ldrb	r3, [r3, #10]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d111      	bne.n	8000e02 <InputSWChatt+0x2b2>
		if( ++Chattering.drive_mode_sw_cnt > 2 ) {
 8000dde:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <InputSWChatt+0x368>)
 8000de0:	7a9b      	ldrb	r3, [r3, #10]
 8000de2:	3301      	adds	r3, #1
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <InputSWChatt+0x368>)
 8000de8:	729a      	strb	r2, [r3, #10]
 8000dea:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <InputSWChatt+0x368>)
 8000dec:	7a9b      	ldrb	r3, [r3, #10]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d90a      	bls.n	8000e08 <InputSWChatt+0x2b8>
			input_status->drive_mode_sw = Input_Status_Raw.drive_mode_sw;
 8000df2:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <InputSWChatt+0x370>)
 8000df4:	7a9a      	ldrb	r2, [r3, #10]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	729a      	strb	r2, [r3, #10]
			Chattering.drive_mode_sw_cnt = 3;
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <InputSWChatt+0x368>)
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	729a      	strb	r2, [r3, #10]
 8000e00:	e002      	b.n	8000e08 <InputSWChatt+0x2b8>
		}
	} else {
		Chattering.drive_mode_sw_cnt = 0;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <InputSWChatt+0x368>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	729a      	strb	r2, [r3, #10]
	}

	if( Input_Status_Prev.logging_sw == Input_Status_Raw.logging_sw ) {
 8000e08:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <InputSWChatt+0x36c>)
 8000e0a:	7ada      	ldrb	r2, [r3, #11]
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <InputSWChatt+0x370>)
 8000e0e:	7adb      	ldrb	r3, [r3, #11]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d111      	bne.n	8000e38 <InputSWChatt+0x2e8>
		if( ++Chattering.logging_sw_cnt > 2 ) {
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <InputSWChatt+0x368>)
 8000e16:	7adb      	ldrb	r3, [r3, #11]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <InputSWChatt+0x368>)
 8000e1e:	72da      	strb	r2, [r3, #11]
 8000e20:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <InputSWChatt+0x368>)
 8000e22:	7adb      	ldrb	r3, [r3, #11]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d90a      	bls.n	8000e3e <InputSWChatt+0x2ee>
			input_status->logging_sw = Input_Status_Raw.logging_sw;
 8000e28:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <InputSWChatt+0x370>)
 8000e2a:	7ada      	ldrb	r2, [r3, #11]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	72da      	strb	r2, [r3, #11]
			Chattering.logging_sw_cnt = 3;
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <InputSWChatt+0x368>)
 8000e32:	2203      	movs	r2, #3
 8000e34:	72da      	strb	r2, [r3, #11]
 8000e36:	e002      	b.n	8000e3e <InputSWChatt+0x2ee>
		}
	} else {
		Chattering.logging_sw_cnt = 0;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <InputSWChatt+0x368>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	72da      	strb	r2, [r3, #11]
	}

	if( Input_Status_Prev.marker_sw == Input_Status_Raw.marker_sw ) {
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <InputSWChatt+0x36c>)
 8000e40:	7b1a      	ldrb	r2, [r3, #12]
 8000e42:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <InputSWChatt+0x370>)
 8000e44:	7b1b      	ldrb	r3, [r3, #12]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d111      	bne.n	8000e6e <InputSWChatt+0x31e>
		if( ++Chattering.marker_sw_cnt > 2 ) {
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <InputSWChatt+0x368>)
 8000e4c:	7b1b      	ldrb	r3, [r3, #12]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <InputSWChatt+0x368>)
 8000e54:	731a      	strb	r2, [r3, #12]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <InputSWChatt+0x368>)
 8000e58:	7b1b      	ldrb	r3, [r3, #12]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d90a      	bls.n	8000e74 <InputSWChatt+0x324>
			input_status->marker_sw = Input_Status_Raw.marker_sw;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <InputSWChatt+0x370>)
 8000e60:	7b1a      	ldrb	r2, [r3, #12]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	731a      	strb	r2, [r3, #12]
			Chattering.marker_sw_cnt = 3;
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <InputSWChatt+0x368>)
 8000e68:	2203      	movs	r2, #3
 8000e6a:	731a      	strb	r2, [r3, #12]
 8000e6c:	e002      	b.n	8000e74 <InputSWChatt+0x324>
		}
	} else {
		Chattering.marker_sw_cnt = 0;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <InputSWChatt+0x368>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	731a      	strb	r2, [r3, #12]
	}

	if( Input_Status_Prev.charge_door_status == Input_Status_Raw.charge_door_status ) {
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <InputSWChatt+0x36c>)
 8000e76:	7b9a      	ldrb	r2, [r3, #14]
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <InputSWChatt+0x370>)
 8000e7a:	7b9b      	ldrb	r3, [r3, #14]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d111      	bne.n	8000ea4 <InputSWChatt+0x354>
		if( ++Chattering.charge_door_status_cnt > 2 ) {
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <InputSWChatt+0x368>)
 8000e82:	7b9b      	ldrb	r3, [r3, #14]
 8000e84:	3301      	adds	r3, #1
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <InputSWChatt+0x368>)
 8000e8a:	739a      	strb	r2, [r3, #14]
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <InputSWChatt+0x368>)
 8000e8e:	7b9b      	ldrb	r3, [r3, #14]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d90a      	bls.n	8000eaa <InputSWChatt+0x35a>
			input_status->charge_door_status = Input_Status_Raw.charge_door_status;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <InputSWChatt+0x370>)
 8000e96:	7b9a      	ldrb	r2, [r3, #14]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	739a      	strb	r2, [r3, #14]
			Chattering.charge_door_status_cnt = 3;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <InputSWChatt+0x368>)
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	739a      	strb	r2, [r3, #14]
		}
	} else {
		Chattering.charge_door_status_cnt = 0;
	}
}
 8000ea2:	e002      	b.n	8000eaa <InputSWChatt+0x35a>
		Chattering.charge_door_status_cnt = 0;
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <InputSWChatt+0x368>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	739a      	strb	r2, [r3, #14]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000310 	.word	0x20000310
 8000ebc:	200001a0 	.word	0x200001a0
 8000ec0:	20000478 	.word	0x20000478

08000ec4 <LampControl>:

void LampControl(struct LampStatus_s *lamp_status, struct InputStatus_s *input_status)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]

	/*
	 * 24V Converter Control
	 * if stop lamp, ign1, tail lamp on, then convertor on
	 */
	if( (door_open_on==0) && (door_close_on==0) ) {
 8000ece:	4b99      	ldr	r3, [pc, #612]	; (8001134 <LampControl+0x270>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d12c      	bne.n	8000f30 <LampControl+0x6c>
 8000ed6:	4b98      	ldr	r3, [pc, #608]	; (8001138 <LampControl+0x274>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d128      	bne.n	8000f30 <LampControl+0x6c>
		if( (stop_lamp_on==1) || (ign1_status==1) || (input_status->taillamp==1) ) {
 8000ede:	4b97      	ldr	r3, [pc, #604]	; (800113c <LampControl+0x278>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d007      	beq.n	8000ef6 <LampControl+0x32>
 8000ee6:	4b96      	ldr	r3, [pc, #600]	; (8001140 <LampControl+0x27c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d003      	beq.n	8000ef6 <LampControl+0x32>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d108      	bne.n	8000f08 <LampControl+0x44>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2104      	movs	r1, #4
 8000efa:	4892      	ldr	r0, [pc, #584]	; (8001144 <LampControl+0x280>)
 8000efc:	f003 fd16 	bl	800492c <HAL_GPIO_WritePin>
			convertor_status = 1;
 8000f00:	4b91      	ldr	r3, [pc, #580]	; (8001148 <LampControl+0x284>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e013      	b.n	8000f30 <LampControl+0x6c>
		} else if( (stop_lamp_on==0) && (ign1_status==0) && (input_status->taillamp==0) ) {
 8000f08:	4b8c      	ldr	r3, [pc, #560]	; (800113c <LampControl+0x278>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10f      	bne.n	8000f30 <LampControl+0x6c>
 8000f10:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <LampControl+0x27c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10b      	bne.n	8000f30 <LampControl+0x6c>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d107      	bne.n	8000f30 <LampControl+0x6c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2104      	movs	r1, #4
 8000f24:	4887      	ldr	r0, [pc, #540]	; (8001144 <LampControl+0x280>)
 8000f26:	f003 fd01 	bl	800492c <HAL_GPIO_WritePin>
			convertor_status = 0;
 8000f2a:	4b87      	ldr	r3, [pc, #540]	; (8001148 <LampControl+0x284>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]

	/*
	 * auto-light on/off
	 * if ign on, tail off, then auto light on
	 */
	if( ign1_status == 1 ) {
 8000f30:	4b83      	ldr	r3, [pc, #524]	; (8001140 <LampControl+0x27c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d12f      	bne.n	8000f98 <LampControl+0xd4>
		if( auto_mode == 0 ) {
 8000f38:	4b84      	ldr	r3, [pc, #528]	; (800114c <LampControl+0x288>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10f      	bne.n	8000f60 <LampControl+0x9c>
			if( input_status->taillamp == 0 ) {
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d103      	bne.n	8000f50 <LampControl+0x8c>
				auto_light_status = 1;
 8000f48:	4b81      	ldr	r3, [pc, #516]	; (8001150 <LampControl+0x28c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e02a      	b.n	8000fa6 <LampControl+0xe2>
			} else if( input_status->taillamp == 1 ) {
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d126      	bne.n	8000fa6 <LampControl+0xe2>
				auto_light_status = 0;
 8000f58:	4b7d      	ldr	r3, [pc, #500]	; (8001150 <LampControl+0x28c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e022      	b.n	8000fa6 <LampControl+0xe2>
			}
		} else if( auto_mode == 1 ) {
 8000f60:	4b7a      	ldr	r3, [pc, #488]	; (800114c <LampControl+0x288>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d11e      	bne.n	8000fa6 <LampControl+0xe2>
			if( (akit_command.tail_on==0) && (akit_command.head_low_on==0) && (akit_command.head_high_on==0) && (akit_command.lamp_off==0) ) {
 8000f68:	4b7a      	ldr	r3, [pc, #488]	; (8001154 <LampControl+0x290>)
 8000f6a:	789b      	ldrb	r3, [r3, #2]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d10f      	bne.n	8000f90 <LampControl+0xcc>
 8000f70:	4b78      	ldr	r3, [pc, #480]	; (8001154 <LampControl+0x290>)
 8000f72:	78db      	ldrb	r3, [r3, #3]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10b      	bne.n	8000f90 <LampControl+0xcc>
 8000f78:	4b76      	ldr	r3, [pc, #472]	; (8001154 <LampControl+0x290>)
 8000f7a:	791b      	ldrb	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d107      	bne.n	8000f90 <LampControl+0xcc>
 8000f80:	4b74      	ldr	r3, [pc, #464]	; (8001154 <LampControl+0x290>)
 8000f82:	795b      	ldrb	r3, [r3, #5]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d103      	bne.n	8000f90 <LampControl+0xcc>
				auto_light_status = 1;
 8000f88:	4b71      	ldr	r3, [pc, #452]	; (8001150 <LampControl+0x28c>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	e00a      	b.n	8000fa6 <LampControl+0xe2>
			} else {
				auto_light_status = 0;
 8000f90:	4b6f      	ldr	r3, [pc, #444]	; (8001150 <LampControl+0x28c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e006      	b.n	8000fa6 <LampControl+0xe2>
			}
		}
	} else if( ign1_status == 0 ) {
 8000f98:	4b69      	ldr	r3, [pc, #420]	; (8001140 <LampControl+0x27c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <LampControl+0xe2>
		auto_light_status = 0;
 8000fa0:	4b6b      	ldr	r3, [pc, #428]	; (8001150 <LampControl+0x28c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
	}

	/*
	 *	Tail/Head Lamp Control Function
	 */
	if( input_status->taillamp == 1 ) {
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10d      	bne.n	8000fca <LampControl+0x106>
		if( auto_light_status == 0 ) {
 8000fae:	4b68      	ldr	r3, [pc, #416]	; (8001150 <LampControl+0x28c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d120      	bne.n	8000ff8 <LampControl+0x134>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);				// TailLamp ON ( No TailLamp ) -> LicenseLamp ON
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbc:	4861      	ldr	r0, [pc, #388]	; (8001144 <LampControl+0x280>)
 8000fbe:	f003 fcb5 	bl	800492c <HAL_GPIO_WritePin>
			lamp_status->tail_lamp = 1;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	e016      	b.n	8000ff8 <LampControl+0x134>
		}

	} else if ( input_status->taillamp == 0 ) {
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d112      	bne.n	8000ff8 <LampControl+0x134>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);				// Head-High OFF
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd8:	485a      	ldr	r0, [pc, #360]	; (8001144 <LampControl+0x280>)
 8000fda:	f003 fca7 	bl	800492c <HAL_GPIO_WritePin>
		if( auto_light_status == 0 ) {
 8000fde:	4b5c      	ldr	r3, [pc, #368]	; (8001150 <LampControl+0x28c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d108      	bne.n	8000ff8 <LampControl+0x134>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);			// TailLamp, Head-Low OFF ( No TailLamp ) -> LicenseLamp OFF
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fec:	4855      	ldr	r0, [pc, #340]	; (8001144 <LampControl+0x280>)
 8000fee:	f003 fc9d 	bl	800492c <HAL_GPIO_WritePin>
			lamp_status->tail_lamp = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
	}

	/*
	 * Head-High Lamp Control
	 */
	if( lamp_status->tail_lamp == 1 ) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d146      	bne.n	800108e <LampControl+0x1ca>
		if( (input_status->headlamp_H == 1) || (input_status->headlamp_H_passing==1) ) {
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d003      	beq.n	8001010 <LampControl+0x14c>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	789b      	ldrb	r3, [r3, #2]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d109      	bne.n	8001024 <LampControl+0x160>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001016:	484b      	ldr	r0, [pc, #300]	; (8001144 <LampControl+0x280>)
 8001018:	f003 fc88 	bl	800492c <HAL_GPIO_WritePin>
			lamp_status->head_lamp_high = 1;					// HeadLamp High ON
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	715a      	strb	r2, [r3, #5]
 8001022:	e010      	b.n	8001046 <LampControl+0x182>
		} else if( (input_status->headlamp_H==0) && (input_status->headlamp_H_passing==0) ) {
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	785b      	ldrb	r3, [r3, #1]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10c      	bne.n	8001046 <LampControl+0x182>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	789b      	ldrb	r3, [r3, #2]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d108      	bne.n	8001046 <LampControl+0x182>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103a:	4842      	ldr	r0, [pc, #264]	; (8001144 <LampControl+0x280>)
 800103c:	f003 fc76 	bl	800492c <HAL_GPIO_WritePin>
			lamp_status->head_lamp_high = 0;					// HeadLamp High OFF
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	715a      	strb	r2, [r3, #5]
		}

		if( input_status->headlamp_H_passing == 0 ) {
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	789b      	ldrb	r3, [r3, #2]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d113      	bne.n	8001076 <LampControl+0x1b2>
			if( auto_light_status == 0 ) {
 800104e:	4b40      	ldr	r3, [pc, #256]	; (8001150 <LampControl+0x28c>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d13d      	bne.n	80010d2 <LampControl+0x20e>
				if( input_status->headlamp_L == 1 ) {
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	78db      	ldrb	r3, [r3, #3]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d103      	bne.n	8001066 <LampControl+0x1a2>
					lamp_status->head_lamp_low = 1;			// HeadLamp Low ON
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	711a      	strb	r2, [r3, #4]
 8001064:	e035      	b.n	80010d2 <LampControl+0x20e>
				} else if ( input_status->headlamp_L == 0 ) {
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	78db      	ldrb	r3, [r3, #3]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d131      	bne.n	80010d2 <LampControl+0x20e>
					lamp_status->head_lamp_low = 0;			// HeadLamp Low OFF
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	711a      	strb	r2, [r3, #4]
 8001074:	e02d      	b.n	80010d2 <LampControl+0x20e>
				}
			}
		} else if( input_status->headlamp_H_passing == 1 ) {
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d129      	bne.n	80010d2 <LampControl+0x20e>
			if( auto_light_status == 0 ) {
 800107e:	4b34      	ldr	r3, [pc, #208]	; (8001150 <LampControl+0x28c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d125      	bne.n	80010d2 <LampControl+0x20e>
				lamp_status->head_lamp_low = 0;				// HeadLamp Low ON
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	711a      	strb	r2, [r3, #4]
 800108c:	e021      	b.n	80010d2 <LampControl+0x20e>
			}
		}

	} else if( lamp_status->tail_lamp == 0 ) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d11d      	bne.n	80010d2 <LampControl+0x20e>
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
		lamp_status->head_lamp_low = 0;		// HeadLamp High/Low OFF
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	711a      	strb	r2, [r3, #4]
		if( input_status->headlamp_H_passing == 1 ) {
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	789b      	ldrb	r3, [r3, #2]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d109      	bne.n	80010b8 <LampControl+0x1f4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010aa:	4826      	ldr	r0, [pc, #152]	; (8001144 <LampControl+0x280>)
 80010ac:	f003 fc3e 	bl	800492c <HAL_GPIO_WritePin>
			lamp_status->head_lamp_high = 1;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	715a      	strb	r2, [r3, #5]
 80010b6:	e00c      	b.n	80010d2 <LampControl+0x20e>
		} else if( input_status->headlamp_H_passing == 0 ) {
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	789b      	ldrb	r3, [r3, #2]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d108      	bne.n	80010d2 <LampControl+0x20e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c6:	481f      	ldr	r0, [pc, #124]	; (8001144 <LampControl+0x280>)
 80010c8:	f003 fc30 	bl	800492c <HAL_GPIO_WritePin>
			lamp_status->head_lamp_high = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	715a      	strb	r2, [r3, #5]
	}

	/*
	 *	Hazard Lamp Control Function
	 */
	if( hazard_sw_on == 1 ) {
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <LampControl+0x294>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d106      	bne.n	80010e8 <LampControl+0x224>
		if( dec_hazard_on == 1 ) {
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <LampControl+0x298>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d102      	bne.n	80010e8 <LampControl+0x224>
			dec_hazard_on = 0;
 80010e2:	4b1e      	ldr	r3, [pc, #120]	; (800115c <LampControl+0x298>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
		}
	}
	if( (hazard_sw_on==1) || (dec_hazard_on==1) ) {
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <LampControl+0x294>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d003      	beq.n	80010f8 <LampControl+0x234>
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <LampControl+0x298>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d150      	bne.n	800119a <LampControl+0x2d6>
		turnlamp_left_onoff_cnt = turnlamp_right_onoff_cnt = 0;
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <LampControl+0x29c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <LampControl+0x29c>)
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <LampControl+0x2a0>)
 8001104:	701a      	strb	r2, [r3, #0]
		if( ++hazard_onoff_cnt < 24 ) {
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <LampControl+0x2a4>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <LampControl+0x2a4>)
 8001110:	801a      	strh	r2, [r3, #0]
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <LampControl+0x2a4>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	2b17      	cmp	r3, #23
 8001118:	d828      	bhi.n	800116c <LampControl+0x2a8>
			lamp_status->hazard_lamp = lamp_status->turn_lamp_left = lamp_status->turn_lamp_right = 1;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	70da      	strb	r2, [r3, #3]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	78da      	ldrb	r2, [r3, #3]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	709a      	strb	r2, [r3, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	789a      	ldrb	r2, [r3, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	705a      	strb	r2, [r3, #1]
		if( ++hazard_onoff_cnt < 24 ) {
 8001130:	e04c      	b.n	80011cc <LampControl+0x308>
 8001132:	bf00      	nop
 8001134:	200001b2 	.word	0x200001b2
 8001138:	200001ef 	.word	0x200001ef
 800113c:	200001ec 	.word	0x200001ec
 8001140:	200003fe 	.word	0x200003fe
 8001144:	48000c00 	.word	0x48000c00
 8001148:	20000091 	.word	0x20000091
 800114c:	20000292 	.word	0x20000292
 8001150:	200000fd 	.word	0x200000fd
 8001154:	200001e4 	.word	0x200001e4
 8001158:	200000ff 	.word	0x200000ff
 800115c:	200001dd 	.word	0x200001dd
 8001160:	200001b3 	.word	0x200001b3
 8001164:	200003ad 	.word	0x200003ad
 8001168:	200001b0 	.word	0x200001b0
		} else if ( hazard_onoff_cnt >= 24 ) {
 800116c:	4b9b      	ldr	r3, [pc, #620]	; (80013dc <LampControl+0x518>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	2b17      	cmp	r3, #23
 8001172:	d92b      	bls.n	80011cc <LampControl+0x308>
			lamp_status->hazard_lamp = lamp_status->turn_lamp_left = lamp_status->turn_lamp_right = 0;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	70da      	strb	r2, [r3, #3]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	78da      	ldrb	r2, [r3, #3]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	709a      	strb	r2, [r3, #2]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	789a      	ldrb	r2, [r3, #2]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	705a      	strb	r2, [r3, #1]
			if( hazard_onoff_cnt == 47 ) {
 800118a:	4b94      	ldr	r3, [pc, #592]	; (80013dc <LampControl+0x518>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	2b2f      	cmp	r3, #47	; 0x2f
 8001190:	d11c      	bne.n	80011cc <LampControl+0x308>
				hazard_onoff_cnt = 0;
 8001192:	4b92      	ldr	r3, [pc, #584]	; (80013dc <LampControl+0x518>)
 8001194:	2200      	movs	r2, #0
 8001196:	801a      	strh	r2, [r3, #0]
		if( ++hazard_onoff_cnt < 24 ) {
 8001198:	e018      	b.n	80011cc <LampControl+0x308>
			}
		}
	} else if( hazard_sw_on == 0 ) {
 800119a:	4b91      	ldr	r3, [pc, #580]	; (80013e0 <LampControl+0x51c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d115      	bne.n	80011ce <LampControl+0x30a>
		lamp_status->hazard_lamp = 0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	705a      	strb	r2, [r3, #1]
		hazard_onoff_cnt = 0;
 80011a8:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <LampControl+0x518>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	801a      	strh	r2, [r3, #0]
		if( input_status->turnlamp_LH == 0) {
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	795b      	ldrb	r3, [r3, #5]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <LampControl+0x2f8>
			lamp_status->turn_lamp_left = 0;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	709a      	strb	r2, [r3, #2]
		}
		if( input_status->turnlamp_RH == 0 ) {
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <LampControl+0x30a>
			lamp_status->turn_lamp_right = 0;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	70da      	strb	r2, [r3, #3]
 80011ca:	e000      	b.n	80011ce <LampControl+0x30a>
		if( ++hazard_onoff_cnt < 24 ) {
 80011cc:	bf00      	nop
		}
	}

	if( ign1_status == 1 ) {
 80011ce:	4b85      	ldr	r3, [pc, #532]	; (80013e4 <LampControl+0x520>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	f040 8193 	bne.w	80014fe <LampControl+0x63a>
		/*
		 * Front-Speaker Control Function
		 */

#if 1 //220707 forward AVAS off -> 220708 modify
		if( vehicle_vel <= 0 ) {								// 0 km/h -> Speaker OFF
 80011d8:	4b83      	ldr	r3, [pc, #524]	; (80013e8 <LampControl+0x524>)
 80011da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dc16      	bgt.n	8001210 <LampControl+0x34c>
			speaker_on_cnt = 0;
 80011e2:	4b82      	ldr	r3, [pc, #520]	; (80013ec <LampControl+0x528>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
			if( ++speaker_off_cnt > 10 ) {
 80011e8:	4b81      	ldr	r3, [pc, #516]	; (80013f0 <LampControl+0x52c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b7f      	ldr	r3, [pc, #508]	; (80013f0 <LampControl+0x52c>)
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	4b7e      	ldr	r3, [pc, #504]	; (80013f0 <LampControl+0x52c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b0a      	cmp	r3, #10
 80011fa:	d950      	bls.n	800129e <LampControl+0x3da>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001202:	487c      	ldr	r0, [pc, #496]	; (80013f4 <LampControl+0x530>)
 8001204:	f003 fb92 	bl	800492c <HAL_GPIO_WritePin>
				speaker_off_cnt = 10;
 8001208:	4b79      	ldr	r3, [pc, #484]	; (80013f0 <LampControl+0x52c>)
 800120a:	220a      	movs	r2, #10
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e046      	b.n	800129e <LampControl+0x3da>
			}
		} else if((vehicle_vel > 0) && (vehicle_vel<=200) && (gear_position != 1)) {	// ~20 km/h && N or D -> Speaker ON
 8001210:	4b75      	ldr	r3, [pc, #468]	; (80013e8 <LampControl+0x524>)
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	2b00      	cmp	r3, #0
 8001218:	dd1f      	ble.n	800125a <LampControl+0x396>
 800121a:	4b73      	ldr	r3, [pc, #460]	; (80013e8 <LampControl+0x524>)
 800121c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001220:	2bc8      	cmp	r3, #200	; 0xc8
 8001222:	dc1a      	bgt.n	800125a <LampControl+0x396>
 8001224:	4b74      	ldr	r3, [pc, #464]	; (80013f8 <LampControl+0x534>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d016      	beq.n	800125a <LampControl+0x396>
			speaker_off_cnt = 0;
 800122c:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <LampControl+0x52c>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
			if( ++speaker_on_cnt > 10 ) {
 8001232:	4b6e      	ldr	r3, [pc, #440]	; (80013ec <LampControl+0x528>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4b6c      	ldr	r3, [pc, #432]	; (80013ec <LampControl+0x528>)
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	4b6b      	ldr	r3, [pc, #428]	; (80013ec <LampControl+0x528>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b0a      	cmp	r3, #10
 8001244:	d92b      	bls.n	800129e <LampControl+0x3da>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800124c:	4869      	ldr	r0, [pc, #420]	; (80013f4 <LampControl+0x530>)
 800124e:	f003 fb6d 	bl	800492c <HAL_GPIO_WritePin>
				speaker_on_cnt = 10;
 8001252:	4b66      	ldr	r3, [pc, #408]	; (80013ec <LampControl+0x528>)
 8001254:	220a      	movs	r2, #10
 8001256:	701a      	strb	r2, [r3, #0]
			if( ++speaker_on_cnt > 10 ) {
 8001258:	e021      	b.n	800129e <LampControl+0x3da>
			}
		} else if( vehicle_vel > 200 ) {						// 20~ km/h -> Speaker OFF
 800125a:	4b63      	ldr	r3, [pc, #396]	; (80013e8 <LampControl+0x524>)
 800125c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001260:	2bc8      	cmp	r3, #200	; 0xc8
 8001262:	dd16      	ble.n	8001292 <LampControl+0x3ce>
			speaker_on_cnt = 0;
 8001264:	4b61      	ldr	r3, [pc, #388]	; (80013ec <LampControl+0x528>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
			if( ++speaker_off_cnt > 10 ) {
 800126a:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <LampControl+0x52c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b5f      	ldr	r3, [pc, #380]	; (80013f0 <LampControl+0x52c>)
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	4b5e      	ldr	r3, [pc, #376]	; (80013f0 <LampControl+0x52c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b0a      	cmp	r3, #10
 800127c:	d90f      	bls.n	800129e <LampControl+0x3da>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001284:	485b      	ldr	r0, [pc, #364]	; (80013f4 <LampControl+0x530>)
 8001286:	f003 fb51 	bl	800492c <HAL_GPIO_WritePin>
				speaker_off_cnt = 10;
 800128a:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <LampControl+0x52c>)
 800128c:	220a      	movs	r2, #10
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e005      	b.n	800129e <LampControl+0x3da>
			}
		} else {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001298:	4856      	ldr	r0, [pc, #344]	; (80013f4 <LampControl+0x530>)
 800129a:	f003 fb47 	bl	800492c <HAL_GPIO_WritePin>


		/*
		 *	Turn Lamp Control Function
		 */
		if( hazard_sw_on == 0 ) {
 800129e:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <LampControl+0x51c>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 80bc 	bne.w	8001420 <LampControl+0x55c>
			if( input_status->turnlamp_LH == 1 ) {
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	795b      	ldrb	r3, [r3, #5]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d144      	bne.n	800133a <LampControl+0x476>
				if( turn_lamp_left_fail == 0 ) {
 80012b0:	4b52      	ldr	r3, [pc, #328]	; (80013fc <LampControl+0x538>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d11e      	bne.n	80012f6 <LampControl+0x432>
					// normal turn lamp function
					if( ++turnlamp_left_onoff_cnt < 24 ) {
 80012b8:	4b51      	ldr	r3, [pc, #324]	; (8001400 <LampControl+0x53c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <LampControl+0x53c>)
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	4b4e      	ldr	r3, [pc, #312]	; (8001400 <LampControl+0x53c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b17      	cmp	r3, #23
 80012ca:	d803      	bhi.n	80012d4 <LampControl+0x410>
						lamp_status->turn_lamp_left = 1;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	709a      	strb	r2, [r3, #2]
 80012d2:	e0a5      	b.n	8001420 <LampControl+0x55c>
					} else if ( turnlamp_left_onoff_cnt >= 24 ) {
 80012d4:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <LampControl+0x53c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b17      	cmp	r3, #23
 80012da:	f240 80a1 	bls.w	8001420 <LampControl+0x55c>
						lamp_status->turn_lamp_left = 0;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	709a      	strb	r2, [r3, #2]
						if( turnlamp_left_onoff_cnt > 47 ) {
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <LampControl+0x53c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b2f      	cmp	r3, #47	; 0x2f
 80012ea:	f240 8099 	bls.w	8001420 <LampControl+0x55c>
							turnlamp_left_onoff_cnt = 0;
 80012ee:	4b44      	ldr	r3, [pc, #272]	; (8001400 <LampControl+0x53c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	e094      	b.n	8001420 <LampControl+0x55c>
						}
					}
				} else if( turn_lamp_left_fail == 1 ) {
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <LampControl+0x538>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	f040 8090 	bne.w	8001420 <LampControl+0x55c>
					// turn lamp fail function
					if( ++turnlamp_left_onoff_cnt < 6 ) {
 8001300:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <LampControl+0x53c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <LampControl+0x53c>)
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <LampControl+0x53c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b05      	cmp	r3, #5
 8001312:	d803      	bhi.n	800131c <LampControl+0x458>
						lamp_status->turn_lamp_left = 1;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	709a      	strb	r2, [r3, #2]
 800131a:	e081      	b.n	8001420 <LampControl+0x55c>
					} else if ( turnlamp_left_onoff_cnt >= 6 ) {
 800131c:	4b38      	ldr	r3, [pc, #224]	; (8001400 <LampControl+0x53c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d97d      	bls.n	8001420 <LampControl+0x55c>
						lamp_status->turn_lamp_left = 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	709a      	strb	r2, [r3, #2]
						if( turnlamp_left_onoff_cnt > 12 ) {
 800132a:	4b35      	ldr	r3, [pc, #212]	; (8001400 <LampControl+0x53c>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	d976      	bls.n	8001420 <LampControl+0x55c>
							turnlamp_left_onoff_cnt = 0;
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <LampControl+0x53c>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e072      	b.n	8001420 <LampControl+0x55c>
						}
					}
				}

			} else if( input_status->turnlamp_LH == 0 ) {
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	795b      	ldrb	r3, [r3, #5]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d16e      	bne.n	8001420 <LampControl+0x55c>
				lamp_status->turn_lamp_left = 0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	709a      	strb	r2, [r3, #2]
				turnlamp_left_onoff_cnt = 0;
 8001348:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <LampControl+0x53c>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]

				if( input_status->turnlamp_RH == 1 ) {
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	791b      	ldrb	r3, [r3, #4]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d15a      	bne.n	800140c <LampControl+0x548>
					if( turn_lamp_right_fail == 0 ) {
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <LampControl+0x540>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d11c      	bne.n	8001398 <LampControl+0x4d4>
						// normal turn lamp function
						if( ++turnlamp_right_onoff_cnt < 24 ) {
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <LampControl+0x544>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <LampControl+0x544>)
 8001368:	701a      	strb	r2, [r3, #0]
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <LampControl+0x544>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b17      	cmp	r3, #23
 8001370:	d803      	bhi.n	800137a <LampControl+0x4b6>
							lamp_status->turn_lamp_right = 1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	70da      	strb	r2, [r3, #3]
 8001378:	e052      	b.n	8001420 <LampControl+0x55c>
						} else if ( turnlamp_right_onoff_cnt >= 24 ) {
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <LampControl+0x544>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b17      	cmp	r3, #23
 8001380:	d94e      	bls.n	8001420 <LampControl+0x55c>
							lamp_status->turn_lamp_right = 0;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	70da      	strb	r2, [r3, #3]
							if( turnlamp_right_onoff_cnt > 47 ) {
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <LampControl+0x544>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b2f      	cmp	r3, #47	; 0x2f
 800138e:	d947      	bls.n	8001420 <LampControl+0x55c>
								turnlamp_right_onoff_cnt = 0;
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <LampControl+0x544>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	e043      	b.n	8001420 <LampControl+0x55c>
							}
						}
					} else if( turn_lamp_right_fail == 1 ) {
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <LampControl+0x540>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d13f      	bne.n	8001420 <LampControl+0x55c>
						// turn lamp fail function
						if( ++turnlamp_right_onoff_cnt < 6 ) {
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <LampControl+0x544>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <LampControl+0x544>)
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <LampControl+0x544>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d803      	bhi.n	80013bc <LampControl+0x4f8>
							lamp_status->turn_lamp_right = 1;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	70da      	strb	r2, [r3, #3]
 80013ba:	e031      	b.n	8001420 <LampControl+0x55c>
						} else if ( turnlamp_right_onoff_cnt >= 6 ) {
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <LampControl+0x544>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b05      	cmp	r3, #5
 80013c2:	d92d      	bls.n	8001420 <LampControl+0x55c>
							lamp_status->turn_lamp_right = 0;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	70da      	strb	r2, [r3, #3]
							if( turnlamp_right_onoff_cnt > 12 ) {
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <LampControl+0x544>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d926      	bls.n	8001420 <LampControl+0x55c>
								turnlamp_right_onoff_cnt = 0;
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <LampControl+0x544>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	e022      	b.n	8001420 <LampControl+0x55c>
 80013da:	bf00      	nop
 80013dc:	200001b0 	.word	0x200001b0
 80013e0:	200000ff 	.word	0x200000ff
 80013e4:	200003fe 	.word	0x200003fe
 80013e8:	20000472 	.word	0x20000472
 80013ec:	20000049 	.word	0x20000049
 80013f0:	2000004a 	.word	0x2000004a
 80013f4:	48000c00 	.word	0x48000c00
 80013f8:	200000e9 	.word	0x200000e9
 80013fc:	200003a0 	.word	0x200003a0
 8001400:	200003ad 	.word	0x200003ad
 8001404:	200003d1 	.word	0x200003d1
 8001408:	200001b3 	.word	0x200001b3
							}
						}
					}
				} else if( input_status->turnlamp_RH == 0 ) {
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	791b      	ldrb	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <LampControl+0x55c>
					lamp_status->turn_lamp_right = 0;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	70da      	strb	r2, [r3, #3]
					turnlamp_right_onoff_cnt = 0;
 800141a:	4b40      	ldr	r3, [pc, #256]	; (800151c <LampControl+0x658>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
		}

		/*
		 *	Auto-light Lamp Control Function
		 */
		if( auto_light_status == 1 ) {
 8001420:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <LampControl+0x65c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d158      	bne.n	80014da <LampControl+0x616>
			if( (light_data>350) && (light_data<600) ) {  // 730 ~ 1400
 8001428:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <LampControl+0x660>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001430:	d929      	bls.n	8001486 <LampControl+0x5c2>
 8001432:	4b3c      	ldr	r3, [pc, #240]	; (8001524 <LampControl+0x660>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800143a:	d224      	bcs.n	8001486 <LampControl+0x5c2>
				auto_tail_off_cnt = 0;
 800143c:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <LampControl+0x664>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
				if( ++auto_tail_on_cnt > 25 ) {
 8001442:	4b3a      	ldr	r3, [pc, #232]	; (800152c <LampControl+0x668>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <LampControl+0x668>)
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <LampControl+0x668>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b19      	cmp	r3, #25
 8001454:	d941      	bls.n	80014da <LampControl+0x616>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);					// TailLamp ON ( No TailLamp ) -> LicenseLamp ON
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145c:	4834      	ldr	r0, [pc, #208]	; (8001530 <LampControl+0x66c>)
 800145e:	f003 fa65 	bl	800492c <HAL_GPIO_WritePin>
					lamp_status->tail_lamp = lamp_status->head_lamp_low = 1;	// HeadLamp Low ON
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	711a      	strb	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	791a      	ldrb	r2, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	701a      	strb	r2, [r3, #0]
					if( input_status->headlamp_H_passing == 1 ) {
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	789b      	ldrb	r3, [r3, #2]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d102      	bne.n	800147e <LampControl+0x5ba>
						lamp_status->head_lamp_low = 0;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	711a      	strb	r2, [r3, #4]
					}
					auto_tail_on_cnt = 25;
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <LampControl+0x668>)
 8001480:	2219      	movs	r2, #25
 8001482:	701a      	strb	r2, [r3, #0]
				if( ++auto_tail_on_cnt > 25 ) {
 8001484:	e029      	b.n	80014da <LampControl+0x616>
				}
			} else if( light_data >= 600 ) { //1400
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <LampControl+0x660>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800148e:	d31d      	bcc.n	80014cc <LampControl+0x608>
				auto_tail_on_cnt = 0;
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <LampControl+0x668>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
				if( ++auto_tail_off_cnt > 25 ) {
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <LampControl+0x664>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <LampControl+0x664>)
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <LampControl+0x664>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b19      	cmp	r3, #25
 80014a8:	d917      	bls.n	80014da <LampControl+0x616>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);				// TailLamp OFF ( No TailLamp ) -> LicenseLamp OFF
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b0:	481f      	ldr	r0, [pc, #124]	; (8001530 <LampControl+0x66c>)
 80014b2:	f003 fa3b 	bl	800492c <HAL_GPIO_WritePin>
					lamp_status->tail_lamp = lamp_status->head_lamp_low = 0;	// HeadLamp Low OFF
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	711a      	strb	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	791a      	ldrb	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	701a      	strb	r2, [r3, #0]
					auto_tail_off_cnt = 25;
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <LampControl+0x664>)
 80014c6:	2219      	movs	r2, #25
 80014c8:	701a      	strb	r2, [r3, #0]
 80014ca:	e006      	b.n	80014da <LampControl+0x616>
				}
			}
			else {
				auto_tail_on_cnt = auto_tail_off_cnt = 0;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <LampControl+0x664>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <LampControl+0x664>)
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <LampControl+0x668>)
 80014d8:	701a      	strb	r2, [r3, #0]
			}
		}

		if( gear_position == 1 ) {
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <LampControl+0x670>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d106      	bne.n	80014f0 <LampControl+0x62c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);		// Back Lamp ON
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e8:	4811      	ldr	r0, [pc, #68]	; (8001530 <LampControl+0x66c>)
 80014ea:	f003 fa1f 	bl	800492c <HAL_GPIO_WritePin>
		}

	} else if ( ign1_status == 0 ) {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_12, RESET);		// Back-Lamp, Front-Speaker OFF
	}
}
 80014ee:	e010      	b.n	8001512 <LampControl+0x64e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);	// Back Lamp OFF
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f6:	480e      	ldr	r0, [pc, #56]	; (8001530 <LampControl+0x66c>)
 80014f8:	f003 fa18 	bl	800492c <HAL_GPIO_WritePin>
}
 80014fc:	e009      	b.n	8001512 <LampControl+0x64e>
	} else if ( ign1_status == 0 ) {
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <LampControl+0x674>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d105      	bne.n	8001512 <LampControl+0x64e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_12, RESET);		// Back-Lamp, Front-Speaker OFF
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <LampControl+0x66c>)
 800150e:	f003 fa0d 	bl	800492c <HAL_GPIO_WritePin>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200001b3 	.word	0x200001b3
 8001520:	200000fd 	.word	0x200000fd
 8001524:	2000034a 	.word	0x2000034a
 8001528:	200000e8 	.word	0x200000e8
 800152c:	20000130 	.word	0x20000130
 8001530:	48000c00 	.word	0x48000c00
 8001534:	200000e9 	.word	0x200000e9
 8001538:	200003fe 	.word	0x200003fe

0800153c <RF_DoorControl>:
	}
}
#endif

void RF_DoorControl()
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	if( ign1_status == 0 ) {
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <RF_DoorControl+0x68>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11f      	bne.n	8001588 <RF_DoorControl+0x4c>
		if( pBrake_status == 1 ) {
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <RF_DoorControl+0x6c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d11b      	bne.n	8001588 <RF_DoorControl+0x4c>
			if( RF_door_open_sig_on == 1 ) {
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <RF_DoorControl+0x70>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d109      	bne.n	800156c <RF_DoorControl+0x30>
				if( RF_door_open_sig_on_prev == 0 ) {
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <RF_DoorControl+0x74>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d105      	bne.n	800156c <RF_DoorControl+0x30>
					door_open_on = 1;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <RF_DoorControl+0x78>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
					convertor_on_delay = 0;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <RF_DoorControl+0x7c>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
				}
			}

			if( RF_door_close_sig_on == 1 ) {
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <RF_DoorControl+0x80>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d109      	bne.n	8001588 <RF_DoorControl+0x4c>
				if( RF_door_close_sig_on_prev ) {
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <RF_DoorControl+0x84>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <RF_DoorControl+0x4c>
					door_close_on = 1;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <RF_DoorControl+0x88>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
					convertor_on_delay = 0;
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <RF_DoorControl+0x7c>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	RF_door_open_sig_on_prev = RF_door_open_sig_on;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <RF_DoorControl+0x70>)
 800158a:	781a      	ldrb	r2, [r3, #0]
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <RF_DoorControl+0x74>)
 800158e:	701a      	strb	r2, [r3, #0]
	RF_door_close_sig_on_prev = RF_door_close_sig_on;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <RF_DoorControl+0x80>)
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <RF_DoorControl+0x84>)
 8001596:	701a      	strb	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200003fe 	.word	0x200003fe
 80015a8:	200003fc 	.word	0x200003fc
 80015ac:	20000134 	.word	0x20000134
 80015b0:	20000100 	.word	0x20000100
 80015b4:	200001b2 	.word	0x200001b2
 80015b8:	2000019c 	.word	0x2000019c
 80015bc:	20000290 	.word	0x20000290
 80015c0:	20000105 	.word	0x20000105
 80015c4:	200001ef 	.word	0x200001ef

080015c8 <DoorControl>:

void DoorControl()
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	 check_us_door_open_cnt = 0;
  }

#endif

  if( ((vehicle_vel<=50) && (vehicle_vel>=-50)) && ((gear_position == 2 || pBrake_status == 1))) {
 80015cc:	4ba1      	ldr	r3, [pc, #644]	; (8001854 <DoorControl+0x28c>)
 80015ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d2:	2b32      	cmp	r3, #50	; 0x32
 80015d4:	f300 8130 	bgt.w	8001838 <DoorControl+0x270>
 80015d8:	4b9e      	ldr	r3, [pc, #632]	; (8001854 <DoorControl+0x28c>)
 80015da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015de:	f113 0f32 	cmn.w	r3, #50	; 0x32
 80015e2:	f2c0 8129 	blt.w	8001838 <DoorControl+0x270>
 80015e6:	4b9c      	ldr	r3, [pc, #624]	; (8001858 <DoorControl+0x290>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d004      	beq.n	80015f8 <DoorControl+0x30>
 80015ee:	4b9b      	ldr	r3, [pc, #620]	; (800185c <DoorControl+0x294>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	f040 8120 	bne.w	8001838 <DoorControl+0x270>
  		if( ((DRV_door_open==1)&&(DRV_door_open_prev==0)) || ((PS_door_open==1)&&(PS_door_open_prev==0)) || ((akit_door_open_prev!=1)&&(akit_command.door_open==1)) ) {
 80015f8:	4b99      	ldr	r3, [pc, #612]	; (8001860 <DoorControl+0x298>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d103      	bne.n	8001608 <DoorControl+0x40>
 8001600:	4b98      	ldr	r3, [pc, #608]	; (8001864 <DoorControl+0x29c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00f      	beq.n	8001628 <DoorControl+0x60>
 8001608:	4b97      	ldr	r3, [pc, #604]	; (8001868 <DoorControl+0x2a0>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d103      	bne.n	8001618 <DoorControl+0x50>
 8001610:	4b96      	ldr	r3, [pc, #600]	; (800186c <DoorControl+0x2a4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d007      	beq.n	8001628 <DoorControl+0x60>
 8001618:	4b95      	ldr	r3, [pc, #596]	; (8001870 <DoorControl+0x2a8>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d012      	beq.n	8001646 <DoorControl+0x7e>
 8001620:	4b94      	ldr	r3, [pc, #592]	; (8001874 <DoorControl+0x2ac>)
 8001622:	799b      	ldrb	r3, [r3, #6]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10e      	bne.n	8001646 <DoorControl+0x7e>
  			//door_open_on = 1;
  			Door_Status.door_closing = 0;
 8001628:	4b93      	ldr	r3, [pc, #588]	; (8001878 <DoorControl+0x2b0>)
 800162a:	2200      	movs	r2, #0
 800162c:	705a      	strb	r2, [r3, #1]
  			convertor_on_delay = 0;
 800162e:	4b93      	ldr	r3, [pc, #588]	; (800187c <DoorControl+0x2b4>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
  			doorwarning_AVAS_trigger = 1;
 8001634:	4b92      	ldr	r3, [pc, #584]	; (8001880 <DoorControl+0x2b8>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET); // DW_AVAS_on
 800163a:	2201      	movs	r2, #1
 800163c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001640:	4890      	ldr	r0, [pc, #576]	; (8001884 <DoorControl+0x2bc>)
 8001642:	f003 f973 	bl	800492c <HAL_GPIO_WritePin>
  		}


		if( door_open_on == 1 ) {
 8001646:	4b90      	ldr	r3, [pc, #576]	; (8001888 <DoorControl+0x2c0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d17d      	bne.n	800174a <DoorControl+0x182>
			if( convertor_status == 1 ) {  // 시동 켜져 있을때
 800164e:	4b8f      	ldr	r3, [pc, #572]	; (800188c <DoorControl+0x2c4>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d130      	bne.n	80016b8 <DoorControl+0xf0>

				door_close_on_cnt = door_close_on = 0;					// 21_12_30 Update
 8001656:	4b8e      	ldr	r3, [pc, #568]	; (8001890 <DoorControl+0x2c8>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	4b8c      	ldr	r3, [pc, #560]	; (8001890 <DoorControl+0x2c8>)
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	4b8c      	ldr	r3, [pc, #560]	; (8001894 <DoorControl+0x2cc>)
 8001662:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166a:	488b      	ldr	r0, [pc, #556]	; (8001898 <DoorControl+0x2d0>)
 800166c:	f003 f95e 	bl	800492c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001676:	4888      	ldr	r0, [pc, #544]	; (8001898 <DoorControl+0x2d0>)
 8001678:	f003 f958 	bl	800492c <HAL_GPIO_WritePin>
				Door_Status.door_opening = 1;		// 21_12_30 Update
 800167c:	4b7e      	ldr	r3, [pc, #504]	; (8001878 <DoorControl+0x2b0>)
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]

				if( ++door_open_on_cnt > 300 ) {  // 6sec
 8001682:	4b86      	ldr	r3, [pc, #536]	; (800189c <DoorControl+0x2d4>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b84      	ldr	r3, [pc, #528]	; (800189c <DoorControl+0x2d4>)
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	4b83      	ldr	r3, [pc, #524]	; (800189c <DoorControl+0x2d4>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001696:	d958      	bls.n	800174a <DoorControl+0x182>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800169e:	487e      	ldr	r0, [pc, #504]	; (8001898 <DoorControl+0x2d0>)
 80016a0:	f003 f944 	bl	800492c <HAL_GPIO_WritePin>
//					Door_Status.door_opening = 1;	// 21_12_30 Update
					door_open_on = 0;
 80016a4:	4b78      	ldr	r3, [pc, #480]	; (8001888 <DoorControl+0x2c0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
					door_open_on_cnt = 0;
 80016aa:	4b7c      	ldr	r3, [pc, #496]	; (800189c <DoorControl+0x2d4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	801a      	strh	r2, [r3, #0]
					distant_door_open = 0;
 80016b0:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <DoorControl+0x2d8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e048      	b.n	800174a <DoorControl+0x182>
				}
			} else if( convertor_status == 0 ) {  // 시동 꺼져 있을때,
 80016b8:	4b74      	ldr	r3, [pc, #464]	; (800188c <DoorControl+0x2c4>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d144      	bne.n	800174a <DoorControl+0x182>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2104      	movs	r1, #4
 80016c4:	4874      	ldr	r0, [pc, #464]	; (8001898 <DoorControl+0x2d0>)
 80016c6:	f003 f931 	bl	800492c <HAL_GPIO_WritePin>
				if( ++convertor_on_delay > 50 ) {
 80016ca:	4b6c      	ldr	r3, [pc, #432]	; (800187c <DoorControl+0x2b4>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b6a      	ldr	r3, [pc, #424]	; (800187c <DoorControl+0x2b4>)
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	4b69      	ldr	r3, [pc, #420]	; (800187c <DoorControl+0x2b4>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b32      	cmp	r3, #50	; 0x32
 80016dc:	d935      	bls.n	800174a <DoorControl+0x182>
					convertor_on_delay = 50;
 80016de:	4b67      	ldr	r3, [pc, #412]	; (800187c <DoorControl+0x2b4>)
 80016e0:	2232      	movs	r2, #50	; 0x32
 80016e2:	701a      	strb	r2, [r3, #0]

					door_close_on_cnt = door_close_on = 0;					// 21_12_30 Update
 80016e4:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <DoorControl+0x2c8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	4b69      	ldr	r3, [pc, #420]	; (8001890 <DoorControl+0x2c8>)
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	4b69      	ldr	r3, [pc, #420]	; (8001894 <DoorControl+0x2cc>)
 80016f0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f8:	4867      	ldr	r0, [pc, #412]	; (8001898 <DoorControl+0x2d0>)
 80016fa:	f003 f917 	bl	800492c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001704:	4864      	ldr	r0, [pc, #400]	; (8001898 <DoorControl+0x2d0>)
 8001706:	f003 f911 	bl	800492c <HAL_GPIO_WritePin>
					Door_Status.door_opening = 1;		// 21_12_30 Update
 800170a:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <DoorControl+0x2b0>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]

					if( ++door_open_on_cnt > 300 ) {
 8001710:	4b62      	ldr	r3, [pc, #392]	; (800189c <DoorControl+0x2d4>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b60      	ldr	r3, [pc, #384]	; (800189c <DoorControl+0x2d4>)
 800171a:	801a      	strh	r2, [r3, #0]
 800171c:	4b5f      	ldr	r3, [pc, #380]	; (800189c <DoorControl+0x2d4>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001724:	d911      	bls.n	800174a <DoorControl+0x182>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172c:	485a      	ldr	r0, [pc, #360]	; (8001898 <DoorControl+0x2d0>)
 800172e:	f003 f8fd 	bl	800492c <HAL_GPIO_WritePin>
//						Door_Status.door_opening = 1;	// 21_12_30 Update
						door_open_on = 0;
 8001732:	4b55      	ldr	r3, [pc, #340]	; (8001888 <DoorControl+0x2c0>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
						door_open_on_cnt = 0;
 8001738:	4b58      	ldr	r3, [pc, #352]	; (800189c <DoorControl+0x2d4>)
 800173a:	2200      	movs	r2, #0
 800173c:	801a      	strh	r2, [r3, #0]
						distant_door_open = 0;
 800173e:	4b58      	ldr	r3, [pc, #352]	; (80018a0 <DoorControl+0x2d8>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
						convertor_on_delay = 0;
 8001744:	4b4d      	ldr	r3, [pc, #308]	; (800187c <DoorControl+0x2b4>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}

		if( Input_Status.door_open_status == 1 ) {
 800174a:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <DoorControl+0x2dc>)
 800174c:	7b5b      	ldrb	r3, [r3, #13]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d127      	bne.n	80017a2 <DoorControl+0x1da>
			if( ((DRV_door_close==1)&&(DRV_door_close_prev==0)) || ((PS_door_close==1)&&(PS_door_close_prev==0)) || ((akit_door_close_prev!=1)&&(akit_command.door_close==1)) ) {
 8001752:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <DoorControl+0x2e0>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d103      	bne.n	8001762 <DoorControl+0x19a>
 800175a:	4b54      	ldr	r3, [pc, #336]	; (80018ac <DoorControl+0x2e4>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00f      	beq.n	8001782 <DoorControl+0x1ba>
 8001762:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <DoorControl+0x2e8>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d103      	bne.n	8001772 <DoorControl+0x1aa>
 800176a:	4b52      	ldr	r3, [pc, #328]	; (80018b4 <DoorControl+0x2ec>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d007      	beq.n	8001782 <DoorControl+0x1ba>
 8001772:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <DoorControl+0x2f0>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d013      	beq.n	80017a2 <DoorControl+0x1da>
 800177a:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <DoorControl+0x2ac>)
 800177c:	79db      	ldrb	r3, [r3, #7]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d10f      	bne.n	80017a2 <DoorControl+0x1da>
				if( door_open_on == 0 ) {
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <DoorControl+0x2c0>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10b      	bne.n	80017a2 <DoorControl+0x1da>
					door_close_on = 1;
 800178a:	4b41      	ldr	r3, [pc, #260]	; (8001890 <DoorControl+0x2c8>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
					door_open_comp = 0;
 8001790:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <DoorControl+0x2f4>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
					Door_Status.door_opening = 0;
 8001796:	4b38      	ldr	r3, [pc, #224]	; (8001878 <DoorControl+0x2b0>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
					convertor_on_delay = 0;
 800179c:	4b37      	ldr	r3, [pc, #220]	; (800187c <DoorControl+0x2b4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
							us_door_opening_cnt = 0;
					}
				}
		 */

		if( door_close_on == 1 ) {
 80017a2:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <DoorControl+0x2c8>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	f040 808c 	bne.w	80018c4 <DoorControl+0x2fc>
			if( convertor_status == 1 ) {
 80017ac:	4b37      	ldr	r3, [pc, #220]	; (800188c <DoorControl+0x2c4>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d115      	bne.n	80017e0 <DoorControl+0x218>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ba:	4837      	ldr	r0, [pc, #220]	; (8001898 <DoorControl+0x2d0>)
 80017bc:	f003 f8b6 	bl	800492c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c6:	4834      	ldr	r0, [pc, #208]	; (8001898 <DoorControl+0x2d0>)
 80017c8:	f003 f8b0 	bl	800492c <HAL_GPIO_WritePin>
				Door_Status.door_closing = 1;			// 21_12_30 Update
 80017cc:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <DoorControl+0x2b0>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	705a      	strb	r2, [r3, #1]
				if( ++door_close_on_cnt > 350 ) {
 80017d2:	4b30      	ldr	r3, [pc, #192]	; (8001894 <DoorControl+0x2cc>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <DoorControl+0x2cc>)
 80017dc:	701a      	strb	r2, [r3, #0]
		if( door_close_on == 1 ) {
 80017de:	e071      	b.n	80018c4 <DoorControl+0x2fc>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
					door_close_on = 0;					// 21_12_30 Update
//					Door_Status.door_closing = 1;		// 21_12_30 Update
					door_close_on_cnt = 0;
				}
			} else if( convertor_status == 0 ) {
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <DoorControl+0x2c4>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d16d      	bne.n	80018c4 <DoorControl+0x2fc>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2104      	movs	r1, #4
 80017ec:	482a      	ldr	r0, [pc, #168]	; (8001898 <DoorControl+0x2d0>)
 80017ee:	f003 f89d 	bl	800492c <HAL_GPIO_WritePin>
				if( ++convertor_on_delay > 50 ) {
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <DoorControl+0x2b4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <DoorControl+0x2b4>)
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <DoorControl+0x2b4>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b32      	cmp	r3, #50	; 0x32
 8001804:	d95e      	bls.n	80018c4 <DoorControl+0x2fc>
					convertor_on_delay = 50;
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <DoorControl+0x2b4>)
 8001808:	2232      	movs	r2, #50	; 0x32
 800180a:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001812:	4821      	ldr	r0, [pc, #132]	; (8001898 <DoorControl+0x2d0>)
 8001814:	f003 f88a 	bl	800492c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8001818:	2201      	movs	r2, #1
 800181a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181e:	481e      	ldr	r0, [pc, #120]	; (8001898 <DoorControl+0x2d0>)
 8001820:	f003 f884 	bl	800492c <HAL_GPIO_WritePin>
					Door_Status.door_closing = 1;			// 21_12_30 Update
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <DoorControl+0x2b0>)
 8001826:	2201      	movs	r2, #1
 8001828:	705a      	strb	r2, [r3, #1]
					if( ++door_close_on_cnt > 350 ) {
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <DoorControl+0x2cc>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <DoorControl+0x2cc>)
 8001834:	701a      	strb	r2, [r3, #0]
		if( door_close_on == 1 ) {
 8001836:	e045      	b.n	80018c4 <DoorControl+0x2fc>
					}
				}
			}
		}
	}else{ //220523 speed up && R/D -> open fuction All off
		door_open_on = 0;
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <DoorControl+0x2c0>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
		Door_Status.door_closing = 0;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <DoorControl+0x2b0>)
 8001840:	2200      	movs	r2, #0
 8001842:	705a      	strb	r2, [r3, #1]
		convertor_on_delay = 0;
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <DoorControl+0x2b4>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
		check_us_door_open = 0;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <DoorControl+0x2f8>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
 8001850:	e039      	b.n	80018c6 <DoorControl+0x2fe>
 8001852:	bf00      	nop
 8001854:	20000472 	.word	0x20000472
 8001858:	200000e9 	.word	0x200000e9
 800185c:	200003fc 	.word	0x200003fc
 8001860:	20000374 	.word	0x20000374
 8001864:	200003ac 	.word	0x200003ac
 8001868:	2000019d 	.word	0x2000019d
 800186c:	20000101 	.word	0x20000101
 8001870:	2000004b 	.word	0x2000004b
 8001874:	200001e4 	.word	0x200001e4
 8001878:	2000034c 	.word	0x2000034c
 800187c:	2000019c 	.word	0x2000019c
 8001880:	200003cc 	.word	0x200003cc
 8001884:	48000800 	.word	0x48000800
 8001888:	200001b2 	.word	0x200001b2
 800188c:	20000091 	.word	0x20000091
 8001890:	200001ef 	.word	0x200001ef
 8001894:	20000133 	.word	0x20000133
 8001898:	48000c00 	.word	0x48000c00
 800189c:	200000f8 	.word	0x200000f8
 80018a0:	20000090 	.word	0x20000090
 80018a4:	20000280 	.word	0x20000280
 80018a8:	200000f5 	.word	0x200000f5
 80018ac:	200003fd 	.word	0x200003fd
 80018b0:	200000f4 	.word	0x200000f4
 80018b4:	200003cd 	.word	0x200003cd
 80018b8:	2000004c 	.word	0x2000004c
 80018bc:	200001dc 	.word	0x200001dc
 80018c0:	20000135 	.word	0x20000135
		if( door_close_on == 1 ) {
 80018c4:	bf00      	nop
	}

	DRV_door_open_prev = DRV_door_open;
 80018c6:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <DoorControl+0x378>)
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <DoorControl+0x37c>)
 80018cc:	701a      	strb	r2, [r3, #0]
	DRV_door_close_prev = DRV_door_close;
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <DoorControl+0x380>)
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <DoorControl+0x384>)
 80018d4:	701a      	strb	r2, [r3, #0]
	PS_door_open_prev = PS_door_open;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <DoorControl+0x388>)
 80018d8:	781a      	ldrb	r2, [r3, #0]
 80018da:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <DoorControl+0x38c>)
 80018dc:	701a      	strb	r2, [r3, #0]
	PS_door_close_prev = PS_door_close;
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <DoorControl+0x390>)
 80018e0:	781a      	ldrb	r2, [r3, #0]
 80018e2:	4b1e      	ldr	r3, [pc, #120]	; (800195c <DoorControl+0x394>)
 80018e4:	701a      	strb	r2, [r3, #0]
	akit_door_open_prev = akit_command.door_open;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <DoorControl+0x398>)
 80018e8:	799a      	ldrb	r2, [r3, #6]
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <DoorControl+0x39c>)
 80018ec:	701a      	strb	r2, [r3, #0]
	akit_door_close_prev = akit_command.door_close;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <DoorControl+0x398>)
 80018f0:	79da      	ldrb	r2, [r3, #7]
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <DoorControl+0x3a0>)
 80018f4:	701a      	strb	r2, [r3, #0]


	if( Door_Status.door_opening == 1 ) {
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <DoorControl+0x3a4>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d113      	bne.n	8001926 <DoorControl+0x35e>
		if( ++door_open_comp_cnt > 66 ) {
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <DoorControl+0x3a8>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <DoorControl+0x3a8>)
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <DoorControl+0x3a8>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	2b42      	cmp	r3, #66	; 0x42
 8001910:	d913      	bls.n	800193a <DoorControl+0x372>
			door_open_comp = 1;
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <DoorControl+0x3ac>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
			door_open_comp_cnt = 0;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <DoorControl+0x3a8>)
 800191a:	2200      	movs	r2, #0
 800191c:	801a      	strh	r2, [r3, #0]
			Door_Status.door_opening = 0;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <DoorControl+0x3a4>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
		}
	} else if( Door_Status.door_closing == 1 ) {
		door_open_comp = 0;
		door_open_comp_cnt = 0;
	}
}
 8001924:	e009      	b.n	800193a <DoorControl+0x372>
	} else if( Door_Status.door_closing == 1 ) {
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <DoorControl+0x3a4>)
 8001928:	785b      	ldrb	r3, [r3, #1]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d105      	bne.n	800193a <DoorControl+0x372>
		door_open_comp = 0;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <DoorControl+0x3ac>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
		door_open_comp_cnt = 0;
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <DoorControl+0x3a8>)
 8001936:	2200      	movs	r2, #0
 8001938:	801a      	strh	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000374 	.word	0x20000374
 8001944:	200003ac 	.word	0x200003ac
 8001948:	200000f5 	.word	0x200000f5
 800194c:	200003fd 	.word	0x200003fd
 8001950:	2000019d 	.word	0x2000019d
 8001954:	20000101 	.word	0x20000101
 8001958:	200000f4 	.word	0x200000f4
 800195c:	200003cd 	.word	0x200003cd
 8001960:	200001e4 	.word	0x200001e4
 8001964:	2000004b 	.word	0x2000004b
 8001968:	2000004c 	.word	0x2000004c
 800196c:	2000034c 	.word	0x2000034c
 8001970:	200001de 	.word	0x200001de
 8001974:	200001dc 	.word	0x200001dc

08001978 <DistantDoorControl>:

/*
 * ?��?�� 방�? Control
 */
void DistantDoorControl()
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
	if( Input_Status.door_open_status == 1 ) {
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <DistantDoorControl+0x80>)
 800197e:	7b5b      	ldrb	r3, [r3, #13]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d12a      	bne.n	80019da <DistantDoorControl+0x62>
		if( Door_Status.door_closing == 1 ) {
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <DistantDoorControl+0x84>)
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d118      	bne.n	80019be <DistantDoorControl+0x46>
			if( distant_data >= 1200 ) { // 50 ~ 150cm  // 5000
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <DistantDoorControl+0x88>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001994:	d310      	bcc.n	80019b8 <DistantDoorControl+0x40>
				if( ++distant_door_open_cnt > 3 ) {
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <DistantDoorControl+0x8c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	3301      	adds	r3, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <DistantDoorControl+0x8c>)
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <DistantDoorControl+0x8c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d909      	bls.n	80019be <DistantDoorControl+0x46>
					distant_door_open = 1;		// before sensor
 80019aa:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <DistantDoorControl+0x90>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
					distant_door_open_cnt = 0;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <DistantDoorControl+0x8c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	e002      	b.n	80019be <DistantDoorControl+0x46>
				}
			} else {
				distant_door_open_cnt = 0;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <DistantDoorControl+0x8c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
			}
		}
		if( distant_door_open == 1 ) {
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <DistantDoorControl+0x90>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d113      	bne.n	80019ee <DistantDoorControl+0x76>
			door_open_on = 1;
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <DistantDoorControl+0x94>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
			Door_Status.door_closing = 0;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <DistantDoorControl+0x84>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	705a      	strb	r2, [r3, #1]
			distant_door_open = 0;
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <DistantDoorControl+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]

	} else if( Input_Status.door_open_status == 0 ) {
		distant_door_open = 0;
		distant_door_open_cnt = 0;
	}
}
 80019d8:	e009      	b.n	80019ee <DistantDoorControl+0x76>
	} else if( Input_Status.door_open_status == 0 ) {
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <DistantDoorControl+0x80>)
 80019dc:	7b5b      	ldrb	r3, [r3, #13]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d105      	bne.n	80019ee <DistantDoorControl+0x76>
		distant_door_open = 0;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <DistantDoorControl+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
		distant_door_open_cnt = 0;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <DistantDoorControl+0x8c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	20000280 	.word	0x20000280
 80019fc:	2000034c 	.word	0x2000034c
 8001a00:	20000068 	.word	0x20000068
 8001a04:	20000348 	.word	0x20000348
 8001a08:	20000090 	.word	0x20000090
 8001a0c:	200001b2 	.word	0x200001b2

08001a10 <ButtonControl>:
		}

}

void ButtonControl(struct ButtonStatus_s *button_status, struct InputStatus_s *input_status)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	if( input_status->accel_sw == 1 ) {
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	7a1b      	ldrb	r3, [r3, #8]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d103      	bne.n	8001a2a <ButtonControl+0x1a>
		button_status->accel_decel_sw = 1;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e00a      	b.n	8001a40 <ButtonControl+0x30>
	} else if( input_status->decel_sw == 1 ) {
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	7a5b      	ldrb	r3, [r3, #9]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d103      	bne.n	8001a3a <ButtonControl+0x2a>
		button_status->accel_decel_sw = 2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2202      	movs	r2, #2
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e002      	b.n	8001a40 <ButtonControl+0x30>
	} else {
		button_status->accel_decel_sw = 0;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
	}

	if( input_status->drive_mode_sw == 1 ) {
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	7a9b      	ldrb	r3, [r3, #10]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d103      	bne.n	8001a50 <ButtonControl+0x40>
		button_status->drive_mode_sw = 2;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	705a      	strb	r2, [r3, #1]
 8001a4e:	e006      	b.n	8001a5e <ButtonControl+0x4e>
	} else if( input_status->drive_mode_sw == 0 ) {
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	7a9b      	ldrb	r3, [r3, #10]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <ButtonControl+0x4e>
		button_status->drive_mode_sw = 1;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	705a      	strb	r2, [r3, #1]
	}

	if( input_status->logging_sw == 1 ) {
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	7adb      	ldrb	r3, [r3, #11]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d103      	bne.n	8001a6e <ButtonControl+0x5e>
		button_status->logging_sw = 1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	709a      	strb	r2, [r3, #2]
 8001a6c:	e006      	b.n	8001a7c <ButtonControl+0x6c>
	} else if( input_status->logging_sw == 0 ) {
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	7adb      	ldrb	r3, [r3, #11]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <ButtonControl+0x6c>
		button_status->logging_sw = 2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	709a      	strb	r2, [r3, #2]
	}

	if( input_status->marker_sw == 1 ) {
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	7b1b      	ldrb	r3, [r3, #12]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d103      	bne.n	8001a8c <ButtonControl+0x7c>
		button_status->marker_sw = 1;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	70da      	strb	r2, [r3, #3]
	} else if( input_status->marker_sw == 0 ) {
		button_status->marker_sw = 0;
	}
}
 8001a8a:	e006      	b.n	8001a9a <ButtonControl+0x8a>
	} else if( input_status->marker_sw == 0 ) {
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	7b1b      	ldrb	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <ButtonControl+0x8a>
		button_status->marker_sw = 0;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	70da      	strb	r2, [r3, #3]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <LampDataConv>:

void LampDataConv(uint8_t *txdata, uint8_t *flag)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	txdata[0] = (Lamp_Status.tail_lamp) | (Lamp_Status.hazard_lamp<<1) | (Lamp_Status.turn_lamp_left<<2) | (Lamp_Status.turn_lamp_right<<3) |
 8001ab2:	4b44      	ldr	r3, [pc, #272]	; (8001bc4 <LampDataConv+0x11c>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b25a      	sxtb	r2, r3
 8001ab8:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <LampDataConv+0x11c>)
 8001aba:	785b      	ldrb	r3, [r3, #1]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b25a      	sxtb	r2, r3
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <LampDataConv+0x11c>)
 8001ac6:	789b      	ldrb	r3, [r3, #2]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	b25b      	sxtb	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b25a      	sxtb	r2, r3
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <LampDataConv+0x11c>)
 8001ad2:	78db      	ldrb	r3, [r3, #3]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	b25a      	sxtb	r2, r3
			(Lamp_Status.head_lamp_low<<4) | (Lamp_Status.head_lamp_high<<5) | (Input_Status.door_open_status<<6) | (Input_Status.charge_door_status<<7);
 8001adc:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <LampDataConv+0x11c>)
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	011b      	lsls	r3, r3, #4
	txdata[0] = (Lamp_Status.tail_lamp) | (Lamp_Status.hazard_lamp<<1) | (Lamp_Status.turn_lamp_left<<2) | (Lamp_Status.turn_lamp_right<<3) |
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	b25a      	sxtb	r2, r3
			(Lamp_Status.head_lamp_low<<4) | (Lamp_Status.head_lamp_high<<5) | (Input_Status.door_open_status<<6) | (Input_Status.charge_door_status<<7);
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <LampDataConv+0x11c>)
 8001aea:	795b      	ldrb	r3, [r3, #5]
 8001aec:	015b      	lsls	r3, r3, #5
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b25a      	sxtb	r2, r3
 8001af4:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <LampDataConv+0x120>)
 8001af6:	7b5b      	ldrb	r3, [r3, #13]
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b25a      	sxtb	r2, r3
 8001b00:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <LampDataConv+0x120>)
 8001b02:	7b9b      	ldrb	r3, [r3, #14]
 8001b04:	01db      	lsls	r3, r3, #7
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	b2da      	uxtb	r2, r3
	txdata[0] = (Lamp_Status.tail_lamp) | (Lamp_Status.hazard_lamp<<1) | (Lamp_Status.turn_lamp_left<<2) | (Lamp_Status.turn_lamp_right<<3) |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	701a      	strb	r2, [r3, #0]
	txdata[1] = RF_door_open_sig_on | (RF_door_close_sig_on<<1);
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <LampDataConv+0x124>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	b25a      	sxtb	r2, r3
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <LampDataConv+0x128>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	4313      	orrs	r3, r2
 8001b22:	b25a      	sxtb	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
	txdata[2] = turn_left_curr;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <LampDataConv+0x12c>)
 8001b2e:	881a      	ldrh	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3302      	adds	r3, #2
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]
	txdata[3] = turn_left_curr>>8;
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <LampDataConv+0x12c>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3303      	adds	r3, #3
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
	txdata[4] = turn_right_curr;
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <LampDataConv+0x130>)
 8001b4a:	881a      	ldrh	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]
	txdata[5] = turn_right_curr>>8;
 8001b54:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <LampDataConv+0x130>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3305      	adds	r3, #5
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	701a      	strb	r2, [r3, #0]
	txdata[6] = turn_lamp_left_fail | (turn_lamp_right_fail<<1);
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <LampDataConv+0x134>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	b25a      	sxtb	r2, r3
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <LampDataConv+0x138>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b25b      	sxtb	r3, r3
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b25a      	sxtb	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3306      	adds	r3, #6
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]
	txdata[7] = Button_Status.accel_decel_sw | (Button_Status.drive_mode_sw<<2) | (Button_Status.logging_sw<<4) | (Button_Status.marker_sw<<6);
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <LampDataConv+0x13c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b25a      	sxtb	r2, r3
 8001b84:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <LampDataConv+0x13c>)
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b25a      	sxtb	r2, r3
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <LampDataConv+0x13c>)
 8001b92:	789b      	ldrb	r3, [r3, #2]
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b25a      	sxtb	r2, r3
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <LampDataConv+0x13c>)
 8001b9e:	78db      	ldrb	r3, [r3, #3]
 8001ba0:	019b      	lsls	r3, r3, #6
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b25a      	sxtb	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3307      	adds	r3, #7
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]

	(*flag) = 1;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200003b8 	.word	0x200003b8
 8001bc8:	20000280 	.word	0x20000280
 8001bcc:	20000290 	.word	0x20000290
 8001bd0:	20000134 	.word	0x20000134
 8001bd4:	20000218 	.word	0x20000218
 8001bd8:	2000027c 	.word	0x2000027c
 8001bdc:	200003d1 	.word	0x200003d1
 8001be0:	200003a0 	.word	0x200003a0
 8001be4:	200003f8 	.word	0x200003f8

08001be8 <CMS_Control>:

void CMS_Control()
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	if((Input_Status.door_open_status == 1) || (ign1_status == 1))
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <CMS_Control+0x34>)
 8001bee:	7b5b      	ldrb	r3, [r3, #13]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d003      	beq.n	8001bfc <CMS_Control+0x14>
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <CMS_Control+0x38>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d106      	bne.n	8001c0a <CMS_Control+0x22>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c02:	4808      	ldr	r0, [pc, #32]	; (8001c24 <CMS_Control+0x3c>)
 8001c04:	f002 fe92 	bl	800492c <HAL_GPIO_WritePin>
 8001c08:	e006      	b.n	8001c18 <CMS_Control+0x30>
	}else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <CMS_Control+0x3c>)
 8001c12:	f002 fe8b 	bl	800492c <HAL_GPIO_WritePin>
	}

}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000280 	.word	0x20000280
 8001c20:	200003fe 	.word	0x200003fe
 8001c24:	48000800 	.word	0x48000800

08001c28 <boardingpass_AVAS_control>:


void boardingpass_AVAS_control()
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	if( (Input_Status.door_open_status == 1) && (ign1_status == 1) && (boardingpass_AVAS_trigger == 0)) {  // door open check
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <boardingpass_AVAS_control+0x90>)
 8001c2e:	7b5b      	ldrb	r3, [r3, #13]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d11d      	bne.n	8001c70 <boardingpass_AVAS_control+0x48>
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <boardingpass_AVAS_control+0x94>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d119      	bne.n	8001c70 <boardingpass_AVAS_control+0x48>
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <boardingpass_AVAS_control+0x98>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d115      	bne.n	8001c70 <boardingpass_AVAS_control+0x48>
			if( distant_data >= 600 ) { // 50 ~ 150cm  // 5000 //  before (220516)->1200
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <boardingpass_AVAS_control+0x9c>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001c4c:	d310      	bcc.n	8001c70 <boardingpass_AVAS_control+0x48>
				boardingpass_AVAS_trigger = 1;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <boardingpass_AVAS_control+0x98>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]

				if(boardingpassAVAS_first_step){
 8001c54:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <boardingpass_AVAS_control+0xa0>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <boardingpass_AVAS_control+0x42>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET); // BP_AVAS_on
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c62:	481a      	ldr	r0, [pc, #104]	; (8001ccc <boardingpass_AVAS_control+0xa4>)
 8001c64:	f002 fe62 	bl	800492c <HAL_GPIO_WritePin>
 8001c68:	e002      	b.n	8001c70 <boardingpass_AVAS_control+0x48>
				}else{
					boardingpassAVAS_first_step = 1;
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <boardingpass_AVAS_control+0xa0>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
				}
			}
	}

	if(boardingpass_AVAS_trigger){
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <boardingpass_AVAS_control+0x98>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d015      	beq.n	8001ca4 <boardingpass_AVAS_control+0x7c>
		boardingpass_AVAS_cnt++;
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <boardingpass_AVAS_control+0xa8>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <boardingpass_AVAS_control+0xa8>)
 8001c82:	801a      	strh	r2, [r3, #0]
		if(boardingpass_AVAS_cnt > 240){ // 4sec
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <boardingpass_AVAS_control+0xa8>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	2bf0      	cmp	r3, #240	; 0xf0
 8001c8a:	d90b      	bls.n	8001ca4 <boardingpass_AVAS_control+0x7c>
			boardingpass_AVAS_cnt = 0;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <boardingpass_AVAS_control+0xa8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	801a      	strh	r2, [r3, #0]
			boardingpass_AVAS_trigger = 0;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <boardingpass_AVAS_control+0x98>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET); // BP_AVAS_off
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c9e:	480b      	ldr	r0, [pc, #44]	; (8001ccc <boardingpass_AVAS_control+0xa4>)
 8001ca0:	f002 fe44 	bl	800492c <HAL_GPIO_WritePin>
		}
	}

	if(ign1_status == 0){
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <boardingpass_AVAS_control+0x94>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <boardingpass_AVAS_control+0x8a>
		boardingpassAVAS_first_step = 0;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <boardingpass_AVAS_control+0xa0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
	}
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000280 	.word	0x20000280
 8001cbc:	200003fe 	.word	0x200003fe
 8001cc0:	2000027a 	.word	0x2000027a
 8001cc4:	20000068 	.word	0x20000068
 8001cc8:	20000048 	.word	0x20000048
 8001ccc:	48000800 	.word	0x48000800
 8001cd0:	20000308 	.word	0x20000308

08001cd4 <doorwaring_AVAS_control>:

void doorwaring_AVAS_control()
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
		}

	}
	*/

	if(doorwarning_AVAS_trigger){
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <doorwaring_AVAS_control+0x4c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01d      	beq.n	8001d1c <doorwaring_AVAS_control+0x48>
		doorwarning_AVAS_cnt++;
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <doorwaring_AVAS_control+0x50>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <doorwaring_AVAS_control+0x50>)
 8001cea:	801a      	strh	r2, [r3, #0]
		if(doorwarning_AVAS_cnt == 100){
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <doorwaring_AVAS_control+0x50>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	2b64      	cmp	r3, #100	; 0x64
 8001cf2:	d102      	bne.n	8001cfa <doorwaring_AVAS_control+0x26>
			door_open_on = 1;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <doorwaring_AVAS_control+0x54>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
		}
		if(doorwarning_AVAS_cnt > 350){ // 7sec
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <doorwaring_AVAS_control+0x50>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001d02:	d90b      	bls.n	8001d1c <doorwaring_AVAS_control+0x48>
			doorwarning_AVAS_cnt = 0;
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <doorwaring_AVAS_control+0x50>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	801a      	strh	r2, [r3, #0]
			doorwarning_AVAS_trigger = 0;
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <doorwaring_AVAS_control+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET); // DW_AVAS_off
 8001d10:	2200      	movs	r2, #0
 8001d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <doorwaring_AVAS_control+0x58>)
 8001d18:	f002 fe08 	bl	800492c <HAL_GPIO_WritePin>
		}
	}
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200003cc 	.word	0x200003cc
 8001d24:	200001b4 	.word	0x200001b4
 8001d28:	200001b2 	.word	0x200001b2
 8001d2c:	48000800 	.word	0x48000800

08001d30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d34:	f3bf 8f4f 	dsb	sy
}
 8001d38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <__NVIC_SystemReset+0x24>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d42:	4904      	ldr	r1, [pc, #16]	; (8001d54 <__NVIC_SystemReset+0x24>)
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <__NVIC_SystemReset+0x28>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d4a:	f3bf 8f4f 	dsb	sy
}
 8001d4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <__NVIC_SystemReset+0x20>
 8001d54:	e000ed00 	.word	0xe000ed00
 8001d58:	05fa0004 	.word	0x05fa0004

08001d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d60:	f001 f893 	bl	8002e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d64:	f000 f836 	bl	8001dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d68:	f000 fb38 	bl	80023dc <MX_GPIO_Init>
  MX_TIM6_Init();
 8001d6c:	f000 fa6a 	bl	8002244 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001d70:	f000 fa0c 	bl	800218c <MX_TIM3_Init>
  MX_SPI2_Init();
 8001d74:	f000 f9cc 	bl	8002110 <MX_SPI2_Init>
  MX_TIM8_Init();
 8001d78:	f000 fa9a 	bl	80022b0 <MX_TIM8_Init>
  MX_RTC_Init();
 8001d7c:	f000 f992 	bl	80020a4 <MX_RTC_Init>
  MX_FDCAN1_Init();
 8001d80:	f000 f898 	bl	8001eb4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001d84:	f000 f90c 	bl	8001fa0 <MX_FDCAN2_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);		// SET /RST(ADC IC) 1 (Deactivate)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d8e:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <main+0x64>)
 8001d90:	f002 fdcc 	bl	800492c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8001d94:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <main+0x68>)
 8001d96:	f004 fde5 	bl	8006964 <HAL_TIM_Base_Start_IT>

  romdata = *((__IO uint32_t*)(FlashRead(FLASH_START_ADDR_CNT, 0)));
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <main+0x6c>)
 8001d9e:	f000 fd7b 	bl	8002898 <FlashRead>
 8001da2:	4603      	mov	r3, r0
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <main+0x70>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if( stop_enable == 1 ) {
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <main+0x74>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d1fb      	bne.n	8001daa <main+0x4e>
		  stop_enable = 0;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <main+0x74>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
		  StopModeStart();
 8001db8:	f000 fd08 	bl	80027cc <StopModeStart>
	  if( stop_enable == 1 ) {
 8001dbc:	e7f5      	b.n	8001daa <main+0x4e>
 8001dbe:	bf00      	nop
 8001dc0:	48000400 	.word	0x48000400
 8001dc4:	200005d4 	.word	0x200005d4
 8001dc8:	08040000 	.word	0x08040000
 8001dcc:	200003c0 	.word	0x200003c0
 8001dd0:	20000093 	.word	0x20000093

08001dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b0a8      	sub	sp, #160	; 0xa0
 8001dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dde:	2238      	movs	r2, #56	; 0x38
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f005 fec8 	bl	8007b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df8:	463b      	mov	r3, r7
 8001dfa:	2254      	movs	r2, #84	; 0x54
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 feba 	bl	8007b78 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e08:	f002 fdc0 	bl	800498c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e0c:	230a      	movs	r3, #10
 8001e0e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e14:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e16:	2340      	movs	r3, #64	; 0x40
 8001e18:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 27;
 8001e30:	231b      	movs	r3, #27
 8001e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e36:	2302      	movs	r3, #2
 8001e38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 fea7 	bl	8004ba0 <HAL_RCC_OscConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001e58:	f000 fce2 	bl	8002820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e60:	2303      	movs	r3, #3
 8001e62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e76:	2103      	movs	r1, #3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 f9a9 	bl	80051d0 <HAL_RCC_ClockConfig>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001e84:	f000 fccc 	bl	8002820 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_FDCAN;
 8001e88:	f44f 2301 	mov.w	r3, #528384	; 0x81000
 8001e8c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e98:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fb7b 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001ea8:	f000 fcba 	bl	8002820 <Error_Handler>
  }
}
 8001eac:	bf00      	nop
 8001eae:	37a0      	adds	r7, #160	; 0xa0
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001eba:	4a37      	ldr	r2, [pc, #220]	; (8001f98 <MX_FDCAN1_Init+0xe4>)
 8001ebc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001ebe:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001ec4:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001eca:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001ed0:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001ed6:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001edc:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8001ee2:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001ee4:	2206      	movs	r2, #6
 8001ee6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001efa:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f06:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f24:	481b      	ldr	r0, [pc, #108]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001f26:	f001 f9b7 	bl	8003298 <HAL_FDCAN_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001f30:	f000 fc76 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  can1_filter.IdType = FDCAN_STANDARD_ID;
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_FDCAN1_Init+0xe8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
  can1_filter.FilterType = FDCAN_FILTER_MASK;
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <MX_FDCAN1_Init+0xe8>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	609a      	str	r2, [r3, #8]
  can1_filter.FilterIndex = 0;
 8001f40:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <MX_FDCAN1_Init+0xe8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]
  can1_filter.FilterID1 = 0x000;
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <MX_FDCAN1_Init+0xe8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  can1_filter.FilterID2 = 0x7FF;
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <MX_FDCAN1_Init+0xe8>)
 8001f4e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f52:	615a      	str	r2, [r3, #20]
  can1_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_FDCAN1_Init+0xe8>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	60da      	str	r2, [r3, #12]

  if( HAL_FDCAN_ConfigFilter(&hfdcan1, &can1_filter) != HAL_OK ) {
 8001f5a:	4910      	ldr	r1, [pc, #64]	; (8001f9c <MX_FDCAN1_Init+0xe8>)
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001f5e:	f001 faf5 	bl	800354c <HAL_FDCAN_ConfigFilter>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_FDCAN1_Init+0xb8>
	  Error_Handler();
 8001f68:	f000 fc5a 	bl	8002820 <Error_Handler>
 	  Error_Handler();
   }
#endif
#endif

  if( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK ) {
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2101      	movs	r1, #1
 8001f70:	4808      	ldr	r0, [pc, #32]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001f72:	f001 fd2d 	bl	80039d0 <HAL_FDCAN_ActivateNotification>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_FDCAN1_Init+0xcc>
	  Error_Handler();
 8001f7c:	f000 fc50 	bl	8002820 <Error_Handler>
  }


  if( HAL_FDCAN_Start(&hfdcan1) != HAL_OK ) {
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <MX_FDCAN1_Init+0xe0>)
 8001f82:	f001 fb6e 	bl	8003662 <HAL_FDCAN_Start>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_FDCAN1_Init+0xdc>
	  Error_Handler();
 8001f8c:	f000 fc48 	bl	8002820 <Error_Handler>
  }


  /* USER CODE END FDCAN1_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000294 	.word	0x20000294
 8001f98:	40006400 	.word	0x40006400
 8001f9c:	20000594 	.word	0x20000594

08001fa0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001fa6:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fa8:	4a3c      	ldr	r2, [pc, #240]	; (800209c <MX_FDCAN2_Init+0xfc>)
 8001faa:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001fac:	4b3a      	ldr	r3, [pc, #232]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001fb2:	4b39      	ldr	r3, [pc, #228]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001fb8:	4b37      	ldr	r3, [pc, #220]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001fbe:	4b36      	ldr	r3, [pc, #216]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001fc4:	4b34      	ldr	r3, [pc, #208]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8001fca:	4b33      	ldr	r3, [pc, #204]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fcc:	2206      	movs	r2, #6
 8001fce:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 15;
 8001fd6:	4b30      	ldr	r3, [pc, #192]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fd8:	220f      	movs	r2, #15
 8001fda:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fde:	2202      	movs	r2, #2
 8001fe0:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001fee:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8001ffa:	4b27      	ldr	r3, [pc, #156]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8002002:	2200      	movs	r2, #0
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8002008:	2200      	movs	r2, #0
 800200a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800200c:	4822      	ldr	r0, [pc, #136]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 800200e:	f001 f943 	bl	8003298 <HAL_FDCAN_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_FDCAN2_Init+0x7c>
  {
    Error_Handler();
 8002018:	f000 fc02 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  can2_filter.IdType = FDCAN_STANDARD_ID;
 800201c:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <MX_FDCAN2_Init+0x100>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
  can2_filter.FilterType = FDCAN_FILTER_MASK;
 8002022:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <MX_FDCAN2_Init+0x100>)
 8002024:	2202      	movs	r2, #2
 8002026:	609a      	str	r2, [r3, #8]
  can2_filter.FilterIndex = 0;
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <MX_FDCAN2_Init+0x100>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
  can2_filter.FilterID1 = 0x000;
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <MX_FDCAN2_Init+0x100>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  can2_filter.FilterID2 = 0x000;
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <MX_FDCAN2_Init+0x100>)
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
  can2_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <MX_FDCAN2_Init+0x100>)
 800203c:	2201      	movs	r2, #1
 800203e:	60da      	str	r2, [r3, #12]

  if( HAL_FDCAN_ConfigFilter(&hfdcan2, &can2_filter) != HAL_OK ) {
 8002040:	4917      	ldr	r1, [pc, #92]	; (80020a0 <MX_FDCAN2_Init+0x100>)
 8002042:	4815      	ldr	r0, [pc, #84]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8002044:	f001 fa82 	bl	800354c <HAL_FDCAN_ConfigFilter>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_FDCAN2_Init+0xb2>
	  Error_Handler();
 800204e:	f000 fbe7 	bl	8002820 <Error_Handler>
  }

  if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8002052:	2300      	movs	r3, #0
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2300      	movs	r3, #0
 8002058:	2202      	movs	r2, #2
 800205a:	2102      	movs	r1, #2
 800205c:	480e      	ldr	r0, [pc, #56]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 800205e:	f001 facf 	bl	8003600 <HAL_FDCAN_ConfigGlobalFilter>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_FDCAN2_Init+0xcc>
	  Error_Handler();
 8002068:	f000 fbda 	bl	8002820 <Error_Handler>
  }

  if( HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK ) {
 800206c:	2200      	movs	r2, #0
 800206e:	2101      	movs	r1, #1
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8002072:	f001 fcad 	bl	80039d0 <HAL_FDCAN_ActivateNotification>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_FDCAN2_Init+0xe0>
	  Error_Handler();
 800207c:	f000 fbd0 	bl	8002820 <Error_Handler>
  }

  if( HAL_FDCAN_Start(&hfdcan2) != HAL_OK ) {
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_FDCAN2_Init+0xf8>)
 8002082:	f001 faee 	bl	8003662 <HAL_FDCAN_Start>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_FDCAN2_Init+0xf0>
	  Error_Handler();
 800208c:	f000 fbc8 	bl	8002820 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000400 	.word	0x20000400
 800209c:	40006800 	.word	0x40006800
 80020a0:	20000620 	.word	0x20000620

080020a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_RTC_Init+0x64>)
 80020aa:	4a18      	ldr	r2, [pc, #96]	; (800210c <MX_RTC_Init+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_RTC_Init+0x64>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_RTC_Init+0x64>)
 80020b6:	227f      	movs	r2, #127	; 0x7f
 80020b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <MX_RTC_Init+0x64>)
 80020bc:	22ff      	movs	r2, #255	; 0xff
 80020be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_RTC_Init+0x64>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <MX_RTC_Init+0x64>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_RTC_Init+0x64>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <MX_RTC_Init+0x64>)
 80020d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <MX_RTC_Init+0x64>)
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020e0:	4809      	ldr	r0, [pc, #36]	; (8002108 <MX_RTC_Init+0x64>)
 80020e2:	f003 fca5 	bl	8005a30 <HAL_RTC_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80020ec:	f000 fb98 	bl	8002820 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <MX_RTC_Init+0x64>)
 80020f6:	f003 fda1 	bl	8005c3c <HAL_RTCEx_SetWakeUpTimer_IT>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002100:	f000 fb8e 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200005ac 	.word	0x200005ac
 800210c:	40002800 	.word	0x40002800

08002110 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <MX_SPI2_Init+0x74>)
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <MX_SPI2_Init+0x78>)
 8002118:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MX_SPI2_Init+0x74>)
 800211c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002120:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_SPI2_Init+0x74>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <MX_SPI2_Init+0x74>)
 800212a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800212e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <MX_SPI2_Init+0x74>)
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MX_SPI2_Init+0x74>)
 8002138:	2201      	movs	r2, #1
 800213a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_SPI2_Init+0x74>)
 800213e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002142:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MX_SPI2_Init+0x74>)
 8002146:	2208      	movs	r2, #8
 8002148:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_SPI2_Init+0x74>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_SPI2_Init+0x74>)
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MX_SPI2_Init+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_SPI2_Init+0x74>)
 800215e:	2207      	movs	r2, #7
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_SPI2_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_SPI2_Init+0x74>)
 800216a:	2200      	movs	r2, #0
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_SPI2_Init+0x74>)
 8002170:	f003 fe62 	bl	8005e38 <HAL_SPI_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800217a:	f000 fb51 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000488 	.word	0x20000488
 8002188:	40003800 	.word	0x40003800

0800218c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219e:	463b      	mov	r3, r7
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
 80021ac:	615a      	str	r2, [r3, #20]
 80021ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <MX_TIM3_Init+0xb0>)
 80021b2:	4a23      	ldr	r2, [pc, #140]	; (8002240 <MX_TIM3_Init+0xb4>)
 80021b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14000-1;
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <MX_TIM3_Init+0xb0>)
 80021b8:	f243 62af 	movw	r2, #13999	; 0x36af
 80021bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	4b1f      	ldr	r3, [pc, #124]	; (800223c <MX_TIM3_Init+0xb0>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <MX_TIM3_Init+0xb0>)
 80021c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <MX_TIM3_Init+0xb0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <MX_TIM3_Init+0xb0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021d8:	4818      	ldr	r0, [pc, #96]	; (800223c <MX_TIM3_Init+0xb0>)
 80021da:	f004 fc3b 	bl	8006a54 <HAL_TIM_PWM_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80021e4:	f000 fb1c 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	4619      	mov	r1, r3
 80021f6:	4811      	ldr	r0, [pc, #68]	; (800223c <MX_TIM3_Init+0xb0>)
 80021f8:	f005 fb0c 	bl	8007814 <HAL_TIMEx_MasterConfigSynchronization>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002202:	f000 fb0d 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002206:	2360      	movs	r3, #96	; 0x60
 8002208:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800220a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800220e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002218:	463b      	mov	r3, r7
 800221a:	2200      	movs	r2, #0
 800221c:	4619      	mov	r1, r3
 800221e:	4807      	ldr	r0, [pc, #28]	; (800223c <MX_TIM3_Init+0xb0>)
 8002220:	f004 fdee 	bl	8006e00 <HAL_TIM_PWM_ConfigChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 800222a:	f000 faf9 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800222e:	4803      	ldr	r0, [pc, #12]	; (800223c <MX_TIM3_Init+0xb0>)
 8002230:	f000 fd2e 	bl	8002c90 <HAL_TIM_MspPostInit>

}
 8002234:	bf00      	nop
 8002236:	3728      	adds	r7, #40	; 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000540 	.word	0x20000540
 8002240:	40000400 	.word	0x40000400

08002244 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <MX_TIM6_Init+0x64>)
 8002256:	4a15      	ldr	r2, [pc, #84]	; (80022ac <MX_TIM6_Init+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1080-1;
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <MX_TIM6_Init+0x64>)
 800225c:	f240 4237 	movw	r2, #1079	; 0x437
 8002260:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <MX_TIM6_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <MX_TIM6_Init+0x64>)
 800226a:	22c7      	movs	r2, #199	; 0xc7
 800226c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_TIM6_Init+0x64>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <MX_TIM6_Init+0x64>)
 8002276:	f004 fb1d 	bl	80068b4 <HAL_TIM_Base_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002280:	f000 face 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_TIM6_Init+0x64>)
 8002292:	f005 fabf 	bl	8007814 <HAL_TIMEx_MasterConfigSynchronization>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800229c:	f000 fac0 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200005d4 	.word	0x200005d4
 80022ac:	40001000 	.word	0x40001000

080022b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b098      	sub	sp, #96	; 0x60
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	611a      	str	r2, [r3, #16]
 80022d2:	615a      	str	r2, [r3, #20]
 80022d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2234      	movs	r2, #52	; 0x34
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f005 fc4b 	bl	8007b78 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022e2:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <MX_TIM8_Init+0x124>)
 80022e4:	4a3c      	ldr	r2, [pc, #240]	; (80023d8 <MX_TIM8_Init+0x128>)
 80022e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 14000-1;
 80022e8:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <MX_TIM8_Init+0x124>)
 80022ea:	f243 62af 	movw	r2, #13999	; 0x36af
 80022ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f0:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <MX_TIM8_Init+0x124>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <MX_TIM8_Init+0x124>)
 80022f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fe:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <MX_TIM8_Init+0x124>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002304:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <MX_TIM8_Init+0x124>)
 8002306:	2200      	movs	r2, #0
 8002308:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230a:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <MX_TIM8_Init+0x124>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002310:	4830      	ldr	r0, [pc, #192]	; (80023d4 <MX_TIM8_Init+0x124>)
 8002312:	f004 fb9f 	bl	8006a54 <HAL_TIM_PWM_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 800231c:	f000 fa80 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800232c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002330:	4619      	mov	r1, r3
 8002332:	4828      	ldr	r0, [pc, #160]	; (80023d4 <MX_TIM8_Init+0x124>)
 8002334:	f005 fa6e 	bl	8007814 <HAL_TIMEx_MasterConfigSynchronization>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800233e:	f000 fa6f 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002342:	2360      	movs	r3, #96	; 0x60
 8002344:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500;
 8002346:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800234c:	2300      	movs	r3, #0
 800234e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002350:	2300      	movs	r3, #0
 8002352:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002360:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002364:	2204      	movs	r2, #4
 8002366:	4619      	mov	r1, r3
 8002368:	481a      	ldr	r0, [pc, #104]	; (80023d4 <MX_TIM8_Init+0x124>)
 800236a:	f004 fd49 	bl	8006e00 <HAL_TIM_PWM_ConfigChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8002374:	f000 fa54 	bl	8002820 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800238c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002390:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800239e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023a8:	2300      	movs	r3, #0
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	4619      	mov	r1, r3
 80023b4:	4807      	ldr	r0, [pc, #28]	; (80023d4 <MX_TIM8_Init+0x124>)
 80023b6:	f005 fac3 	bl	8007940 <HAL_TIMEx_ConfigBreakDeadTime>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM8_Init+0x114>
  {
    Error_Handler();
 80023c0:	f000 fa2e 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80023c4:	4803      	ldr	r0, [pc, #12]	; (80023d4 <MX_TIM8_Init+0x124>)
 80023c6:	f000 fc63 	bl	8002c90 <HAL_TIM_MspPostInit>

}
 80023ca:	bf00      	nop
 80023cc:	3760      	adds	r7, #96	; 0x60
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200004ec 	.word	0x200004ec
 80023d8:	40013400 	.word	0x40013400

080023dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f2:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <MX_GPIO_Init+0x194>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <MX_GPIO_Init+0x194>)
 80023f8:	f043 0310 	orr.w	r3, r3, #16
 80023fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <MX_GPIO_Init+0x194>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240a:	4b59      	ldr	r3, [pc, #356]	; (8002570 <MX_GPIO_Init+0x194>)
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	4a58      	ldr	r2, [pc, #352]	; (8002570 <MX_GPIO_Init+0x194>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002416:	4b56      	ldr	r3, [pc, #344]	; (8002570 <MX_GPIO_Init+0x194>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <MX_GPIO_Init+0x194>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	4a52      	ldr	r2, [pc, #328]	; (8002570 <MX_GPIO_Init+0x194>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242e:	4b50      	ldr	r3, [pc, #320]	; (8002570 <MX_GPIO_Init+0x194>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <MX_GPIO_Init+0x194>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	4a4c      	ldr	r2, [pc, #304]	; (8002570 <MX_GPIO_Init+0x194>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002446:	4b4a      	ldr	r3, [pc, #296]	; (8002570 <MX_GPIO_Init+0x194>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002452:	4b47      	ldr	r3, [pc, #284]	; (8002570 <MX_GPIO_Init+0x194>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	4a46      	ldr	r2, [pc, #280]	; (8002570 <MX_GPIO_Init+0x194>)
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245e:	4b44      	ldr	r3, [pc, #272]	; (8002570 <MX_GPIO_Init+0x194>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002470:	4840      	ldr	r0, [pc, #256]	; (8002574 <MX_GPIO_Init+0x198>)
 8002472:	f002 fa5b 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002476:	2200      	movs	r2, #0
 8002478:	f64f 7104 	movw	r1, #65284	; 0xff04
 800247c:	483e      	ldr	r0, [pc, #248]	; (8002578 <MX_GPIO_Init+0x19c>)
 800247e:	f002 fa55 	bl	800492c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002482:	2200      	movs	r2, #0
 8002484:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8002488:	483c      	ldr	r0, [pc, #240]	; (800257c <MX_GPIO_Init+0x1a0>)
 800248a:	f002 fa4f 	bl	800492c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800248e:	233c      	movs	r3, #60	; 0x3c
 8002490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4837      	ldr	r0, [pc, #220]	; (8002580 <MX_GPIO_Init+0x1a4>)
 80024a2:	f002 f8a9 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80024a6:	231f      	movs	r3, #31
 80024a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	4830      	ldr	r0, [pc, #192]	; (800257c <MX_GPIO_Init+0x1a0>)
 80024ba:	f002 f89d 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 80024be:	234e      	movs	r3, #78	; 0x4e
 80024c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024d4:	f002 f890 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024d8:	2330      	movs	r3, #48	; 0x30
 80024da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING_FALLING;
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <MX_GPIO_Init+0x1a8>)
 80024de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ee:	f002 f883 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <MX_GPIO_Init+0x1ac>)
 80024f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002508:	f002 f876 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800250c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002512:	2301      	movs	r3, #1
 8002514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	4813      	ldr	r0, [pc, #76]	; (8002574 <MX_GPIO_Init+0x198>)
 8002526:	f002 f867 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800252a:	f64f 7304 	movw	r3, #65284	; 0xff04
 800252e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002530:	2301      	movs	r3, #1
 8002532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4619      	mov	r1, r3
 8002542:	480d      	ldr	r0, [pc, #52]	; (8002578 <MX_GPIO_Init+0x19c>)
 8002544:	f002 f858 	bl	80045f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002548:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800254c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254e:	2301      	movs	r3, #1
 8002550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4619      	mov	r1, r3
 8002560:	4806      	ldr	r0, [pc, #24]	; (800257c <MX_GPIO_Init+0x1a0>)
 8002562:	f002 f849 	bl	80045f8 <HAL_GPIO_Init>

}
 8002566:	bf00      	nop
 8002568:	3728      	adds	r7, #40	; 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	48000400 	.word	0x48000400
 8002578:	48000c00 	.word	0x48000c00
 800257c:	48000800 	.word	0x48000800
 8002580:	48001000 	.word	0x48001000
 8002584:	10320000 	.word	0x10320000
 8002588:	10120000 	.word	0x10120000

0800258c <CurrentDataReceive>:

/* USER CODE BEGIN 4 */
void CurrentDataReceive(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af02      	add	r7, sp, #8
	turn_right_curr = (uint16_t)turn_right_curr_f;
#else
	float turn_left_curr_f;
	float turn_right_curr_f;

	spi2_tx_data[0] = ADC_DUMMY;
 8002592:	4b7c      	ldr	r3, [pc, #496]	; (8002784 <CurrentDataReceive+0x1f8>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
	spi2_tx_data[1] = ADC_CH1_ENABLE;			// CH1 Read
 8002598:	4b7a      	ldr	r3, [pc, #488]	; (8002784 <CurrentDataReceive+0x1f8>)
 800259a:	22c0      	movs	r2, #192	; 0xc0
 800259c:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);		// SET /CS 0 (Active)
 800259e:	2200      	movs	r2, #0
 80025a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025a4:	4878      	ldr	r0, [pc, #480]	; (8002788 <CurrentDataReceive+0x1fc>)
 80025a6:	f002 f9c1 	bl	800492c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, spi2_tx_data, spi2_rx_data, 8, 100);
 80025aa:	2364      	movs	r3, #100	; 0x64
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2308      	movs	r3, #8
 80025b0:	4a76      	ldr	r2, [pc, #472]	; (800278c <CurrentDataReceive+0x200>)
 80025b2:	4974      	ldr	r1, [pc, #464]	; (8002784 <CurrentDataReceive+0x1f8>)
 80025b4:	4876      	ldr	r0, [pc, #472]	; (8002790 <CurrentDataReceive+0x204>)
 80025b6:	f003 fcea 	bl	8005f8e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);		// SET /CS 1 (Deactivate)
 80025ba:	2201      	movs	r2, #1
 80025bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025c0:	4871      	ldr	r0, [pc, #452]	; (8002788 <CurrentDataReceive+0x1fc>)
 80025c2:	f002 f9b3 	bl	800492c <HAL_GPIO_WritePin>

	turn_right_curr_f = (spi2_rx_data[2]) | (spi2_rx_data[3]<<8);
 80025c6:	4b71      	ldr	r3, [pc, #452]	; (800278c <CurrentDataReceive+0x200>)
 80025c8:	789b      	ldrb	r3, [r3, #2]
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b6f      	ldr	r3, [pc, #444]	; (800278c <CurrentDataReceive+0x200>)
 80025ce:	78db      	ldrb	r3, [r3, #3]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	4313      	orrs	r3, r2
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025dc:	edc7 7a01 	vstr	s15, [r7, #4]
	turn_right_curr_f = (turn_right_curr_f-32765) / 13235 * 5 * 1000;
 80025e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002794 <CurrentDataReceive+0x208>
 80025e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80025ec:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8002798 <CurrentDataReceive+0x20c>
 80025f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80025f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025fc:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800279c <CurrentDataReceive+0x210>
 8002600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002604:	edc7 7a01 	vstr	s15, [r7, #4]


	spi2_tx_data[0] = ADC_DUMMY;
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <CurrentDataReceive+0x1f8>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
	spi2_tx_data[1] = ADC_CH2_ENABLE;			// CH2 Read
 800260e:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <CurrentDataReceive+0x1f8>)
 8002610:	22c4      	movs	r2, #196	; 0xc4
 8002612:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);		// SET /CS 0 (Active)
 8002614:	2200      	movs	r2, #0
 8002616:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800261a:	485b      	ldr	r0, [pc, #364]	; (8002788 <CurrentDataReceive+0x1fc>)
 800261c:	f002 f986 	bl	800492c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, spi2_tx_data, spi2_rx_data, 8, 100);
 8002620:	2364      	movs	r3, #100	; 0x64
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2308      	movs	r3, #8
 8002626:	4a59      	ldr	r2, [pc, #356]	; (800278c <CurrentDataReceive+0x200>)
 8002628:	4956      	ldr	r1, [pc, #344]	; (8002784 <CurrentDataReceive+0x1f8>)
 800262a:	4859      	ldr	r0, [pc, #356]	; (8002790 <CurrentDataReceive+0x204>)
 800262c:	f003 fcaf 	bl	8005f8e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);		// SET /CS 1 (Deactivate)
 8002630:	2201      	movs	r2, #1
 8002632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002636:	4854      	ldr	r0, [pc, #336]	; (8002788 <CurrentDataReceive+0x1fc>)
 8002638:	f002 f978 	bl	800492c <HAL_GPIO_WritePin>

	turn_left_curr_f = (spi2_rx_data[2]) | (spi2_rx_data[3]<<8);
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <CurrentDataReceive+0x200>)
 800263e:	789b      	ldrb	r3, [r3, #2]
 8002640:	461a      	mov	r2, r3
 8002642:	4b52      	ldr	r3, [pc, #328]	; (800278c <CurrentDataReceive+0x200>)
 8002644:	78db      	ldrb	r3, [r3, #3]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	4313      	orrs	r3, r2
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002652:	edc7 7a00 	vstr	s15, [r7]
	turn_left_curr_f = (turn_left_curr_f-32765) / 13235 * 5 * 1000;
 8002656:	edd7 7a00 	vldr	s15, [r7]
 800265a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002794 <CurrentDataReceive+0x208>
 800265e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002662:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002798 <CurrentDataReceive+0x20c>
 8002666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800266a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800266e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002672:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800279c <CurrentDataReceive+0x210>
 8002676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800267a:	edc7 7a00 	vstr	s15, [r7]

	turn_left_curr = (uint16_t)turn_left_curr_f;
 800267e:	edd7 7a00 	vldr	s15, [r7]
 8002682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002686:	ee17 3a90 	vmov	r3, s15
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b44      	ldr	r3, [pc, #272]	; (80027a0 <CurrentDataReceive+0x214>)
 800268e:	801a      	strh	r2, [r3, #0]
	turn_right_curr = (uint16_t)turn_right_curr_f;
 8002690:	edd7 7a01 	vldr	s15, [r7, #4]
 8002694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002698:	ee17 3a90 	vmov	r3, s15
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <CurrentDataReceive+0x218>)
 80026a0:	801a      	strh	r2, [r3, #0]

	if( Lamp_Status.turn_lamp_left == 1 ) {
 80026a2:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <CurrentDataReceive+0x21c>)
 80026a4:	789b      	ldrb	r3, [r3, #2]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d115      	bne.n	80026d6 <CurrentDataReceive+0x14a>
		if( ++turn_lamp_left_delay_cnt > 2 ) {
 80026aa:	4b40      	ldr	r3, [pc, #256]	; (80027ac <CurrentDataReceive+0x220>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <CurrentDataReceive+0x220>)
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <CurrentDataReceive+0x220>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d926      	bls.n	800270c <CurrentDataReceive+0x180>
			if( turn_left_curr < 1000 ) {
 80026be:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <CurrentDataReceive+0x214>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026c6:	d221      	bcs.n	800270c <CurrentDataReceive+0x180>
				if( ++turn_lamp_left_fail_cnt > 3 ) {
 80026c8:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <CurrentDataReceive+0x224>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <CurrentDataReceive+0x224>)
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e01a      	b.n	800270c <CurrentDataReceive+0x180>
//					turn_lamp_left_fail = 1;
				}
			}
		}
	} else if( (Input_Status.turnlamp_LH==0) && (hazard_sw_on==0) ) {
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <CurrentDataReceive+0x228>)
 80026d8:	795b      	ldrb	r3, [r3, #5]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <CurrentDataReceive+0x172>
 80026de:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <CurrentDataReceive+0x22c>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10b      	bne.n	80026fe <CurrentDataReceive+0x172>
		turn_lamp_left_delay_cnt = turn_lamp_left_fail = turn_lamp_left_fail_cnt = 0;
 80026e6:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <CurrentDataReceive+0x224>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <CurrentDataReceive+0x224>)
 80026ee:	781a      	ldrb	r2, [r3, #0]
 80026f0:	4b32      	ldr	r3, [pc, #200]	; (80027bc <CurrentDataReceive+0x230>)
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	4b31      	ldr	r3, [pc, #196]	; (80027bc <CurrentDataReceive+0x230>)
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <CurrentDataReceive+0x220>)
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e006      	b.n	800270c <CurrentDataReceive+0x180>
	} else if( Lamp_Status.turn_lamp_left == 0 ) {
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <CurrentDataReceive+0x21c>)
 8002700:	789b      	ldrb	r3, [r3, #2]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <CurrentDataReceive+0x180>
		turn_lamp_left_delay_cnt = 0;
 8002706:	4b29      	ldr	r3, [pc, #164]	; (80027ac <CurrentDataReceive+0x220>)
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
	}

	if( Lamp_Status.turn_lamp_right == 1 ) {
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <CurrentDataReceive+0x21c>)
 800270e:	78db      	ldrb	r3, [r3, #3]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d118      	bne.n	8002746 <CurrentDataReceive+0x1ba>
		if( ++turn_lamp_right_delay_cnt > 2 ) {
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <CurrentDataReceive+0x234>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <CurrentDataReceive+0x234>)
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <CurrentDataReceive+0x234>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d929      	bls.n	800277c <CurrentDataReceive+0x1f0>
			turn_lamp_right_delay_cnt = 0;
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <CurrentDataReceive+0x234>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
			if( turn_right_curr < 1000 ) {
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <CurrentDataReceive+0x218>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002736:	d221      	bcs.n	800277c <CurrentDataReceive+0x1f0>
				if( ++turn_lamp_right_fail_cnt > 3 ) {
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <CurrentDataReceive+0x238>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <CurrentDataReceive+0x238>)
 8002742:	701a      	strb	r2, [r3, #0]
		turn_lamp_right_delay_cnt = turn_lamp_right_fail = turn_lamp_right_fail_cnt = 0;
	} else if( Lamp_Status.turn_lamp_right == 0 ) {
		turn_lamp_right_delay_cnt = 0;
	}
#endif
}
 8002744:	e01a      	b.n	800277c <CurrentDataReceive+0x1f0>
	} else if( (Input_Status.turnlamp_RH==0) && (hazard_sw_on==0) ) {
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <CurrentDataReceive+0x228>)
 8002748:	791b      	ldrb	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <CurrentDataReceive+0x1e2>
 800274e:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <CurrentDataReceive+0x22c>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10b      	bne.n	800276e <CurrentDataReceive+0x1e2>
		turn_lamp_right_delay_cnt = turn_lamp_right_fail = turn_lamp_right_fail_cnt = 0;
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <CurrentDataReceive+0x238>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <CurrentDataReceive+0x238>)
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <CurrentDataReceive+0x23c>)
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <CurrentDataReceive+0x23c>)
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <CurrentDataReceive+0x234>)
 800276a:	701a      	strb	r2, [r3, #0]
}
 800276c:	e006      	b.n	800277c <CurrentDataReceive+0x1f0>
	} else if( Lamp_Status.turn_lamp_right == 0 ) {
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <CurrentDataReceive+0x21c>)
 8002770:	78db      	ldrb	r3, [r3, #3]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <CurrentDataReceive+0x1f0>
		turn_lamp_right_delay_cnt = 0;
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <CurrentDataReceive+0x234>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	2000058c 	.word	0x2000058c
 8002788:	48000400 	.word	0x48000400
 800278c:	20000538 	.word	0x20000538
 8002790:	20000488 	.word	0x20000488
 8002794:	46fffa00 	.word	0x46fffa00
 8002798:	464ecc00 	.word	0x464ecc00
 800279c:	447a0000 	.word	0x447a0000
 80027a0:	20000218 	.word	0x20000218
 80027a4:	2000027c 	.word	0x2000027c
 80027a8:	200003b8 	.word	0x200003b8
 80027ac:	20000104 	.word	0x20000104
 80027b0:	200000e6 	.word	0x200000e6
 80027b4:	20000280 	.word	0x20000280
 80027b8:	200000ff 	.word	0x200000ff
 80027bc:	200003a0 	.word	0x200003a0
 80027c0:	200000fb 	.word	0x200000fb
 80027c4:	200001e1 	.word	0x200001e1
 80027c8:	200003d1 	.word	0x200003d1

080027cc <StopModeStart>:

void StopModeStart()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 80027d2:	f000 fbcb 	bl	8002f6c <HAL_SuspendTick>

	__HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <StopModeStart+0x4c>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <StopModeStart+0x4c>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6593      	str	r3, [r2, #88]	; 0x58
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <StopModeStart+0x4c>)
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ea:	607b      	str	r3, [r7, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
	   32768 / 16 = 2048Hz
	   1Hz = 0.00048828125 sec
	   10sec = 20,480Hz (0x5000)
	 */
//	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xF000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);	// Wake-up time : 30s
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xCC, RTC_WAKEUPCLOCK_RTCCLK_DIV16);	// Wake-up time : 100ms
 80027ee:	2200      	movs	r2, #0
 80027f0:	21cc      	movs	r1, #204	; 0xcc
 80027f2:	480a      	ldr	r0, [pc, #40]	; (800281c <StopModeStart+0x50>)
 80027f4:	f003 fa22 	bl	8005c3c <HAL_RTCEx_SetWakeUpTimer_IT>

	HAL_PWR_EnterSTOPMode(0, PWR_SLEEPENTRY_WFE);
 80027f8:	2102      	movs	r1, #2
 80027fa:	2000      	movs	r0, #0
 80027fc:	f002 f8ae 	bl	800495c <HAL_PWR_EnterSTOPMode>

	HAL_ResumeTick();
 8002800:	f000 fbc4 	bl	8002f8c <HAL_ResumeTick>

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002804:	4805      	ldr	r0, [pc, #20]	; (800281c <StopModeStart+0x50>)
 8002806:	f003 fa97 	bl	8005d38 <HAL_RTCEx_DeactivateWakeUpTimer>

	SystemClock_Config();
 800280a:	f7ff fae3 	bl	8001dd4 <SystemClock_Config>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	200005ac 	.word	0x200005ac

08002820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
}
 8002826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  NVIC_SystemReset();
 8002828:	f7ff fa82 	bl	8001d30 <__NVIC_SystemReset>

0800282c <GnrlParamSave>:
	ParamSequnceTimer(&seq->timer, 0, 5);
}
*/

void GnrlParamSave(struct PramVaiable *param, uint8_t savedata)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
	if(param->gnrl_2_flag) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7b1b      	ldrb	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d021      	beq.n	8002884 <GnrlParamSave+0x58>
		param->gnrl_2_sum = savedata;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	609a      	str	r2, [r3, #8]
		HAL_FLASH_Unlock();
 8002846:	f001 fc89 	bl	800415c <HAL_FLASH_Unlock>
		FlashErase(FLASH_START_ADDR_CNT, 0, 1);
 800284a:	2201      	movs	r2, #1
 800284c:	2100      	movs	r1, #0
 800284e:	480f      	ldr	r0, [pc, #60]	; (800288c <GnrlParamSave+0x60>)
 8002850:	f000 f834 	bl	80028bc <FlashErase>
		FlashSave(FLASH_START_ADDR_CNT, param->gnrl_2_sum, 0);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2200      	movs	r2, #0
 800285a:	4619      	mov	r1, r3
 800285c:	480b      	ldr	r0, [pc, #44]	; (800288c <GnrlParamSave+0x60>)
 800285e:	f000 f85f 	bl	8002920 <FlashSave>
		gnrl_2 = *((__IO uint32_t*)(FlashRead(FLASH_START_ADDR_CNT, 0)));
 8002862:	2100      	movs	r1, #0
 8002864:	4809      	ldr	r0, [pc, #36]	; (800288c <GnrlParamSave+0x60>)
 8002866:	f000 f817 	bl	8002898 <FlashRead>
 800286a:	4603      	mov	r3, r0
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a08      	ldr	r2, [pc, #32]	; (8002890 <GnrlParamSave+0x64>)
 8002870:	6013      	str	r3, [r2, #0]

		romdata = gnrl_2;
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <GnrlParamSave+0x64>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <GnrlParamSave+0x68>)
 8002878:	6013      	str	r3, [r2, #0]
		param->gnrl_2_sum = gnrl_2 & 0x0000FFFF;
		param->gnrl_2_diff[0] = param->gnrl_2_sum & 0xFF;
		param->gnrl_2_diff[1] = (param->gnrl_2_sum >> 8) & 0xFF;
		*/

		HAL_FLASH_Lock();
 800287a:	f001 fc91 	bl	80041a0 <HAL_FLASH_Lock>
		param->gnrl_2_flag = false;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	731a      	strb	r2, [r3, #12]
	}
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	08040000 	.word	0x08040000
 8002890:	20000060 	.word	0x20000060
 8002894:	200003c0 	.word	0x200003c0

08002898 <FlashRead>:
	}

}

uint32_t FlashRead(uint32_t address, uint32_t page)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	uint32_t _address = address + page * 32;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	015b      	lsls	r3, r3, #5
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

	return _address;
 80028ac:	68fb      	ldr	r3, [r7, #12]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <FlashErase>:

void FlashErase(uint32_t address, uint32_t page, uint8_t number)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	4613      	mov	r3, r2
 80028c8:	71fb      	strb	r3, [r7, #7]
	uint32_t PageError = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
	uint32_t _page = page * 32;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	015b      	lsls	r3, r3, #5
 80028d2:	617b      	str	r3, [r7, #20]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80028d4:	4b10      	ldr	r3, [pc, #64]	; (8002918 <FlashErase+0x5c>)
 80028d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028da:	611a      	str	r2, [r3, #16]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <FlashErase+0x60>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = address + _page;
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4413      	add	r3, r2
 80028e8:	4a0c      	ldr	r2, [pc, #48]	; (800291c <FlashErase+0x60>)
 80028ea:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = number;//nb_page;//(FLASH_USER_END_ADDR - FLASH_USER_START_ADDR)/FLASH_PAGE_SIZE + 1;
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <FlashErase+0x60>)
 80028f0:	60d3      	str	r3, [r2, #12]
    EraseInitStruct.Banks = FLASH_BANK_2;//2;//FLASH_BANK_1;
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <FlashErase+0x60>)
 80028f4:	2202      	movs	r2, #2
 80028f6:	605a      	str	r2, [r3, #4]


	if(HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	4619      	mov	r1, r3
 80028fe:	4807      	ldr	r0, [pc, #28]	; (800291c <FlashErase+0x60>)
 8002900:	f001 fd18 	bl	8004334 <HAL_FLASHEx_Erase>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <FlashErase+0x52>
		ParamErrorHandler();
 800290a:	f000 f82b 	bl	8002964 <ParamErrorHandler>
	}
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40022000 	.word	0x40022000
 800291c:	20000050 	.word	0x20000050

08002920 <FlashSave>:

void FlashSave(uint32_t address, uint32_t data, uint32_t page)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]

	uint32_t _page = page * 32;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	015b      	lsls	r3, r3, #5
 8002930:	617b      	str	r3, [r7, #20]

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <FlashSave+0x40>)
 8002934:	22b3      	movs	r2, #179	; 0xb3
 8002936:	611a      	str	r2, [r3, #16]
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + _page, data) == HAL_OK) {
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	18d1      	adds	r1, r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	461a      	mov	r2, r3
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	2000      	movs	r0, #0
 8002948:	f001 fbb2 	bl	80040b0 <HAL_FLASH_Program>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <FlashSave+0x36>

	} else {
		ParamErrorHandler();
 8002952:	f000 f807 	bl	8002964 <ParamErrorHandler>
	}
}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40022000 	.word	0x40022000

08002964 <ParamErrorHandler>:

void ParamErrorHandler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <HAL_MspInit+0x44>)
 800297c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297e:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <HAL_MspInit+0x44>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6613      	str	r3, [r2, #96]	; 0x60
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <HAL_MspInit+0x44>)
 8002988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_MspInit+0x44>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <HAL_MspInit+0x44>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299c:	6593      	str	r3, [r2, #88]	; 0x58
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_MspInit+0x44>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80029aa:	f002 f8e9 	bl	8004b80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08c      	sub	sp, #48	; 0x30
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 031c 	add.w	r3, r7, #28
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a43      	ldr	r2, [pc, #268]	; (8002ae8 <HAL_FDCAN_MspInit+0x12c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d141      	bne.n	8002a62 <HAL_FDCAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80029de:	4b43      	ldr	r3, [pc, #268]	; (8002aec <HAL_FDCAN_MspInit+0x130>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	4a41      	ldr	r2, [pc, #260]	; (8002aec <HAL_FDCAN_MspInit+0x130>)
 80029e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80029e8:	4b40      	ldr	r3, [pc, #256]	; (8002aec <HAL_FDCAN_MspInit+0x130>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d10b      	bne.n	8002a08 <HAL_FDCAN_MspInit+0x4c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	4a3e      	ldr	r2, [pc, #248]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 80029f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029fa:	6593      	str	r3, [r2, #88]	; 0x58
 80029fc:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0c:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a14:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a20:	2303      	movs	r3, #3
 8002a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002a30:	2309      	movs	r3, #9
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	4619      	mov	r1, r3
 8002a3a:	482e      	ldr	r0, [pc, #184]	; (8002af4 <HAL_FDCAN_MspInit+0x138>)
 8002a3c:	f001 fddc 	bl	80045f8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2100      	movs	r1, #0
 8002a44:	2015      	movs	r0, #21
 8002a46:	f000 fb8c 	bl	8003162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002a4a:	2015      	movs	r0, #21
 8002a4c:	f000 fba3 	bl	8003196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	2016      	movs	r0, #22
 8002a56:	f000 fb84 	bl	8003162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002a5a:	2016      	movs	r0, #22
 8002a5c:	f000 fb9b 	bl	8003196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002a60:	e03d      	b.n	8002ade <HAL_FDCAN_MspInit+0x122>
  else if(hfdcan->Instance==FDCAN2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <HAL_FDCAN_MspInit+0x13c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d138      	bne.n	8002ade <HAL_FDCAN_MspInit+0x122>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <HAL_FDCAN_MspInit+0x130>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	4a1e      	ldr	r2, [pc, #120]	; (8002aec <HAL_FDCAN_MspInit+0x130>)
 8002a74:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_FDCAN_MspInit+0x130>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10b      	bne.n	8002a96 <HAL_FDCAN_MspInit+0xda>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 8002a84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a88:	6593      	str	r3, [r2, #88]	; 0x58
 8002a8a:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aa2:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_FDCAN_MspInit+0x134>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002aae:	2360      	movs	r3, #96	; 0x60
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002abe:	2309      	movs	r3, #9
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480c      	ldr	r0, [pc, #48]	; (8002afc <HAL_FDCAN_MspInit+0x140>)
 8002aca:	f001 fd95 	bl	80045f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2056      	movs	r0, #86	; 0x56
 8002ad4:	f000 fb45 	bl	8003162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002ad8:	2056      	movs	r0, #86	; 0x56
 8002ada:	f000 fb5c 	bl	8003196 <HAL_NVIC_EnableIRQ>
}
 8002ade:	bf00      	nop
 8002ae0:	3730      	adds	r7, #48	; 0x30
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40006400 	.word	0x40006400
 8002aec:	20000064 	.word	0x20000064
 8002af0:	40021000 	.word	0x40021000
 8002af4:	48000c00 	.word	0x48000c00
 8002af8:	40006800 	.word	0x40006800
 8002afc:	48000400 	.word	0x48000400

08002b00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <HAL_RTC_MspInit+0x3c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10f      	bne.n	8002b32 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RTC_MspInit+0x40>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <HAL_RTC_MspInit+0x40>)
 8002b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	2003      	movs	r0, #3
 8002b28:	f000 fb1b 	bl	8003162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002b2c:	2003      	movs	r0, #3
 8002b2e:	f000 fb32 	bl	8003196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40002800 	.word	0x40002800
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <HAL_SPI_MspInit+0x8c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d130      	bne.n	8002bc8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_SPI_MspInit+0x90>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	4a1a      	ldr	r2, [pc, #104]	; (8002bd4 <HAL_SPI_MspInit+0x90>)
 8002b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b70:	6593      	str	r3, [r2, #88]	; 0x58
 8002b72:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_SPI_MspInit+0x90>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <HAL_SPI_MspInit+0x90>)
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <HAL_SPI_MspInit+0x90>)
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_SPI_MspInit+0x90>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ba8:	2305      	movs	r3, #5
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4809      	ldr	r0, [pc, #36]	; (8002bd8 <HAL_SPI_MspInit+0x94>)
 8002bb4:	f001 fd20 	bl	80045f8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2101      	movs	r1, #1
 8002bbc:	2024      	movs	r0, #36	; 0x24
 8002bbe:	f000 fad0 	bl	8003162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002bc2:	2024      	movs	r0, #36	; 0x24
 8002bc4:	f000 fae7 	bl	8003196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002bc8:	bf00      	nop
 8002bca:	3728      	adds	r7, #40	; 0x28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40003800 	.word	0x40003800
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	48000400 	.word	0x48000400

08002bdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <HAL_TIM_PWM_MspInit+0x5c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10c      	bne.n	8002c08 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bee:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <HAL_TIM_PWM_MspInit+0x60>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <HAL_TIM_PWM_MspInit+0x60>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_TIM_PWM_MspInit+0x60>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c06:	e010      	b.n	8002c2a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <HAL_TIM_PWM_MspInit+0x64>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10b      	bne.n	8002c2a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_TIM_PWM_MspInit+0x60>)
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	4a09      	ldr	r2, [pc, #36]	; (8002c3c <HAL_TIM_PWM_MspInit+0x60>)
 8002c18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c1c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <HAL_TIM_PWM_MspInit+0x60>)
 8002c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40013400 	.word	0x40013400

08002c44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <HAL_TIM_Base_MspInit+0x44>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d113      	bne.n	8002c7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c56:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_TIM_Base_MspInit+0x48>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <HAL_TIM_Base_MspInit+0x48>)
 8002c5c:	f043 0310 	orr.w	r3, r3, #16
 8002c60:	6593      	str	r3, [r2, #88]	; 0x58
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_TIM_Base_MspInit+0x48>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2101      	movs	r1, #1
 8002c72:	2036      	movs	r0, #54	; 0x36
 8002c74:	f000 fa75 	bl	8003162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c78:	2036      	movs	r0, #54	; 0x36
 8002c7a:	f000 fa8c 	bl	8003196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40001000 	.word	0x40001000
 8002c8c:	40021000 	.word	0x40021000

08002c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <HAL_TIM_MspPostInit+0xa8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d11c      	bne.n	8002cec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_TIM_MspPostInit+0xac>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <HAL_TIM_MspPostInit+0xac>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <HAL_TIM_MspPostInit+0xac>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cca:	2340      	movs	r3, #64	; 0x40
 8002ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cde:	f107 0314 	add.w	r3, r7, #20
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4816      	ldr	r0, [pc, #88]	; (8002d40 <HAL_TIM_MspPostInit+0xb0>)
 8002ce6:	f001 fc87 	bl	80045f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002cea:	e020      	b.n	8002d2e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a14      	ldr	r2, [pc, #80]	; (8002d44 <HAL_TIM_MspPostInit+0xb4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d11b      	bne.n	8002d2e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <HAL_TIM_MspPostInit+0xac>)
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <HAL_TIM_MspPostInit+0xac>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d02:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_TIM_MspPostInit+0xac>)
 8002d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002d1e:	2304      	movs	r3, #4
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4619      	mov	r1, r3
 8002d28:	4805      	ldr	r0, [pc, #20]	; (8002d40 <HAL_TIM_MspPostInit+0xb0>)
 8002d2a:	f001 fc65 	bl	80045f8 <HAL_GPIO_Init>
}
 8002d2e:	bf00      	nop
 8002d30:	3728      	adds	r7, #40	; 0x28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	48000800 	.word	0x48000800
 8002d44:	40013400 	.word	0x40013400

08002d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <NMI_Handler+0x4>

08002d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d52:	e7fe      	b.n	8002d52 <HardFault_Handler+0x4>

08002d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <MemManage_Handler+0x4>

08002d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d5e:	e7fe      	b.n	8002d5e <BusFault_Handler+0x4>

08002d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <UsageFault_Handler+0x4>

08002d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d94:	f000 f8cc 	bl	8002f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <RTC_WKUP_IRQHandler+0x10>)
 8002da2:	f003 f81f 	bl	8005de4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200005ac 	.word	0x200005ac

08002db0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <FDCAN1_IT0_IRQHandler+0x10>)
 8002db6:	f000 fef1 	bl	8003b9c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000294 	.word	0x20000294

08002dc4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <FDCAN1_IT1_IRQHandler+0x10>)
 8002dca:	f000 fee7 	bl	8003b9c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000294 	.word	0x20000294

08002dd8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <SPI2_IRQHandler+0x10>)
 8002dde:	f003 fae9 	bl	80063b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000488 	.word	0x20000488

08002dec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <TIM6_DAC_IRQHandler+0x10>)
 8002df2:	f003 fe86 	bl	8006b02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200005d4 	.word	0x200005d4

08002e00 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <FDCAN2_IT0_IRQHandler+0x10>)
 8002e06:	f000 fec9 	bl	8003b9c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000400 	.word	0x20000400

08002e14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <SystemInit+0x20>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <SystemInit+0x20>)
 8002e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e38:	480d      	ldr	r0, [pc, #52]	; (8002e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e3c:	480d      	ldr	r0, [pc, #52]	; (8002e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e3e:	490e      	ldr	r1, [pc, #56]	; (8002e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e40:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <LoopForever+0xe>)
  movs r3, #0
 8002e42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e44:	e002      	b.n	8002e4c <LoopCopyDataInit>

08002e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4a:	3304      	adds	r3, #4

08002e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e50:	d3f9      	bcc.n	8002e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e52:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e54:	4c0b      	ldr	r4, [pc, #44]	; (8002e84 <LoopForever+0x16>)
  movs r3, #0
 8002e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e58:	e001      	b.n	8002e5e <LoopFillZerobss>

08002e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e5c:	3204      	adds	r2, #4

08002e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e60:	d3fb      	bcc.n	8002e5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e62:	f7ff ffd7 	bl	8002e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e66:	f004 fe63 	bl	8007b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e6a:	f7fe ff77 	bl	8001d5c <main>

08002e6e <LoopForever>:

LoopForever:
    b LoopForever
 8002e6e:	e7fe      	b.n	8002e6e <LoopForever>
  ldr   r0, =_estack
 8002e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e78:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002e7c:	08007bc8 	.word	0x08007bc8
  ldr r2, =_sbss
 8002e80:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8002e84:	20000644 	.word	0x20000644

08002e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e88:	e7fe      	b.n	8002e88 <ADC1_2_IRQHandler>

08002e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e94:	2003      	movs	r0, #3
 8002e96:	f000 f959 	bl	800314c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f000 f80e 	bl	8002ebc <HAL_InitTick>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	71fb      	strb	r3, [r7, #7]
 8002eaa:	e001      	b.n	8002eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002eac:	f7ff fd62 	bl	8002974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eb0:	79fb      	ldrb	r3, [r7, #7]

}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <HAL_InitTick+0x68>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d022      	beq.n	8002f16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002ed0:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_InitTick+0x6c>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_InitTick+0x68>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 f964 	bl	80031b2 <HAL_SYSTICK_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10f      	bne.n	8002f10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b0f      	cmp	r3, #15
 8002ef4:	d809      	bhi.n	8002f0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	f04f 30ff 	mov.w	r0, #4294967295
 8002efe:	f000 f930 	bl	8003162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_InitTick+0x70>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	e007      	b.n	8002f1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e004      	b.n	8002f1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	e001      	b.n	8002f1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000008 	.word	0x20000008
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000004 	.word	0x20000004

08002f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_IncTick+0x1c>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_IncTick+0x20>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	4a03      	ldr	r2, [pc, #12]	; (8002f4c <HAL_IncTick+0x1c>)
 8002f40:	6013      	str	r3, [r2, #0]
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	20000640 	.word	0x20000640
 8002f50:	20000008 	.word	0x20000008

08002f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return uwTick;
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_GetTick+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000640 	.word	0x20000640

08002f6c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_SuspendTick+0x1c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_SuspendTick+0x1c>)
 8002f76:	f023 0302 	bic.w	r3, r3, #2
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e010 	.word	0xe000e010

08002f8c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_ResumeTick+0x1c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <HAL_ResumeTick+0x1c>)
 8002f96:	f043 0302 	orr.w	r3, r3, #2
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e010 	.word	0xe000e010

08002fac <__NVIC_SetPriorityGrouping>:
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	60d3      	str	r3, [r2, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_GetPriorityGrouping>:
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__NVIC_GetPriorityGrouping+0x18>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 0307 	and.w	r3, r3, #7
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_EnableIRQ>:
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	db0b      	blt.n	800303a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f003 021f 	and.w	r2, r3, #31
 8003028:	4907      	ldr	r1, [pc, #28]	; (8003048 <__NVIC_EnableIRQ+0x38>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2001      	movs	r0, #1
 8003032:	fa00 f202 	lsl.w	r2, r0, r2
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000e100 	.word	0xe000e100

0800304c <__NVIC_SetPriority>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	6039      	str	r1, [r7, #0]
 8003056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db0a      	blt.n	8003076 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	490c      	ldr	r1, [pc, #48]	; (8003098 <__NVIC_SetPriority+0x4c>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	0112      	lsls	r2, r2, #4
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	440b      	add	r3, r1
 8003070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003074:	e00a      	b.n	800308c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4908      	ldr	r1, [pc, #32]	; (800309c <__NVIC_SetPriority+0x50>)
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	3b04      	subs	r3, #4
 8003084:	0112      	lsls	r2, r2, #4
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	440b      	add	r3, r1
 800308a:	761a      	strb	r2, [r3, #24]
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000e100 	.word	0xe000e100
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <NVIC_EncodePriority>:
{
 80030a0:	b480      	push	{r7}
 80030a2:	b089      	sub	sp, #36	; 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f1c3 0307 	rsb	r3, r3, #7
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	bf28      	it	cs
 80030be:	2304      	movcs	r3, #4
 80030c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3304      	adds	r3, #4
 80030c6:	2b06      	cmp	r3, #6
 80030c8:	d902      	bls.n	80030d0 <NVIC_EncodePriority+0x30>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3b03      	subs	r3, #3
 80030ce:	e000      	b.n	80030d2 <NVIC_EncodePriority+0x32>
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	401a      	ands	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	43d9      	mvns	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	4313      	orrs	r3, r2
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003118:	d301      	bcc.n	800311e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800311a:	2301      	movs	r3, #1
 800311c:	e00f      	b.n	800313e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800311e:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <SysTick_Config+0x40>)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3b01      	subs	r3, #1
 8003124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003126:	210f      	movs	r1, #15
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	f7ff ff8e 	bl	800304c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <SysTick_Config+0x40>)
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003136:	4b04      	ldr	r3, [pc, #16]	; (8003148 <SysTick_Config+0x40>)
 8003138:	2207      	movs	r2, #7
 800313a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	e000e010 	.word	0xe000e010

0800314c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ff29 	bl	8002fac <__NVIC_SetPriorityGrouping>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003170:	f7ff ff40 	bl	8002ff4 <__NVIC_GetPriorityGrouping>
 8003174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	f7ff ff90 	bl	80030a0 <NVIC_EncodePriority>
 8003180:	4602      	mov	r2, r0
 8003182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff5f 	bl	800304c <__NVIC_SetPriority>
}
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff33 	bl	8003010 <__NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ffa4 	bl	8003108 <SysTick_Config>
 80031c0:	4603      	mov	r3, r0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d00d      	beq.n	80031fe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2204      	movs	r2, #4
 80031e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	e047      	b.n	800328e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 020e 	bic.w	r2, r2, #14
 800320c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800322c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f003 021f 	and.w	r2, r3, #31
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2101      	movs	r1, #1
 800323c:	fa01 f202 	lsl.w	r2, r1, r2
 8003240:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800324a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00c      	beq.n	800326e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003262:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800326c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	4798      	blx	r3
    }
  }
  return status;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e147      	b.n	800353a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fb7c 	bl	80029bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0210 	bic.w	r2, r2, #16
 80032d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d4:	f7ff fe3e 	bl	8002f54 <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80032da:	e012      	b.n	8003302 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80032dc:	f7ff fe3a 	bl	8002f54 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b0a      	cmp	r3, #10
 80032e8:	d90b      	bls.n	8003302 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2203      	movs	r2, #3
 80032fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e11b      	b.n	800353a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b08      	cmp	r3, #8
 800330e:	d0e5      	beq.n	80032dc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003320:	f7ff fe18 	bl	8002f54 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003326:	e012      	b.n	800334e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003328:	f7ff fe14 	bl	8002f54 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b0a      	cmp	r3, #10
 8003334:	d90b      	bls.n	800334e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2203      	movs	r2, #3
 8003346:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0f5      	b.n	800353a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0e5      	beq.n	8003328 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0202 	orr.w	r2, r2, #2
 800336a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a74      	ldr	r2, [pc, #464]	; (8003544 <HAL_FDCAN_Init+0x2ac>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d103      	bne.n	800337e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003376:	4a74      	ldr	r2, [pc, #464]	; (8003548 <HAL_FDCAN_Init+0x2b0>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7c1b      	ldrb	r3, [r3, #16]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d108      	bne.n	8003398 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003394:	619a      	str	r2, [r3, #24]
 8003396:	e007      	b.n	80033a8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7c5b      	ldrb	r3, [r3, #17]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d108      	bne.n	80033c2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033be:	619a      	str	r2, [r3, #24]
 80033c0:	e007      	b.n	80033d2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699a      	ldr	r2, [r3, #24]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7c9b      	ldrb	r3, [r3, #18]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d108      	bne.n	80033ec <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699a      	ldr	r2, [r3, #24]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033e8:	619a      	str	r2, [r3, #24]
 80033ea:	e007      	b.n	80033fc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033fa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003420:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0210 	bic.w	r2, r2, #16
 8003430:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699a      	ldr	r2, [r3, #24]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0204 	orr.w	r2, r2, #4
 8003448:	619a      	str	r2, [r3, #24]
 800344a:	e02c      	b.n	80034a6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d028      	beq.n	80034a6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d01c      	beq.n	8003496 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800346a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0210 	orr.w	r2, r2, #16
 800347a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b03      	cmp	r3, #3
 8003482:	d110      	bne.n	80034a6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0220 	orr.w	r2, r2, #32
 8003492:	619a      	str	r2, [r3, #24]
 8003494:	e007      	b.n	80034a6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0220 	orr.w	r2, r2, #32
 80034a4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034b6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80034be:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80034ce:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034d0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034da:	d115      	bne.n	8003508 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	3b01      	subs	r3, #1
 80034e8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80034ea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	3b01      	subs	r3, #1
 80034f2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80034f4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	3b01      	subs	r3, #1
 80034fe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003504:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003506:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fcde 	bl	8003ee0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40006400 	.word	0x40006400
 8003548:	40006500 	.word	0x40006500

0800354c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800355c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800355e:	7dfb      	ldrb	r3, [r7, #23]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d002      	beq.n	800356a <HAL_FDCAN_ConfigFilter+0x1e>
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d13d      	bne.n	80035e6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d119      	bne.n	80035a6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800357e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003586:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e01d      	b.n	80035e2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	075a      	lsls	r2, r3, #29
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	079a      	lsls	r2, r3, #30
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	3304      	adds	r3, #4
 80035da:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e006      	b.n	80035f4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ea:	f043 0202 	orr.w	r2, r3, #2
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
  }
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d116      	bne.n	8003648 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003622:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	011a      	lsls	r2, r3, #4
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	431a      	orrs	r2, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	431a      	orrs	r2, r3
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	431a      	orrs	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e006      	b.n	8003656 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d110      	bne.n	8003698 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e006      	b.n	80036a6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369c:	f043 0204 	orr.w	r2, r3, #4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d156      	bne.n	8003778 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699a      	ldr	r2, [r3, #24]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80036da:	e011      	b.n	8003700 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b0a      	cmp	r3, #10
 80036e0:	d90b      	bls.n	80036fa <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2203      	movs	r2, #3
 80036f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e045      	b.n	8003786 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3301      	adds	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0e6      	beq.n	80036dc <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699a      	ldr	r2, [r3, #24]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0210 	bic.w	r2, r2, #16
 8003720:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003722:	e011      	b.n	8003748 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b0a      	cmp	r3, #10
 8003728:	d90b      	bls.n	8003742 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372e:	f043 0201 	orr.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2203      	movs	r2, #3
 800373a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e021      	b.n	8003786 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	3301      	adds	r3, #1
 8003746:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b08      	cmp	r3, #8
 8003754:	d0e6      	beq.n	8003724 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0202 	orr.w	r2, r2, #2
 8003764:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	e006      	b.n	8003786 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377c:	f043 0208 	orr.w	r2, r3, #8
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
  }
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d12c      	bne.n	8003804 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80037b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e023      	b.n	8003812 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80037d2:	0c1b      	lsrs	r3, r3, #16
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fbe9 	bl	8003fb8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2101      	movs	r1, #1
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	fa01 f202 	lsl.w	r2, r1, r2
 80037f2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80037f6:	2201      	movs	r2, #1
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	409a      	lsls	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e006      	b.n	8003812 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003808:	f043 0208 	orr.w	r2, r3, #8
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800381c:	b480      	push	{r7}
 800381e:	b08b      	sub	sp, #44	; 0x2c
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003830:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003832:	7efb      	ldrb	r3, [r7, #27]
 8003834:	2b02      	cmp	r3, #2
 8003836:	f040 80bc 	bne.w	80039b2 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d121      	bne.n	8003884 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003854:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0af      	b.n	80039c0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	440b      	add	r3, r1
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	e020      	b.n	80038c6 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	2b00      	cmp	r3, #0
 8003892:	d107      	bne.n	80038a4 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e08d      	b.n	80039c0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	4613      	mov	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d107      	bne.n	80038ea <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	0c9b      	lsrs	r3, r3, #18
 80038e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e005      	b.n	80038f6 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	3304      	adds	r3, #4
 8003912:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	b29a      	uxth	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	0e1b      	lsrs	r3, r3, #24
 8003948:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	0fda      	lsrs	r2, r3, #31
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	3304      	adds	r3, #4
 800395e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003964:	2300      	movs	r3, #0
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	e00a      	b.n	8003980 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	441a      	add	r2, r3
 8003970:	6839      	ldr	r1, [r7, #0]
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	440b      	add	r3, r1
 8003976:	7812      	ldrb	r2, [r2, #0]
 8003978:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	3301      	adds	r3, #1
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	4a11      	ldr	r2, [pc, #68]	; (80039cc <HAL_FDCAN_GetRxMessage+0x1b0>)
 8003988:	5cd3      	ldrb	r3, [r2, r3]
 800398a:	461a      	mov	r2, r3
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	4293      	cmp	r3, r2
 8003990:	d3eb      	bcc.n	800396a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d105      	bne.n	80039a4 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80039a2:	e004      	b.n	80039ae <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e006      	b.n	80039c0 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	f043 0208 	orr.w	r2, r3, #8
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
  }
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	372c      	adds	r7, #44	; 0x2c
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	08007bb0 	.word	0x08007bb0

080039d0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039e2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d003      	beq.n	80039f2 <HAL_FDCAN_ActivateNotification+0x22>
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	f040 80c8 	bne.w	8003b82 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d03b      	beq.n	8003a86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d031      	beq.n	8003a86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d027      	beq.n	8003a86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01d      	beq.n	8003a86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d004      	beq.n	8003a5e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d013      	beq.n	8003a86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00c      	beq.n	8003a96 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d107      	bne.n	8003a96 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d13b      	bne.n	8003b22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d131      	bne.n	8003b22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d127      	bne.n	8003b22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d11d      	bne.n	8003b22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d113      	bne.n	8003b22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00c      	beq.n	8003b32 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0202 	orr.w	r2, r2, #2
 8003b30:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d009      	beq.n	8003b50 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e006      	b.n	8003b90 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b86:	f043 0202 	orr.w	r2, r3, #2
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
  }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb8:	4013      	ands	r3, r2
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	6a3a      	ldr	r2, [r7, #32]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bde:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	4013      	ands	r3, r2
 8003bea:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf2:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8003bf6:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c0e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2240      	movs	r2, #64	; 0x40
 8003c3e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f92e 	bl	8003ea2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01b      	beq.n	8003c8c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d014      	beq.n	8003c8c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c6a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c82:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003c84:	6939      	ldr	r1, [r7, #16]
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8ec 	bl	8003e64 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c98:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f8b6 	bl	8003e0e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003cb0:	6a39      	ldr	r1, [r7, #32]
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fc fbac 	bl	8000410 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003cc6:	69f9      	ldr	r1, [r7, #28]
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f8ab 	bl	8003e24 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00e      	beq.n	8003cfa <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8a0 	bl	8003e3a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01a      	beq.n	8003d3e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003d1e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f888 	bl	8003e4e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00e      	beq.n	8003d6a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d62:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f888 	bl	8003e7a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00e      	beq.n	8003d96 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d007      	beq.n	8003d96 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d8e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f87c 	bl	8003e8e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d011      	beq.n	8003dc8 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003dd6:	6979      	ldr	r1, [r7, #20]
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f876 	bl	8003eca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f858 	bl	8003eb6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003e06:	bf00      	nop
 8003e08:	3728      	adds	r7, #40	; 0x28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003eea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d103      	bne.n	8003efe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003efc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2c      	ldr	r2, [pc, #176]	; (8003fb4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d103      	bne.n	8003f10 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8003f0e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f26:	041a      	lsls	r2, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f44:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	061a      	lsls	r2, r3, #24
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e005      	b.n	8003f92 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d3f3      	bcc.n	8003f86 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	4000a400 	.word	0x4000a400
 8003fb0:	40006800 	.word	0x40006800
 8003fb4:	40006c00 	.word	0x40006c00

08003fb8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	; 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003fd6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e00a      	b.n	8003ffa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003fec:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003ff2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003ff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ff8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004004:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800400a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004010:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	440b      	add	r3, r1
 800402a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	3304      	adds	r3, #4
 8004036:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	3304      	adds	r3, #4
 8004042:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e020      	b.n	800408c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	3303      	adds	r3, #3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	3302      	adds	r3, #2
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	440b      	add	r3, r1
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004062:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3301      	adds	r3, #1
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	440b      	add	r3, r1
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004070:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	440a      	add	r2, r1
 8004078:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800407a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	3304      	adds	r3, #4
 8004084:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	3304      	adds	r3, #4
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	4a06      	ldr	r2, [pc, #24]	; (80040ac <FDCAN_CopyMessageToRAM+0xf4>)
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	461a      	mov	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	4293      	cmp	r3, r2
 800409c:	d3d5      	bcc.n	800404a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800409e:	bf00      	nop
 80040a0:	bf00      	nop
 80040a2:	3724      	adds	r7, #36	; 0x24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	08007bb0 	.word	0x08007bb0

080040b0 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80040c2:	4b24      	ldr	r3, [pc, #144]	; (8004154 <HAL_FLASH_Program+0xa4>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_FLASH_Program+0x1e>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e03e      	b.n	800414c <HAL_FLASH_Program+0x9c>
 80040ce:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_FLASH_Program+0xa4>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040d8:	f000 f87c 	bl	80041d4 <FLASH_WaitForLastOperation>
 80040dc:	4603      	mov	r3, r0
 80040de:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d12e      	bne.n	8004144 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040e6:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_FLASH_Program+0xa4>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80040f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f6:	68b8      	ldr	r0, [r7, #8]
 80040f8:	f000 f8c0 	bl	800427c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80040fc:	2301      	movs	r3, #1
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	e010      	b.n	8004124 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d002      	beq.n	800410e <HAL_FLASH_Program+0x5e>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d10a      	bne.n	8004124 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	4619      	mov	r1, r3
 8004112:	68b8      	ldr	r0, [r7, #8]
 8004114:	f000 f8d8 	bl	80042c8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d102      	bne.n	8004124 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 800411e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004122:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004128:	f000 f854 	bl	80041d4 <FLASH_WaitForLastOperation>
 800412c:	4603      	mov	r3, r0
 800412e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d006      	beq.n	8004144 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <HAL_FLASH_Program+0xa8>)
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	43db      	mvns	r3, r3
 800413e:	4906      	ldr	r1, [pc, #24]	; (8004158 <HAL_FLASH_Program+0xa8>)
 8004140:	4013      	ands	r3, r2
 8004142:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_FLASH_Program+0xa4>)
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800414a:	7dfb      	ldrb	r3, [r7, #23]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	2000000c 	.word	0x2000000c
 8004158:	40022000 	.word	0x40022000

0800415c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_FLASH_Unlock+0x38>)
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	da0b      	bge.n	8004186 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_FLASH_Unlock+0x38>)
 8004170:	4a09      	ldr	r2, [pc, #36]	; (8004198 <HAL_FLASH_Unlock+0x3c>)
 8004172:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004174:	4b07      	ldr	r3, [pc, #28]	; (8004194 <HAL_FLASH_Unlock+0x38>)
 8004176:	4a09      	ldr	r2, [pc, #36]	; (800419c <HAL_FLASH_Unlock+0x40>)
 8004178:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_FLASH_Unlock+0x38>)
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	da01      	bge.n	8004186 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004186:	79fb      	ldrb	r3, [r7, #7]
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40022000 	.word	0x40022000
 8004198:	45670123 	.word	0x45670123
 800419c:	cdef89ab 	.word	0xcdef89ab

080041a0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_FLASH_Lock+0x30>)
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4a08      	ldr	r2, [pc, #32]	; (80041d0 <HAL_FLASH_Lock+0x30>)
 80041b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041b4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_FLASH_Lock+0x30>)
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	da01      	bge.n	80041c2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80041c2:	79fb      	ldrb	r3, [r7, #7]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40022000 	.word	0x40022000

080041d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80041dc:	f7fe feba 	bl	8002f54 <HAL_GetTick>
 80041e0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80041e2:	e009      	b.n	80041f8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80041e4:	f7fe feb6 	bl	8002f54 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d201      	bcs.n	80041f8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e038      	b.n	800426a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80041f8:	4b1e      	ldr	r3, [pc, #120]	; (8004274 <FLASH_WaitForLastOperation+0xa0>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d0ee      	beq.n	80041e4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004206:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <FLASH_WaitForLastOperation+0xa0>)
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800420e:	4013      	ands	r3, r2
 8004210:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01e      	beq.n	8004256 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <FLASH_WaitForLastOperation+0xa4>)
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4313      	orrs	r3, r2
 8004220:	4a15      	ldr	r2, [pc, #84]	; (8004278 <FLASH_WaitForLastOperation+0xa4>)
 8004222:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <FLASH_WaitForLastOperation+0x6a>
 800422e:	4b11      	ldr	r3, [pc, #68]	; (8004274 <FLASH_WaitForLastOperation+0xa0>)
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004238:	490e      	ldr	r1, [pc, #56]	; (8004274 <FLASH_WaitForLastOperation+0xa0>)
 800423a:	4313      	orrs	r3, r2
 800423c:	618b      	str	r3, [r1, #24]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d004      	beq.n	8004252 <FLASH_WaitForLastOperation+0x7e>
 8004248:	4a0a      	ldr	r2, [pc, #40]	; (8004274 <FLASH_WaitForLastOperation+0xa0>)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004250:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e009      	b.n	800426a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <FLASH_WaitForLastOperation+0xa0>)
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d102      	bne.n	8004268 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004262:	4b04      	ldr	r3, [pc, #16]	; (8004274 <FLASH_WaitForLastOperation+0xa0>)
 8004264:	2201      	movs	r2, #1
 8004266:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40022000 	.word	0x40022000
 8004278:	2000000c 	.word	0x2000000c

0800427c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004288:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <FLASH_Program_DoubleWord+0x48>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	4a0d      	ldr	r2, [pc, #52]	; (80042c4 <FLASH_Program_DoubleWord+0x48>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800429a:	f3bf 8f6f 	isb	sy
}
 800429e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80042a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	000a      	movs	r2, r1
 80042ae:	2300      	movs	r3, #0
 80042b0:	68f9      	ldr	r1, [r7, #12]
 80042b2:	3104      	adds	r1, #4
 80042b4:	4613      	mov	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40022000 	.word	0x40022000

080042c8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b089      	sub	sp, #36	; 0x24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80042d2:	2340      	movs	r3, #64	; 0x40
 80042d4:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80042de:	4b14      	ldr	r3, [pc, #80]	; (8004330 <FLASH_Program_Fast+0x68>)
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	4a13      	ldr	r2, [pc, #76]	; (8004330 <FLASH_Program_Fast+0x68>)
 80042e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ea:	f3ef 8310 	mrs	r3, PRIMASK
 80042ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80042f0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80042f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80042f4:	b672      	cpsid	i
}
 80042f6:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	3304      	adds	r3, #4
 8004304:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3304      	adds	r3, #4
 800430a:	617b      	str	r3, [r7, #20]
    row_index--;
 800430c:	7ffb      	ldrb	r3, [r7, #31]
 800430e:	3b01      	subs	r3, #1
 8004310:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004312:	7ffb      	ldrb	r3, [r7, #31]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ef      	bne.n	80042f8 <FLASH_Program_Fast+0x30>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f383 8810 	msr	PRIMASK, r3
}
 8004322:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004324:	bf00      	nop
 8004326:	3724      	adds	r7, #36	; 0x24
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	40022000 	.word	0x40022000

08004334 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800433e:	4b4c      	ldr	r3, [pc, #304]	; (8004470 <HAL_FLASHEx_Erase+0x13c>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_FLASHEx_Erase+0x16>
 8004346:	2302      	movs	r3, #2
 8004348:	e08d      	b.n	8004466 <HAL_FLASHEx_Erase+0x132>
 800434a:	4b49      	ldr	r3, [pc, #292]	; (8004470 <HAL_FLASHEx_Erase+0x13c>)
 800434c:	2201      	movs	r2, #1
 800434e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004354:	f7ff ff3e 	bl	80041d4 <FLASH_WaitForLastOperation>
 8004358:	4603      	mov	r3, r0
 800435a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d17d      	bne.n	800445e <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004362:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_FLASHEx_Erase+0x13c>)
 8004364:	2200      	movs	r2, #0
 8004366:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004368:	4b42      	ldr	r3, [pc, #264]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004370:	2b00      	cmp	r3, #0
 8004372:	d019      	beq.n	80043a8 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004374:	4b3f      	ldr	r3, [pc, #252]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a3e      	ldr	r2, [pc, #248]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 800437a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800437e:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004380:	4b3c      	ldr	r3, [pc, #240]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004388:	2b00      	cmp	r3, #0
 800438a:	d009      	beq.n	80043a0 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800438c:	4b39      	ldr	r3, [pc, #228]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a38      	ldr	r2, [pc, #224]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 8004392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004396:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004398:	4b35      	ldr	r3, [pc, #212]	; (8004470 <HAL_FLASHEx_Erase+0x13c>)
 800439a:	2203      	movs	r2, #3
 800439c:	771a      	strb	r2, [r3, #28]
 800439e:	e016      	b.n	80043ce <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80043a0:	4b33      	ldr	r3, [pc, #204]	; (8004470 <HAL_FLASHEx_Erase+0x13c>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	771a      	strb	r2, [r3, #28]
 80043a6:	e012      	b.n	80043ce <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80043a8:	4b32      	ldr	r3, [pc, #200]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80043b4:	4b2f      	ldr	r3, [pc, #188]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a2e      	ldr	r2, [pc, #184]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 80043ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043be:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <HAL_FLASHEx_Erase+0x13c>)
 80043c2:	2202      	movs	r2, #2
 80043c4:	771a      	strb	r2, [r3, #28]
 80043c6:	e002      	b.n	80043ce <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80043c8:	4b29      	ldr	r3, [pc, #164]	; (8004470 <HAL_FLASHEx_Erase+0x13c>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d113      	bne.n	80043fe <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f84c 	bl	8004478 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043e4:	f7ff fef6 	bl	80041d4 <FLASH_WaitForLastOperation>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80043ec:	4b21      	ldr	r3, [pc, #132]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	4a20      	ldr	r2, [pc, #128]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 80043f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043f6:	f023 0304 	bic.w	r3, r3, #4
 80043fa:	6153      	str	r3, [r2, #20]
 80043fc:	e02d      	b.n	800445a <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f04f 32ff 	mov.w	r2, #4294967295
 8004404:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	e01d      	b.n	800444a <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4619      	mov	r1, r3
 8004414:	68b8      	ldr	r0, [r7, #8]
 8004416:	f000 f867 	bl	80044e8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800441a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800441e:	f7ff fed9 	bl	80041d4 <FLASH_WaitForLastOperation>
 8004422:	4603      	mov	r3, r0
 8004424:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004426:	4b13      	ldr	r3, [pc, #76]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <HAL_FLASHEx_Erase+0x140>)
 800442c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004430:	f023 0302 	bic.w	r3, r3, #2
 8004434:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	601a      	str	r2, [r3, #0]
          break;
 8004442:	e00a      	b.n	800445a <HAL_FLASHEx_Erase+0x126>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	3301      	adds	r3, #1
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	4413      	add	r3, r2
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	429a      	cmp	r2, r3
 8004458:	d3d9      	bcc.n	800440e <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800445a:	f000 f889 	bl	8004570 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800445e:	4b04      	ldr	r3, [pc, #16]	; (8004470 <HAL_FLASHEx_Erase+0x13c>)
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]

  return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	2000000c 	.word	0x2000000c
 8004474:	40022000 	.word	0x40022000

08004478 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <FLASH_MassErase+0x6c>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d016      	beq.n	80044ba <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8004496:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <FLASH_MassErase+0x6c>)
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <FLASH_MassErase+0x6c>)
 800449c:	f043 0304 	orr.w	r3, r3, #4
 80044a0:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00e      	beq.n	80044ca <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80044ac:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <FLASH_MassErase+0x6c>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	4a0c      	ldr	r2, [pc, #48]	; (80044e4 <FLASH_MassErase+0x6c>)
 80044b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b6:	6153      	str	r3, [r2, #20]
 80044b8:	e007      	b.n	80044ca <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <FLASH_MassErase+0x6c>)
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <FLASH_MassErase+0x6c>)
 80044c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <FLASH_MassErase+0x6c>)
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <FLASH_MassErase+0x6c>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d4:	6153      	str	r3, [r2, #20]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40022000 	.word	0x40022000

080044e8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80044f2:	4b1e      	ldr	r3, [pc, #120]	; (800456c <FLASH_PageErase+0x84>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80044fe:	4b1b      	ldr	r3, [pc, #108]	; (800456c <FLASH_PageErase+0x84>)
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	4a1a      	ldr	r2, [pc, #104]	; (800456c <FLASH_PageErase+0x84>)
 8004504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004508:	6153      	str	r3, [r2, #20]
 800450a:	e011      	b.n	8004530 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d006      	beq.n	8004524 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <FLASH_PageErase+0x84>)
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4a14      	ldr	r2, [pc, #80]	; (800456c <FLASH_PageErase+0x84>)
 800451c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004520:	6153      	str	r3, [r2, #20]
 8004522:	e005      	b.n	8004530 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8004524:	4b11      	ldr	r3, [pc, #68]	; (800456c <FLASH_PageErase+0x84>)
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	4a10      	ldr	r2, [pc, #64]	; (800456c <FLASH_PageErase+0x84>)
 800452a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800452e:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004530:	4b0e      	ldr	r3, [pc, #56]	; (800456c <FLASH_PageErase+0x84>)
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004540:	490a      	ldr	r1, [pc, #40]	; (800456c <FLASH_PageErase+0x84>)
 8004542:	4313      	orrs	r3, r2
 8004544:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <FLASH_PageErase+0x84>)
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	4a08      	ldr	r2, [pc, #32]	; (800456c <FLASH_PageErase+0x84>)
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <FLASH_PageErase+0x84>)
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	4a05      	ldr	r2, [pc, #20]	; (800456c <FLASH_PageErase+0x84>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	6153      	str	r3, [r2, #20]
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40022000 	.word	0x40022000

08004570 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004576:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <FLASH_FlushCaches+0x80>)
 8004578:	7f1b      	ldrb	r3, [r3, #28]
 800457a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d002      	beq.n	8004588 <FLASH_FlushCaches+0x18>
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d111      	bne.n	80045ac <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <FLASH_FlushCaches+0x84>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <FLASH_FlushCaches+0x84>)
 800458e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <FLASH_FlushCaches+0x84>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a16      	ldr	r2, [pc, #88]	; (80045f4 <FLASH_FlushCaches+0x84>)
 800459a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800459e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045a0:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <FLASH_FlushCaches+0x84>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <FLASH_FlushCaches+0x84>)
 80045a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045aa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d002      	beq.n	80045b8 <FLASH_FlushCaches+0x48>
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d111      	bne.n	80045dc <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80045b8:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <FLASH_FlushCaches+0x84>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a0d      	ldr	r2, [pc, #52]	; (80045f4 <FLASH_FlushCaches+0x84>)
 80045be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <FLASH_FlushCaches+0x84>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <FLASH_FlushCaches+0x84>)
 80045ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045ce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80045d0:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <FLASH_FlushCaches+0x84>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a07      	ldr	r2, [pc, #28]	; (80045f4 <FLASH_FlushCaches+0x84>)
 80045d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045da:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <FLASH_FlushCaches+0x80>)
 80045de:	2200      	movs	r2, #0
 80045e0:	771a      	strb	r2, [r3, #28]
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	2000000c 	.word	0x2000000c
 80045f4:	40022000 	.word	0x40022000

080045f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004606:	e15a      	b.n	80048be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	2101      	movs	r1, #1
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	4013      	ands	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 814c 	beq.w	80048b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d00b      	beq.n	8004640 <HAL_GPIO_Init+0x48>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d007      	beq.n	8004640 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004634:	2b11      	cmp	r3, #17
 8004636:	d003      	beq.n	8004640 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b12      	cmp	r3, #18
 800463e:	d130      	bne.n	80046a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	2203      	movs	r2, #3
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4013      	ands	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004676:	2201      	movs	r2, #1
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4013      	ands	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f003 0201 	and.w	r2, r3, #1
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	2203      	movs	r2, #3
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43db      	mvns	r3, r3
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4013      	ands	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_Init+0xea>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b12      	cmp	r3, #18
 80046e0:	d123      	bne.n	800472a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	08da      	lsrs	r2, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3208      	adds	r2, #8
 80046ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	220f      	movs	r2, #15
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43db      	mvns	r3, r3
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4013      	ands	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	08da      	lsrs	r2, r3, #3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3208      	adds	r2, #8
 8004724:	6939      	ldr	r1, [r7, #16]
 8004726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 0203 	and.w	r2, r3, #3
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80a6 	beq.w	80048b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800476c:	4b5b      	ldr	r3, [pc, #364]	; (80048dc <HAL_GPIO_Init+0x2e4>)
 800476e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004770:	4a5a      	ldr	r2, [pc, #360]	; (80048dc <HAL_GPIO_Init+0x2e4>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6613      	str	r3, [r2, #96]	; 0x60
 8004778:	4b58      	ldr	r3, [pc, #352]	; (80048dc <HAL_GPIO_Init+0x2e4>)
 800477a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004784:	4a56      	ldr	r2, [pc, #344]	; (80048e0 <HAL_GPIO_Init+0x2e8>)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	089b      	lsrs	r3, r3, #2
 800478a:	3302      	adds	r3, #2
 800478c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004790:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	220f      	movs	r2, #15
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4013      	ands	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047ae:	d01f      	beq.n	80047f0 <HAL_GPIO_Init+0x1f8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a4c      	ldr	r2, [pc, #304]	; (80048e4 <HAL_GPIO_Init+0x2ec>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d019      	beq.n	80047ec <HAL_GPIO_Init+0x1f4>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a4b      	ldr	r2, [pc, #300]	; (80048e8 <HAL_GPIO_Init+0x2f0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <HAL_GPIO_Init+0x1f0>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a4a      	ldr	r2, [pc, #296]	; (80048ec <HAL_GPIO_Init+0x2f4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00d      	beq.n	80047e4 <HAL_GPIO_Init+0x1ec>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a49      	ldr	r2, [pc, #292]	; (80048f0 <HAL_GPIO_Init+0x2f8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d007      	beq.n	80047e0 <HAL_GPIO_Init+0x1e8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a48      	ldr	r2, [pc, #288]	; (80048f4 <HAL_GPIO_Init+0x2fc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <HAL_GPIO_Init+0x1e4>
 80047d8:	2305      	movs	r3, #5
 80047da:	e00a      	b.n	80047f2 <HAL_GPIO_Init+0x1fa>
 80047dc:	2306      	movs	r3, #6
 80047de:	e008      	b.n	80047f2 <HAL_GPIO_Init+0x1fa>
 80047e0:	2304      	movs	r3, #4
 80047e2:	e006      	b.n	80047f2 <HAL_GPIO_Init+0x1fa>
 80047e4:	2303      	movs	r3, #3
 80047e6:	e004      	b.n	80047f2 <HAL_GPIO_Init+0x1fa>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e002      	b.n	80047f2 <HAL_GPIO_Init+0x1fa>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <HAL_GPIO_Init+0x1fa>
 80047f0:	2300      	movs	r3, #0
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	f002 0203 	and.w	r2, r2, #3
 80047f8:	0092      	lsls	r2, r2, #2
 80047fa:	4093      	lsls	r3, r2
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004802:	4937      	ldr	r1, [pc, #220]	; (80048e0 <HAL_GPIO_Init+0x2e8>)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	089b      	lsrs	r3, r3, #2
 8004808:	3302      	adds	r3, #2
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004810:	4b39      	ldr	r3, [pc, #228]	; (80048f8 <HAL_GPIO_Init+0x300>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	43db      	mvns	r3, r3
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4013      	ands	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004834:	4a30      	ldr	r2, [pc, #192]	; (80048f8 <HAL_GPIO_Init+0x300>)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800483a:	4b2f      	ldr	r3, [pc, #188]	; (80048f8 <HAL_GPIO_Init+0x300>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	43db      	mvns	r3, r3
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800485e:	4a26      	ldr	r2, [pc, #152]	; (80048f8 <HAL_GPIO_Init+0x300>)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004864:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <HAL_GPIO_Init+0x300>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	43db      	mvns	r3, r3
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004888:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <HAL_GPIO_Init+0x300>)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800488e:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_GPIO_Init+0x300>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	43db      	mvns	r3, r3
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4013      	ands	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048b2:	4a11      	ldr	r2, [pc, #68]	; (80048f8 <HAL_GPIO_Init+0x300>)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	3301      	adds	r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f47f ae9d 	bne.w	8004608 <HAL_GPIO_Init+0x10>
  }
}
 80048ce:	bf00      	nop
 80048d0:	bf00      	nop
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40010000 	.word	0x40010000
 80048e4:	48000400 	.word	0x48000400
 80048e8:	48000800 	.word	0x48000800
 80048ec:	48000c00 	.word	0x48000c00
 80048f0:	48001000 	.word	0x48001000
 80048f4:	48001400 	.word	0x48001400
 80048f8:	40010400 	.word	0x40010400

080048fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	887b      	ldrh	r3, [r7, #2]
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e001      	b.n	800491e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800491e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	807b      	strh	r3, [r7, #2]
 8004938:	4613      	mov	r3, r2
 800493a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800493c:	787b      	ldrb	r3, [r7, #1]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004942:	887a      	ldrh	r2, [r7, #2]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004948:	e002      	b.n	8004950 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800494a:	887a      	ldrh	r2, [r7, #2]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800496e:	d104      	bne.n	800497a <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f8d8 	bl	8004b28 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8004978:	e003      	b.n	8004982 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 800497a:	78fb      	ldrb	r3, [r7, #3]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f8a9 	bl	8004ad4 <HAL_PWREx_EnterSTOP0Mode>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d141      	bne.n	8004a1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800499a:	4b4b      	ldr	r3, [pc, #300]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a6:	d131      	bne.n	8004a0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049a8:	4b47      	ldr	r3, [pc, #284]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ae:	4a46      	ldr	r2, [pc, #280]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049b8:	4b43      	ldr	r3, [pc, #268]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049c0:	4a41      	ldr	r2, [pc, #260]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049c8:	4b40      	ldr	r3, [pc, #256]	; (8004acc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2232      	movs	r2, #50	; 0x32
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	4a3f      	ldr	r2, [pc, #252]	; (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	0c9b      	lsrs	r3, r3, #18
 80049da:	3301      	adds	r3, #1
 80049dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049de:	e002      	b.n	80049e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049e6:	4b38      	ldr	r3, [pc, #224]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f2:	d102      	bne.n	80049fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f2      	bne.n	80049e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049fa:	4b33      	ldr	r3, [pc, #204]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a06:	d158      	bne.n	8004aba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e057      	b.n	8004abc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a0c:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a12:	4a2d      	ldr	r2, [pc, #180]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a1c:	e04d      	b.n	8004aba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a24:	d141      	bne.n	8004aaa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a26:	4b28      	ldr	r3, [pc, #160]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a32:	d131      	bne.n	8004a98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a34:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a3a:	4a23      	ldr	r2, [pc, #140]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a44:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a4c:	4a1e      	ldr	r2, [pc, #120]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a54:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2232      	movs	r2, #50	; 0x32
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	0c9b      	lsrs	r3, r3, #18
 8004a66:	3301      	adds	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6a:	e002      	b.n	8004a72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7e:	d102      	bne.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f2      	bne.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a92:	d112      	bne.n	8004aba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e011      	b.n	8004abc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004aa8:	e007      	b.n	8004aba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ab2:	4a05      	ldr	r2, [pc, #20]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ab8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40007000 	.word	0x40007000
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	431bde83 	.word	0x431bde83

08004ad4 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a0f      	ldr	r2, [pc, #60]	; (8004b20 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8004ae4:	f023 0307 	bic.w	r3, r3, #7
 8004ae8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004aea:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	4a0d      	ldr	r2, [pc, #52]	; (8004b24 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8004af0:	f043 0304 	orr.w	r3, r3, #4
 8004af4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004afc:	bf30      	wfi
 8004afe:	e002      	b.n	8004b06 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004b00:	bf40      	sev
    __WFE();
 8004b02:	bf20      	wfe
    __WFE();
 8004b04:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b06:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	4a06      	ldr	r2, [pc, #24]	; (8004b24 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	6113      	str	r3, [r2, #16]
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40007000 	.word	0x40007000
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	4a0f      	ldr	r2, [pc, #60]	; (8004b78 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b42:	4b0e      	ldr	r3, [pc, #56]	; (8004b7c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	4a0d      	ldr	r2, [pc, #52]	; (8004b7c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004b48:	f043 0304 	orr.w	r3, r3, #4
 8004b4c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004b54:	bf30      	wfi
 8004b56:	e002      	b.n	8004b5e <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004b58:	bf40      	sev
    __WFE();
 8004b5a:	bf20      	wfe
    __WFE();
 8004b5c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004b64:	f023 0304 	bic.w	r3, r3, #4
 8004b68:	6113      	str	r3, [r2, #16]
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40007000 	.word	0x40007000
 8004b7c:	e000ed00 	.word	0xe000ed00

08004b80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b8e:	6093      	str	r3, [r2, #8]
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40007000 	.word	0x40007000

08004ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e308      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d075      	beq.n	8004caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bbe:	4ba3      	ldr	r3, [pc, #652]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bc8:	4ba0      	ldr	r3, [pc, #640]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d102      	bne.n	8004bde <HAL_RCC_OscConfig+0x3e>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d002      	beq.n	8004be4 <HAL_RCC_OscConfig+0x44>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4b99      	ldr	r3, [pc, #612]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05b      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x108>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d157      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e2e3      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x74>
 8004c06:	4b91      	ldr	r3, [pc, #580]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a90      	ldr	r2, [pc, #576]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e01d      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x98>
 8004c1e:	4b8b      	ldr	r3, [pc, #556]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a8a      	ldr	r2, [pc, #552]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b88      	ldr	r3, [pc, #544]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a87      	ldr	r2, [pc, #540]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c38:	4b84      	ldr	r3, [pc, #528]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a83      	ldr	r2, [pc, #524]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b81      	ldr	r3, [pc, #516]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a80      	ldr	r2, [pc, #512]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fe f97c 	bl	8002f54 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c60:	f7fe f978 	bl	8002f54 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	; 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e2a8      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c72:	4b76      	ldr	r3, [pc, #472]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0xc0>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fe f968 	bl	8002f54 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fe f964 	bl	8002f54 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	; 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e294      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c9a:	4b6c      	ldr	r3, [pc, #432]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0xe8>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d075      	beq.n	8004da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb6:	4b65      	ldr	r3, [pc, #404]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc0:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	d102      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x136>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d002      	beq.n	8004cdc <HAL_RCC_OscConfig+0x13c>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d11f      	bne.n	8004d1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cdc:	4b5b      	ldr	r3, [pc, #364]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x154>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e267      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	4b55      	ldr	r3, [pc, #340]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	061b      	lsls	r3, r3, #24
 8004d02:	4952      	ldr	r1, [pc, #328]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d08:	4b51      	ldr	r3, [pc, #324]	; (8004e50 <HAL_RCC_OscConfig+0x2b0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe f8d5 	bl	8002ebc <HAL_InitTick>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d043      	beq.n	8004da0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e253      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d023      	beq.n	8004d6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d24:	4b49      	ldr	r3, [pc, #292]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a48      	ldr	r2, [pc, #288]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fe f910 	bl	8002f54 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d38:	f7fe f90c 	bl	8002f54 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e23c      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d4a:	4b40      	ldr	r3, [pc, #256]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	4b3d      	ldr	r3, [pc, #244]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	061b      	lsls	r3, r3, #24
 8004d64:	4939      	ldr	r1, [pc, #228]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	604b      	str	r3, [r1, #4]
 8004d6a:	e01a      	b.n	8004da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6c:	4b37      	ldr	r3, [pc, #220]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a36      	ldr	r2, [pc, #216]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fe f8ec 	bl	8002f54 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d80:	f7fe f8e8 	bl	8002f54 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e218      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d92:	4b2e      	ldr	r3, [pc, #184]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x1e0>
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d03c      	beq.n	8004e28 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01c      	beq.n	8004df0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db6:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dbc:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc6:	f7fe f8c5 	bl	8002f54 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dce:	f7fe f8c1 	bl	8002f54 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e1f1      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004de0:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0ef      	beq.n	8004dce <HAL_RCC_OscConfig+0x22e>
 8004dee:	e01b      	b.n	8004e28 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df0:	4b16      	ldr	r3, [pc, #88]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df6:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fe f8a8 	bl	8002f54 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e08:	f7fe f8a4 	bl	8002f54 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e1d4      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1ef      	bne.n	8004e08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 80ab 	beq.w	8004f8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e36:	2300      	movs	r3, #0
 8004e38:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e3a:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_RCC_OscConfig+0x2b4>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e005      	b.n	8004e56 <HAL_RCC_OscConfig+0x2b6>
 8004e4a:	bf00      	nop
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	20000004 	.word	0x20000004
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5a:	4baf      	ldr	r3, [pc, #700]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5e:	4aae      	ldr	r2, [pc, #696]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e64:	6593      	str	r3, [r2, #88]	; 0x58
 8004e66:	4bac      	ldr	r3, [pc, #688]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e72:	2301      	movs	r3, #1
 8004e74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e76:	4ba9      	ldr	r3, [pc, #676]	; (800511c <HAL_RCC_OscConfig+0x57c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d118      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e82:	4ba6      	ldr	r3, [pc, #664]	; (800511c <HAL_RCC_OscConfig+0x57c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4aa5      	ldr	r2, [pc, #660]	; (800511c <HAL_RCC_OscConfig+0x57c>)
 8004e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e8e:	f7fe f861 	bl	8002f54 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e96:	f7fe f85d 	bl	8002f54 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e18d      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ea8:	4b9c      	ldr	r3, [pc, #624]	; (800511c <HAL_RCC_OscConfig+0x57c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d108      	bne.n	8004ece <HAL_RCC_OscConfig+0x32e>
 8004ebc:	4b96      	ldr	r3, [pc, #600]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	4a95      	ldr	r2, [pc, #596]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ecc:	e024      	b.n	8004f18 <HAL_RCC_OscConfig+0x378>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b05      	cmp	r3, #5
 8004ed4:	d110      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x358>
 8004ed6:	4b90      	ldr	r3, [pc, #576]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004edc:	4a8e      	ldr	r2, [pc, #568]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004ede:	f043 0304 	orr.w	r3, r3, #4
 8004ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ee6:	4b8c      	ldr	r3, [pc, #560]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eec:	4a8a      	ldr	r2, [pc, #552]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ef6:	e00f      	b.n	8004f18 <HAL_RCC_OscConfig+0x378>
 8004ef8:	4b87      	ldr	r3, [pc, #540]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	4a86      	ldr	r2, [pc, #536]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f08:	4b83      	ldr	r3, [pc, #524]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	4a82      	ldr	r2, [pc, #520]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004f10:	f023 0304 	bic.w	r3, r3, #4
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d016      	beq.n	8004f4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f20:	f7fe f818 	bl	8002f54 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f28:	f7fe f814 	bl	8002f54 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e142      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3e:	4b76      	ldr	r3, [pc, #472]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0ed      	beq.n	8004f28 <HAL_RCC_OscConfig+0x388>
 8004f4c:	e015      	b.n	8004f7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7fe f801 	bl	8002f54 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f54:	e00a      	b.n	8004f6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f56:	f7fd fffd 	bl	8002f54 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e12b      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f6c:	4b6a      	ldr	r3, [pc, #424]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1ed      	bne.n	8004f56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f7a:	7ffb      	ldrb	r3, [r7, #31]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f80:	4b65      	ldr	r3, [pc, #404]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f84:	4a64      	ldr	r2, [pc, #400]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d03c      	beq.n	8005012 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01c      	beq.n	8004fda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fa0:	4b5d      	ldr	r3, [pc, #372]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fa6:	4a5c      	ldr	r2, [pc, #368]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb0:	f7fd ffd0 	bl	8002f54 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fb8:	f7fd ffcc 	bl	8002f54 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0fc      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fca:	4b53      	ldr	r3, [pc, #332]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0ef      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x418>
 8004fd8:	e01b      	b.n	8005012 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fda:	4b4f      	ldr	r3, [pc, #316]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fe0:	4a4d      	ldr	r2, [pc, #308]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fd ffb3 	bl	8002f54 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ff2:	f7fd ffaf 	bl	8002f54 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0df      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005004:	4b44      	ldr	r3, [pc, #272]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8005006:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1ef      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80d3 	beq.w	80051c2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800501c:	4b3e      	ldr	r3, [pc, #248]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b0c      	cmp	r3, #12
 8005026:	f000 808d 	beq.w	8005144 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d15a      	bne.n	80050e8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	4b39      	ldr	r3, [pc, #228]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a38      	ldr	r2, [pc, #224]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8005038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800503c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503e:	f7fd ff89 	bl	8002f54 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005046:	f7fd ff85 	bl	8002f54 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e0b5      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005058:	4b2f      	ldr	r3, [pc, #188]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f0      	bne.n	8005046 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005064:	4b2c      	ldr	r3, [pc, #176]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	4b2d      	ldr	r3, [pc, #180]	; (8005120 <HAL_RCC_OscConfig+0x580>)
 800506a:	4013      	ands	r3, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6a11      	ldr	r1, [r2, #32]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005074:	3a01      	subs	r2, #1
 8005076:	0112      	lsls	r2, r2, #4
 8005078:	4311      	orrs	r1, r2
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800507e:	0212      	lsls	r2, r2, #8
 8005080:	4311      	orrs	r1, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005086:	0852      	lsrs	r2, r2, #1
 8005088:	3a01      	subs	r2, #1
 800508a:	0552      	lsls	r2, r2, #21
 800508c:	4311      	orrs	r1, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005092:	0852      	lsrs	r2, r2, #1
 8005094:	3a01      	subs	r2, #1
 8005096:	0652      	lsls	r2, r2, #25
 8005098:	4311      	orrs	r1, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800509e:	06d2      	lsls	r2, r2, #27
 80050a0:	430a      	orrs	r2, r1
 80050a2:	491d      	ldr	r1, [pc, #116]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a8:	4b1b      	ldr	r3, [pc, #108]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1a      	ldr	r2, [pc, #104]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 80050ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050b4:	4b18      	ldr	r3, [pc, #96]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4a17      	ldr	r2, [pc, #92]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 80050ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fd ff48 	bl	8002f54 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fd ff44 	bl	8002f54 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e074      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x528>
 80050e6:	e06c      	b.n	80051c2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 80050ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050f4:	4b08      	ldr	r3, [pc, #32]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	4a07      	ldr	r2, [pc, #28]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4a04      	ldr	r2, [pc, #16]	; (8005118 <HAL_RCC_OscConfig+0x578>)
 8005106:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800510a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fd ff20 	bl	8002f54 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005116:	e00e      	b.n	8005136 <HAL_RCC_OscConfig+0x596>
 8005118:	40021000 	.word	0x40021000
 800511c:	40007000 	.word	0x40007000
 8005120:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005124:	f7fd ff16 	bl	8002f54 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e046      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005136:	4b25      	ldr	r3, [pc, #148]	; (80051cc <HAL_RCC_OscConfig+0x62c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x584>
 8005142:	e03e      	b.n	80051c2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e039      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005150:	4b1e      	ldr	r3, [pc, #120]	; (80051cc <HAL_RCC_OscConfig+0x62c>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f003 0203 	and.w	r2, r3, #3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	429a      	cmp	r2, r3
 8005162:	d12c      	bne.n	80051be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	3b01      	subs	r3, #1
 8005170:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005172:	429a      	cmp	r2, r3
 8005174:	d123      	bne.n	80051be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d11b      	bne.n	80051be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d113      	bne.n	80051be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	3b01      	subs	r3, #1
 80051a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d109      	bne.n	80051be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	3b01      	subs	r3, #1
 80051b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d001      	beq.n	80051c2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40021000 	.word	0x40021000

080051d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e11e      	b.n	8005426 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051e8:	4b91      	ldr	r3, [pc, #580]	; (8005430 <HAL_RCC_ClockConfig+0x260>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d910      	bls.n	8005218 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f6:	4b8e      	ldr	r3, [pc, #568]	; (8005430 <HAL_RCC_ClockConfig+0x260>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 020f 	bic.w	r2, r3, #15
 80051fe:	498c      	ldr	r1, [pc, #560]	; (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	4313      	orrs	r3, r2
 8005204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005206:	4b8a      	ldr	r3, [pc, #552]	; (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d001      	beq.n	8005218 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e106      	b.n	8005426 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d073      	beq.n	800530c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d129      	bne.n	8005280 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522c:	4b81      	ldr	r3, [pc, #516]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0f4      	b.n	8005426 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800523c:	f000 f966 	bl	800550c <RCC_GetSysClockFreqFromPLLSource>
 8005240:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4a7c      	ldr	r2, [pc, #496]	; (8005438 <HAL_RCC_ClockConfig+0x268>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d93f      	bls.n	80052ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800524a:	4b7a      	ldr	r3, [pc, #488]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800525e:	2b00      	cmp	r3, #0
 8005260:	d033      	beq.n	80052ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005266:	2b00      	cmp	r3, #0
 8005268:	d12f      	bne.n	80052ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800526a:	4b72      	ldr	r3, [pc, #456]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005272:	4a70      	ldr	r2, [pc, #448]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 8005274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005278:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800527a:	2380      	movs	r3, #128	; 0x80
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e024      	b.n	80052ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d107      	bne.n	8005298 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005288:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0c6      	b.n	8005426 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005298:	4b66      	ldr	r3, [pc, #408]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0be      	b.n	8005426 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80052a8:	f000 f8ce 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 80052ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4a61      	ldr	r2, [pc, #388]	; (8005438 <HAL_RCC_ClockConfig+0x268>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d909      	bls.n	80052ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052b6:	4b5f      	ldr	r3, [pc, #380]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052be:	4a5d      	ldr	r2, [pc, #372]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 80052c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052ca:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f023 0203 	bic.w	r2, r3, #3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4957      	ldr	r1, [pc, #348]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052dc:	f7fd fe3a 	bl	8002f54 <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e2:	e00a      	b.n	80052fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e4:	f7fd fe36 	bl	8002f54 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e095      	b.n	8005426 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fa:	4b4e      	ldr	r3, [pc, #312]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 020c 	and.w	r2, r3, #12
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	429a      	cmp	r2, r3
 800530a:	d1eb      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d023      	beq.n	8005360 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005324:	4b43      	ldr	r3, [pc, #268]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4a42      	ldr	r2, [pc, #264]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 800532a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800532e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800533c:	4b3d      	ldr	r3, [pc, #244]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005344:	4a3b      	ldr	r2, [pc, #236]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 8005346:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800534a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800534c:	4b39      	ldr	r3, [pc, #228]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4936      	ldr	r1, [pc, #216]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 800535a:	4313      	orrs	r3, r2
 800535c:	608b      	str	r3, [r1, #8]
 800535e:	e008      	b.n	8005372 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	d105      	bne.n	8005372 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005366:	4b33      	ldr	r3, [pc, #204]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4a32      	ldr	r2, [pc, #200]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 800536c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005370:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005372:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d21d      	bcs.n	80053bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005380:	4b2b      	ldr	r3, [pc, #172]	; (8005430 <HAL_RCC_ClockConfig+0x260>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f023 020f 	bic.w	r2, r3, #15
 8005388:	4929      	ldr	r1, [pc, #164]	; (8005430 <HAL_RCC_ClockConfig+0x260>)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	4313      	orrs	r3, r2
 800538e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005390:	f7fd fde0 	bl	8002f54 <HAL_GetTick>
 8005394:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005396:	e00a      	b.n	80053ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005398:	f7fd fddc 	bl	8002f54 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e03b      	b.n	8005426 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b20      	ldr	r3, [pc, #128]	; (8005430 <HAL_RCC_ClockConfig+0x260>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1ed      	bne.n	8005398 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c8:	4b1a      	ldr	r3, [pc, #104]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	4917      	ldr	r1, [pc, #92]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053e6:	4b13      	ldr	r3, [pc, #76]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	490f      	ldr	r1, [pc, #60]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053fa:	f000 f825 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 80053fe:	4602      	mov	r2, r0
 8005400:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <HAL_RCC_ClockConfig+0x264>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	091b      	lsrs	r3, r3, #4
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	490c      	ldr	r1, [pc, #48]	; (800543c <HAL_RCC_ClockConfig+0x26c>)
 800540c:	5ccb      	ldrb	r3, [r1, r3]
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	fa22 f303 	lsr.w	r3, r2, r3
 8005416:	4a0a      	ldr	r2, [pc, #40]	; (8005440 <HAL_RCC_ClockConfig+0x270>)
 8005418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800541a:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <HAL_RCC_ClockConfig+0x274>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7fd fd4c 	bl	8002ebc <HAL_InitTick>
 8005424:	4603      	mov	r3, r0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40022000 	.word	0x40022000
 8005434:	40021000 	.word	0x40021000
 8005438:	04c4b400 	.word	0x04c4b400
 800543c:	08007ba0 	.word	0x08007ba0
 8005440:	20000000 	.word	0x20000000
 8005444:	20000004 	.word	0x20000004

08005448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800544e:	4b2c      	ldr	r3, [pc, #176]	; (8005500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b04      	cmp	r3, #4
 8005458:	d102      	bne.n	8005460 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800545a:	4b2a      	ldr	r3, [pc, #168]	; (8005504 <HAL_RCC_GetSysClockFreq+0xbc>)
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	e047      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005460:	4b27      	ldr	r3, [pc, #156]	; (8005500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 030c 	and.w	r3, r3, #12
 8005468:	2b08      	cmp	r3, #8
 800546a:	d102      	bne.n	8005472 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800546c:	4b26      	ldr	r3, [pc, #152]	; (8005508 <HAL_RCC_GetSysClockFreq+0xc0>)
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	e03e      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005472:	4b23      	ldr	r3, [pc, #140]	; (8005500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b0c      	cmp	r3, #12
 800547c:	d136      	bne.n	80054ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800547e:	4b20      	ldr	r3, [pc, #128]	; (8005500 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005488:	4b1d      	ldr	r3, [pc, #116]	; (8005500 <HAL_RCC_GetSysClockFreq+0xb8>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	3301      	adds	r3, #1
 8005494:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b03      	cmp	r3, #3
 800549a:	d10c      	bne.n	80054b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800549c:	4a1a      	ldr	r2, [pc, #104]	; (8005508 <HAL_RCC_GetSysClockFreq+0xc0>)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a4:	4a16      	ldr	r2, [pc, #88]	; (8005500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054a6:	68d2      	ldr	r2, [r2, #12]
 80054a8:	0a12      	lsrs	r2, r2, #8
 80054aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	617b      	str	r3, [r7, #20]
      break;
 80054b4:	e00c      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054b6:	4a13      	ldr	r2, [pc, #76]	; (8005504 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	4a10      	ldr	r2, [pc, #64]	; (8005500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054c0:	68d2      	ldr	r2, [r2, #12]
 80054c2:	0a12      	lsrs	r2, r2, #8
 80054c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054c8:	fb02 f303 	mul.w	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]
      break;
 80054ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054d0:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	0e5b      	lsrs	r3, r3, #25
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	3301      	adds	r3, #1
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	e001      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80054f0:	693b      	ldr	r3, [r7, #16]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40021000 	.word	0x40021000
 8005504:	00f42400 	.word	0x00f42400
 8005508:	007a1200 	.word	0x007a1200

0800550c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005512:	4b1e      	ldr	r3, [pc, #120]	; (800558c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800551c:	4b1b      	ldr	r3, [pc, #108]	; (800558c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	3301      	adds	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d10c      	bne.n	800554a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005530:	4a17      	ldr	r2, [pc, #92]	; (8005590 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	4a14      	ldr	r2, [pc, #80]	; (800558c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800553a:	68d2      	ldr	r2, [r2, #12]
 800553c:	0a12      	lsrs	r2, r2, #8
 800553e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	617b      	str	r3, [r7, #20]
    break;
 8005548:	e00c      	b.n	8005564 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800554a:	4a12      	ldr	r2, [pc, #72]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005552:	4a0e      	ldr	r2, [pc, #56]	; (800558c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005554:	68d2      	ldr	r2, [r2, #12]
 8005556:	0a12      	lsrs	r2, r2, #8
 8005558:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800555c:	fb02 f303 	mul.w	r3, r2, r3
 8005560:	617b      	str	r3, [r7, #20]
    break;
 8005562:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005564:	4b09      	ldr	r3, [pc, #36]	; (800558c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	0e5b      	lsrs	r3, r3, #25
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	3301      	adds	r3, #1
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800557e:	687b      	ldr	r3, [r7, #4]
}
 8005580:	4618      	mov	r0, r3
 8005582:	371c      	adds	r7, #28
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	40021000 	.word	0x40021000
 8005590:	007a1200 	.word	0x007a1200
 8005594:	00f42400 	.word	0x00f42400

08005598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055a0:	2300      	movs	r3, #0
 80055a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055a4:	2300      	movs	r3, #0
 80055a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8098 	beq.w	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b6:	2300      	movs	r3, #0
 80055b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ba:	4b43      	ldr	r3, [pc, #268]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10d      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c6:	4b40      	ldr	r3, [pc, #256]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ca:	4a3f      	ldr	r2, [pc, #252]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d0:	6593      	str	r3, [r2, #88]	; 0x58
 80055d2:	4b3d      	ldr	r3, [pc, #244]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055de:	2301      	movs	r3, #1
 80055e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055e2:	4b3a      	ldr	r3, [pc, #232]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a39      	ldr	r2, [pc, #228]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055ee:	f7fd fcb1 	bl	8002f54 <HAL_GetTick>
 80055f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055f4:	e009      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f6:	f7fd fcad 	bl	8002f54 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d902      	bls.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	74fb      	strb	r3, [r7, #19]
        break;
 8005608:	e005      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800560a:	4b30      	ldr	r3, [pc, #192]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0ef      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005616:	7cfb      	ldrb	r3, [r7, #19]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d159      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800561c:	4b2a      	ldr	r3, [pc, #168]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005626:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01e      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	429a      	cmp	r2, r3
 8005636:	d019      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005638:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005642:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005644:	4b20      	ldr	r3, [pc, #128]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564a:	4a1f      	ldr	r2, [pc, #124]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800564c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005654:	4b1c      	ldr	r3, [pc, #112]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800565c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005664:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d016      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005676:	f7fd fc6d 	bl	8002f54 <HAL_GetTick>
 800567a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800567c:	e00b      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567e:	f7fd fc69 	bl	8002f54 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	f241 3288 	movw	r2, #5000	; 0x1388
 800568c:	4293      	cmp	r3, r2
 800568e:	d902      	bls.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	74fb      	strb	r3, [r7, #19]
            break;
 8005694:	e006      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005696:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0ec      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80056a4:	7cfb      	ldrb	r3, [r7, #19]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10b      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056aa:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b8:	4903      	ldr	r1, [pc, #12]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056c0:	e008      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056c2:	7cfb      	ldrb	r3, [r7, #19]
 80056c4:	74bb      	strb	r3, [r7, #18]
 80056c6:	e005      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80056c8:	40021000 	.word	0x40021000
 80056cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d0:	7cfb      	ldrb	r3, [r7, #19]
 80056d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056d4:	7c7b      	ldrb	r3, [r7, #17]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d105      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056da:	4baf      	ldr	r3, [pc, #700]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056de:	4aae      	ldr	r2, [pc, #696]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056f2:	4ba9      	ldr	r3, [pc, #676]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f8:	f023 0203 	bic.w	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	49a5      	ldr	r1, [pc, #660]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005714:	4ba0      	ldr	r3, [pc, #640]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571a:	f023 020c 	bic.w	r2, r3, #12
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	499d      	ldr	r1, [pc, #628]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005736:	4b98      	ldr	r3, [pc, #608]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4994      	ldr	r1, [pc, #592]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005758:	4b8f      	ldr	r3, [pc, #572]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	498c      	ldr	r1, [pc, #560]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800577a:	4b87      	ldr	r3, [pc, #540]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800577c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	4983      	ldr	r1, [pc, #524]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800579c:	4b7e      	ldr	r3, [pc, #504]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800579e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	497b      	ldr	r1, [pc, #492]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057be:	4b76      	ldr	r3, [pc, #472]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	4972      	ldr	r1, [pc, #456]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057e0:	4b6d      	ldr	r3, [pc, #436]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	496a      	ldr	r1, [pc, #424]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005802:	4b65      	ldr	r3, [pc, #404]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005808:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	4961      	ldr	r1, [pc, #388]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005824:	4b5c      	ldr	r3, [pc, #368]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005826:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800582a:	f023 0203 	bic.w	r2, r3, #3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	4959      	ldr	r1, [pc, #356]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005846:	4b54      	ldr	r3, [pc, #336]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	4950      	ldr	r1, [pc, #320]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005864:	2b00      	cmp	r3, #0
 8005866:	d015      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005868:	4b4b      	ldr	r3, [pc, #300]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	4948      	ldr	r1, [pc, #288]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005886:	d105      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005888:	4b43      	ldr	r3, [pc, #268]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	4a42      	ldr	r2, [pc, #264]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800588e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005892:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589c:	2b00      	cmp	r3, #0
 800589e:	d015      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058a0:	4b3d      	ldr	r3, [pc, #244]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ae:	493a      	ldr	r1, [pc, #232]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058be:	d105      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c0:	4b35      	ldr	r3, [pc, #212]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4a34      	ldr	r2, [pc, #208]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d015      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058d8:	4b2f      	ldr	r3, [pc, #188]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	492c      	ldr	r1, [pc, #176]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058f6:	d105      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f8:	4b27      	ldr	r3, [pc, #156]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a26      	ldr	r2, [pc, #152]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005902:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d015      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005910:	4b21      	ldr	r3, [pc, #132]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	491e      	ldr	r1, [pc, #120]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800592e:	d105      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005930:	4b19      	ldr	r3, [pc, #100]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a18      	ldr	r2, [pc, #96]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800593a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d015      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005948:	4b13      	ldr	r3, [pc, #76]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	4910      	ldr	r1, [pc, #64]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005966:	d105      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4a0a      	ldr	r2, [pc, #40]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800596e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005972:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d018      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005986:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	4902      	ldr	r1, [pc, #8]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005996:	e001      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005998:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059a4:	d105      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059a6:	4b21      	ldr	r3, [pc, #132]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	4a20      	ldr	r2, [pc, #128]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d015      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80059be:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059cc:	4917      	ldr	r1, [pc, #92]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d105      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059de:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	4a12      	ldr	r2, [pc, #72]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d015      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059f6:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a04:	4909      	ldr	r1, [pc, #36]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a14:	d105      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a16:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	4a04      	ldr	r2, [pc, #16]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a20:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005a22:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40021000 	.word	0x40021000

08005a30 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d05c      	beq.n	8005afc <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fd f852 	bl	8002b00 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a64:	4b28      	ldr	r3, [pc, #160]	; (8005b08 <HAL_RTC_Init+0xd8>)
 8005a66:	22ca      	movs	r2, #202	; 0xca
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24
 8005a6a:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <HAL_RTC_Init+0xd8>)
 8005a6c:	2253      	movs	r2, #83	; 0x53
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f871 	bl	8005b58 <RTC_EnterInitMode>
 8005a76:	4603      	mov	r3, r0
 8005a78:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d133      	bne.n	8005ae8 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005a80:	4b21      	ldr	r3, [pc, #132]	; (8005b08 <HAL_RTC_Init+0xd8>)
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	4a20      	ldr	r2, [pc, #128]	; (8005b08 <HAL_RTC_Init+0xd8>)
 8005a86:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a8e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005a90:	4b1d      	ldr	r3, [pc, #116]	; (8005b08 <HAL_RTC_Init+0xd8>)
 8005a92:	699a      	ldr	r2, [r3, #24]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6859      	ldr	r1, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	4319      	orrs	r1, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	4918      	ldr	r1, [pc, #96]	; (8005b08 <HAL_RTC_Init+0xd8>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	041b      	lsls	r3, r3, #16
 8005ab4:	4914      	ldr	r1, [pc, #80]	; (8005b08 <HAL_RTC_Init+0xd8>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f880 	bl	8005bc0 <RTC_ExitInitMode>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10e      	bne.n	8005ae8 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8005aca:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <HAL_RTC_Init+0xd8>)
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a19      	ldr	r1, [r3, #32]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	4319      	orrs	r1, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	4909      	ldr	r1, [pc, #36]	; (8005b08 <HAL_RTC_Init+0xd8>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ae8:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <HAL_RTC_Init+0xd8>)
 8005aea:	22ff      	movs	r2, #255	; 0xff
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d103      	bne.n	8005afc <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40002800 	.word	0x40002800

08005b0c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005b14:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <HAL_RTC_WaitForSynchro+0x48>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <HAL_RTC_WaitForSynchro+0x48>)
 8005b1a:	f023 0320 	bic.w	r3, r3, #32
 8005b1e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005b20:	f7fd fa18 	bl	8002f54 <HAL_GetTick>
 8005b24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005b26:	e009      	b.n	8005b3c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b28:	f7fd fa14 	bl	8002f54 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b36:	d901      	bls.n	8005b3c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e006      	b.n	8005b4a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <HAL_RTC_WaitForSynchro+0x48>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ef      	beq.n	8005b28 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40002800 	.word	0x40002800

08005b58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005b64:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <RTC_EnterInitMode+0x64>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d120      	bne.n	8005bb2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005b70:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <RTC_EnterInitMode+0x64>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <RTC_EnterInitMode+0x64>)
 8005b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005b7c:	f7fd f9ea 	bl	8002f54 <HAL_GetTick>
 8005b80:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b82:	e00d      	b.n	8005ba0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b84:	f7fd f9e6 	bl	8002f54 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b92:	d905      	bls.n	8005ba0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005ba0:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <RTC_EnterInitMode+0x64>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <RTC_EnterInitMode+0x5a>
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d1e8      	bne.n	8005b84 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40002800 	.word	0x40002800

08005bc0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <RTC_ExitInitMode+0x78>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4a19      	ldr	r2, [pc, #100]	; (8005c38 <RTC_ExitInitMode+0x78>)
 8005bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005bd8:	4b17      	ldr	r3, [pc, #92]	; (8005c38 <RTC_ExitInitMode+0x78>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10c      	bne.n	8005bfe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff ff91 	bl	8005b0c <HAL_RTC_WaitForSynchro>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01e      	beq.n	8005c2e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	73fb      	strb	r3, [r7, #15]
 8005bfc:	e017      	b.n	8005c2e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <RTC_ExitInitMode+0x78>)
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	4a0d      	ldr	r2, [pc, #52]	; (8005c38 <RTC_ExitInitMode+0x78>)
 8005c04:	f023 0320 	bic.w	r3, r3, #32
 8005c08:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff ff7e 	bl	8005b0c <HAL_RTC_WaitForSynchro>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2203      	movs	r2, #3
 8005c1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <RTC_ExitInitMode+0x78>)
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	4a04      	ldr	r2, [pc, #16]	; (8005c38 <RTC_ExitInitMode+0x78>)
 8005c28:	f043 0320 	orr.w	r3, r3, #32
 8005c2c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40002800 	.word	0x40002800

08005c3c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e068      	b.n	8005d28 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2202      	movs	r2, #2
 8005c62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c66:	4b32      	ldr	r3, [pc, #200]	; (8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005c68:	22ca      	movs	r2, #202	; 0xca
 8005c6a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c6c:	4b30      	ldr	r3, [pc, #192]	; (8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005c6e:	2253      	movs	r2, #83	; 0x53
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699a      	ldr	r2, [r3, #24]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c80:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005c82:	4b2b      	ldr	r3, [pc, #172]	; (8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005c84:	2204      	movs	r2, #4
 8005c86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d11f      	bne.n	8005cd6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    tickstart = HAL_GetTick();
 8005c96:	f7fd f95d 	bl	8002f54 <HAL_GetTick>
 8005c9a:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8005c9c:	e014      	b.n	8005cc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c9e:	f7fd f959 	bl	8002f54 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cac:	d90c      	bls.n	8005cc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cae:	4b20      	ldr	r3, [pc, #128]	; (8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e02f      	b.n	8005d28 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0e3      	beq.n	8005c9e <HAL_RTCEx_SetWakeUpTimer_IT+0x62>
      }
    }
  }
  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 8005cd6:	4a16      	ldr	r2, [pc, #88]	; (8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6153      	str	r3, [r2, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005cdc:	4b14      	ldr	r3, [pc, #80]	; (8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	f023 0207 	bic.w	r2, r3, #7
 8005ce4:	4912      	ldr	r1, [pc, #72]	; (8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	618b      	str	r3, [r1, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005cec:	4b11      	ldr	r3, [pc, #68]	; (8005d34 <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a10      	ldr	r2, [pc, #64]	; (8005d34 <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8005cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cf6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_RISING_IT();
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8005cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d02:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer */ 
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8005d04:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005d0a:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8005d0e:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d10:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005d12:	22ff      	movs	r2, #255	; 0xff
 8005d14:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40002800 	.word	0x40002800
 8005d34:	40010400 	.word	0x40010400

08005d38 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e042      	b.n	8005dd4 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d5e:	4b1f      	ldr	r3, [pc, #124]	; (8005ddc <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8005d60:	22ca      	movs	r2, #202	; 0xca
 8005d62:	625a      	str	r2, [r3, #36]	; 0x24
 8005d64:	4b1d      	ldr	r3, [pc, #116]	; (8005ddc <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8005d66:	2253      	movs	r2, #83	; 0x53
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE | RTC_CR_WUTIE);
 8005d6a:	4b1c      	ldr	r3, [pc, #112]	; (8005ddc <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8005d70:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8005d74:	6193      	str	r3, [r2, #24]

  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 8005d76:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>)
 8005d78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d7c:	615a      	str	r2, [r3, #20]

  tickstart = HAL_GetTick();
 8005d7e:	f7fd f8e9 	bl	8002f54 <HAL_GetTick>
 8005d82:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8005d84:	e014      	b.n	8005db0 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d86:	f7fd f8e5 	bl	8002f54 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d94:	d90c      	bls.n	8005db0 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d96:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8005d98:	22ff      	movs	r2, #255	; 0xff
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2203      	movs	r2, #3
 8005da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e011      	b.n	8005dd4 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0e4      	beq.n	8005d86 <HAL_RTCEx_DeactivateWakeUpTimer+0x4e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dbc:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8005dbe:	22ff      	movs	r2, #255	; 0xff
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40002800 	.word	0x40002800
 8005de0:	40010400 	.word	0x40010400

08005de4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->SR, RTC_SR_WUTF) != 0U)
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <HAL_RTCEx_WakeUpTimerIRQHandler+0x38>)
 8005dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <HAL_RTCEx_WakeUpTimerIRQHandler+0x28>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8005df8:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <HAL_RTCEx_WakeUpTimerIRQHandler+0x38>)
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 8005dfe:	4b08      	ldr	r3, [pc, #32]	; (8005e20 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 8005e00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e04:	615a      	str	r2, [r3, #20]
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f80c 	bl	8005e24 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40002800 	.word	0x40002800
 8005e20:	40010400 	.word	0x40010400

08005e24 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e09d      	b.n	8005f86 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d108      	bne.n	8005e64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e5a:	d009      	beq.n	8005e70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	61da      	str	r2, [r3, #28]
 8005e62:	e005      	b.n	8005e70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fc fe5a 	bl	8002b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eb0:	d902      	bls.n	8005eb8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	e002      	b.n	8005ebe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ebc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ec6:	d007      	beq.n	8005ed8 <HAL_SPI_Init+0xa0>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ed0:	d002      	beq.n	8005ed8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1a:	ea42 0103 	orr.w	r1, r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	0c1b      	lsrs	r3, r3, #16
 8005f34:	f003 0204 	and.w	r2, r3, #4
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f54:	ea42 0103 	orr.w	r1, r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69da      	ldr	r2, [r3, #28]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b08a      	sub	sp, #40	; 0x28
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d101      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x26>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e1fb      	b.n	80063ac <HAL_SPI_TransmitReceive+0x41e>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fbc:	f7fc ffca 	bl	8002f54 <HAL_GetTick>
 8005fc0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fc8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005fd0:	887b      	ldrh	r3, [r7, #2]
 8005fd2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005fd4:	887b      	ldrh	r3, [r7, #2]
 8005fd6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fd8:	7efb      	ldrb	r3, [r7, #27]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d00e      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0x6e>
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fe4:	d106      	bne.n	8005ff4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d102      	bne.n	8005ff4 <HAL_SPI_TransmitReceive+0x66>
 8005fee:	7efb      	ldrb	r3, [r7, #27]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d003      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ffa:	e1cd      	b.n	8006398 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <HAL_SPI_TransmitReceive+0x80>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <HAL_SPI_TransmitReceive+0x80>
 8006008:	887b      	ldrh	r3, [r7, #2]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006014:	e1c0      	b.n	8006398 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b04      	cmp	r3, #4
 8006020:	d003      	beq.n	800602a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2205      	movs	r2, #5
 8006026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	887a      	ldrh	r2, [r7, #2]
 800603a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	887a      	ldrh	r2, [r7, #2]
 8006042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	887a      	ldrh	r2, [r7, #2]
 8006050:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	887a      	ldrh	r2, [r7, #2]
 8006056:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800606c:	d802      	bhi.n	8006074 <HAL_SPI_TransmitReceive+0xe6>
 800606e:	8a3b      	ldrh	r3, [r7, #16]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d908      	bls.n	8006086 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006082:	605a      	str	r2, [r3, #4]
 8006084:	e007      	b.n	8006096 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006094:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b40      	cmp	r3, #64	; 0x40
 80060a2:	d007      	beq.n	80060b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060bc:	d97c      	bls.n	80061b8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_SPI_TransmitReceive+0x13e>
 80060c6:	8a7b      	ldrh	r3, [r7, #18]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d169      	bne.n	80061a0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	881a      	ldrh	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	1c9a      	adds	r2, r3, #2
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060f0:	e056      	b.n	80061a0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d11b      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x1aa>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d016      	beq.n	8006138 <HAL_SPI_TransmitReceive+0x1aa>
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	2b01      	cmp	r3, #1
 800610e:	d113      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	881a      	ldrh	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	1c9a      	adds	r2, r3, #2
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b01      	cmp	r3, #1
 8006144:	d11c      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x1f2>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d016      	beq.n	8006180 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	b292      	uxth	r2, r2
 800615e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	1c9a      	adds	r2, r3, #2
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800617c:	2301      	movs	r3, #1
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006180:	f7fc fee8 	bl	8002f54 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618c:	429a      	cmp	r2, r3
 800618e:	d807      	bhi.n	80061a0 <HAL_SPI_TransmitReceive+0x212>
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d003      	beq.n	80061a0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800619e:	e0fb      	b.n	8006398 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1a3      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x164>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d19d      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x164>
 80061b6:	e0df      	b.n	8006378 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_SPI_TransmitReceive+0x23a>
 80061c0:	8a7b      	ldrh	r3, [r7, #18]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	f040 80cb 	bne.w	800635e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d912      	bls.n	80061f8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	881a      	ldrh	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	1c9a      	adds	r2, r3, #2
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b02      	subs	r3, #2
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061f6:	e0b2      	b.n	800635e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	330c      	adds	r3, #12
 8006202:	7812      	ldrb	r2, [r2, #0]
 8006204:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800621e:	e09e      	b.n	800635e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b02      	cmp	r3, #2
 800622c:	d134      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x30a>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006232:	b29b      	uxth	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d02f      	beq.n	8006298 <HAL_SPI_TransmitReceive+0x30a>
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	2b01      	cmp	r3, #1
 800623c:	d12c      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b01      	cmp	r3, #1
 8006246:	d912      	bls.n	800626e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	881a      	ldrh	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	1c9a      	adds	r2, r3, #2
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b02      	subs	r3, #2
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800626c:	e012      	b.n	8006294 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	7812      	ldrb	r2, [r2, #0]
 800627a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d148      	bne.n	8006338 <HAL_SPI_TransmitReceive+0x3aa>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d042      	beq.n	8006338 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d923      	bls.n	8006306 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	b292      	uxth	r2, r2
 80062ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d0:	1c9a      	adds	r2, r3, #2
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b02      	subs	r3, #2
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d81f      	bhi.n	8006334 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006302:	605a      	str	r2, [r3, #4]
 8006304:	e016      	b.n	8006334 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f103 020c 	add.w	r2, r3, #12
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	7812      	ldrb	r2, [r2, #0]
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006334:	2301      	movs	r3, #1
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006338:	f7fc fe0c 	bl	8002f54 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006344:	429a      	cmp	r2, r3
 8006346:	d803      	bhi.n	8006350 <HAL_SPI_TransmitReceive+0x3c2>
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d102      	bne.n	8006356 <HAL_SPI_TransmitReceive+0x3c8>
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800635c:	e01c      	b.n	8006398 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	f47f af5b 	bne.w	8006220 <HAL_SPI_TransmitReceive+0x292>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	f47f af54 	bne.w	8006220 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fa53 	bl	8006828 <SPI_EndRxTxTransaction>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d006      	beq.n	8006396 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	661a      	str	r2, [r3, #96]	; 0x60
 8006394:	e000      	b.n	8006398 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006396:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3728      	adds	r7, #40	; 0x28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	099b      	lsrs	r3, r3, #6
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10f      	bne.n	80063f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	099b      	lsrs	r3, r3, #6
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
    return;
 80063f6:	e0d7      	b.n	80065a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	085b      	lsrs	r3, r3, #1
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <HAL_SPI_IRQHandler+0x66>
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	09db      	lsrs	r3, r3, #7
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d004      	beq.n	800641a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	4798      	blx	r3
    return;
 8006418:	e0c6      	b.n	80065a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	095b      	lsrs	r3, r3, #5
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10c      	bne.n	8006440 <HAL_SPI_IRQHandler+0x8c>
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	099b      	lsrs	r3, r3, #6
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	0a1b      	lsrs	r3, r3, #8
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80b4 	beq.w	80065a8 <HAL_SPI_IRQHandler+0x1f4>
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 80ad 	beq.w	80065a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	099b      	lsrs	r3, r3, #6
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d023      	beq.n	80064a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b03      	cmp	r3, #3
 8006464:	d011      	beq.n	800648a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800646a:	f043 0204 	orr.w	r2, r3, #4
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	e00b      	b.n	80064a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800648a:	2300      	movs	r3, #0
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	693b      	ldr	r3, [r7, #16]
        return;
 80064a0:	e082      	b.n	80065a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d014      	beq.n	80064d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b2:	f043 0201 	orr.w	r2, r3, #1
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	0a1b      	lsrs	r3, r3, #8
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00c      	beq.n	80064fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e8:	f043 0208 	orr.w	r2, r3, #8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064f0:	2300      	movs	r3, #0
 80064f2:	60bb      	str	r3, [r7, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60bb      	str	r3, [r7, #8]
 80064fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006502:	2b00      	cmp	r3, #0
 8006504:	d04f      	beq.n	80065a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006514:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <HAL_SPI_IRQHandler+0x17e>
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d034      	beq.n	800659c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0203 	bic.w	r2, r2, #3
 8006540:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006546:	2b00      	cmp	r3, #0
 8006548:	d011      	beq.n	800656e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654e:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <HAL_SPI_IRQHandler+0x1fc>)
 8006550:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006556:	4618      	mov	r0, r3
 8006558:	f7fc fe37 	bl	80031ca <HAL_DMA_Abort_IT>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006566:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006572:	2b00      	cmp	r3, #0
 8006574:	d016      	beq.n	80065a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657a:	4a0d      	ldr	r2, [pc, #52]	; (80065b0 <HAL_SPI_IRQHandler+0x1fc>)
 800657c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	4618      	mov	r0, r3
 8006584:	f7fc fe21 	bl	80031ca <HAL_DMA_Abort_IT>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006592:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800659a:	e003      	b.n	80065a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f809 	bl	80065b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80065a2:	e000      	b.n	80065a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80065a4:	bf00      	nop
    return;
 80065a6:	bf00      	nop
  }
}
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	080065c9 	.word	0x080065c9

080065b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff ffe5 	bl	80065b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	4613      	mov	r3, r2
 8006602:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006604:	f7fc fca6 	bl	8002f54 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	4413      	add	r3, r2
 8006612:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006614:	f7fc fc9e 	bl	8002f54 <HAL_GetTick>
 8006618:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800661a:	4b39      	ldr	r3, [pc, #228]	; (8006700 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	015b      	lsls	r3, r3, #5
 8006620:	0d1b      	lsrs	r3, r3, #20
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	fb02 f303 	mul.w	r3, r2, r3
 8006628:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800662a:	e054      	b.n	80066d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d050      	beq.n	80066d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006634:	f7fc fc8e 	bl	8002f54 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	429a      	cmp	r2, r3
 8006642:	d902      	bls.n	800664a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d13d      	bne.n	80066c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006658:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006662:	d111      	bne.n	8006688 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800666c:	d004      	beq.n	8006678 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006676:	d107      	bne.n	8006688 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006686:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006690:	d10f      	bne.n	80066b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e017      	b.n	80066f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4013      	ands	r3, r2
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	bf0c      	ite	eq
 80066e6:	2301      	moveq	r3, #1
 80066e8:	2300      	movne	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d19b      	bne.n	800662c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3720      	adds	r7, #32
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000000 	.word	0x20000000

08006704 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006712:	f7fc fc1f 	bl	8002f54 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	4413      	add	r3, r2
 8006720:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006722:	f7fc fc17 	bl	8002f54 <HAL_GetTick>
 8006726:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006728:	4b3e      	ldr	r3, [pc, #248]	; (8006824 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	00da      	lsls	r2, r3, #3
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	0d1b      	lsrs	r3, r3, #20
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	fb02 f303 	mul.w	r3, r2, r3
 800673e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006740:	e062      	b.n	8006808 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006748:	d109      	bne.n	800675e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	330c      	adds	r3, #12
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800675c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d050      	beq.n	8006808 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006766:	f7fc fbf5 	bl	8002f54 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	429a      	cmp	r2, r3
 8006774:	d902      	bls.n	800677c <SPI_WaitFifoStateUntilTimeout+0x78>
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d13d      	bne.n	80067f8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800678a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006794:	d111      	bne.n	80067ba <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800679e:	d004      	beq.n	80067aa <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a8:	d107      	bne.n	80067ba <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c2:	d10f      	bne.n	80067e4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e010      	b.n	800681a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	3b01      	subs	r3, #1
 8006806:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	4013      	ands	r3, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d194      	bne.n	8006742 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3720      	adds	r7, #32
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000000 	.word	0x20000000

08006828 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2200      	movs	r2, #0
 800683c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7ff ff5f 	bl	8006704 <SPI_WaitFifoStateUntilTimeout>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006850:	f043 0220 	orr.w	r2, r3, #32
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e027      	b.n	80068ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2200      	movs	r2, #0
 8006864:	2180      	movs	r1, #128	; 0x80
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff fec4 	bl	80065f4 <SPI_WaitFlagStateUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006876:	f043 0220 	orr.w	r2, r3, #32
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e014      	b.n	80068ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7ff ff38 	bl	8006704 <SPI_WaitFifoStateUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689e:	f043 0220 	orr.w	r2, r3, #32
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e000      	b.n	80068ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e049      	b.n	800695a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fc f9b2 	bl	8002c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3304      	adds	r3, #4
 80068f0:	4619      	mov	r1, r3
 80068f2:	4610      	mov	r0, r2
 80068f4:	f000 fbbc 	bl	8007070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
	...

08006964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	d001      	beq.n	800697c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e054      	b.n	8006a26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0201 	orr.w	r2, r2, #1
 8006992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a26      	ldr	r2, [pc, #152]	; (8006a34 <HAL_TIM_Base_Start_IT+0xd0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d022      	beq.n	80069e4 <HAL_TIM_Base_Start_IT+0x80>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a6:	d01d      	beq.n	80069e4 <HAL_TIM_Base_Start_IT+0x80>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a22      	ldr	r2, [pc, #136]	; (8006a38 <HAL_TIM_Base_Start_IT+0xd4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d018      	beq.n	80069e4 <HAL_TIM_Base_Start_IT+0x80>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a21      	ldr	r2, [pc, #132]	; (8006a3c <HAL_TIM_Base_Start_IT+0xd8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d013      	beq.n	80069e4 <HAL_TIM_Base_Start_IT+0x80>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a1f      	ldr	r2, [pc, #124]	; (8006a40 <HAL_TIM_Base_Start_IT+0xdc>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00e      	beq.n	80069e4 <HAL_TIM_Base_Start_IT+0x80>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a1e      	ldr	r2, [pc, #120]	; (8006a44 <HAL_TIM_Base_Start_IT+0xe0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d009      	beq.n	80069e4 <HAL_TIM_Base_Start_IT+0x80>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <HAL_TIM_Base_Start_IT+0xe4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d004      	beq.n	80069e4 <HAL_TIM_Base_Start_IT+0x80>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a1b      	ldr	r2, [pc, #108]	; (8006a4c <HAL_TIM_Base_Start_IT+0xe8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d115      	bne.n	8006a10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	4b19      	ldr	r3, [pc, #100]	; (8006a50 <HAL_TIM_Base_Start_IT+0xec>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b06      	cmp	r3, #6
 80069f4:	d015      	beq.n	8006a22 <HAL_TIM_Base_Start_IT+0xbe>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069fc:	d011      	beq.n	8006a22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0201 	orr.w	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0e:	e008      	b.n	8006a22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	e000      	b.n	8006a24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40012c00 	.word	0x40012c00
 8006a38:	40000400 	.word	0x40000400
 8006a3c:	40000800 	.word	0x40000800
 8006a40:	40000c00 	.word	0x40000c00
 8006a44:	40013400 	.word	0x40013400
 8006a48:	40014000 	.word	0x40014000
 8006a4c:	40015000 	.word	0x40015000
 8006a50:	00010007 	.word	0x00010007

08006a54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e049      	b.n	8006afa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fc f8ae 	bl	8002bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f000 faec 	bl	8007070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d122      	bne.n	8006b5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d11b      	bne.n	8006b5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f06f 0202 	mvn.w	r2, #2
 8006b2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	f003 0303 	and.w	r3, r3, #3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fa75 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006b4a:	e005      	b.n	8006b58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fa67 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa78 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d122      	bne.n	8006bb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d11b      	bne.n	8006bb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f06f 0204 	mvn.w	r2, #4
 8006b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fa4b 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006b9e:	e005      	b.n	8006bac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fa3d 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fa4e 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	f003 0308 	and.w	r3, r3, #8
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d122      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d11b      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f06f 0208 	mvn.w	r2, #8
 8006bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f003 0303 	and.w	r3, r3, #3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fa21 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006bf2:	e005      	b.n	8006c00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fa13 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa24 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d122      	bne.n	8006c5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	2b10      	cmp	r3, #16
 8006c20:	d11b      	bne.n	8006c5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f06f 0210 	mvn.w	r2, #16
 8006c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2208      	movs	r2, #8
 8006c30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f9f7 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006c46:	e005      	b.n	8006c54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f9e9 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f9fa 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d10e      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d107      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f06f 0201 	mvn.w	r2, #1
 8006c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7f9 fac9 	bl	8000218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c90:	2b80      	cmp	r3, #128	; 0x80
 8006c92:	d10e      	bne.n	8006cb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9e:	2b80      	cmp	r3, #128	; 0x80
 8006ca0:	d107      	bne.n	8006cb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 ff03 	bl	8007ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc0:	d10e      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ccc:	2b80      	cmp	r3, #128	; 0x80
 8006cce:	d107      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fef6 	bl	8007acc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d10e      	bne.n	8006d0c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b40      	cmp	r3, #64	; 0x40
 8006cfa:	d107      	bne.n	8006d0c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f9a8 	bl	800705c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d10e      	bne.n	8006d38 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f003 0320 	and.w	r3, r3, #32
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d107      	bne.n	8006d38 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f06f 0220 	mvn.w	r2, #32
 8006d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 feb6 	bl	8007aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d46:	d10f      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d56:	d107      	bne.n	8006d68 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 febc 	bl	8007ae0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d76:	d10f      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d86:	d107      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 feae 	bl	8007af4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006da6:	d10f      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006db6:	d107      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fea0 	bl	8007b08 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dd6:	d10f      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006de2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006de6:	d107      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fe92 	bl	8007b1c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e0fd      	b.n	8007016 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b14      	cmp	r3, #20
 8006e26:	f200 80f0 	bhi.w	800700a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006e2a:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e85 	.word	0x08006e85
 8006e34:	0800700b 	.word	0x0800700b
 8006e38:	0800700b 	.word	0x0800700b
 8006e3c:	0800700b 	.word	0x0800700b
 8006e40:	08006ec5 	.word	0x08006ec5
 8006e44:	0800700b 	.word	0x0800700b
 8006e48:	0800700b 	.word	0x0800700b
 8006e4c:	0800700b 	.word	0x0800700b
 8006e50:	08006f07 	.word	0x08006f07
 8006e54:	0800700b 	.word	0x0800700b
 8006e58:	0800700b 	.word	0x0800700b
 8006e5c:	0800700b 	.word	0x0800700b
 8006e60:	08006f47 	.word	0x08006f47
 8006e64:	0800700b 	.word	0x0800700b
 8006e68:	0800700b 	.word	0x0800700b
 8006e6c:	0800700b 	.word	0x0800700b
 8006e70:	08006f89 	.word	0x08006f89
 8006e74:	0800700b 	.word	0x0800700b
 8006e78:	0800700b 	.word	0x0800700b
 8006e7c:	0800700b 	.word	0x0800700b
 8006e80:	08006fc9 	.word	0x08006fc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f998 	bl	80071c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0208 	orr.w	r2, r2, #8
 8006e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0204 	bic.w	r2, r2, #4
 8006eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6999      	ldr	r1, [r3, #24]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691a      	ldr	r2, [r3, #16]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	619a      	str	r2, [r3, #24]
      break;
 8006ec2:	e0a3      	b.n	800700c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68b9      	ldr	r1, [r7, #8]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fa12 	bl	80072f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6999      	ldr	r1, [r3, #24]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	021a      	lsls	r2, r3, #8
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	619a      	str	r2, [r3, #24]
      break;
 8006f04:	e082      	b.n	800700c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fa85 	bl	800741c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0208 	orr.w	r2, r2, #8
 8006f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0204 	bic.w	r2, r2, #4
 8006f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69d9      	ldr	r1, [r3, #28]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	61da      	str	r2, [r3, #28]
      break;
 8006f44:	e062      	b.n	800700c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68b9      	ldr	r1, [r7, #8]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 faf7 	bl	8007540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69d9      	ldr	r1, [r3, #28]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	021a      	lsls	r2, r3, #8
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	61da      	str	r2, [r3, #28]
      break;
 8006f86:	e041      	b.n	800700c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fb6a 	bl	8007668 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0208 	orr.w	r2, r2, #8
 8006fa2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0204 	bic.w	r2, r2, #4
 8006fb2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006fc6:	e021      	b.n	800700c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fbb4 	bl	800773c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	021a      	lsls	r2, r3, #8
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007008:	e000      	b.n	800700c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800700a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a46      	ldr	r2, [pc, #280]	; (800719c <TIM_Base_SetConfig+0x12c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d017      	beq.n	80070b8 <TIM_Base_SetConfig+0x48>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708e:	d013      	beq.n	80070b8 <TIM_Base_SetConfig+0x48>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a43      	ldr	r2, [pc, #268]	; (80071a0 <TIM_Base_SetConfig+0x130>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d00f      	beq.n	80070b8 <TIM_Base_SetConfig+0x48>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a42      	ldr	r2, [pc, #264]	; (80071a4 <TIM_Base_SetConfig+0x134>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00b      	beq.n	80070b8 <TIM_Base_SetConfig+0x48>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a41      	ldr	r2, [pc, #260]	; (80071a8 <TIM_Base_SetConfig+0x138>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d007      	beq.n	80070b8 <TIM_Base_SetConfig+0x48>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a40      	ldr	r2, [pc, #256]	; (80071ac <TIM_Base_SetConfig+0x13c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d003      	beq.n	80070b8 <TIM_Base_SetConfig+0x48>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a3f      	ldr	r2, [pc, #252]	; (80071b0 <TIM_Base_SetConfig+0x140>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d108      	bne.n	80070ca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a33      	ldr	r2, [pc, #204]	; (800719c <TIM_Base_SetConfig+0x12c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d023      	beq.n	800711a <TIM_Base_SetConfig+0xaa>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d8:	d01f      	beq.n	800711a <TIM_Base_SetConfig+0xaa>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a30      	ldr	r2, [pc, #192]	; (80071a0 <TIM_Base_SetConfig+0x130>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d01b      	beq.n	800711a <TIM_Base_SetConfig+0xaa>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a2f      	ldr	r2, [pc, #188]	; (80071a4 <TIM_Base_SetConfig+0x134>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d017      	beq.n	800711a <TIM_Base_SetConfig+0xaa>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a2e      	ldr	r2, [pc, #184]	; (80071a8 <TIM_Base_SetConfig+0x138>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d013      	beq.n	800711a <TIM_Base_SetConfig+0xaa>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a2d      	ldr	r2, [pc, #180]	; (80071ac <TIM_Base_SetConfig+0x13c>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00f      	beq.n	800711a <TIM_Base_SetConfig+0xaa>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a2d      	ldr	r2, [pc, #180]	; (80071b4 <TIM_Base_SetConfig+0x144>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00b      	beq.n	800711a <TIM_Base_SetConfig+0xaa>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a2c      	ldr	r2, [pc, #176]	; (80071b8 <TIM_Base_SetConfig+0x148>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d007      	beq.n	800711a <TIM_Base_SetConfig+0xaa>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a2b      	ldr	r2, [pc, #172]	; (80071bc <TIM_Base_SetConfig+0x14c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d003      	beq.n	800711a <TIM_Base_SetConfig+0xaa>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a26      	ldr	r2, [pc, #152]	; (80071b0 <TIM_Base_SetConfig+0x140>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d108      	bne.n	800712c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a12      	ldr	r2, [pc, #72]	; (800719c <TIM_Base_SetConfig+0x12c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d013      	beq.n	8007180 <TIM_Base_SetConfig+0x110>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a14      	ldr	r2, [pc, #80]	; (80071ac <TIM_Base_SetConfig+0x13c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00f      	beq.n	8007180 <TIM_Base_SetConfig+0x110>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a14      	ldr	r2, [pc, #80]	; (80071b4 <TIM_Base_SetConfig+0x144>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00b      	beq.n	8007180 <TIM_Base_SetConfig+0x110>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <TIM_Base_SetConfig+0x148>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d007      	beq.n	8007180 <TIM_Base_SetConfig+0x110>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a12      	ldr	r2, [pc, #72]	; (80071bc <TIM_Base_SetConfig+0x14c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d003      	beq.n	8007180 <TIM_Base_SetConfig+0x110>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a0d      	ldr	r2, [pc, #52]	; (80071b0 <TIM_Base_SetConfig+0x140>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d103      	bne.n	8007188 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	615a      	str	r2, [r3, #20]
}
 800718e:	bf00      	nop
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40012c00 	.word	0x40012c00
 80071a0:	40000400 	.word	0x40000400
 80071a4:	40000800 	.word	0x40000800
 80071a8:	40000c00 	.word	0x40000c00
 80071ac:	40013400 	.word	0x40013400
 80071b0:	40015000 	.word	0x40015000
 80071b4:	40014000 	.word	0x40014000
 80071b8:	40014400 	.word	0x40014400
 80071bc:	40014800 	.word	0x40014800

080071c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f023 0201 	bic.w	r2, r3, #1
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f023 0302 	bic.w	r3, r3, #2
 800720c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a30      	ldr	r2, [pc, #192]	; (80072dc <TIM_OC1_SetConfig+0x11c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d013      	beq.n	8007248 <TIM_OC1_SetConfig+0x88>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a2f      	ldr	r2, [pc, #188]	; (80072e0 <TIM_OC1_SetConfig+0x120>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00f      	beq.n	8007248 <TIM_OC1_SetConfig+0x88>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a2e      	ldr	r2, [pc, #184]	; (80072e4 <TIM_OC1_SetConfig+0x124>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00b      	beq.n	8007248 <TIM_OC1_SetConfig+0x88>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a2d      	ldr	r2, [pc, #180]	; (80072e8 <TIM_OC1_SetConfig+0x128>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d007      	beq.n	8007248 <TIM_OC1_SetConfig+0x88>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a2c      	ldr	r2, [pc, #176]	; (80072ec <TIM_OC1_SetConfig+0x12c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d003      	beq.n	8007248 <TIM_OC1_SetConfig+0x88>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a2b      	ldr	r2, [pc, #172]	; (80072f0 <TIM_OC1_SetConfig+0x130>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d10c      	bne.n	8007262 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0308 	bic.w	r3, r3, #8
 800724e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f023 0304 	bic.w	r3, r3, #4
 8007260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a1d      	ldr	r2, [pc, #116]	; (80072dc <TIM_OC1_SetConfig+0x11c>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d013      	beq.n	8007292 <TIM_OC1_SetConfig+0xd2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a1c      	ldr	r2, [pc, #112]	; (80072e0 <TIM_OC1_SetConfig+0x120>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00f      	beq.n	8007292 <TIM_OC1_SetConfig+0xd2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <TIM_OC1_SetConfig+0x124>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00b      	beq.n	8007292 <TIM_OC1_SetConfig+0xd2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a1a      	ldr	r2, [pc, #104]	; (80072e8 <TIM_OC1_SetConfig+0x128>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d007      	beq.n	8007292 <TIM_OC1_SetConfig+0xd2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a19      	ldr	r2, [pc, #100]	; (80072ec <TIM_OC1_SetConfig+0x12c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d003      	beq.n	8007292 <TIM_OC1_SetConfig+0xd2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <TIM_OC1_SetConfig+0x130>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d111      	bne.n	80072b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	621a      	str	r2, [r3, #32]
}
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	40012c00 	.word	0x40012c00
 80072e0:	40013400 	.word	0x40013400
 80072e4:	40014000 	.word	0x40014000
 80072e8:	40014400 	.word	0x40014400
 80072ec:	40014800 	.word	0x40014800
 80072f0:	40015000 	.word	0x40015000

080072f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f023 0210 	bic.w	r2, r3, #16
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800732e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f023 0320 	bic.w	r3, r3, #32
 8007342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4313      	orrs	r3, r2
 800734e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a2c      	ldr	r2, [pc, #176]	; (8007404 <TIM_OC2_SetConfig+0x110>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d007      	beq.n	8007368 <TIM_OC2_SetConfig+0x74>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a2b      	ldr	r2, [pc, #172]	; (8007408 <TIM_OC2_SetConfig+0x114>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d003      	beq.n	8007368 <TIM_OC2_SetConfig+0x74>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a2a      	ldr	r2, [pc, #168]	; (800740c <TIM_OC2_SetConfig+0x118>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d10d      	bne.n	8007384 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800736e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	011b      	lsls	r3, r3, #4
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	4313      	orrs	r3, r2
 800737a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007382:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a1f      	ldr	r2, [pc, #124]	; (8007404 <TIM_OC2_SetConfig+0x110>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d013      	beq.n	80073b4 <TIM_OC2_SetConfig+0xc0>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a1e      	ldr	r2, [pc, #120]	; (8007408 <TIM_OC2_SetConfig+0x114>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d00f      	beq.n	80073b4 <TIM_OC2_SetConfig+0xc0>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a1e      	ldr	r2, [pc, #120]	; (8007410 <TIM_OC2_SetConfig+0x11c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00b      	beq.n	80073b4 <TIM_OC2_SetConfig+0xc0>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a1d      	ldr	r2, [pc, #116]	; (8007414 <TIM_OC2_SetConfig+0x120>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d007      	beq.n	80073b4 <TIM_OC2_SetConfig+0xc0>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a1c      	ldr	r2, [pc, #112]	; (8007418 <TIM_OC2_SetConfig+0x124>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d003      	beq.n	80073b4 <TIM_OC2_SetConfig+0xc0>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a17      	ldr	r2, [pc, #92]	; (800740c <TIM_OC2_SetConfig+0x118>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d113      	bne.n	80073dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	621a      	str	r2, [r3, #32]
}
 80073f6:	bf00      	nop
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	40012c00 	.word	0x40012c00
 8007408:	40013400 	.word	0x40013400
 800740c:	40015000 	.word	0x40015000
 8007410:	40014000 	.word	0x40014000
 8007414:	40014400 	.word	0x40014400
 8007418:	40014800 	.word	0x40014800

0800741c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800744a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	021b      	lsls	r3, r3, #8
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a2b      	ldr	r2, [pc, #172]	; (8007528 <TIM_OC3_SetConfig+0x10c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d007      	beq.n	800748e <TIM_OC3_SetConfig+0x72>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a2a      	ldr	r2, [pc, #168]	; (800752c <TIM_OC3_SetConfig+0x110>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d003      	beq.n	800748e <TIM_OC3_SetConfig+0x72>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a29      	ldr	r2, [pc, #164]	; (8007530 <TIM_OC3_SetConfig+0x114>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d10d      	bne.n	80074aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	4313      	orrs	r3, r2
 80074a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a1e      	ldr	r2, [pc, #120]	; (8007528 <TIM_OC3_SetConfig+0x10c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <TIM_OC3_SetConfig+0xbe>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a1d      	ldr	r2, [pc, #116]	; (800752c <TIM_OC3_SetConfig+0x110>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00f      	beq.n	80074da <TIM_OC3_SetConfig+0xbe>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a1d      	ldr	r2, [pc, #116]	; (8007534 <TIM_OC3_SetConfig+0x118>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00b      	beq.n	80074da <TIM_OC3_SetConfig+0xbe>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a1c      	ldr	r2, [pc, #112]	; (8007538 <TIM_OC3_SetConfig+0x11c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d007      	beq.n	80074da <TIM_OC3_SetConfig+0xbe>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a1b      	ldr	r2, [pc, #108]	; (800753c <TIM_OC3_SetConfig+0x120>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d003      	beq.n	80074da <TIM_OC3_SetConfig+0xbe>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a16      	ldr	r2, [pc, #88]	; (8007530 <TIM_OC3_SetConfig+0x114>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d113      	bne.n	8007502 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	621a      	str	r2, [r3, #32]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	40012c00 	.word	0x40012c00
 800752c:	40013400 	.word	0x40013400
 8007530:	40015000 	.word	0x40015000
 8007534:	40014000 	.word	0x40014000
 8007538:	40014400 	.word	0x40014400
 800753c:	40014800 	.word	0x40014800

08007540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800756e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800757a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	021b      	lsls	r3, r3, #8
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800758e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	031b      	lsls	r3, r3, #12
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a2c      	ldr	r2, [pc, #176]	; (8007650 <TIM_OC4_SetConfig+0x110>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d007      	beq.n	80075b4 <TIM_OC4_SetConfig+0x74>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a2b      	ldr	r2, [pc, #172]	; (8007654 <TIM_OC4_SetConfig+0x114>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_OC4_SetConfig+0x74>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a2a      	ldr	r2, [pc, #168]	; (8007658 <TIM_OC4_SetConfig+0x118>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d10d      	bne.n	80075d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	031b      	lsls	r3, r3, #12
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <TIM_OC4_SetConfig+0x110>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d013      	beq.n	8007600 <TIM_OC4_SetConfig+0xc0>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a1e      	ldr	r2, [pc, #120]	; (8007654 <TIM_OC4_SetConfig+0x114>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00f      	beq.n	8007600 <TIM_OC4_SetConfig+0xc0>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a1e      	ldr	r2, [pc, #120]	; (800765c <TIM_OC4_SetConfig+0x11c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d00b      	beq.n	8007600 <TIM_OC4_SetConfig+0xc0>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a1d      	ldr	r2, [pc, #116]	; (8007660 <TIM_OC4_SetConfig+0x120>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d007      	beq.n	8007600 <TIM_OC4_SetConfig+0xc0>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a1c      	ldr	r2, [pc, #112]	; (8007664 <TIM_OC4_SetConfig+0x124>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d003      	beq.n	8007600 <TIM_OC4_SetConfig+0xc0>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a17      	ldr	r2, [pc, #92]	; (8007658 <TIM_OC4_SetConfig+0x118>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d113      	bne.n	8007628 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007606:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800760e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	019b      	lsls	r3, r3, #6
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	019b      	lsls	r3, r3, #6
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	621a      	str	r2, [r3, #32]
}
 8007642:	bf00      	nop
 8007644:	371c      	adds	r7, #28
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	40012c00 	.word	0x40012c00
 8007654:	40013400 	.word	0x40013400
 8007658:	40015000 	.word	0x40015000
 800765c:	40014000 	.word	0x40014000
 8007660:	40014400 	.word	0x40014400
 8007664:	40014800 	.word	0x40014800

08007668 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	041b      	lsls	r3, r3, #16
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a19      	ldr	r2, [pc, #100]	; (8007724 <TIM_OC5_SetConfig+0xbc>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d013      	beq.n	80076ea <TIM_OC5_SetConfig+0x82>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a18      	ldr	r2, [pc, #96]	; (8007728 <TIM_OC5_SetConfig+0xc0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00f      	beq.n	80076ea <TIM_OC5_SetConfig+0x82>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a17      	ldr	r2, [pc, #92]	; (800772c <TIM_OC5_SetConfig+0xc4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00b      	beq.n	80076ea <TIM_OC5_SetConfig+0x82>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a16      	ldr	r2, [pc, #88]	; (8007730 <TIM_OC5_SetConfig+0xc8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d007      	beq.n	80076ea <TIM_OC5_SetConfig+0x82>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a15      	ldr	r2, [pc, #84]	; (8007734 <TIM_OC5_SetConfig+0xcc>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d003      	beq.n	80076ea <TIM_OC5_SetConfig+0x82>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a14      	ldr	r2, [pc, #80]	; (8007738 <TIM_OC5_SetConfig+0xd0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d109      	bne.n	80076fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	621a      	str	r2, [r3, #32]
}
 8007718:	bf00      	nop
 800771a:	371c      	adds	r7, #28
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	40012c00 	.word	0x40012c00
 8007728:	40013400 	.word	0x40013400
 800772c:	40014000 	.word	0x40014000
 8007730:	40014400 	.word	0x40014400
 8007734:	40014800 	.word	0x40014800
 8007738:	40015000 	.word	0x40015000

0800773c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	021b      	lsls	r3, r3, #8
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	051b      	lsls	r3, r3, #20
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	4313      	orrs	r3, r2
 800778e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a1a      	ldr	r2, [pc, #104]	; (80077fc <TIM_OC6_SetConfig+0xc0>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d013      	beq.n	80077c0 <TIM_OC6_SetConfig+0x84>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a19      	ldr	r2, [pc, #100]	; (8007800 <TIM_OC6_SetConfig+0xc4>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d00f      	beq.n	80077c0 <TIM_OC6_SetConfig+0x84>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a18      	ldr	r2, [pc, #96]	; (8007804 <TIM_OC6_SetConfig+0xc8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00b      	beq.n	80077c0 <TIM_OC6_SetConfig+0x84>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a17      	ldr	r2, [pc, #92]	; (8007808 <TIM_OC6_SetConfig+0xcc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d007      	beq.n	80077c0 <TIM_OC6_SetConfig+0x84>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a16      	ldr	r2, [pc, #88]	; (800780c <TIM_OC6_SetConfig+0xd0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_OC6_SetConfig+0x84>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a15      	ldr	r2, [pc, #84]	; (8007810 <TIM_OC6_SetConfig+0xd4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d109      	bne.n	80077d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	029b      	lsls	r3, r3, #10
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	621a      	str	r2, [r3, #32]
}
 80077ee:	bf00      	nop
 80077f0:	371c      	adds	r7, #28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40012c00 	.word	0x40012c00
 8007800:	40013400 	.word	0x40013400
 8007804:	40014000 	.word	0x40014000
 8007808:	40014400 	.word	0x40014400
 800780c:	40014800 	.word	0x40014800
 8007810:	40015000 	.word	0x40015000

08007814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007828:	2302      	movs	r3, #2
 800782a:	e074      	b.n	8007916 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a34      	ldr	r2, [pc, #208]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d009      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a33      	ldr	r2, [pc, #204]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a31      	ldr	r2, [pc, #196]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d108      	bne.n	800787c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007870:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a21      	ldr	r2, [pc, #132]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d022      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ac:	d01d      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1f      	ldr	r2, [pc, #124]	; (8007930 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d018      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d013      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a1c      	ldr	r2, [pc, #112]	; (8007938 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d00e      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a15      	ldr	r2, [pc, #84]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d009      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a18      	ldr	r2, [pc, #96]	; (800793c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d004      	beq.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a11      	ldr	r2, [pc, #68]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d10c      	bne.n	8007904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40013400 	.word	0x40013400
 800792c:	40015000 	.word	0x40015000
 8007930:	40000400 	.word	0x40000400
 8007934:	40000800 	.word	0x40000800
 8007938:	40000c00 	.word	0x40000c00
 800793c:	40014000 	.word	0x40014000

08007940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007954:	2b01      	cmp	r3, #1
 8007956:	d101      	bne.n	800795c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007958:	2302      	movs	r3, #2
 800795a:	e096      	b.n	8007a8a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	041b      	lsls	r3, r3, #16
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a2f      	ldr	r2, [pc, #188]	; (8007a98 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d009      	beq.n	80079f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a2d      	ldr	r2, [pc, #180]	; (8007a9c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a2c      	ldr	r2, [pc, #176]	; (8007aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d106      	bne.n	8007a02 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a24      	ldr	r2, [pc, #144]	; (8007a98 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d009      	beq.n	8007a20 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a22      	ldr	r2, [pc, #136]	; (8007a9c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d004      	beq.n	8007a20 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a21      	ldr	r2, [pc, #132]	; (8007aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d12b      	bne.n	8007a78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	051b      	lsls	r3, r3, #20
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a11      	ldr	r2, [pc, #68]	; (8007a98 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d009      	beq.n	8007a6a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a10      	ldr	r2, [pc, #64]	; (8007a9c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d004      	beq.n	8007a6a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a0e      	ldr	r2, [pc, #56]	; (8007aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d106      	bne.n	8007a78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	40012c00 	.word	0x40012c00
 8007a9c:	40013400 	.word	0x40013400
 8007aa0:	40015000 	.word	0x40015000

08007aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <__libc_init_array>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4d0d      	ldr	r5, [pc, #52]	; (8007b68 <__libc_init_array+0x38>)
 8007b34:	4c0d      	ldr	r4, [pc, #52]	; (8007b6c <__libc_init_array+0x3c>)
 8007b36:	1b64      	subs	r4, r4, r5
 8007b38:	10a4      	asrs	r4, r4, #2
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	42a6      	cmp	r6, r4
 8007b3e:	d109      	bne.n	8007b54 <__libc_init_array+0x24>
 8007b40:	4d0b      	ldr	r5, [pc, #44]	; (8007b70 <__libc_init_array+0x40>)
 8007b42:	4c0c      	ldr	r4, [pc, #48]	; (8007b74 <__libc_init_array+0x44>)
 8007b44:	f000 f820 	bl	8007b88 <_init>
 8007b48:	1b64      	subs	r4, r4, r5
 8007b4a:	10a4      	asrs	r4, r4, #2
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	42a6      	cmp	r6, r4
 8007b50:	d105      	bne.n	8007b5e <__libc_init_array+0x2e>
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b58:	4798      	blx	r3
 8007b5a:	3601      	adds	r6, #1
 8007b5c:	e7ee      	b.n	8007b3c <__libc_init_array+0xc>
 8007b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b62:	4798      	blx	r3
 8007b64:	3601      	adds	r6, #1
 8007b66:	e7f2      	b.n	8007b4e <__libc_init_array+0x1e>
 8007b68:	08007bc0 	.word	0x08007bc0
 8007b6c:	08007bc0 	.word	0x08007bc0
 8007b70:	08007bc0 	.word	0x08007bc0
 8007b74:	08007bc4 	.word	0x08007bc4

08007b78 <memset>:
 8007b78:	4402      	add	r2, r0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d100      	bne.n	8007b82 <memset+0xa>
 8007b80:	4770      	bx	lr
 8007b82:	f803 1b01 	strb.w	r1, [r3], #1
 8007b86:	e7f9      	b.n	8007b7c <memset+0x4>

08007b88 <_init>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	bf00      	nop
 8007b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8e:	bc08      	pop	{r3}
 8007b90:	469e      	mov	lr, r3
 8007b92:	4770      	bx	lr

08007b94 <_fini>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	bf00      	nop
 8007b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9a:	bc08      	pop	{r3}
 8007b9c:	469e      	mov	lr, r3
 8007b9e:	4770      	bx	lr
