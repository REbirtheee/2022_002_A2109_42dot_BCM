
42DOT_aDRT_2nd_24V_LAMP_ABU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080085a0  080085a0  000185a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f0  080085f0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080085f0  080085f0  000185f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085f8  080085f8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f8  080085f8  000185f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085fc  080085fc  000185fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  2000001c  0800861c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800861c  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231a6  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003287  00000000  00000000  000431f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  00046480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001720  00000000  00000000  00047ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bc7  00000000  00000000  00049408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a32e  00000000  00000000  00070fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010431c  00000000  00000000  0008b2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a4  00000000  00000000  0018f66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008588 	.word	0x08008588

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08008588 	.word	0x08008588

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_TIM_PeriodElapsedCallback>:

#include "ctrl_routine.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a5a      	ldr	r2, [pc, #360]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800051e:	4293      	cmp	r3, r2
 8000520:	f040 80ad 	bne.w	800067e <HAL_TIM_PeriodElapsedCallback+0x16e>
		if( timer6_cmd_num == 0 ) {
 8000524:	4b59      	ldr	r3, [pc, #356]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d103      	bne.n	8000534 <HAL_TIM_PeriodElapsedCallback+0x24>
			LampSWRead(&Input_Status);
 800052c:	4858      	ldr	r0, [pc, #352]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800052e:	f000 ffc7 	bl	80014c0 <LampSWRead>
 8000532:	e064      	b.n	80005fe <HAL_TIM_PeriodElapsedCallback+0xee>

		} else if( timer6_cmd_num == 1 ) {
 8000534:	4b55      	ldr	r3, [pc, #340]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d104      	bne.n	8000546 <HAL_TIM_PeriodElapsedCallback+0x36>
			//WelcomeControl(); // 220707 aDRT_3 sonng oper -> welcome off
			LampControl(&Lamp_Status, &Input_Status);
 800053c:	4954      	ldr	r1, [pc, #336]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800053e:	4855      	ldr	r0, [pc, #340]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000540:	f001 f86c 	bl	800161c <LampControl>
 8000544:	e05b      	b.n	80005fe <HAL_TIM_PeriodElapsedCallback+0xee>

		} else if( timer6_cmd_num == 2 ) {
 8000546:	4b51      	ldr	r3, [pc, #324]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d102      	bne.n	8000554 <HAL_TIM_PeriodElapsedCallback+0x44>
			CurrentDataReceive();
 800054e:	f002 f85d 	bl	800260c <CurrentDataReceive>
 8000552:	e054      	b.n	80005fe <HAL_TIM_PeriodElapsedCallback+0xee>

		} else if( timer6_cmd_num == 3 ) {
 8000554:	4b4d      	ldr	r3, [pc, #308]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b03      	cmp	r3, #3
 800055a:	d10d      	bne.n	8000578 <HAL_TIM_PeriodElapsedCallback+0x68>
			VehicleDataConv(vehicle_tx_data, &vehicle_tx_flag, &vehicle_curr_rx_flag);
 800055c:	4a4e      	ldr	r2, [pc, #312]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800055e:	494f      	ldr	r1, [pc, #316]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000560:	484f      	ldr	r0, [pc, #316]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000562:	f000 fab9 	bl	8000ad8 <VehicleDataConv>
			CanTxMessage(CAN_ID_VEHICLEINFO, FDCAN_DLC_BYTES_8, vehicle_tx_data, &vehicle_tx_flag);
 8000566:	4b4d      	ldr	r3, [pc, #308]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000568:	4a4d      	ldr	r2, [pc, #308]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800056a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800056e:	f44f 7088 	mov.w	r0, #272	; 0x110
 8000572:	f000 fa87 	bl	8000a84 <CanTxMessage>
 8000576:	e042      	b.n	80005fe <HAL_TIM_PeriodElapsedCallback+0xee>

		} else if( timer6_cmd_num == 4 ) {
 8000578:	4b44      	ldr	r3, [pc, #272]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b04      	cmp	r3, #4
 800057e:	d10c      	bne.n	800059a <HAL_TIM_PeriodElapsedCallback+0x8a>
			LampDataConv(lamp_tx_data, &lamp_tx_flag);
 8000580:	4948      	ldr	r1, [pc, #288]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000582:	4849      	ldr	r0, [pc, #292]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000584:	f001 fb92 	bl	8001cac <LampDataConv>
			CanTxMessage(CAN_ID_24VLAMPINFO, FDCAN_DLC_BYTES_8, lamp_tx_data, &lamp_tx_flag);
 8000588:	4b46      	ldr	r3, [pc, #280]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800058a:	4a47      	ldr	r2, [pc, #284]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800058c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000590:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000594:	f000 fa76 	bl	8000a84 <CanTxMessage>
 8000598:	e031      	b.n	80005fe <HAL_TIM_PeriodElapsedCallback+0xee>

		} else if( timer6_cmd_num == 5 ) {
 800059a:	4b3c      	ldr	r3, [pc, #240]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b05      	cmp	r3, #5
 80005a0:	d102      	bne.n	80005a8 <HAL_TIM_PeriodElapsedCallback+0x98>
			SeatBeltRead();
 80005a2:	f000 fbc5 	bl	8000d30 <SeatBeltRead>
 80005a6:	e02a      	b.n	80005fe <HAL_TIM_PeriodElapsedCallback+0xee>

		} else if( timer6_cmd_num == 6 ) {
 80005a8:	4b38      	ldr	r3, [pc, #224]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b06      	cmp	r3, #6
 80005ae:	d026      	beq.n	80005fe <HAL_TIM_PeriodElapsedCallback+0xee>

		} else if( timer6_cmd_num == 7 ) {
 80005b0:	4b36      	ldr	r3, [pc, #216]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b07      	cmp	r3, #7
 80005b6:	d104      	bne.n	80005c2 <HAL_TIM_PeriodElapsedCallback+0xb2>
			DoorWarningControl();
 80005b8:	f000 fb50 	bl	8000c5c <DoorWarningControl>
			PBrakeWarningControl();
 80005bc:	f000 fb88 	bl	8000cd0 <PBrakeWarningControl>
 80005c0:	e01d      	b.n	80005fe <HAL_TIM_PeriodElapsedCallback+0xee>

		} else if( timer6_cmd_num == 8 ) {
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b08      	cmp	r3, #8
 80005c8:	d104      	bne.n	80005d4 <HAL_TIM_PeriodElapsedCallback+0xc4>
			SeatbeltWarningControl();
 80005ca:	f000 fd05 	bl	8000fd8 <SeatbeltWarningControl>
			WarningAlarmControl();
 80005ce:	f000 fe8f 	bl	80012f0 <WarningAlarmControl>
 80005d2:	e014      	b.n	80005fe <HAL_TIM_PeriodElapsedCallback+0xee>

		} else if( timer6_cmd_num == 9 ) {
 80005d4:	4b2d      	ldr	r3, [pc, #180]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b09      	cmp	r3, #9
 80005da:	d110      	bne.n	80005fe <HAL_TIM_PeriodElapsedCallback+0xee>
			seatbelt_tx_flag = 1;
 80005dc:	4b33      	ldr	r3, [pc, #204]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
			SeatbeltDataConv(seatbelt_tx_data, &seatbelt_tx_flag);
 80005e2:	4932      	ldr	r1, [pc, #200]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80005e4:	4832      	ldr	r0, [pc, #200]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80005e6:	f000 fda9 	bl	800113c <SeatbeltDataConv>
			CanTxMessage(CAN_ID_SEATINFO, FDCAN_DLC_BYTES_8, seatbelt_tx_data, &seatbelt_tx_flag);
 80005ea:	4b30      	ldr	r3, [pc, #192]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80005ec:	4a30      	ldr	r2, [pc, #192]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80005ee:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80005f2:	f240 1043 	movw	r0, #323	; 0x143
 80005f6:	f000 fa45 	bl	8000a84 <CanTxMessage>
			CANReStart();
 80005fa:	f000 fb05 	bl	8000c08 <CANReStart>
		}

		if( ++timer6_cmd_num == 10 ) {
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b0a      	cmp	r3, #10
 8000610:	d135      	bne.n	800067e <HAL_TIM_PeriodElapsedCallback+0x16e>
			timer6_cmd_num = 0;
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
			if( (ign1_status==0) && (door_open_status==0) && (charge_door_status==0) && (RF_open_lamp==0)
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d127      	bne.n	8000670 <HAL_TIM_PeriodElapsedCallback+0x160>
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d123      	bne.n	8000670 <HAL_TIM_PeriodElapsedCallback+0x160>
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d11f      	bne.n	8000670 <HAL_TIM_PeriodElapsedCallback+0x160>
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d11b      	bne.n	8000670 <HAL_TIM_PeriodElapsedCallback+0x160>
					&& (RF_close_lamp==0) && (Lamp_Status.stop_lamp==0) ) {
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d117      	bne.n	8000670 <HAL_TIM_PeriodElapsedCallback+0x160>
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000642:	795b      	ldrb	r3, [r3, #5]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d113      	bne.n	8000670 <HAL_TIM_PeriodElapsedCallback+0x160>
				if( ++stop_mode_cnt > 1500 ) {
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000652:	801a      	strh	r2, [r3, #0]
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800065c:	4293      	cmp	r3, r2
 800065e:	d90e      	bls.n	800067e <HAL_TIM_PeriodElapsedCallback+0x16e>
					stop_enable = 1;
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
					stop_mode_cnt = 1495;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000668:	f240 52d7 	movw	r2, #1495	; 0x5d7
 800066c:	801a      	strh	r2, [r3, #0]
				if( ++stop_mode_cnt > 1500 ) {
 800066e:	e006      	b.n	800067e <HAL_TIM_PeriodElapsedCallback+0x16e>
				}
			} else {
				stop_mode_cnt = 0;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000672:	2200      	movs	r2, #0
 8000674:	801a      	strh	r2, [r3, #0]
				stop_enable = 0;
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800067c:	e7ff      	b.n	800067e <HAL_TIM_PeriodElapsedCallback+0x16e>
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40001000 	.word	0x40001000
 800068c:	2000034d 	.word	0x2000034d
 8000690:	20000274 	.word	0x20000274
 8000694:	20000344 	.word	0x20000344
 8000698:	2000009d 	.word	0x2000009d
 800069c:	2000026c 	.word	0x2000026c
 80006a0:	200000bc 	.word	0x200000bc
 80006a4:	200001a1 	.word	0x200001a1
 80006a8:	20000338 	.word	0x20000338
 80006ac:	2000014f 	.word	0x2000014f
 80006b0:	200000b0 	.word	0x200000b0
 80006b4:	2000035a 	.word	0x2000035a
 80006b8:	2000034b 	.word	0x2000034b
 80006bc:	2000009c 	.word	0x2000009c
 80006c0:	200001a3 	.word	0x200001a3
 80006c4:	20000278 	.word	0x20000278
 80006c8:	200003c4 	.word	0x200003c4
 80006cc:	2000004c 	.word	0x2000004c

080006d0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
	if( hfdcan->Instance == FDCAN1 ) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d10a      	bne.n	80006fa <HAL_FDCAN_RxFifo0Callback+0x2a>
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &can1_rx_header, can1_rx_data);
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80006e8:	2140      	movs	r1, #64	; 0x40
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f003 f8be 	bl	800386c <HAL_FDCAN_GetRxMessage>
		VehicleToABU(&can1_rx_header, can1_rx_data);
 80006f0:	490e      	ldr	r1, [pc, #56]	; (800072c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80006f2:	480f      	ldr	r0, [pc, #60]	; (8000730 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80006f4:	f000 f826 	bl	8000744 <VehicleToABU>
	} else if ( hfdcan->Instance == FDCAN2 ) {
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &can2_rx_header, can2_rx_data);
		LocalToABU(&can2_rx_header, can2_rx_data);
		can_not_receive_cnt = 0;
	}
}
 80006f8:	e011      	b.n	800071e <HAL_FDCAN_RxFifo0Callback+0x4e>
	} else if ( hfdcan->Instance == FDCAN2 ) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d10c      	bne.n	800071e <HAL_FDCAN_RxFifo0Callback+0x4e>
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &can2_rx_header, can2_rx_data);
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000706:	4a0d      	ldr	r2, [pc, #52]	; (800073c <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000708:	2140      	movs	r1, #64	; 0x40
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f003 f8ae 	bl	800386c <HAL_FDCAN_GetRxMessage>
		LocalToABU(&can2_rx_header, can2_rx_data);
 8000710:	4909      	ldr	r1, [pc, #36]	; (8000738 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000712:	480a      	ldr	r0, [pc, #40]	; (800073c <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000714:	f000 f88a 	bl	800082c <LocalToABU>
		can_not_receive_cnt = 0;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_FDCAN_RxFifo0Callback+0x70>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40006400 	.word	0x40006400
 800072c:	2000032c 	.word	0x2000032c
 8000730:	20000244 	.word	0x20000244
 8000734:	40006800 	.word	0x40006800
 8000738:	200003cc 	.word	0x200003cc
 800073c:	200002f4 	.word	0x200002f4
 8000740:	200000ad 	.word	0x200000ad

08000744 <VehicleToABU>:

void VehicleToABU(FDCAN_RxHeaderTypeDef *rxheader, uint8_t *rxdata)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	switch(rxheader->Identifier) {
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a2c      	ldr	r2, [pc, #176]	; (8000804 <VehicleToABU+0xc0>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d049      	beq.n	80007ec <VehicleToABU+0xa8>
 8000758:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <VehicleToABU+0xc0>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d84b      	bhi.n	80007f6 <VehicleToABU+0xb2>
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <VehicleToABU+0xc4>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d030      	beq.n	80007c6 <VehicleToABU+0x82>
 8000764:	4a28      	ldr	r2, [pc, #160]	; (8000808 <VehicleToABU+0xc4>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d845      	bhi.n	80007f6 <VehicleToABU+0xb2>
 800076a:	4a28      	ldr	r2, [pc, #160]	; (800080c <VehicleToABU+0xc8>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d003      	beq.n	8000778 <VehicleToABU+0x34>
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <VehicleToABU+0xcc>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d016      	beq.n	80007a4 <VehicleToABU+0x60>
#endif
	case 0x18FEA0F0:
		vehicle_charge_status = rxdata[0];
		break;
	}
}
 8000776:	e03e      	b.n	80007f6 <VehicleToABU+0xb2>
		if(rxdata[0] == 0x01 && ((rxdata[1] == 0x20) || (rxdata[1] == 0x21))){
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d10d      	bne.n	800079c <VehicleToABU+0x58>
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b20      	cmp	r3, #32
 8000788:	d004      	beq.n	8000794 <VehicleToABU+0x50>
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b21      	cmp	r3, #33	; 0x21
 8000792:	d103      	bne.n	800079c <VehicleToABU+0x58>
			car_ready_status = 1;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <VehicleToABU+0xd0>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
		break;
 800079a:	e02c      	b.n	80007f6 <VehicleToABU+0xb2>
			car_ready_status = 0;
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <VehicleToABU+0xd0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
		break;
 80007a2:	e028      	b.n	80007f6 <VehicleToABU+0xb2>
		vehicle_current = (rxdata[4]) | (rxdata[5]<<8);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	3304      	adds	r3, #4
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	3305      	adds	r3, #5
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21b      	sxth	r3, r3
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <VehicleToABU+0xd4>)
 80007bc:	801a      	strh	r2, [r3, #0]
		vehicle_curr_rx_flag = 1;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <VehicleToABU+0xd8>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
		break;
 80007c4:	e017      	b.n	80007f6 <VehicleToABU+0xb2>
		soc_value = rxdata[0];
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <VehicleToABU+0xdc>)
 80007cc:	701a      	strb	r2, [r3, #0]
		vehicle_voltage = rxdata[3] | (rxdata[4]<<8);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	3303      	adds	r3, #3
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	3304      	adds	r3, #4
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	b21b      	sxth	r3, r3
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b21b      	sxth	r3, r3
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <VehicleToABU+0xe0>)
 80007e8:	801a      	strh	r2, [r3, #0]
		break;
 80007ea:	e004      	b.n	80007f6 <VehicleToABU+0xb2>
		vehicle_charge_status = rxdata[0];
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <VehicleToABU+0xe4>)
 80007f2:	701a      	strb	r2, [r3, #0]
		break;
 80007f4:	bf00      	nop
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	18fea0f0 	.word	0x18fea0f0
 8000808:	1810a6a0 	.word	0x1810a6a0
 800080c:	08f200a0 	.word	0x08f200a0
 8000810:	0cff08ef 	.word	0x0cff08ef
 8000814:	200000d9 	.word	0x200000d9
 8000818:	2000009e 	.word	0x2000009e
 800081c:	2000009d 	.word	0x2000009d
 8000820:	20000329 	.word	0x20000329
 8000824:	200000c8 	.word	0x200000c8
 8000828:	2000034a 	.word	0x2000034a

0800082c <LocalToABU>:

void LocalToABU(FDCAN_RxHeaderTypeDef *rxheader, uint8_t *rxdata) {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
	switch(rxheader->Identifier) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f240 3233 	movw	r2, #819	; 0x333
 800083e:	4293      	cmp	r3, r2
 8000840:	f000 80e7 	beq.w	8000a12 <LocalToABU+0x1e6>
 8000844:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8000848:	f080 80f2 	bcs.w	8000a30 <LocalToABU+0x204>
 800084c:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8000850:	f000 80d4 	beq.w	80009fc <LocalToABU+0x1d0>
 8000854:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8000858:	f200 80ea 	bhi.w	8000a30 <LocalToABU+0x204>
 800085c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000860:	f000 808d 	beq.w	800097e <LocalToABU+0x152>
 8000864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000868:	f200 80e2 	bhi.w	8000a30 <LocalToABU+0x204>
 800086c:	f240 1221 	movw	r2, #289	; 0x121
 8000870:	4293      	cmp	r3, r2
 8000872:	d003      	beq.n	800087c <LocalToABU+0x50>
 8000874:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8000878:	d072      	beq.n	8000960 <LocalToABU+0x134>
		pBrake_status = rxdata[0];
		vehicle_vel = rxdata[1];
		brake_status = rxdata[2];
		break;
	}
}
 800087a:	e0d9      	b.n	8000a30 <LocalToABU+0x204>
		lamp_rx_data[0] = rxdata[0];
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	4b6e      	ldr	r3, [pc, #440]	; (8000a3c <LocalToABU+0x210>)
 8000882:	701a      	strb	r2, [r3, #0]
		if( (lamp_rx_data[0]&0x01) == 0x01 ) {
 8000884:	4b6d      	ldr	r3, [pc, #436]	; (8000a3c <LocalToABU+0x210>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	2b00      	cmp	r3, #0
 800088e:	d003      	beq.n	8000898 <LocalToABU+0x6c>
			taillamp_on = 1;
 8000890:	4b6b      	ldr	r3, [pc, #428]	; (8000a40 <LocalToABU+0x214>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e008      	b.n	80008aa <LocalToABU+0x7e>
		} else if( (lamp_rx_data[0]&0x01) == 0x00 ) {
 8000898:	4b68      	ldr	r3, [pc, #416]	; (8000a3c <LocalToABU+0x210>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <LocalToABU+0x7e>
			taillamp_on = 0;
 80008a4:	4b66      	ldr	r3, [pc, #408]	; (8000a40 <LocalToABU+0x214>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
		if( (lamp_rx_data[0]&0x10) == 0x10 ) {
 80008aa:	4b64      	ldr	r3, [pc, #400]	; (8000a3c <LocalToABU+0x210>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d003      	beq.n	80008be <LocalToABU+0x92>
			headlamp_low_on = 1;
 80008b6:	4b63      	ldr	r3, [pc, #396]	; (8000a44 <LocalToABU+0x218>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	e008      	b.n	80008d0 <LocalToABU+0xa4>
		} else if( (lamp_rx_data[0]&0x10) == 0x00 ){
 80008be:	4b5f      	ldr	r3, [pc, #380]	; (8000a3c <LocalToABU+0x210>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	f003 0310 	and.w	r3, r3, #16
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d102      	bne.n	80008d0 <LocalToABU+0xa4>
			headlamp_low_on = 0;
 80008ca:	4b5e      	ldr	r3, [pc, #376]	; (8000a44 <LocalToABU+0x218>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
		if( (lamp_rx_data[0]&0x04) == 0x04 ) {
 80008d0:	4b5a      	ldr	r3, [pc, #360]	; (8000a3c <LocalToABU+0x210>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d003      	beq.n	80008e4 <LocalToABU+0xb8>
			turnlamp_left_on = 1;
 80008dc:	4b5a      	ldr	r3, [pc, #360]	; (8000a48 <LocalToABU+0x21c>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
 80008e2:	e008      	b.n	80008f6 <LocalToABU+0xca>
		} else if( (lamp_rx_data[0]&0x04) == 0x00 ){
 80008e4:	4b55      	ldr	r3, [pc, #340]	; (8000a3c <LocalToABU+0x210>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <LocalToABU+0xca>
			turnlamp_left_on = 0;
 80008f0:	4b55      	ldr	r3, [pc, #340]	; (8000a48 <LocalToABU+0x21c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
		if( (lamp_rx_data[0]&0x08) == 0x08 ) {
 80008f6:	4b51      	ldr	r3, [pc, #324]	; (8000a3c <LocalToABU+0x210>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <LocalToABU+0xde>
			turnlamp_right_on = 1;
 8000902:	4b52      	ldr	r3, [pc, #328]	; (8000a4c <LocalToABU+0x220>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e008      	b.n	800091c <LocalToABU+0xf0>
		} else if( (lamp_rx_data[0]&0x08) == 0x00 ){
 800090a:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <LocalToABU+0x210>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	2b00      	cmp	r3, #0
 8000914:	d102      	bne.n	800091c <LocalToABU+0xf0>
			turnlamp_right_on = 0;
 8000916:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <LocalToABU+0x220>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
		door_open_status = (rxdata[0]&0x40) >> 6;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	119b      	asrs	r3, r3, #6
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b49      	ldr	r3, [pc, #292]	; (8000a50 <LocalToABU+0x224>)
 800092c:	701a      	strb	r2, [r3, #0]
		charge_door_status = (rxdata[0]&0x80) >> 7;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	09db      	lsrs	r3, r3, #7
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <LocalToABU+0x228>)
 8000938:	701a      	strb	r2, [r3, #0]
		RF_open_lamp = rxdata[1]&0x01;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <LocalToABU+0x22c>)
 8000948:	701a      	strb	r2, [r3, #0]
		RF_close_lamp = (rxdata[1]&0x02) >> 1;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	105b      	asrs	r3, r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b40      	ldr	r3, [pc, #256]	; (8000a5c <LocalToABU+0x230>)
 800095c:	701a      	strb	r2, [r3, #0]
		break;
 800095e:	e067      	b.n	8000a30 <LocalToABU+0x204>
		dimmer_volt = rxdata[3] | (rxdata[4]<<8);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	3303      	adds	r3, #3
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b21a      	sxth	r2, r3
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	3304      	adds	r3, #4
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21b      	sxth	r3, r3
 8000976:	b29a      	uxth	r2, r3
 8000978:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <LocalToABU+0x234>)
 800097a:	801a      	strh	r2, [r3, #0]
		break;
 800097c:	e058      	b.n	8000a30 <LocalToABU+0x204>
		ign1_status = rxdata[0]&0x01;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <LocalToABU+0x238>)
 800098a:	701a      	strb	r2, [r3, #0]
		ign2_status = (rxdata[0]&0x80)>>7;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	09db      	lsrs	r3, r3, #7
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b34      	ldr	r3, [pc, #208]	; (8000a68 <LocalToABU+0x23c>)
 8000996:	701a      	strb	r2, [r3, #0]
		vehicle_vel = rxdata[1] | (rxdata[2]<<8);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b21a      	sxth	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	3302      	adds	r3, #2
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b21a      	sxth	r2, r3
 80009ae:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <LocalToABU+0x240>)
 80009b0:	801a      	strh	r2, [r3, #0]
		brake_status = rxdata[5] & 0x01;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	3305      	adds	r3, #5
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <LocalToABU+0x244>)
 80009c0:	701a      	strb	r2, [r3, #0]
		pBrake_status = (rxdata[5]&0x38) >> 3;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	3305      	adds	r3, #5
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	10db      	asrs	r3, r3, #3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f003 0307 	and.w	r3, r3, #7
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <LocalToABU+0x248>)
 80009d4:	701a      	strb	r2, [r3, #0]
		ems_status = rxdata[6] & 0x01;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	3306      	adds	r3, #6
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <LocalToABU+0x24c>)
 80009e4:	701a      	strb	r2, [r3, #0]
		auto_mode = (rxdata[6]&0x02) >> 1;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	3306      	adds	r3, #6
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	105b      	asrs	r3, r3, #1
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <LocalToABU+0x250>)
 80009f8:	701a      	strb	r2, [r3, #0]
		break;
 80009fa:	e019      	b.n	8000a30 <LocalToABU+0x204>
		akit_command.hazard_cmd = (rxdata[1]&0x10) >> 4;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	3301      	adds	r3, #1
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	111b      	asrs	r3, r3, #4
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <LocalToABU+0x254>)
 8000a0e:	701a      	strb	r2, [r3, #0]
		break;
 8000a10:	e00e      	b.n	8000a30 <LocalToABU+0x204>
		pBrake_status = rxdata[0];
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <LocalToABU+0x248>)
 8000a18:	701a      	strb	r2, [r3, #0]
		vehicle_vel = rxdata[1];
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <LocalToABU+0x240>)
 8000a24:	801a      	strh	r2, [r3, #0]
		brake_status = rxdata[2];
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	789a      	ldrb	r2, [r3, #2]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <LocalToABU+0x244>)
 8000a2c:	701a      	strb	r2, [r3, #0]
		break;
 8000a2e:	bf00      	nop
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20000240 	.word	0x20000240
 8000a40:	200002ec 	.word	0x200002ec
 8000a44:	200000cd 	.word	0x200000cd
 8000a48:	2000035b 	.word	0x2000035b
 8000a4c:	2000004d 	.word	0x2000004d
 8000a50:	2000034b 	.word	0x2000034b
 8000a54:	2000009c 	.word	0x2000009c
 8000a58:	200001a3 	.word	0x200001a3
 8000a5c:	20000278 	.word	0x20000278
 8000a60:	20000324 	.word	0x20000324
 8000a64:	2000035a 	.word	0x2000035a
 8000a68:	2000027b 	.word	0x2000027b
 8000a6c:	200003d6 	.word	0x200003d6
 8000a70:	2000027e 	.word	0x2000027e
 8000a74:	20000358 	.word	0x20000358
 8000a78:	20000328 	.word	0x20000328
 8000a7c:	20000281 	.word	0x20000281
 8000a80:	20000154 	.word	0x20000154

08000a84 <CanTxMessage>:

void CanTxMessage(uint32_t id, uint32_t length, uint8_t *data, uint8_t *flag)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	603b      	str	r3, [r7, #0]
	if( *flag ) {
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d013      	beq.n	8000ac2 <CanTxMessage+0x3e>
		can2_tx_header.Identifier = id;
 8000a9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <CanTxMessage+0x4c>)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	6013      	str	r3, [r2, #0]
		can2_tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <CanTxMessage+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
		can2_tx_header.IdType = FDCAN_STANDARD_ID;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <CanTxMessage+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
		can2_tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <CanTxMessage+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
		can2_tx_header.DataLength = length;
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <CanTxMessage+0x4c>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]

		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &can2_tx_header, data);
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	4905      	ldr	r1, [pc, #20]	; (8000ad0 <CanTxMessage+0x4c>)
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <CanTxMessage+0x50>)
 8000abe:	f002 fe90 	bl	80037e2 <HAL_FDCAN_AddMessageToTxFifoQ>
	}

	(*flag) = 0;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000016c 	.word	0x2000016c
 8000ad4:	2000035c 	.word	0x2000035c

08000ad8 <VehicleDataConv>:

void VehicleDataConv(uint8_t *txdata, uint8_t *flag, uint8_t *curr_rx_flag)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
	static int16_t vehicle_current_i16 = 0;

	if( *curr_rx_flag == 1 ) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d120      	bne.n	8000b2e <VehicleDataConv+0x56>
		vehicle_current_i16 = vehicle_current;
 8000aec:	4b3d      	ldr	r3, [pc, #244]	; (8000be4 <VehicleDataConv+0x10c>)
 8000aee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000af2:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <VehicleDataConv+0x110>)
 8000af4:	801a      	strh	r2, [r3, #0]
		vehicle_current_i16 = (vehicle_current_i16 - 5000) * (-1);
 8000af6:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <VehicleDataConv+0x110>)
 8000af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000b02:	3308      	adds	r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	4b37      	ldr	r3, [pc, #220]	; (8000be8 <VehicleDataConv+0x110>)
 8000b0a:	801a      	strh	r2, [r3, #0]
		if( vehicle_current_i16 < 0 ) {
 8000b0c:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <VehicleDataConv+0x110>)
 8000b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da03      	bge.n	8000b1e <VehicleDataConv+0x46>
			vehicle_current_i16 = 0;
 8000b16:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <VehicleDataConv+0x110>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	801a      	strh	r2, [r3, #0]
 8000b1c:	e007      	b.n	8000b2e <VehicleDataConv+0x56>
		} else if( vehicle_current_i16 > 100 ) {
 8000b1e:	4b32      	ldr	r3, [pc, #200]	; (8000be8 <VehicleDataConv+0x110>)
 8000b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b24:	2b64      	cmp	r3, #100	; 0x64
 8000b26:	dd02      	ble.n	8000b2e <VehicleDataConv+0x56>
			vehicle_current_i16 = 100;
 8000b28:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <VehicleDataConv+0x110>)
 8000b2a:	2264      	movs	r2, #100	; 0x64
 8000b2c:	801a      	strh	r2, [r3, #0]
				charge_mode = 3;
			}
		}
	}
#endif
	if( charge_door_status == 0 ) {
 8000b2e:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <VehicleDataConv+0x114>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d103      	bne.n	8000b3e <VehicleDataConv+0x66>
		charge_mode = 0;
 8000b36:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <VehicleDataConv+0x118>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e025      	b.n	8000b8a <VehicleDataConv+0xb2>
	} else if( charge_door_status == 1 ) {
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <VehicleDataConv+0x114>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d121      	bne.n	8000b8a <VehicleDataConv+0xb2>
		if( ign1_status == 0 ) {
 8000b46:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <VehicleDataConv+0x11c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d116      	bne.n	8000b7c <VehicleDataConv+0xa4>
			if( vehicle_charge_status == 0x03 ) {
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <VehicleDataConv+0x120>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d103      	bne.n	8000b5e <VehicleDataConv+0x86>
				charge_mode = 1;
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <VehicleDataConv+0x118>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e015      	b.n	8000b8a <VehicleDataConv+0xb2>
			} else if( vehicle_charge_status == 0x01 ) {
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <VehicleDataConv+0x120>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d111      	bne.n	8000b8a <VehicleDataConv+0xb2>
				charge_mode = 2;
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <VehicleDataConv+0x118>)
 8000b68:	2202      	movs	r2, #2
 8000b6a:	701a      	strb	r2, [r3, #0]
				if( soc_value == 100 ) {
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <VehicleDataConv+0x124>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b64      	cmp	r3, #100	; 0x64
 8000b72:	d10a      	bne.n	8000b8a <VehicleDataConv+0xb2>
					charge_mode = 3;
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <VehicleDataConv+0x118>)
 8000b76:	2203      	movs	r2, #3
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e006      	b.n	8000b8a <VehicleDataConv+0xb2>
				}
			}
		} else if( ign1_status == 1 ) {
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <VehicleDataConv+0x11c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d102      	bne.n	8000b8a <VehicleDataConv+0xb2>
			charge_mode = 0;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <VehicleDataConv+0x118>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
		}
	}

	txdata[0] = vehicle_current_i16;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <VehicleDataConv+0x110>)
 8000b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	701a      	strb	r2, [r3, #0]
	txdata[1] = soc_value;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <VehicleDataConv+0x124>)
 8000b9c:	7812      	ldrb	r2, [r2, #0]
 8000b9e:	701a      	strb	r2, [r3, #0]
	txdata[2] = charge_mode;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <VehicleDataConv+0x118>)
 8000ba6:	7812      	ldrb	r2, [r2, #0]
 8000ba8:	701a      	strb	r2, [r3, #0]
	txdata[3] = car_ready_status;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3303      	adds	r3, #3
 8000bae:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <VehicleDataConv+0x128>)
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	701a      	strb	r2, [r3, #0]
	txdata[4] = vehicle_voltage;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <VehicleDataConv+0x12c>)
 8000bb6:	881a      	ldrh	r2, [r3, #0]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3304      	adds	r3, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	701a      	strb	r2, [r3, #0]
	txdata[5] = vehicle_voltage >> 8;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <VehicleDataConv+0x12c>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3305      	adds	r3, #5
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	701a      	strb	r2, [r3, #0]

	(*flag) = 1;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	2000009e 	.word	0x2000009e
 8000be8:	20000038 	.word	0x20000038
 8000bec:	2000009c 	.word	0x2000009c
 8000bf0:	2000027d 	.word	0x2000027d
 8000bf4:	2000035a 	.word	0x2000035a
 8000bf8:	2000034a 	.word	0x2000034a
 8000bfc:	20000329 	.word	0x20000329
 8000c00:	200000d9 	.word	0x200000d9
 8000c04:	200000c8 	.word	0x200000c8

08000c08 <CANReStart>:

void CANReStart()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	if( ++can_not_receive_cnt > 4 ) {
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <CANReStart+0x4c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <CANReStart+0x4c>)
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <CANReStart+0x4c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d916      	bls.n	8000c4e <CANReStart+0x46>
		if( can_not_receive_cnt == 5 ) {
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <CANReStart+0x4c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b05      	cmp	r3, #5
 8000c26:	d103      	bne.n	8000c30 <CANReStart+0x28>
			HAL_FDCAN_Stop(&hfdcan2);
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <CANReStart+0x50>)
 8000c2a:	f002 fd6a 	bl	8003702 <HAL_FDCAN_Stop>
				Error_Handler();
			}
			can_not_receive_cnt = 0;
		}
	}
}
 8000c2e:	e00e      	b.n	8000c4e <CANReStart+0x46>
		} else if( can_not_receive_cnt > 5) {
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <CANReStart+0x4c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b05      	cmp	r3, #5
 8000c36:	d90a      	bls.n	8000c4e <CANReStart+0x46>
			if( HAL_FDCAN_Start(&hfdcan2) != HAL_OK ) {
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <CANReStart+0x50>)
 8000c3a:	f002 fd3a 	bl	80036b2 <HAL_FDCAN_Start>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <CANReStart+0x40>
				Error_Handler();
 8000c44:	f001 fe84 	bl	8002950 <Error_Handler>
			can_not_receive_cnt = 0;
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <CANReStart+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000ad 	.word	0x200000ad
 8000c58:	2000035c 	.word	0x2000035c

08000c5c <DoorWarningControl>:

/*
 * Door Open Warning Control
 */
void DoorWarningControl()
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	} else if( ign1_status == 0 ) {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
		door_warning_cnt = 0;
	}
#endif
	if ( ign1_status == 1 ) {
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <DoorWarningControl+0x64>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d11e      	bne.n	8000ca6 <DoorWarningControl+0x4a>
		if( door_open_status == 1 ) {
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <DoorWarningControl+0x68>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d112      	bne.n	8000c96 <DoorWarningControl+0x3a>
			if( (vehicle_vel>=100) || (vehicle_vel<=-100) ) {
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <DoorWarningControl+0x6c>)
 8000c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c76:	2b63      	cmp	r3, #99	; 0x63
 8000c78:	dc05      	bgt.n	8000c86 <DoorWarningControl+0x2a>
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <DoorWarningControl+0x6c>)
 8000c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c80:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000c84:	da03      	bge.n	8000c8e <DoorWarningControl+0x32>
				Warning_Status.door_open = 1;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <DoorWarningControl+0x70>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
			Warning_Status.door_open = 0;
		}
	} else if( ign1_status == 0 ) {
		Warning_Status.door_open = 0;
	}
}
 8000c8c:	e012      	b.n	8000cb4 <DoorWarningControl+0x58>
				Warning_Status.door_open = 0;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <DoorWarningControl+0x70>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
}
 8000c94:	e00e      	b.n	8000cb4 <DoorWarningControl+0x58>
		} else if( door_open_status == 0 ) {
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <DoorWarningControl+0x68>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10a      	bne.n	8000cb4 <DoorWarningControl+0x58>
			Warning_Status.door_open = 0;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <DoorWarningControl+0x70>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
}
 8000ca4:	e006      	b.n	8000cb4 <DoorWarningControl+0x58>
	} else if( ign1_status == 0 ) {
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <DoorWarningControl+0x64>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <DoorWarningControl+0x58>
		Warning_Status.door_open = 0;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <DoorWarningControl+0x70>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	2000035a 	.word	0x2000035a
 8000cc4:	2000034b 	.word	0x2000034b
 8000cc8:	200003d6 	.word	0x200003d6
 8000ccc:	20000194 	.word	0x20000194

08000cd0 <PBrakeWarningControl>:

/*
 * Parking Brake Apply Warning Control
 */
void PBrakeWarningControl()
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	} else if( ign1_status == 0 ) {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
		pbrake_warning_cnt = 0;
	}
#endif
	if ( ign1_status == 1 ) {
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <PBrakeWarningControl+0x50>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d115      	bne.n	8000d08 <PBrakeWarningControl+0x38>
		if( pBrake_status == 1 ) {
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <PBrakeWarningControl+0x54>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d10d      	bne.n	8000d00 <PBrakeWarningControl+0x30>
			if( vehicle_vel >= 300 ) {
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <PBrakeWarningControl+0x58>)
 8000ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000cee:	db03      	blt.n	8000cf8 <PBrakeWarningControl+0x28>
				Warning_Status.pbrake = 1;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <PBrakeWarningControl+0x5c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	709a      	strb	r2, [r3, #2]
			Warning_Status.pbrake = 0;
		}
	} else if( ign1_status == 0 ) {
		Warning_Status.pbrake = 0;
	}
}
 8000cf6:	e00e      	b.n	8000d16 <PBrakeWarningControl+0x46>
				Warning_Status.pbrake = 0;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <PBrakeWarningControl+0x5c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	709a      	strb	r2, [r3, #2]
}
 8000cfe:	e00a      	b.n	8000d16 <PBrakeWarningControl+0x46>
			Warning_Status.pbrake = 0;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <PBrakeWarningControl+0x5c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	709a      	strb	r2, [r3, #2]
}
 8000d06:	e006      	b.n	8000d16 <PBrakeWarningControl+0x46>
	} else if( ign1_status == 0 ) {
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <PBrakeWarningControl+0x50>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <PBrakeWarningControl+0x46>
		Warning_Status.pbrake = 0;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <PBrakeWarningControl+0x5c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	709a      	strb	r2, [r3, #2]
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	2000035a 	.word	0x2000035a
 8000d24:	20000358 	.word	0x20000358
 8000d28:	200003d6 	.word	0x200003d6
 8000d2c:	20000194 	.word	0x20000194

08000d30 <SeatBeltRead>:

void SeatBeltRead()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	if( ign1_status == 1 ) {
 8000d34:	4ba2      	ldr	r3, [pc, #648]	; (8000fc0 <SeatBeltRead+0x290>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	f040 80f0 	bne.w	8000f1e <SeatBeltRead+0x1ee>
		if( column_on_seq == 0 ) {
 8000d3e:	4ba1      	ldr	r3, [pc, #644]	; (8000fc4 <SeatBeltRead+0x294>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d131      	bne.n	8000daa <SeatBeltRead+0x7a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4c:	489e      	ldr	r0, [pc, #632]	; (8000fc8 <SeatBeltRead+0x298>)
 8000d4e:	f003 fb71 	bl	8004434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET);				// Col 0 Drv
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d58:	489b      	ldr	r0, [pc, #620]	; (8000fc8 <SeatBeltRead+0x298>)
 8000d5a:	f003 fb6b 	bl	8004434 <HAL_GPIO_WritePin>
			if( column_on_cnt > 2 ) {
 8000d5e:	4b9b      	ldr	r3, [pc, #620]	; (8000fcc <SeatBeltRead+0x29c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	f240 80c0 	bls.w	8000ee8 <SeatBeltRead+0x1b8>
				Seat_Status.belt1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);		// DI 11
 8000d68:	2110      	movs	r1, #16
 8000d6a:	4897      	ldr	r0, [pc, #604]	; (8000fc8 <SeatBeltRead+0x298>)
 8000d6c:	f003 fb4a 	bl	8004404 <HAL_GPIO_ReadPin>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b96      	ldr	r3, [pc, #600]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000d76:	721a      	strb	r2, [r3, #8]
				Seat_Status.belt2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);		// DI 12
 8000d78:	2104      	movs	r1, #4
 8000d7a:	4896      	ldr	r0, [pc, #600]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000d7c:	f003 fb42 	bl	8004404 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b92      	ldr	r3, [pc, #584]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000d86:	725a      	strb	r2, [r3, #9]
				Seat_Status.seat1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);		// DI 13
 8000d88:	2108      	movs	r1, #8
 8000d8a:	4892      	ldr	r0, [pc, #584]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000d8c:	f003 fb3a 	bl	8004404 <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b8e      	ldr	r3, [pc, #568]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000d96:	701a      	strb	r2, [r3, #0]
				Seat_Status.seat2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);		// DI 14
 8000d98:	2110      	movs	r1, #16
 8000d9a:	488e      	ldr	r0, [pc, #568]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000d9c:	f003 fb32 	bl	8004404 <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b8a      	ldr	r3, [pc, #552]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000da6:	705a      	strb	r2, [r3, #1]
 8000da8:	e09e      	b.n	8000ee8 <SeatBeltRead+0x1b8>
			}
		} else if( column_on_seq == 1 ) {
 8000daa:	4b86      	ldr	r3, [pc, #536]	; (8000fc4 <SeatBeltRead+0x294>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d131      	bne.n	8000e16 <SeatBeltRead+0xe6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db8:	4883      	ldr	r0, [pc, #524]	; (8000fc8 <SeatBeltRead+0x298>)
 8000dba:	f003 fb3b 	bl	8004434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);				// Col 1 Drv
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc4:	4880      	ldr	r0, [pc, #512]	; (8000fc8 <SeatBeltRead+0x298>)
 8000dc6:	f003 fb35 	bl	8004434 <HAL_GPIO_WritePin>
			if( column_on_cnt > 2 ) {
 8000dca:	4b80      	ldr	r3, [pc, #512]	; (8000fcc <SeatBeltRead+0x29c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	f240 808a 	bls.w	8000ee8 <SeatBeltRead+0x1b8>
				Seat_Status.belt3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	487c      	ldr	r0, [pc, #496]	; (8000fc8 <SeatBeltRead+0x298>)
 8000dd8:	f003 fb14 	bl	8004404 <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b7b      	ldr	r3, [pc, #492]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000de2:	729a      	strb	r2, [r3, #10]
				Seat_Status.belt4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 8000de4:	2104      	movs	r1, #4
 8000de6:	487b      	ldr	r0, [pc, #492]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000de8:	f003 fb0c 	bl	8004404 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b77      	ldr	r3, [pc, #476]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000df2:	72da      	strb	r2, [r3, #11]
				Seat_Status.seat3 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 8000df4:	2108      	movs	r1, #8
 8000df6:	4877      	ldr	r0, [pc, #476]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000df8:	f003 fb04 	bl	8004404 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b73      	ldr	r3, [pc, #460]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000e02:	709a      	strb	r2, [r3, #2]
				Seat_Status.seat4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8000e04:	2110      	movs	r1, #16
 8000e06:	4873      	ldr	r0, [pc, #460]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000e08:	f003 fafc 	bl	8004404 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b6f      	ldr	r3, [pc, #444]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000e12:	70da      	strb	r2, [r3, #3]
 8000e14:	e068      	b.n	8000ee8 <SeatBeltRead+0x1b8>
			}
		} else if( column_on_seq == 2 ) {
 8000e16:	4b6b      	ldr	r3, [pc, #428]	; (8000fc4 <SeatBeltRead+0x294>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d130      	bne.n	8000e80 <SeatBeltRead+0x150>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e24:	4868      	ldr	r0, [pc, #416]	; (8000fc8 <SeatBeltRead+0x298>)
 8000e26:	f003 fb05 	bl	8004434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);				// Col 2 Drv
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e30:	4865      	ldr	r0, [pc, #404]	; (8000fc8 <SeatBeltRead+0x298>)
 8000e32:	f003 faff 	bl	8004434 <HAL_GPIO_WritePin>
			if( column_on_cnt > 2 ) {
 8000e36:	4b65      	ldr	r3, [pc, #404]	; (8000fcc <SeatBeltRead+0x29c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d954      	bls.n	8000ee8 <SeatBeltRead+0x1b8>
				Seat_Status.belt5 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4861      	ldr	r0, [pc, #388]	; (8000fc8 <SeatBeltRead+0x298>)
 8000e42:	f003 fadf 	bl	8004404 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b61      	ldr	r3, [pc, #388]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000e4c:	731a      	strb	r2, [r3, #12]
				Seat_Status.belt6 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4860      	ldr	r0, [pc, #384]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000e52:	f003 fad7 	bl	8004404 <HAL_GPIO_ReadPin>
 8000e56:	4603      	mov	r3, r0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b5d      	ldr	r3, [pc, #372]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000e5c:	735a      	strb	r2, [r3, #13]
				Seat_Status.seat5 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 8000e5e:	2108      	movs	r1, #8
 8000e60:	485c      	ldr	r0, [pc, #368]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000e62:	f003 facf 	bl	8004404 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b59      	ldr	r3, [pc, #356]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000e6c:	711a      	strb	r2, [r3, #4]
				Seat_Status.seat6 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4858      	ldr	r0, [pc, #352]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000e72:	f003 fac7 	bl	8004404 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b55      	ldr	r3, [pc, #340]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000e7c:	715a      	strb	r2, [r3, #5]
 8000e7e:	e033      	b.n	8000ee8 <SeatBeltRead+0x1b8>
			}
		} else if( column_on_seq == 3 ) {
 8000e80:	4b50      	ldr	r3, [pc, #320]	; (8000fc4 <SeatBeltRead+0x294>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d12f      	bne.n	8000ee8 <SeatBeltRead+0x1b8>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e8e:	484e      	ldr	r0, [pc, #312]	; (8000fc8 <SeatBeltRead+0x298>)
 8000e90:	f003 fad0 	bl	8004434 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);				// Col 3 Drv
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e9a:	484b      	ldr	r0, [pc, #300]	; (8000fc8 <SeatBeltRead+0x298>)
 8000e9c:	f003 faca 	bl	8004434 <HAL_GPIO_WritePin>
			if( column_on_cnt > 2 ) {
 8000ea0:	4b4a      	ldr	r3, [pc, #296]	; (8000fcc <SeatBeltRead+0x29c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d91f      	bls.n	8000ee8 <SeatBeltRead+0x1b8>
				Seat_Status.belt7 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	4847      	ldr	r0, [pc, #284]	; (8000fc8 <SeatBeltRead+0x298>)
 8000eac:	f003 faaa 	bl	8004404 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b46      	ldr	r3, [pc, #280]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000eb6:	739a      	strb	r2, [r3, #14]
				Seat_Status.belt8 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4846      	ldr	r0, [pc, #280]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000ebc:	f003 faa2 	bl	8004404 <HAL_GPIO_ReadPin>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b42      	ldr	r3, [pc, #264]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000ec6:	73da      	strb	r2, [r3, #15]
				Seat_Status.seat7 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 8000ec8:	2108      	movs	r1, #8
 8000eca:	4842      	ldr	r0, [pc, #264]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000ecc:	f003 fa9a 	bl	8004404 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b3e      	ldr	r3, [pc, #248]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000ed6:	719a      	strb	r2, [r3, #6]
				Seat_Status.seat8 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8000ed8:	2110      	movs	r1, #16
 8000eda:	483e      	ldr	r0, [pc, #248]	; (8000fd4 <SeatBeltRead+0x2a4>)
 8000edc:	f003 fa92 	bl	8004404 <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b3a      	ldr	r3, [pc, #232]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000ee6:	71da      	strb	r2, [r3, #7]
			}
		}
		if( ++column_on_cnt > 5 ) {
 8000ee8:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <SeatBeltRead+0x29c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <SeatBeltRead+0x29c>)
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	4b35      	ldr	r3, [pc, #212]	; (8000fcc <SeatBeltRead+0x29c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d95e      	bls.n	8000fba <SeatBeltRead+0x28a>
			if( ++column_on_seq > 3 ) {
 8000efc:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <SeatBeltRead+0x294>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <SeatBeltRead+0x294>)
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <SeatBeltRead+0x294>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d902      	bls.n	8000f16 <SeatBeltRead+0x1e6>
				column_on_seq = 0;
 8000f10:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <SeatBeltRead+0x294>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
			}
			column_on_cnt = 0;
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <SeatBeltRead+0x29c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
		Seat_Status.belt1 = Seat_Status.belt2 = Seat_Status.belt3 = Seat_Status.belt4 =
				Seat_Status.belt5 = Seat_Status.belt6 = Seat_Status.belt7 = Seat_Status.belt8 = 0;
		column_on_seq = 0;
		column_on_cnt = 0;
	}
}
 8000f1c:	e04d      	b.n	8000fba <SeatBeltRead+0x28a>
	} else if( ign1_status == 0 ) {
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <SeatBeltRead+0x290>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d149      	bne.n	8000fba <SeatBeltRead+0x28a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000f2c:	4826      	ldr	r0, [pc, #152]	; (8000fc8 <SeatBeltRead+0x298>)
 8000f2e:	f003 fa81 	bl	8004434 <HAL_GPIO_WritePin>
				Seat_Status.seat5 = Seat_Status.seat6 = Seat_Status.seat7 = Seat_Status.seat8 = 0;
 8000f32:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	71da      	strb	r2, [r3, #7]
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f3a:	79da      	ldrb	r2, [r3, #7]
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f3e:	719a      	strb	r2, [r3, #6]
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f42:	799a      	ldrb	r2, [r3, #6]
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f46:	715a      	strb	r2, [r3, #5]
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f4a:	795a      	ldrb	r2, [r3, #5]
 8000f4c:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f4e:	711a      	strb	r2, [r3, #4]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f52:	791a      	ldrb	r2, [r3, #4]
		Seat_Status.seat1 = Seat_Status.seat2 = Seat_Status.seat3 = Seat_Status.seat4 =
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f56:	70da      	strb	r2, [r3, #3]
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f5a:	78da      	ldrb	r2, [r3, #3]
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f5e:	709a      	strb	r2, [r3, #2]
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f62:	789a      	ldrb	r2, [r3, #2]
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f66:	705a      	strb	r2, [r3, #1]
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f6a:	785a      	ldrb	r2, [r3, #1]
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f6e:	701a      	strb	r2, [r3, #0]
				Seat_Status.belt5 = Seat_Status.belt6 = Seat_Status.belt7 = Seat_Status.belt8 = 0;
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	73da      	strb	r2, [r3, #15]
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f78:	7bda      	ldrb	r2, [r3, #15]
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f7c:	739a      	strb	r2, [r3, #14]
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f80:	7b9a      	ldrb	r2, [r3, #14]
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f84:	735a      	strb	r2, [r3, #13]
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f88:	7b5a      	ldrb	r2, [r3, #13]
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f8c:	731a      	strb	r2, [r3, #12]
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f90:	7b1a      	ldrb	r2, [r3, #12]
		Seat_Status.belt1 = Seat_Status.belt2 = Seat_Status.belt3 = Seat_Status.belt4 =
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f94:	72da      	strb	r2, [r3, #11]
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f98:	7ada      	ldrb	r2, [r3, #11]
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000f9c:	729a      	strb	r2, [r3, #10]
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000fa0:	7a9a      	ldrb	r2, [r3, #10]
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000fa4:	725a      	strb	r2, [r3, #9]
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000fa8:	7a5a      	ldrb	r2, [r3, #9]
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <SeatBeltRead+0x2a0>)
 8000fac:	721a      	strb	r2, [r3, #8]
		column_on_seq = 0;
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SeatBeltRead+0x294>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
		column_on_cnt = 0;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SeatBeltRead+0x29c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000035a 	.word	0x2000035a
 8000fc4:	20000335 	.word	0x20000335
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	2000031d 	.word	0x2000031d
 8000fd0:	20000158 	.word	0x20000158
 8000fd4:	48001000 	.word	0x48001000

08000fd8 <SeatbeltWarningControl>:

/*
 * Seatbelt Warning Control
 */
void SeatbeltWarningControl()
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
			drv_seatbelt_warning = 0;
			drv_seatbelt_cnt = 0;
		}
	}
#endif
	if( ign1_status == 1 ) {
 8000fdc:	4b54      	ldr	r3, [pc, #336]	; (8001130 <SeatbeltWarningControl+0x158>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	f040 809f 	bne.w	8001124 <SeatbeltWarningControl+0x14c>
		if( (Seat_Status.seat1==1) && (Seat_Status.belt1==1) ) {
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <SeatbeltWarningControl+0x15c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d107      	bne.n	8000ffe <SeatbeltWarningControl+0x26>
 8000fee:	4b51      	ldr	r3, [pc, #324]	; (8001134 <SeatbeltWarningControl+0x15c>)
 8000ff0:	7a1b      	ldrb	r3, [r3, #8]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d103      	bne.n	8000ffe <SeatbeltWarningControl+0x26>
			Warning_Status.seat1 = 1;
 8000ff6:	4b50      	ldr	r3, [pc, #320]	; (8001138 <SeatbeltWarningControl+0x160>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	70da      	strb	r2, [r3, #3]
 8000ffc:	e002      	b.n	8001004 <SeatbeltWarningControl+0x2c>
		} else {
			Warning_Status.seat1 = 0;
 8000ffe:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001000:	2200      	movs	r2, #0
 8001002:	70da      	strb	r2, [r3, #3]
		}
		if( (Seat_Status.seat2==1) && (Seat_Status.belt2==1) ) {
 8001004:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <SeatbeltWarningControl+0x15c>)
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d107      	bne.n	800101c <SeatbeltWarningControl+0x44>
 800100c:	4b49      	ldr	r3, [pc, #292]	; (8001134 <SeatbeltWarningControl+0x15c>)
 800100e:	7a5b      	ldrb	r3, [r3, #9]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d103      	bne.n	800101c <SeatbeltWarningControl+0x44>
			Warning_Status.seat2 = 1;
 8001014:	4b48      	ldr	r3, [pc, #288]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001016:	2201      	movs	r2, #1
 8001018:	711a      	strb	r2, [r3, #4]
 800101a:	e002      	b.n	8001022 <SeatbeltWarningControl+0x4a>
		} else {
			Warning_Status.seat2 = 0;
 800101c:	4b46      	ldr	r3, [pc, #280]	; (8001138 <SeatbeltWarningControl+0x160>)
 800101e:	2200      	movs	r2, #0
 8001020:	711a      	strb	r2, [r3, #4]
		}
		if( (Seat_Status.seat3==1) && (Seat_Status.belt3==1) ) {
 8001022:	4b44      	ldr	r3, [pc, #272]	; (8001134 <SeatbeltWarningControl+0x15c>)
 8001024:	789b      	ldrb	r3, [r3, #2]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d107      	bne.n	800103a <SeatbeltWarningControl+0x62>
 800102a:	4b42      	ldr	r3, [pc, #264]	; (8001134 <SeatbeltWarningControl+0x15c>)
 800102c:	7a9b      	ldrb	r3, [r3, #10]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d103      	bne.n	800103a <SeatbeltWarningControl+0x62>
			Warning_Status.seat3 = 1;
 8001032:	4b41      	ldr	r3, [pc, #260]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001034:	2201      	movs	r2, #1
 8001036:	715a      	strb	r2, [r3, #5]
 8001038:	e002      	b.n	8001040 <SeatbeltWarningControl+0x68>
		} else {
			Warning_Status.seat3 = 0;
 800103a:	4b3f      	ldr	r3, [pc, #252]	; (8001138 <SeatbeltWarningControl+0x160>)
 800103c:	2200      	movs	r2, #0
 800103e:	715a      	strb	r2, [r3, #5]
		}
		if( (Seat_Status.seat4==1) && (Seat_Status.belt4==1) ) {
 8001040:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <SeatbeltWarningControl+0x15c>)
 8001042:	78db      	ldrb	r3, [r3, #3]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d107      	bne.n	8001058 <SeatbeltWarningControl+0x80>
 8001048:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <SeatbeltWarningControl+0x15c>)
 800104a:	7adb      	ldrb	r3, [r3, #11]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d103      	bne.n	8001058 <SeatbeltWarningControl+0x80>
			Warning_Status.seat4 = 1;
 8001050:	4b39      	ldr	r3, [pc, #228]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001052:	2201      	movs	r2, #1
 8001054:	719a      	strb	r2, [r3, #6]
 8001056:	e002      	b.n	800105e <SeatbeltWarningControl+0x86>
		} else {
			Warning_Status.seat4 = 0;
 8001058:	4b37      	ldr	r3, [pc, #220]	; (8001138 <SeatbeltWarningControl+0x160>)
 800105a:	2200      	movs	r2, #0
 800105c:	719a      	strb	r2, [r3, #6]
		}
		if( (Seat_Status.seat5==1) && (Seat_Status.belt5==1) ) {
 800105e:	4b35      	ldr	r3, [pc, #212]	; (8001134 <SeatbeltWarningControl+0x15c>)
 8001060:	791b      	ldrb	r3, [r3, #4]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d107      	bne.n	8001076 <SeatbeltWarningControl+0x9e>
 8001066:	4b33      	ldr	r3, [pc, #204]	; (8001134 <SeatbeltWarningControl+0x15c>)
 8001068:	7b1b      	ldrb	r3, [r3, #12]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d103      	bne.n	8001076 <SeatbeltWarningControl+0x9e>
			Warning_Status.seat5 = 1;
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001070:	2201      	movs	r2, #1
 8001072:	71da      	strb	r2, [r3, #7]
 8001074:	e002      	b.n	800107c <SeatbeltWarningControl+0xa4>
		} else {
			Warning_Status.seat5 = 0;
 8001076:	4b30      	ldr	r3, [pc, #192]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001078:	2200      	movs	r2, #0
 800107a:	71da      	strb	r2, [r3, #7]
		}
		if( (Seat_Status.seat6==1) && (Seat_Status.belt6==1) ) {
 800107c:	4b2d      	ldr	r3, [pc, #180]	; (8001134 <SeatbeltWarningControl+0x15c>)
 800107e:	795b      	ldrb	r3, [r3, #5]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d107      	bne.n	8001094 <SeatbeltWarningControl+0xbc>
 8001084:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <SeatbeltWarningControl+0x15c>)
 8001086:	7b5b      	ldrb	r3, [r3, #13]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d103      	bne.n	8001094 <SeatbeltWarningControl+0xbc>
			Warning_Status.seat6 = 1;
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <SeatbeltWarningControl+0x160>)
 800108e:	2201      	movs	r2, #1
 8001090:	721a      	strb	r2, [r3, #8]
 8001092:	e002      	b.n	800109a <SeatbeltWarningControl+0xc2>
		} else {
			Warning_Status.seat6 = 0;
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001096:	2200      	movs	r2, #0
 8001098:	721a      	strb	r2, [r3, #8]
		}
		if( (Seat_Status.seat7==1) && (Seat_Status.belt7==1) ) {
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <SeatbeltWarningControl+0x15c>)
 800109c:	799b      	ldrb	r3, [r3, #6]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d107      	bne.n	80010b2 <SeatbeltWarningControl+0xda>
 80010a2:	4b24      	ldr	r3, [pc, #144]	; (8001134 <SeatbeltWarningControl+0x15c>)
 80010a4:	7b9b      	ldrb	r3, [r3, #14]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d103      	bne.n	80010b2 <SeatbeltWarningControl+0xda>
			Warning_Status.seat7 = 1;
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <SeatbeltWarningControl+0x160>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	725a      	strb	r2, [r3, #9]
 80010b0:	e002      	b.n	80010b8 <SeatbeltWarningControl+0xe0>
		} else {
			Warning_Status.seat7 = 0;
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <SeatbeltWarningControl+0x160>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	725a      	strb	r2, [r3, #9]
		}
		if( (Seat_Status.seat8==1) && (Seat_Status.belt8==1) ) {
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <SeatbeltWarningControl+0x15c>)
 80010ba:	79db      	ldrb	r3, [r3, #7]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d107      	bne.n	80010d0 <SeatbeltWarningControl+0xf8>
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <SeatbeltWarningControl+0x15c>)
 80010c2:	7bdb      	ldrb	r3, [r3, #15]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d103      	bne.n	80010d0 <SeatbeltWarningControl+0xf8>
			Warning_Status.seat8 = 1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <SeatbeltWarningControl+0x160>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	729a      	strb	r2, [r3, #10]
 80010ce:	e002      	b.n	80010d6 <SeatbeltWarningControl+0xfe>
		} else {
			Warning_Status.seat8 = 0;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <SeatbeltWarningControl+0x160>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	729a      	strb	r2, [r3, #10]
		}

		if( (Warning_Status.seat1==1) || (Warning_Status.seat2==1) || (Warning_Status.seat3==1) || (Warning_Status.seat4==1) ||
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <SeatbeltWarningControl+0x160>)
 80010d8:	78db      	ldrb	r3, [r3, #3]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d01b      	beq.n	8001116 <SeatbeltWarningControl+0x13e>
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <SeatbeltWarningControl+0x160>)
 80010e0:	791b      	ldrb	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d017      	beq.n	8001116 <SeatbeltWarningControl+0x13e>
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <SeatbeltWarningControl+0x160>)
 80010e8:	795b      	ldrb	r3, [r3, #5]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d013      	beq.n	8001116 <SeatbeltWarningControl+0x13e>
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <SeatbeltWarningControl+0x160>)
 80010f0:	799b      	ldrb	r3, [r3, #6]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d00f      	beq.n	8001116 <SeatbeltWarningControl+0x13e>
				(Warning_Status.seat5==1) || (Warning_Status.seat6==1) || (Warning_Status.seat7==1) || (Warning_Status.seat8==1) ) {
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <SeatbeltWarningControl+0x160>)
 80010f8:	79db      	ldrb	r3, [r3, #7]
		if( (Warning_Status.seat1==1) || (Warning_Status.seat2==1) || (Warning_Status.seat3==1) || (Warning_Status.seat4==1) ||
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d00b      	beq.n	8001116 <SeatbeltWarningControl+0x13e>
				(Warning_Status.seat5==1) || (Warning_Status.seat6==1) || (Warning_Status.seat7==1) || (Warning_Status.seat8==1) ) {
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001100:	7a1b      	ldrb	r3, [r3, #8]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d007      	beq.n	8001116 <SeatbeltWarningControl+0x13e>
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001108:	7a5b      	ldrb	r3, [r3, #9]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d003      	beq.n	8001116 <SeatbeltWarningControl+0x13e>
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001110:	7a9b      	ldrb	r3, [r3, #10]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d103      	bne.n	800111e <SeatbeltWarningControl+0x146>
			Warning_Status.seatbelt = 1;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001118:	2201      	movs	r2, #1
 800111a:	705a      	strb	r2, [r3, #1]
		} else {
			Warning_Status.seatbelt = 0;
		}
	}
}
 800111c:	e002      	b.n	8001124 <SeatbeltWarningControl+0x14c>
			Warning_Status.seatbelt = 0;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SeatbeltWarningControl+0x160>)
 8001120:	2200      	movs	r2, #0
 8001122:	705a      	strb	r2, [r3, #1]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000035a 	.word	0x2000035a
 8001134:	20000158 	.word	0x20000158
 8001138:	20000194 	.word	0x20000194

0800113c <SeatbeltDataConv>:
		}
	}
}

void SeatbeltDataConv(uint8_t *txdata, uint8_t *txflag)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	if( *txflag ) {
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80c2 	beq.w	80012d4 <SeatbeltDataConv+0x198>
		txdata[0] = (Warning_Status.seat1) | (Warning_Status.seat2<<1) | (Warning_Status.seat3<<2) | (Warning_Status.seat4<<3) |
 8001150:	4b63      	ldr	r3, [pc, #396]	; (80012e0 <SeatbeltDataConv+0x1a4>)
 8001152:	78db      	ldrb	r3, [r3, #3]
 8001154:	b25a      	sxtb	r2, r3
 8001156:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <SeatbeltDataConv+0x1a4>)
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	b25b      	sxtb	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b25a      	sxtb	r2, r3
 8001162:	4b5f      	ldr	r3, [pc, #380]	; (80012e0 <SeatbeltDataConv+0x1a4>)
 8001164:	795b      	ldrb	r3, [r3, #5]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	b25b      	sxtb	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b25a      	sxtb	r2, r3
 800116e:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <SeatbeltDataConv+0x1a4>)
 8001170:	799b      	ldrb	r3, [r3, #6]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	b25b      	sxtb	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b25a      	sxtb	r2, r3
				(Warning_Status.seat5<<4) | (Warning_Status.seat6<<5) | (Warning_Status.seat7<<6) | (Warning_Status.seat8<<7);
 800117a:	4b59      	ldr	r3, [pc, #356]	; (80012e0 <SeatbeltDataConv+0x1a4>)
 800117c:	79db      	ldrb	r3, [r3, #7]
 800117e:	011b      	lsls	r3, r3, #4
		txdata[0] = (Warning_Status.seat1) | (Warning_Status.seat2<<1) | (Warning_Status.seat3<<2) | (Warning_Status.seat4<<3) |
 8001180:	b25b      	sxtb	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b25a      	sxtb	r2, r3
				(Warning_Status.seat5<<4) | (Warning_Status.seat6<<5) | (Warning_Status.seat7<<6) | (Warning_Status.seat8<<7);
 8001186:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <SeatbeltDataConv+0x1a4>)
 8001188:	7a1b      	ldrb	r3, [r3, #8]
 800118a:	015b      	lsls	r3, r3, #5
 800118c:	b25b      	sxtb	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b25a      	sxtb	r2, r3
 8001192:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <SeatbeltDataConv+0x1a4>)
 8001194:	7a5b      	ldrb	r3, [r3, #9]
 8001196:	019b      	lsls	r3, r3, #6
 8001198:	b25b      	sxtb	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b25a      	sxtb	r2, r3
 800119e:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <SeatbeltDataConv+0x1a4>)
 80011a0:	7a9b      	ldrb	r3, [r3, #10]
 80011a2:	01db      	lsls	r3, r3, #7
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	b2da      	uxtb	r2, r3
		txdata[0] = (Warning_Status.seat1) | (Warning_Status.seat2<<1) | (Warning_Status.seat3<<2) | (Warning_Status.seat4<<3) |
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	701a      	strb	r2, [r3, #0]
		txdata[1] = Seat_Status.seat1 | (Seat_Status.seat2<<1) | (Seat_Status.seat3<<2) | (Seat_Status.seat4<<3) |
 80011b0:	4b4c      	ldr	r3, [pc, #304]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b25a      	sxtb	r2, r3
 80011b6:	4b4b      	ldr	r3, [pc, #300]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 80011b8:	785b      	ldrb	r3, [r3, #1]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b25a      	sxtb	r2, r3
 80011c2:	4b48      	ldr	r3, [pc, #288]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 80011c4:	789b      	ldrb	r3, [r3, #2]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 80011d0:	78db      	ldrb	r3, [r3, #3]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b25a      	sxtb	r2, r3
				(Seat_Status.seat5<<4) | (Seat_Status.seat6<<5) | (Seat_Status.seat7<<6) | (Seat_Status.seat8<<7);
 80011da:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 80011dc:	791b      	ldrb	r3, [r3, #4]
 80011de:	011b      	lsls	r3, r3, #4
		txdata[1] = Seat_Status.seat1 | (Seat_Status.seat2<<1) | (Seat_Status.seat3<<2) | (Seat_Status.seat4<<3) |
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b25a      	sxtb	r2, r3
				(Seat_Status.seat5<<4) | (Seat_Status.seat6<<5) | (Seat_Status.seat7<<6) | (Seat_Status.seat8<<7);
 80011e6:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 80011e8:	795b      	ldrb	r3, [r3, #5]
 80011ea:	015b      	lsls	r3, r3, #5
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	4b3c      	ldr	r3, [pc, #240]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 80011f4:	799b      	ldrb	r3, [r3, #6]
 80011f6:	019b      	lsls	r3, r3, #6
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b25a      	sxtb	r2, r3
 80011fe:	4b39      	ldr	r3, [pc, #228]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 8001200:	79db      	ldrb	r3, [r3, #7]
 8001202:	01db      	lsls	r3, r3, #7
 8001204:	b25b      	sxtb	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b25a      	sxtb	r2, r3
		txdata[1] = Seat_Status.seat1 | (Seat_Status.seat2<<1) | (Seat_Status.seat3<<2) | (Seat_Status.seat4<<3) |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3301      	adds	r3, #1
				(Seat_Status.seat5<<4) | (Seat_Status.seat6<<5) | (Seat_Status.seat7<<6) | (Seat_Status.seat8<<7);
 800120e:	b2d2      	uxtb	r2, r2
		txdata[1] = Seat_Status.seat1 | (Seat_Status.seat2<<1) | (Seat_Status.seat3<<2) | (Seat_Status.seat4<<3) |
 8001210:	701a      	strb	r2, [r3, #0]
		txdata[2] = Seat_Status.belt1 | (Seat_Status.belt2<<1) | (Seat_Status.belt3<<2) | (Seat_Status.belt4<<3) |
 8001212:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 8001214:	7a1b      	ldrb	r3, [r3, #8]
 8001216:	b25a      	sxtb	r2, r3
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 800121a:	7a5b      	ldrb	r3, [r3, #9]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	b25b      	sxtb	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b25a      	sxtb	r2, r3
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 8001226:	7a9b      	ldrb	r3, [r3, #10]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	b25b      	sxtb	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b25a      	sxtb	r2, r3
 8001230:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 8001232:	7adb      	ldrb	r3, [r3, #11]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	b25b      	sxtb	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b25a      	sxtb	r2, r3
				(Seat_Status.belt5<<4) | (Seat_Status.belt6<<5) | (Seat_Status.belt7<<6) | (Seat_Status.belt8<<7);
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 800123e:	7b1b      	ldrb	r3, [r3, #12]
 8001240:	011b      	lsls	r3, r3, #4
		txdata[2] = Seat_Status.belt1 | (Seat_Status.belt2<<1) | (Seat_Status.belt3<<2) | (Seat_Status.belt4<<3) |
 8001242:	b25b      	sxtb	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b25a      	sxtb	r2, r3
				(Seat_Status.belt5<<4) | (Seat_Status.belt6<<5) | (Seat_Status.belt7<<6) | (Seat_Status.belt8<<7);
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 800124a:	7b5b      	ldrb	r3, [r3, #13]
 800124c:	015b      	lsls	r3, r3, #5
 800124e:	b25b      	sxtb	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b25a      	sxtb	r2, r3
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 8001256:	7b9b      	ldrb	r3, [r3, #14]
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	b25b      	sxtb	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b25a      	sxtb	r2, r3
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <SeatbeltDataConv+0x1a8>)
 8001262:	7bdb      	ldrb	r3, [r3, #15]
 8001264:	01db      	lsls	r3, r3, #7
 8001266:	b25b      	sxtb	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b25a      	sxtb	r2, r3
		txdata[2] = Seat_Status.belt1 | (Seat_Status.belt2<<1) | (Seat_Status.belt3<<2) | (Seat_Status.belt4<<3) |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3302      	adds	r3, #2
				(Seat_Status.belt5<<4) | (Seat_Status.belt6<<5) | (Seat_Status.belt7<<6) | (Seat_Status.belt8<<7);
 8001270:	b2d2      	uxtb	r2, r2
		txdata[2] = Seat_Status.belt1 | (Seat_Status.belt2<<1) | (Seat_Status.belt3<<2) | (Seat_Status.belt4<<3) |
 8001272:	701a      	strb	r2, [r3, #0]
		txdata[3] = (Warning_Status.door_open<<1) | (Warning_Status.pbrake<<2) | (Warning_Status.seatbelt<<3);
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <SeatbeltDataConv+0x1a4>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	b25a      	sxtb	r2, r3
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <SeatbeltDataConv+0x1a4>)
 800127e:	789b      	ldrb	r3, [r3, #2]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	b25b      	sxtb	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b25a      	sxtb	r2, r3
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <SeatbeltDataConv+0x1a4>)
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	b25b      	sxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b25a      	sxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3303      	adds	r3, #3
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	701a      	strb	r2, [r3, #0]
		txdata[4] = distant_volt;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <SeatbeltDataConv+0x1ac>)
 800129e:	881a      	ldrh	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3304      	adds	r3, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	701a      	strb	r2, [r3, #0]
		txdata[5] = distant_volt >> 8;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <SeatbeltDataConv+0x1ac>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3305      	adds	r3, #5
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	701a      	strb	r2, [r3, #0]
		txdata[6] = sun_volt;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <SeatbeltDataConv+0x1b0>)
 80012ba:	881a      	ldrh	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3306      	adds	r3, #6
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	701a      	strb	r2, [r3, #0]
		txdata[7] = sun_volt >> 8;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <SeatbeltDataConv+0x1b0>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3307      	adds	r3, #7
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
	}
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20000194 	.word	0x20000194
 80012e4:	20000158 	.word	0x20000158
 80012e8:	200003c2 	.word	0x200003c2
 80012ec:	2000032a 	.word	0x2000032a

080012f0 <WarningAlarmControl>:

void WarningAlarmControl()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	static uint8_t warning_cnt;

	if( (distant_alarm==1) &&  (distant_alarm_on==0) ) {
 80012f4:	4b6a      	ldr	r3, [pc, #424]	; (80014a0 <WarningAlarmControl+0x1b0>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d106      	bne.n	800130a <WarningAlarmControl+0x1a>
 80012fc:	4b69      	ldr	r3, [pc, #420]	; (80014a4 <WarningAlarmControl+0x1b4>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <WarningAlarmControl+0x1a>
		distant_alarm_on = 1;
 8001304:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <WarningAlarmControl+0x1b4>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
	}

	if( Warning_Status.door_open == 1 ) {
 800130a:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <WarningAlarmControl+0x1b8>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d124      	bne.n	800135c <WarningAlarmControl+0x6c>
		if( ++warning_cnt < 33) {
 8001312:	4b66      	ldr	r3, [pc, #408]	; (80014ac <WarningAlarmControl+0x1bc>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b64      	ldr	r3, [pc, #400]	; (80014ac <WarningAlarmControl+0x1bc>)
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	4b63      	ldr	r3, [pc, #396]	; (80014ac <WarningAlarmControl+0x1bc>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b20      	cmp	r3, #32
 8001324:	d806      	bhi.n	8001334 <WarningAlarmControl+0x44>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132c:	4860      	ldr	r0, [pc, #384]	; (80014b0 <WarningAlarmControl+0x1c0>)
 800132e:	f003 f881 	bl	8004434 <HAL_GPIO_WritePin>
 8001332:	e0af      	b.n	8001494 <WarningAlarmControl+0x1a4>
//			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
		} else if( warning_cnt < 67 ) {
 8001334:	4b5d      	ldr	r3, [pc, #372]	; (80014ac <WarningAlarmControl+0x1bc>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b42      	cmp	r3, #66	; 0x42
 800133a:	f200 80ab 	bhi.w	8001494 <WarningAlarmControl+0x1a4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001344:	485a      	ldr	r0, [pc, #360]	; (80014b0 <WarningAlarmControl+0x1c0>)
 8001346:	f003 f875 	bl	8004434 <HAL_GPIO_WritePin>
			if( warning_cnt == 66 ) {
 800134a:	4b58      	ldr	r3, [pc, #352]	; (80014ac <WarningAlarmControl+0x1bc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b42      	cmp	r3, #66	; 0x42
 8001350:	f040 80a0 	bne.w	8001494 <WarningAlarmControl+0x1a4>
				warning_cnt = 0;
 8001354:	4b55      	ldr	r3, [pc, #340]	; (80014ac <WarningAlarmControl+0x1bc>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
 800135a:	e09b      	b.n	8001494 <WarningAlarmControl+0x1a4>
			}
		}
	} else if( Warning_Status.pbrake == 1 ) {
 800135c:	4b52      	ldr	r3, [pc, #328]	; (80014a8 <WarningAlarmControl+0x1b8>)
 800135e:	789b      	ldrb	r3, [r3, #2]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d123      	bne.n	80013ac <WarningAlarmControl+0xbc>
		if( ++warning_cnt < 33) {
 8001364:	4b51      	ldr	r3, [pc, #324]	; (80014ac <WarningAlarmControl+0x1bc>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <WarningAlarmControl+0x1bc>)
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	4b4e      	ldr	r3, [pc, #312]	; (80014ac <WarningAlarmControl+0x1bc>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b20      	cmp	r3, #32
 8001376:	d806      	bhi.n	8001386 <WarningAlarmControl+0x96>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137e:	484c      	ldr	r0, [pc, #304]	; (80014b0 <WarningAlarmControl+0x1c0>)
 8001380:	f003 f858 	bl	8004434 <HAL_GPIO_WritePin>
 8001384:	e086      	b.n	8001494 <WarningAlarmControl+0x1a4>
//			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
		} else if( warning_cnt < 67 ) {
 8001386:	4b49      	ldr	r3, [pc, #292]	; (80014ac <WarningAlarmControl+0x1bc>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b42      	cmp	r3, #66	; 0x42
 800138c:	f200 8082 	bhi.w	8001494 <WarningAlarmControl+0x1a4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001396:	4846      	ldr	r0, [pc, #280]	; (80014b0 <WarningAlarmControl+0x1c0>)
 8001398:	f003 f84c 	bl	8004434 <HAL_GPIO_WritePin>
			if( warning_cnt == 66 ) {
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <WarningAlarmControl+0x1bc>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b42      	cmp	r3, #66	; 0x42
 80013a2:	d177      	bne.n	8001494 <WarningAlarmControl+0x1a4>
				warning_cnt = 0;
 80013a4:	4b41      	ldr	r3, [pc, #260]	; (80014ac <WarningAlarmControl+0x1bc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e073      	b.n	8001494 <WarningAlarmControl+0x1a4>
			}
		}
	} else if ( Warning_Status.seatbelt == 1 )  {
 80013ac:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <WarningAlarmControl+0x1b8>)
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d135      	bne.n	8001420 <WarningAlarmControl+0x130>
		if( vehicle_vel > 300 ) {
 80013b4:	4b3f      	ldr	r3, [pc, #252]	; (80014b4 <WarningAlarmControl+0x1c4>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013be:	dd22      	ble.n	8001406 <WarningAlarmControl+0x116>
			if( ++warning_cnt < 33) {
 80013c0:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <WarningAlarmControl+0x1bc>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <WarningAlarmControl+0x1bc>)
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	4b37      	ldr	r3, [pc, #220]	; (80014ac <WarningAlarmControl+0x1bc>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	d806      	bhi.n	80013e2 <WarningAlarmControl+0xf2>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013da:	4835      	ldr	r0, [pc, #212]	; (80014b0 <WarningAlarmControl+0x1c0>)
 80013dc:	f003 f82a 	bl	8004434 <HAL_GPIO_WritePin>
 80013e0:	e058      	b.n	8001494 <WarningAlarmControl+0x1a4>
//				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
			} else if( warning_cnt < 67 ) {
 80013e2:	4b32      	ldr	r3, [pc, #200]	; (80014ac <WarningAlarmControl+0x1bc>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b42      	cmp	r3, #66	; 0x42
 80013e8:	d854      	bhi.n	8001494 <WarningAlarmControl+0x1a4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f0:	482f      	ldr	r0, [pc, #188]	; (80014b0 <WarningAlarmControl+0x1c0>)
 80013f2:	f003 f81f 	bl	8004434 <HAL_GPIO_WritePin>
				if( warning_cnt == 66 ) {
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <WarningAlarmControl+0x1bc>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b42      	cmp	r3, #66	; 0x42
 80013fc:	d14a      	bne.n	8001494 <WarningAlarmControl+0x1a4>
					warning_cnt = 0;
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <WarningAlarmControl+0x1bc>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	e046      	b.n	8001494 <WarningAlarmControl+0x1a4>
				}
			}
		} else if( vehicle_vel <= 300 )  {
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <WarningAlarmControl+0x1c4>)
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001410:	dc40      	bgt.n	8001494 <WarningAlarmControl+0x1a4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001418:	4825      	ldr	r0, [pc, #148]	; (80014b0 <WarningAlarmControl+0x1c0>)
 800141a:	f003 f80b 	bl	8004434 <HAL_GPIO_WritePin>
 800141e:	e039      	b.n	8001494 <WarningAlarmControl+0x1a4>
		}

	} else if( distant_alarm_on == 1 ) {
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <WarningAlarmControl+0x1b4>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d11c      	bne.n	8001462 <WarningAlarmControl+0x172>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142e:	4820      	ldr	r0, [pc, #128]	; (80014b0 <WarningAlarmControl+0x1c0>)
 8001430:	f003 f800 	bl	8004434 <HAL_GPIO_WritePin>
		if( ++distant_alarm_on_cnt > 16 ) {
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <WarningAlarmControl+0x1c8>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <WarningAlarmControl+0x1c8>)
 800143e:	701a      	strb	r2, [r3, #0]
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <WarningAlarmControl+0x1c8>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b10      	cmp	r3, #16
 8001446:	d925      	bls.n	8001494 <WarningAlarmControl+0x1a4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144e:	4818      	ldr	r0, [pc, #96]	; (80014b0 <WarningAlarmControl+0x1c0>)
 8001450:	f002 fff0 	bl	8004434 <HAL_GPIO_WritePin>
			distant_alarm_on = 0;
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <WarningAlarmControl+0x1b4>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
			distant_alarm_on_cnt = 0;
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <WarningAlarmControl+0x1c8>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	e018      	b.n	8001494 <WarningAlarmControl+0x1a4>
		}

	} else if( (Warning_Status.door_open==0) && (Warning_Status.pbrake==0) && (Warning_Status.seatbelt==0) && (distant_alarm_on==0) ) {
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <WarningAlarmControl+0x1b8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d114      	bne.n	8001494 <WarningAlarmControl+0x1a4>
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <WarningAlarmControl+0x1b8>)
 800146c:	789b      	ldrb	r3, [r3, #2]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d110      	bne.n	8001494 <WarningAlarmControl+0x1a4>
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <WarningAlarmControl+0x1b8>)
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <WarningAlarmControl+0x1a4>
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <WarningAlarmControl+0x1b4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d108      	bne.n	8001494 <WarningAlarmControl+0x1a4>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <WarningAlarmControl+0x1c0>)
 800148a:	f002 ffd3 	bl	8004434 <HAL_GPIO_WritePin>
		warning_cnt = 0;
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <WarningAlarmControl+0x1bc>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
	}
	distant_alarm_prev = distant_alarm;
 8001494:	4b02      	ldr	r3, [pc, #8]	; (80014a0 <WarningAlarmControl+0x1b0>)
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <WarningAlarmControl+0x1cc>)
 800149a:	701a      	strb	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200001a0 	.word	0x200001a0
 80014a4:	2000026e 	.word	0x2000026e
 80014a8:	20000194 	.word	0x20000194
 80014ac:	2000003a 	.word	0x2000003a
 80014b0:	48000c00 	.word	0x48000c00
 80014b4:	200003d6 	.word	0x200003d6
 80014b8:	200000a0 	.word	0x200000a0
 80014bc:	20000047 	.word	0x20000047

080014c0 <LampSWRead>:
		0x30, 0x30, 0x30, 0x03};
#endif


void LampSWRead(struct InputStatus_s *input_status)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	Input_Status_Raw.brake_push_sw = READ_PIN_DI_0;		// DI 0
 80014c8:	2101      	movs	r1, #1
 80014ca:	4818      	ldr	r0, [pc, #96]	; (800152c <LampSWRead+0x6c>)
 80014cc:	f002 ff9a 	bl	8004404 <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <LampSWRead+0x70>)
 80014d6:	701a      	strb	r2, [r3, #0]
	if( auto_mode == 1 ) {
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <LampSWRead+0x74>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d104      	bne.n	80014ea <LampSWRead+0x2a>
		hazard_on = akit_command.hazard_cmd;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <LampSWRead+0x78>)
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <LampSWRead+0x7c>)
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e00c      	b.n	8001504 <LampSWRead+0x44>
	} else if( auto_mode == 0 ) {
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <LampSWRead+0x74>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d108      	bne.n	8001504 <LampSWRead+0x44>
		Input_Status_Raw.hazardlamp = READ_PIN_DI_6;		// DI 6
 80014f2:	2108      	movs	r1, #8
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f002 ff84 	bl	8004404 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <LampSWRead+0x70>)
 8001502:	705a      	strb	r2, [r3, #1]
	}

	InputSWChatt(input_status);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f821 	bl	800154c <InputSWChatt>

	Input_Status_Prev.brake_push_sw = Input_Status_Raw.brake_push_sw;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <LampSWRead+0x70>)
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <LampSWRead+0x80>)
 8001510:	701a      	strb	r2, [r3, #0]
	Input_Status_Prev.hazardlamp = Input_Status_Raw.hazardlamp;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <LampSWRead+0x70>)
 8001514:	785a      	ldrb	r2, [r3, #1]
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <LampSWRead+0x80>)
 8001518:	705a      	strb	r2, [r3, #1]
	hazard_push_prev = hazard_push;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <LampSWRead+0x84>)
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <LampSWRead+0x88>)
 8001520:	701a      	strb	r2, [r3, #0]
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	48000800 	.word	0x48000800
 8001530:	200003dc 	.word	0x200003dc
 8001534:	20000281 	.word	0x20000281
 8001538:	20000154 	.word	0x20000154
 800153c:	20000320 	.word	0x20000320
 8001540:	200000d0 	.word	0x200000d0
 8001544:	20000279 	.word	0x20000279
 8001548:	20000352 	.word	0x20000352

0800154c <InputSWChatt>:

void InputSWChatt(struct InputStatus_s *input_status)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	if( Input_Status_Prev.brake_push_sw == Input_Status_Raw.brake_push_sw ) {
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <InputSWChatt+0xb8>)
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <InputSWChatt+0xbc>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d111      	bne.n	8001584 <InputSWChatt+0x38>
		if( ++Chattering.brake_push_sw_cnt > 1 ) {
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <InputSWChatt+0xc0>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b28      	ldr	r3, [pc, #160]	; (800160c <InputSWChatt+0xc0>)
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <InputSWChatt+0xc0>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d90a      	bls.n	800158a <InputSWChatt+0x3e>
			input_status->brake_push_sw = Input_Status_Raw.brake_push_sw;
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <InputSWChatt+0xbc>)
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	701a      	strb	r2, [r3, #0]
			Chattering.brake_push_sw_cnt = 3;
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <InputSWChatt+0xc0>)
 800157e:	2203      	movs	r2, #3
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	e002      	b.n	800158a <InputSWChatt+0x3e>
		}
	} else {
		Chattering.brake_push_sw_cnt = 0;
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <InputSWChatt+0xc0>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
	}

	if( Input_Status_Prev.hazardlamp == Input_Status_Raw.hazardlamp ) {
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <InputSWChatt+0xb8>)
 800158c:	785a      	ldrb	r2, [r3, #1]
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <InputSWChatt+0xbc>)
 8001590:	785b      	ldrb	r3, [r3, #1]
 8001592:	429a      	cmp	r2, r3
 8001594:	d12c      	bne.n	80015f0 <InputSWChatt+0xa4>
		if( ++Chattering.hazardlamp_cnt > 1 ) {
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <InputSWChatt+0xc0>)
 8001598:	785b      	ldrb	r3, [r3, #1]
 800159a:	3301      	adds	r3, #1
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <InputSWChatt+0xc0>)
 80015a0:	705a      	strb	r2, [r3, #1]
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <InputSWChatt+0xc0>)
 80015a4:	785b      	ldrb	r3, [r3, #1]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d925      	bls.n	80015f6 <InputSWChatt+0xaa>
			hazard_push = input_status->hazardlamp = Input_Status_Raw.hazardlamp;
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <InputSWChatt+0xbc>)
 80015ac:	785a      	ldrb	r2, [r3, #1]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	705a      	strb	r2, [r3, #1]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	785a      	ldrb	r2, [r3, #1]
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <InputSWChatt+0xc4>)
 80015b8:	701a      	strb	r2, [r3, #0]
			if( (hazard_push_prev==0) && (hazard_push==1) ) {
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <InputSWChatt+0xc8>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d112      	bne.n	80015e8 <InputSWChatt+0x9c>
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <InputSWChatt+0xc4>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d10e      	bne.n	80015e8 <InputSWChatt+0x9c>
				if( hazard_on == 0 ) {
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <InputSWChatt+0xcc>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <InputSWChatt+0x8e>
					hazard_on = 1;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <InputSWChatt+0xcc>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e006      	b.n	80015e8 <InputSWChatt+0x9c>
				} else if( hazard_on == 1 ) {
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <InputSWChatt+0xcc>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d102      	bne.n	80015e8 <InputSWChatt+0x9c>
					hazard_on = 0;
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <InputSWChatt+0xcc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
				}
			}
			Chattering.hazardlamp_cnt = 3;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <InputSWChatt+0xc0>)
 80015ea:	2203      	movs	r2, #3
 80015ec:	705a      	strb	r2, [r3, #1]
		}
	} else {
		Chattering.hazardlamp_cnt = 0;
	}
}
 80015ee:	e002      	b.n	80015f6 <InputSWChatt+0xaa>
		Chattering.hazardlamp_cnt = 0;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <InputSWChatt+0xc0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	705a      	strb	r2, [r3, #1]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200000d0 	.word	0x200000d0
 8001608:	200003dc 	.word	0x200003dc
 800160c:	200002f0 	.word	0x200002f0
 8001610:	20000279 	.word	0x20000279
 8001614:	20000352 	.word	0x20000352
 8001618:	20000320 	.word	0x20000320

0800161c <LampControl>:

void LampControl(struct LampStatus_s *lamp_status, struct InputStatus_s *input_status)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
#endif

	/*
	 * Head Lamp Low Control
	 */
	if( headlamp_low_on == 1 ) {
 8001626:	4ba3      	ldr	r3, [pc, #652]	; (80018b4 <LampControl+0x298>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d106      	bne.n	800163c <LampControl+0x20>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001634:	48a0      	ldr	r0, [pc, #640]	; (80018b8 <LampControl+0x29c>)
 8001636:	f002 fefd 	bl	8004434 <HAL_GPIO_WritePin>
 800163a:	e00c      	b.n	8001656 <LampControl+0x3a>
	} else if ( headlamp_low_on == 0 ) {
 800163c:	4b9d      	ldr	r3, [pc, #628]	; (80018b4 <LampControl+0x298>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d108      	bne.n	8001656 <LampControl+0x3a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164a:	489b      	ldr	r0, [pc, #620]	; (80018b8 <LampControl+0x29c>)
 800164c:	f002 fef2 	bl	8004434 <HAL_GPIO_WritePin>
		head_low_lamp_fail_on_cnt = 0;
 8001650:	4b9a      	ldr	r3, [pc, #616]	; (80018bc <LampControl+0x2a0>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10 | GPIO_PIN_11, RESET);
			}
		}
	}
#else
	if( (RF_open_lamp_on==0) && (RF_close_lamp_on==0) ) {
 8001656:	4b9a      	ldr	r3, [pc, #616]	; (80018c0 <LampControl+0x2a4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f040 80af 	bne.w	80017be <LampControl+0x1a2>
 8001660:	4b98      	ldr	r3, [pc, #608]	; (80018c4 <LampControl+0x2a8>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	f040 80aa 	bne.w	80017be <LampControl+0x1a2>
		/*
		 * Hazard Lamp Control
		 */
		if( (taillamp_on==1) && (hazard_on==0) ) {
 800166a:	4b97      	ldr	r3, [pc, #604]	; (80018c8 <LampControl+0x2ac>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d10a      	bne.n	8001688 <LampControl+0x6c>
 8001672:	4b96      	ldr	r3, [pc, #600]	; (80018cc <LampControl+0x2b0>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d106      	bne.n	8001688 <LampControl+0x6c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001680:	488d      	ldr	r0, [pc, #564]	; (80018b8 <LampControl+0x29c>)
 8001682:	f002 fed7 	bl	8004434 <HAL_GPIO_WritePin>
 8001686:	e00d      	b.n	80016a4 <LampControl+0x88>
		} else if( (taillamp_on==0) && (hazard_on==0) ) {
 8001688:	4b8f      	ldr	r3, [pc, #572]	; (80018c8 <LampControl+0x2ac>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <LampControl+0x88>
 8001690:	4b8e      	ldr	r3, [pc, #568]	; (80018cc <LampControl+0x2b0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <LampControl+0x88>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169e:	4886      	ldr	r0, [pc, #536]	; (80018b8 <LampControl+0x29c>)
 80016a0:	f002 fec8 	bl	8004434 <HAL_GPIO_WritePin>
		}
		if( (hazard_on==1) || (ems_status==1) ) {
 80016a4:	4b89      	ldr	r3, [pc, #548]	; (80018cc <LampControl+0x2b0>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d003      	beq.n	80016b4 <LampControl+0x98>
 80016ac:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <LampControl+0x2b4>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d12d      	bne.n	8001710 <LampControl+0xf4>
			lamp_status->hazard_lamp = 1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
			if( turnlamp_left_on == 1 ) {
 80016ba:	4b86      	ldr	r3, [pc, #536]	; (80018d4 <LampControl+0x2b8>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d106      	bne.n	80016d0 <LampControl+0xb4>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_12, SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80016c8:	487b      	ldr	r0, [pc, #492]	; (80018b8 <LampControl+0x29c>)
 80016ca:	f002 feb3 	bl	8004434 <HAL_GPIO_WritePin>
 80016ce:	e009      	b.n	80016e4 <LampControl+0xc8>
			} else if( turnlamp_left_on == 0 ) {
 80016d0:	4b80      	ldr	r3, [pc, #512]	; (80018d4 <LampControl+0x2b8>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <LampControl+0xc8>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_12, RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80016de:	4876      	ldr	r0, [pc, #472]	; (80018b8 <LampControl+0x29c>)
 80016e0:	f002 fea8 	bl	8004434 <HAL_GPIO_WritePin>
			}
			if( turnlamp_right_on == 1 ) {
 80016e4:	4b7c      	ldr	r3, [pc, #496]	; (80018d8 <LampControl+0x2bc>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d106      	bne.n	80016fa <LampControl+0xde>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016f2:	4871      	ldr	r0, [pc, #452]	; (80018b8 <LampControl+0x29c>)
 80016f4:	f002 fe9e 	bl	8004434 <HAL_GPIO_WritePin>
			if( turnlamp_right_on == 1 ) {
 80016f8:	e060      	b.n	80017bc <LampControl+0x1a0>
			} else if( turnlamp_right_on == 0 ) {
 80016fa:	4b77      	ldr	r3, [pc, #476]	; (80018d8 <LampControl+0x2bc>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d15c      	bne.n	80017bc <LampControl+0x1a0>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001708:	486b      	ldr	r0, [pc, #428]	; (80018b8 <LampControl+0x29c>)
 800170a:	f002 fe93 	bl	8004434 <HAL_GPIO_WritePin>
			if( turnlamp_right_on == 1 ) {
 800170e:	e055      	b.n	80017bc <LampControl+0x1a0>
			}

		} else if( (hazard_on==0) && (ems_status==0) ) {
 8001710:	4b6e      	ldr	r3, [pc, #440]	; (80018cc <LampControl+0x2b0>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d152      	bne.n	80017be <LampControl+0x1a2>
 8001718:	4b6d      	ldr	r3, [pc, #436]	; (80018d0 <LampControl+0x2b4>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d14e      	bne.n	80017be <LampControl+0x1a2>
			lamp_status->hazard_lamp = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
			hazard_onoff_cnt = 0;
 8001726:	4b6d      	ldr	r3, [pc, #436]	; (80018dc <LampControl+0x2c0>)
 8001728:	2200      	movs	r2, #0
 800172a:	801a      	strh	r2, [r3, #0]
			if( (welcome_on==0) && (welcome_off==0) ) {
 800172c:	4b6c      	ldr	r3, [pc, #432]	; (80018e0 <LampControl+0x2c4>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d144      	bne.n	80017be <LampControl+0x1a2>
 8001734:	4b6b      	ldr	r3, [pc, #428]	; (80018e4 <LampControl+0x2c8>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d140      	bne.n	80017be <LampControl+0x1a2>
				if( ign1_status == 1 ) {
 800173c:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <LampControl+0x2cc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d130      	bne.n	80017a6 <LampControl+0x18a>
					if( turnlamp_left_on == 1 ) {
 8001744:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <LampControl+0x2b8>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d10c      	bne.n	8001766 <LampControl+0x14a>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001752:	4859      	ldr	r0, [pc, #356]	; (80018b8 <LampControl+0x29c>)
 8001754:	f002 fe6e 	bl	8004434 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800175e:	4856      	ldr	r0, [pc, #344]	; (80018b8 <LampControl+0x29c>)
 8001760:	f002 fe68 	bl	8004434 <HAL_GPIO_WritePin>
 8001764:	e02b      	b.n	80017be <LampControl+0x1a2>
					} else if( turnlamp_left_on == 0 ) {
 8001766:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <LampControl+0x2b8>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d127      	bne.n	80017be <LampControl+0x1a2>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001774:	4850      	ldr	r0, [pc, #320]	; (80018b8 <LampControl+0x29c>)
 8001776:	f002 fe5d 	bl	8004434 <HAL_GPIO_WritePin>
						if( turnlamp_right_on == 1) {
 800177a:	4b57      	ldr	r3, [pc, #348]	; (80018d8 <LampControl+0x2bc>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d106      	bne.n	8001790 <LampControl+0x174>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 8001782:	2201      	movs	r2, #1
 8001784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001788:	484b      	ldr	r0, [pc, #300]	; (80018b8 <LampControl+0x29c>)
 800178a:	f002 fe53 	bl	8004434 <HAL_GPIO_WritePin>
 800178e:	e016      	b.n	80017be <LampControl+0x1a2>
						} else if( turnlamp_right_on == 0 ) {
 8001790:	4b51      	ldr	r3, [pc, #324]	; (80018d8 <LampControl+0x2bc>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d112      	bne.n	80017be <LampControl+0x1a2>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800179e:	4846      	ldr	r0, [pc, #280]	; (80018b8 <LampControl+0x29c>)
 80017a0:	f002 fe48 	bl	8004434 <HAL_GPIO_WritePin>
 80017a4:	e00b      	b.n	80017be <LampControl+0x1a2>
						}
					}

				} else if( ign1_status == 0 ) {
 80017a6:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <LampControl+0x2cc>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <LampControl+0x1a2>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10 | GPIO_PIN_11, RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80017b4:	4840      	ldr	r0, [pc, #256]	; (80018b8 <LampControl+0x29c>)
 80017b6:	f002 fe3d 	bl	8004434 <HAL_GPIO_WritePin>
 80017ba:	e000      	b.n	80017be <LampControl+0x1a2>
			if( turnlamp_right_on == 1 ) {
 80017bc:	bf00      	nop
#endif

	/*
	 *	Stop Lamp Control Function
	 */
	if( ign1_status == 0 ) {
 80017be:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <LampControl+0x2cc>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <LampControl+0x1b0>
		brake_status = 0;		// if ign1_status==0, ignore brake_status from ICCU
 80017c6:	4b49      	ldr	r3, [pc, #292]	; (80018ec <LampControl+0x2d0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
	}
	if( (brake_status==1) || (input_status->brake_push_sw==1) ) {
 80017cc:	4b47      	ldr	r3, [pc, #284]	; (80018ec <LampControl+0x2d0>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d003      	beq.n	80017dc <LampControl+0x1c0>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d109      	bne.n	80017f0 <LampControl+0x1d4>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);			// Stop Lamp ON
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e2:	4835      	ldr	r0, [pc, #212]	; (80018b8 <LampControl+0x29c>)
 80017e4:	f002 fe26 	bl	8004434 <HAL_GPIO_WritePin>
		lamp_status->stop_lamp = 1;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	715a      	strb	r2, [r3, #5]
 80017ee:	e014      	b.n	800181a <LampControl+0x1fe>
	} else if ( (brake_status==0) && (input_status->brake_push_sw==0) ) {
 80017f0:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <LampControl+0x2d0>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d110      	bne.n	800181a <LampControl+0x1fe>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10c      	bne.n	800181a <LampControl+0x1fe>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);		// Stop Lamp OFF
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001806:	482c      	ldr	r0, [pc, #176]	; (80018b8 <LampControl+0x29c>)
 8001808:	f002 fe14 	bl	8004434 <HAL_GPIO_WritePin>
		stop_lamp_fail_on_cnt = lamp_status->stop_lamp = 0;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	715a      	strb	r2, [r3, #5]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	795a      	ldrb	r2, [r3, #5]
 8001816:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <LampControl+0x2d4>)
 8001818:	701a      	strb	r2, [r3, #0]
	}

	/*
	 *	DRL Control Function
	 */
	if( ign1_status == 1 ) {
 800181a:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <LampControl+0x2cc>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	f040 8115 	bne.w	8001a4e <LampControl+0x432>
		if( welcome_on == 0 ) {
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <LampControl+0x2c4>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 80e0 	bne.w	80019ee <LampControl+0x3d2>
			if( (vehicle_vel<30) && (vehicle_vel>-30) ) {
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <LampControl+0x2d8>)
 8001830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001834:	2b1d      	cmp	r3, #29
 8001836:	dc19      	bgt.n	800186c <LampControl+0x250>
 8001838:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <LampControl+0x2d8>)
 800183a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183e:	f113 0f1d 	cmn.w	r3, #29
 8001842:	db13      	blt.n	800186c <LampControl+0x250>
				drl_center_off_cnt = 0;
 8001844:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <LampControl+0x2dc>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
				if( ++drl_center_on_cnt > 25 ) {
 800184a:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <LampControl+0x2e0>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <LampControl+0x2e0>)
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <LampControl+0x2e0>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b19      	cmp	r3, #25
 800185c:	d919      	bls.n	8001892 <LampControl+0x276>
					drl_center_on = 1;
 800185e:	4b28      	ldr	r3, [pc, #160]	; (8001900 <LampControl+0x2e4>)
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
					drl_center_on_cnt = 25;
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <LampControl+0x2e0>)
 8001866:	2219      	movs	r2, #25
 8001868:	701a      	strb	r2, [r3, #0]
				if( ++drl_center_on_cnt > 25 ) {
 800186a:	e012      	b.n	8001892 <LampControl+0x276>
				}
			} else {
				drl_center_on_cnt = 0;
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <LampControl+0x2e0>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
				if( ++drl_center_off_cnt > 25 ) {
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <LampControl+0x2dc>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <LampControl+0x2dc>)
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <LampControl+0x2dc>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b19      	cmp	r3, #25
 8001884:	d905      	bls.n	8001892 <LampControl+0x276>
					drl_center_on = 0;
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <LampControl+0x2e4>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
					drl_center_off_cnt = 25;
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <LampControl+0x2dc>)
 800188e:	2219      	movs	r2, #25
 8001890:	701a      	strb	r2, [r3, #0]
				}
			}
//			if( ign1_status_prev == 0 )  {
			if( (brake_status==1) || (input_status->brake_push_sw==1) ) {
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <LampControl+0x2d0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d003      	beq.n	80018a2 <LampControl+0x286>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d134      	bne.n	800190c <LampControl+0x2f0>
				//htim3.Instance->CCR2 = htim4.Instance->CCR3 = 700; // 100% -> 70% -> 70% 220713 song oper
				htim4.Instance->CCR4 = htim3.Instance->CCR1 = 700; //220714
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <LampControl+0x2e8>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80018aa:	6353      	str	r3, [r2, #52]	; 0x34
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <LampControl+0x2ec>)
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	e032      	b.n	800191a <LampControl+0x2fe>
 80018b4:	200000cd 	.word	0x200000cd
 80018b8:	48000c00 	.word	0x48000c00
 80018bc:	200003df 	.word	0x200003df
 80018c0:	20000155 	.word	0x20000155
 80018c4:	2000023c 	.word	0x2000023c
 80018c8:	200002ec 	.word	0x200002ec
 80018cc:	20000320 	.word	0x20000320
 80018d0:	20000328 	.word	0x20000328
 80018d4:	2000035b 	.word	0x2000035b
 80018d8:	2000004d 	.word	0x2000004d
 80018dc:	200000d4 	.word	0x200000d4
 80018e0:	2000031c 	.word	0x2000031c
 80018e4:	20000045 	.word	0x20000045
 80018e8:	2000035a 	.word	0x2000035a
 80018ec:	2000027e 	.word	0x2000027e
 80018f0:	200000cc 	.word	0x200000cc
 80018f4:	200003d6 	.word	0x200003d6
 80018f8:	20000284 	.word	0x20000284
 80018fc:	20000351 	.word	0x20000351
 8001900:	20000359 	.word	0x20000359
 8001904:	20000100 	.word	0x20000100
 8001908:	20000050 	.word	0x20000050
			}else{
				htim4.Instance->CCR4 = htim3.Instance->CCR1 = 0; //220714
 800190c:	4b9c      	ldr	r3, [pc, #624]	; (8001b80 <LampControl+0x564>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2300      	movs	r3, #0
 8001912:	6353      	str	r3, [r2, #52]	; 0x34
 8001914:	4a9b      	ldr	r2, [pc, #620]	; (8001b84 <LampControl+0x568>)
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
			}
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800191a:	2104      	movs	r1, #4
 800191c:	4898      	ldr	r0, [pc, #608]	; (8001b80 <LampControl+0x564>)
 800191e:	f004 fead 	bl	800667c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001922:	2108      	movs	r1, #8
 8001924:	4897      	ldr	r0, [pc, #604]	; (8001b84 <LampControl+0x568>)
 8001926:	f004 fea9 	bl	800667c <HAL_TIM_PWM_Start>
			//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //220714
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800192a:	2100      	movs	r1, #0
 800192c:	4894      	ldr	r0, [pc, #592]	; (8001b80 <LampControl+0x564>)
 800192e:	f004 fea5 	bl	800667c <HAL_TIM_PWM_Start>

			lamp_status->drl_lamp = 1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	709a      	strb	r2, [r3, #2]
//			}
			if( (taillamp_on==1) && (drl_center_on==1) ) {
 8001938:	4b93      	ldr	r3, [pc, #588]	; (8001b88 <LampControl+0x56c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d12c      	bne.n	800199a <LampControl+0x37e>
 8001940:	4b92      	ldr	r3, [pc, #584]	; (8001b8c <LampControl+0x570>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d128      	bne.n	800199a <LampControl+0x37e>
//			if( taillamp_on_prev == 0 ) {
				if( (brake_status==0) && (input_status->brake_push_sw==0) ) {
 8001948:	4b91      	ldr	r3, [pc, #580]	; (8001b90 <LampControl+0x574>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d111      	bne.n	8001974 <LampControl+0x358>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10d      	bne.n	8001974 <LampControl+0x358>
					htim3.Instance->CCR2 = htim4.Instance->CCR3 = htim4.Instance->CCR4 = htim3.Instance->CCR1 = 210; // 30% 100% -> 70% -> 21% 220713 song oper
 8001958:	4b89      	ldr	r3, [pc, #548]	; (8001b80 <LampControl+0x564>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	23d2      	movs	r3, #210	; 0xd2
 800195e:	6353      	str	r3, [r2, #52]	; 0x34
 8001960:	4a88      	ldr	r2, [pc, #544]	; (8001b84 <LampControl+0x568>)
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4a87      	ldr	r2, [pc, #540]	; (8001b84 <LampControl+0x568>)
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800196c:	4a84      	ldr	r2, [pc, #528]	; (8001b80 <LampControl+0x564>)
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	6393      	str	r3, [r2, #56]	; 0x38
 8001972:	e00e      	b.n	8001992 <LampControl+0x376>
				} else if( brake_status == 1 ) {
 8001974:	4b86      	ldr	r3, [pc, #536]	; (8001b90 <LampControl+0x574>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d10a      	bne.n	8001992 <LampControl+0x376>
					htim3.Instance->CCR1 = htim4.Instance->CCR4 = htim3.Instance->CCR1 = 700; // 100% -> 70% -> 70% 220713 song oper
 800197c:	4b80      	ldr	r3, [pc, #512]	; (8001b80 <LampControl+0x564>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001984:	6353      	str	r3, [r2, #52]	; 0x34
 8001986:	4a7f      	ldr	r2, [pc, #508]	; (8001b84 <LampControl+0x568>)
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	6413      	str	r3, [r2, #64]	; 0x40
 800198c:	4a7c      	ldr	r2, [pc, #496]	; (8001b80 <LampControl+0x564>)
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	6353      	str	r3, [r2, #52]	; 0x34
				}
#if 1
				//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //220516 oper song
				//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //220516 oper song
#endif
				lamp_status->drl_c_lamp = 1;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	70da      	strb	r2, [r3, #3]
 8001998:	e01e      	b.n	80019d8 <LampControl+0x3bc>
//			}
			} else if( (taillamp_on==0) || (drl_center_on==0) ) {
 800199a:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <LampControl+0x56c>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <LampControl+0x38e>
 80019a2:	4b7a      	ldr	r3, [pc, #488]	; (8001b8c <LampControl+0x570>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d116      	bne.n	80019d8 <LampControl+0x3bc>
				if( taillamp_on_prev == 1 ) {
 80019aa:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <LampControl+0x578>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d112      	bne.n	80019d8 <LampControl+0x3bc>
#if 1
					//HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //220516 oper song
					//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); //220516 oper song
#endif
					if( (brake_status==0) && (Input_Status.brake_push_sw==0) ) {
 80019b2:	4b77      	ldr	r3, [pc, #476]	; (8001b90 <LampControl+0x574>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10b      	bne.n	80019d2 <LampControl+0x3b6>
 80019ba:	4b77      	ldr	r3, [pc, #476]	; (8001b98 <LampControl+0x57c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d107      	bne.n	80019d2 <LampControl+0x3b6>
						htim3.Instance->CCR2 = htim4.Instance->CCR3 = 490; // 70% -> 70% -> 49% 220713 song oper
 80019c2:	4b70      	ldr	r3, [pc, #448]	; (8001b84 <LampControl+0x568>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 80019ca:	63d3      	str	r3, [r2, #60]	; 0x3c
 80019cc:	4a6c      	ldr	r2, [pc, #432]	; (8001b80 <LampControl+0x564>)
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	6393      	str	r3, [r2, #56]	; 0x38
					}
					lamp_status->drl_c_lamp = 0;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	70da      	strb	r2, [r3, #3]
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //220516 oper song
#endif
				}
			}

			if( pBrake_status == 1 ){
 80019d8:	4b70      	ldr	r3, [pc, #448]	; (8001b9c <LampControl+0x580>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <LampControl+0x3d2>
				htim3.Instance->CCR2 = htim4.Instance->CCR3 = 0;
 80019e0:	4b68      	ldr	r3, [pc, #416]	; (8001b84 <LampControl+0x568>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80019e8:	4a65      	ldr	r2, [pc, #404]	; (8001b80 <LampControl+0x564>)
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	6393      	str	r3, [r2, #56]	; 0x38
		}


#endif
#if 1  //..220531 oper  sonng
		if( auto_mode == 1 ) {
 80019ee:	4b6c      	ldr	r3, [pc, #432]	; (8001ba0 <LampControl+0x584>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d113      	bne.n	8001a1e <LampControl+0x402>
			if( ++uart_data_tx_cnt > 50 ) {
 80019f6:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <LampControl+0x588>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b69      	ldr	r3, [pc, #420]	; (8001ba4 <LampControl+0x588>)
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <LampControl+0x588>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b32      	cmp	r3, #50	; 0x32
 8001a08:	d952      	bls.n	8001ab0 <LampControl+0x494>
				HAL_UART_Transmit(&huart1, sig_lamp_color_ctl_off, 14, 100);
 8001a0a:	2364      	movs	r3, #100	; 0x64
 8001a0c:	220e      	movs	r2, #14
 8001a0e:	4966      	ldr	r1, [pc, #408]	; (8001ba8 <LampControl+0x58c>)
 8001a10:	4866      	ldr	r0, [pc, #408]	; (8001bac <LampControl+0x590>)
 8001a12:	f005 ffbd 	bl	8007990 <HAL_UART_Transmit>
				uart_data_tx_cnt = 0;
 8001a16:	4b63      	ldr	r3, [pc, #396]	; (8001ba4 <LampControl+0x588>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e048      	b.n	8001ab0 <LampControl+0x494>
			}
		} else if( auto_mode == 0 ) {
 8001a1e:	4b60      	ldr	r3, [pc, #384]	; (8001ba0 <LampControl+0x584>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d144      	bne.n	8001ab0 <LampControl+0x494>
			if( ++uart_data_tx_cnt > 50 ) {
 8001a26:	4b5f      	ldr	r3, [pc, #380]	; (8001ba4 <LampControl+0x588>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <LampControl+0x588>)
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <LampControl+0x588>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b32      	cmp	r3, #50	; 0x32
 8001a38:	d93a      	bls.n	8001ab0 <LampControl+0x494>
				HAL_UART_Transmit(&huart1, sig_lamp_color_ctl_off, 14, 100);
 8001a3a:	2364      	movs	r3, #100	; 0x64
 8001a3c:	220e      	movs	r2, #14
 8001a3e:	495a      	ldr	r1, [pc, #360]	; (8001ba8 <LampControl+0x58c>)
 8001a40:	485a      	ldr	r0, [pc, #360]	; (8001bac <LampControl+0x590>)
 8001a42:	f005 ffa5 	bl	8007990 <HAL_UART_Transmit>
				uart_data_tx_cnt = 0;
 8001a46:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <LampControl+0x588>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e030      	b.n	8001ab0 <LampControl+0x494>
		}

#endif
#endif

	} else if ( ign1_status == 0 ) {
 8001a4e:	4b58      	ldr	r3, [pc, #352]	; (8001bb0 <LampControl+0x594>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d12c      	bne.n	8001ab0 <LampControl+0x494>
		if( ign1_status_prev == 1 ) {
 8001a56:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <LampControl+0x598>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d116      	bne.n	8001a8c <LampControl+0x470>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4847      	ldr	r0, [pc, #284]	; (8001b80 <LampControl+0x564>)
 8001a62:	f004 ff1d 	bl	80068a0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001a66:	2104      	movs	r1, #4
 8001a68:	4845      	ldr	r0, [pc, #276]	; (8001b80 <LampControl+0x564>)
 8001a6a:	f004 ff19 	bl	80068a0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001a6e:	2108      	movs	r1, #8
 8001a70:	4844      	ldr	r0, [pc, #272]	; (8001b84 <LampControl+0x568>)
 8001a72:	f004 ff15 	bl	80068a0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8001a76:	210c      	movs	r1, #12
 8001a78:	4842      	ldr	r0, [pc, #264]	; (8001b84 <LampControl+0x568>)
 8001a7a:	f004 ff11 	bl	80068a0 <HAL_TIM_PWM_Stop>
			lamp_status->drl_lamp = lamp_status->drl_c_lamp = 0;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	70da      	strb	r2, [r3, #3]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	78da      	ldrb	r2, [r3, #3]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	709a      	strb	r2, [r3, #2]
		}
		if( (hazard_on==0) && (ems_status==0) && (taillamp_on==0) ) {
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <LampControl+0x59c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10d      	bne.n	8001ab0 <LampControl+0x494>
 8001a94:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <LampControl+0x5a0>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <LampControl+0x494>
 8001a9c:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <LampControl+0x56c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <LampControl+0x494>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aaa:	4845      	ldr	r0, [pc, #276]	; (8001bc0 <LampControl+0x5a4>)
 8001aac:	f002 fcc2 	bl	8004434 <HAL_GPIO_WritePin>
	}

	/*
	 * Door Lock/Unlock Turn Lamp Toggle
	 */
	if( (RF_open_lamp==1) && (RF_open_lamp_prev==0) ) {
 8001ab0:	4b44      	ldr	r3, [pc, #272]	; (8001bc4 <LampControl+0x5a8>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d109      	bne.n	8001acc <LampControl+0x4b0>
 8001ab8:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <LampControl+0x5ac>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <LampControl+0x4b0>
		RF_open_lamp_on = 1;
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <LampControl+0x5b0>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
		RF_open_lamp_on_cnt = 0;
 8001ac6:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <LampControl+0x5b4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
	}
	if( (RF_close_lamp==1) && (RF_close_lamp_prev==0) ) {
 8001acc:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <LampControl+0x5b8>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d109      	bne.n	8001ae8 <LampControl+0x4cc>
 8001ad4:	4b40      	ldr	r3, [pc, #256]	; (8001bd8 <LampControl+0x5bc>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <LampControl+0x4cc>
		RF_close_lamp_on = 1;
 8001adc:	4b3f      	ldr	r3, [pc, #252]	; (8001bdc <LampControl+0x5c0>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
		RF_close_lamp_on_cnt = 0;
 8001ae2:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <LampControl+0x5c4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
	}

	if( RF_open_lamp_on == 1 ) {
 8001ae8:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <LampControl+0x5b0>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d12d      	bne.n	8001b4c <LampControl+0x530>
		RF_close_lamp_on = 0;
 8001af0:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <LampControl+0x5c0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
		if( ++RF_open_lamp_on_cnt < 12 ) {
 8001af6:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <LampControl+0x5b4>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <LampControl+0x5b4>)
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <LampControl+0x5b4>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b0b      	cmp	r3, #11
 8001b08:	d808      	bhi.n	8001b1c <LampControl+0x500>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	481c      	ldr	r0, [pc, #112]	; (8001b80 <LampControl+0x564>)
 8001b0e:	f004 fdb5 	bl	800667c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001b12:	2108      	movs	r1, #8
 8001b14:	481b      	ldr	r0, [pc, #108]	; (8001b84 <LampControl+0x568>)
 8001b16:	f004 fdb1 	bl	800667c <HAL_TIM_PWM_Start>
 8001b1a:	e00b      	b.n	8001b34 <LampControl+0x518>
		} else if( RF_open_lamp_on_cnt < 24) {
 8001b1c:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <LampControl+0x5b4>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b17      	cmp	r3, #23
 8001b22:	d807      	bhi.n	8001b34 <LampControl+0x518>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001b24:	2104      	movs	r1, #4
 8001b26:	4816      	ldr	r0, [pc, #88]	; (8001b80 <LampControl+0x564>)
 8001b28:	f004 feba 	bl	80068a0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	4815      	ldr	r0, [pc, #84]	; (8001b84 <LampControl+0x568>)
 8001b30:	f004 feb6 	bl	80068a0 <HAL_TIM_PWM_Stop>
		} if( RF_open_lamp_on_cnt == 24 ) {
 8001b34:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <LampControl+0x5b4>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b18      	cmp	r3, #24
 8001b3a:	f040 8083 	bne.w	8001c44 <LampControl+0x628>
			RF_open_lamp_on = 0;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <LampControl+0x5b0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
			RF_open_lamp_on_cnt = 0;
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <LampControl+0x5b4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	e07b      	b.n	8001c44 <LampControl+0x628>
		}

	} else if( RF_close_lamp_on == 1 ) {
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <LampControl+0x5c0>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d177      	bne.n	8001c44 <LampControl+0x628>
		RF_open_lamp_on = 0;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <LampControl+0x5b0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
		if( ++RF_close_lamp_on_cnt < 12 ) {
 8001b5a:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <LampControl+0x5c4>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <LampControl+0x5c4>)
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <LampControl+0x5c4>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b0b      	cmp	r3, #11
 8001b6c:	d83a      	bhi.n	8001be4 <LampControl+0x5c8>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b6e:	2104      	movs	r1, #4
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <LampControl+0x564>)
 8001b72:	f004 fd83 	bl	800667c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001b76:	2108      	movs	r1, #8
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <LampControl+0x568>)
 8001b7a:	f004 fd7f 	bl	800667c <HAL_TIM_PWM_Start>
 8001b7e:	e057      	b.n	8001c30 <LampControl+0x614>
 8001b80:	20000100 	.word	0x20000100
 8001b84:	20000050 	.word	0x20000050
 8001b88:	200002ec 	.word	0x200002ec
 8001b8c:	20000359 	.word	0x20000359
 8001b90:	2000027e 	.word	0x2000027e
 8001b94:	20000046 	.word	0x20000046
 8001b98:	20000274 	.word	0x20000274
 8001b9c:	20000358 	.word	0x20000358
 8001ba0:	20000281 	.word	0x20000281
 8001ba4:	2000003b 	.word	0x2000003b
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	200001ac 	.word	0x200001ac
 8001bb0:	2000035a 	.word	0x2000035a
 8001bb4:	200000c7 	.word	0x200000c7
 8001bb8:	20000320 	.word	0x20000320
 8001bbc:	20000328 	.word	0x20000328
 8001bc0:	48000c00 	.word	0x48000c00
 8001bc4:	200001a3 	.word	0x200001a3
 8001bc8:	20000191 	.word	0x20000191
 8001bcc:	20000155 	.word	0x20000155
 8001bd0:	2000031f 	.word	0x2000031f
 8001bd4:	20000278 	.word	0x20000278
 8001bd8:	200000b8 	.word	0x200000b8
 8001bdc:	2000023c 	.word	0x2000023c
 8001be0:	2000004b 	.word	0x2000004b
		} else if( RF_close_lamp_on_cnt < 24) {
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <LampControl+0x658>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b17      	cmp	r3, #23
 8001bea:	d808      	bhi.n	8001bfe <LampControl+0x5e2>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001bec:	2104      	movs	r1, #4
 8001bee:	4822      	ldr	r0, [pc, #136]	; (8001c78 <LampControl+0x65c>)
 8001bf0:	f004 fe56 	bl	80068a0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4821      	ldr	r0, [pc, #132]	; (8001c7c <LampControl+0x660>)
 8001bf8:	f004 fe52 	bl	80068a0 <HAL_TIM_PWM_Stop>
 8001bfc:	e018      	b.n	8001c30 <LampControl+0x614>
		} else if( RF_close_lamp_on_cnt < 36 ) {
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <LampControl+0x658>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b23      	cmp	r3, #35	; 0x23
 8001c04:	d808      	bhi.n	8001c18 <LampControl+0x5fc>
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c06:	2104      	movs	r1, #4
 8001c08:	481b      	ldr	r0, [pc, #108]	; (8001c78 <LampControl+0x65c>)
 8001c0a:	f004 fd37 	bl	800667c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001c0e:	2108      	movs	r1, #8
 8001c10:	481a      	ldr	r0, [pc, #104]	; (8001c7c <LampControl+0x660>)
 8001c12:	f004 fd33 	bl	800667c <HAL_TIM_PWM_Start>
 8001c16:	e00b      	b.n	8001c30 <LampControl+0x614>
		} else if( RF_close_lamp_on_cnt < 48 ) {
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <LampControl+0x658>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b2f      	cmp	r3, #47	; 0x2f
 8001c1e:	d807      	bhi.n	8001c30 <LampControl+0x614>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001c20:	2104      	movs	r1, #4
 8001c22:	4815      	ldr	r0, [pc, #84]	; (8001c78 <LampControl+0x65c>)
 8001c24:	f004 fe3c 	bl	80068a0 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001c28:	2108      	movs	r1, #8
 8001c2a:	4814      	ldr	r0, [pc, #80]	; (8001c7c <LampControl+0x660>)
 8001c2c:	f004 fe38 	bl	80068a0 <HAL_TIM_PWM_Stop>
		}
		if( RF_close_lamp_on_cnt >= 60 ) {
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <LampControl+0x658>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b3b      	cmp	r3, #59	; 0x3b
 8001c36:	d905      	bls.n	8001c44 <LampControl+0x628>
			RF_close_lamp_on = 0;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <LampControl+0x664>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
			RF_close_lamp_on_cnt = 0;
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <LampControl+0x658>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
		}
	}

	RF_open_lamp_prev = RF_open_lamp;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <LampControl+0x668>)
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <LampControl+0x66c>)
 8001c4a:	701a      	strb	r2, [r3, #0]
	RF_close_lamp_prev = RF_close_lamp;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <LampControl+0x670>)
 8001c4e:	781a      	ldrb	r2, [r3, #0]
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <LampControl+0x674>)
 8001c52:	701a      	strb	r2, [r3, #0]
	ign1_status_prev = ign1_status;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <LampControl+0x678>)
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <LampControl+0x67c>)
 8001c5a:	701a      	strb	r2, [r3, #0]
	ign2_status_prev = ign2_status;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <LampControl+0x680>)
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <LampControl+0x684>)
 8001c62:	701a      	strb	r2, [r3, #0]
	taillamp_on_prev = taillamp_on;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <LampControl+0x688>)
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <LampControl+0x68c>)
 8001c6a:	701a      	strb	r2, [r3, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000004b 	.word	0x2000004b
 8001c78:	20000100 	.word	0x20000100
 8001c7c:	20000050 	.word	0x20000050
 8001c80:	2000023c 	.word	0x2000023c
 8001c84:	200001a3 	.word	0x200001a3
 8001c88:	20000191 	.word	0x20000191
 8001c8c:	20000278 	.word	0x20000278
 8001c90:	200000b8 	.word	0x200000b8
 8001c94:	2000035a 	.word	0x2000035a
 8001c98:	200000c7 	.word	0x200000c7
 8001c9c:	2000027b 	.word	0x2000027b
 8001ca0:	200000c5 	.word	0x200000c5
 8001ca4:	200002ec 	.word	0x200002ec
 8001ca8:	20000046 	.word	0x20000046

08001cac <LampDataConv>:
		}
	}
}

void LampDataConv(uint8_t *txdata, uint8_t *flag)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	txdata[0] = Lamp_Status.hazard_lamp | (Lamp_Status.drl_lamp<<2) | (Lamp_Status.drl_c_lamp<<3) |
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <LampDataConv+0xa0>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b25a      	sxtb	r2, r3
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <LampDataConv+0xa0>)
 8001cbe:	789b      	ldrb	r3, [r3, #2]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b25a      	sxtb	r2, r3
 8001cc8:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <LampDataConv+0xa0>)
 8001cca:	78db      	ldrb	r3, [r3, #3]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b25a      	sxtb	r2, r3
			(Lamp_Status.stop_lamp<<4);
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <LampDataConv+0xa0>)
 8001cd6:	795b      	ldrb	r3, [r3, #5]
 8001cd8:	011b      	lsls	r3, r3, #4
	txdata[0] = Lamp_Status.hazard_lamp | (Lamp_Status.drl_lamp<<2) | (Lamp_Status.drl_c_lamp<<3) |
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	701a      	strb	r2, [r3, #0]
	txdata[1] = head_low_lamp_curr;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <LampDataConv+0xa4>)
 8001ce8:	881a      	ldrh	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3301      	adds	r3, #1
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
	txdata[2] = head_low_lamp_curr>>8;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <LampDataConv+0xa4>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]
	txdata[3] = stop_lamp_curr;
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <LampDataConv+0xa8>)
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3303      	adds	r3, #3
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]
	txdata[4] = stop_lamp_curr>>8;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <LampDataConv+0xa8>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]
	txdata[5] = head_low_lamp_fail | (stop_lamp_fail<<1);
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <LampDataConv+0xac>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	b25a      	sxtb	r2, r3
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <LampDataConv+0xb0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b25a      	sxtb	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3305      	adds	r3, #5
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	701a      	strb	r2, [r3, #0]

	(*flag) = 1;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000344 	.word	0x20000344
 8001d50:	20000282 	.word	0x20000282
 8001d54:	20000356 	.word	0x20000356
 8001d58:	200002ee 	.word	0x200002ee
 8001d5c:	20000040 	.word	0x20000040

08001d60 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d64:	f3bf 8f4f 	dsb	sy
}
 8001d68:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <__NVIC_SystemReset+0x24>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d72:	4904      	ldr	r1, [pc, #16]	; (8001d84 <__NVIC_SystemReset+0x24>)
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_SystemReset+0x28>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7a:	f3bf 8f4f 	dsb	sy
}
 8001d7e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <__NVIC_SystemReset+0x20>
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	05fa0004 	.word	0x05fa0004

08001d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d90:	f001 f8a3 	bl	8002eda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d94:	f000 f82c 	bl	8001df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d98:	f000 fb70 	bl	800247c <MX_GPIO_Init>
  MX_TIM6_Init();
 8001d9c:	f000 faec 	bl	8002378 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001da0:	f000 fa16 	bl	80021d0 <MX_TIM3_Init>
  MX_SPI2_Init();
 8001da4:	f000 f9d6 	bl	8002154 <MX_SPI2_Init>
  MX_TIM4_Init();
 8001da8:	f000 fa7c 	bl	80022a4 <MX_TIM4_Init>
  MX_RTC_Init();
 8001dac:	f000 f99c 	bl	80020e8 <MX_RTC_Init>
  MX_FDCAN1_Init();
 8001db0:	f000 f892 	bl	8001ed8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001db4:	f000 f916 	bl	8001fe4 <MX_FDCAN2_Init>
  MX_USART1_UART_Init();
 8001db8:	f000 fb14 	bl	80023e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);		// SET /RST(ADC IC) 1 (Deactivate)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc2:	4808      	ldr	r0, [pc, #32]	; (8001de4 <main+0x58>)
 8001dc4:	f002 fb36 	bl	8004434 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim6);
 8001dc8:	4807      	ldr	r0, [pc, #28]	; (8001de8 <main+0x5c>)
 8001dca:	f004 fb87 	bl	80064dc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if( stop_enable == 1 ) {
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <main+0x60>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d1fb      	bne.n	8001dce <main+0x42>
		  stop_enable = 0;
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <main+0x60>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
		  StopModeStart();
 8001ddc:	f000 fd8e 	bl	80028fc <StopModeStart>
	  if( stop_enable == 1 ) {
 8001de0:	e7f5      	b.n	8001dce <main+0x42>
 8001de2:	bf00      	nop
 8001de4:	48000400 	.word	0x48000400
 8001de8:	20000494 	.word	0x20000494
 8001dec:	2000004c 	.word	0x2000004c

08001df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0a8      	sub	sp, #160	; 0xa0
 8001df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dfa:	2238      	movs	r2, #56	; 0x38
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f006 fbba 	bl	8008578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e14:	463b      	mov	r3, r7
 8001e16:	2254      	movs	r2, #84	; 0x54
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f006 fbac 	bl	8008578 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e24:	f002 fb36 	bl	8004494 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e28:	230a      	movs	r3, #10
 8001e2a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e30:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e32:	2340      	movs	r3, #64	; 0x40
 8001e34:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e36:	2301      	movs	r3, #1
 8001e38:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e40:	2302      	movs	r3, #2
 8001e42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001e46:	2302      	movs	r3, #2
 8001e48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 27;
 8001e4c:	231b      	movs	r3, #27
 8001e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e52:	2302      	movs	r3, #2
 8001e54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 fc1d 	bl	80046a8 <HAL_RCC_OscConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001e74:	f000 fd6c 	bl	8002950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e78:	230f      	movs	r3, #15
 8001e7a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e92:	2103      	movs	r1, #3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 ff1f 	bl	8004cd8 <HAL_RCC_ClockConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001ea0:	f000 fd56 	bl	8002950 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <SystemClock_Config+0xe4>)
 8001ea6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 f928 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001ec6:	f000 fd43 	bl	8002950 <Error_Handler>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	37a0      	adds	r7, #160	; 0xa0
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	00081001 	.word	0x00081001

08001ed8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001ee0:	4a3e      	ldr	r2, [pc, #248]	; (8001fdc <MX_FDCAN1_Init+0x104>)
 8001ee2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001efc:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001f02:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 12;
 8001f08:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001f0e:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f16:	220f      	movs	r2, #15
 8001f18:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f26:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f4a:	4823      	ldr	r0, [pc, #140]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f4c:	f001 f9cc 	bl	80032e8 <HAL_FDCAN_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001f56:	f000 fcfb 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  can1_filter.IdType = FDCAN_EXTENDED_ID;
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <MX_FDCAN1_Init+0x108>)
 8001f5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f60:	601a      	str	r2, [r3, #0]
  can1_filter.FilterType = FDCAN_FILTER_MASK;
 8001f62:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <MX_FDCAN1_Init+0x108>)
 8001f64:	2202      	movs	r2, #2
 8001f66:	609a      	str	r2, [r3, #8]
  can1_filter.FilterIndex = 0;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <MX_FDCAN1_Init+0x108>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
  can1_filter.FilterID1 = 0x000;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <MX_FDCAN1_Init+0x108>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  can1_filter.FilterID2 = 0x000;
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <MX_FDCAN1_Init+0x108>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  can1_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <MX_FDCAN1_Init+0x108>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	60da      	str	r2, [r3, #12]

  if( HAL_FDCAN_ConfigFilter(&hfdcan1, &can1_filter) != HAL_OK ) {
 8001f80:	4917      	ldr	r1, [pc, #92]	; (8001fe0 <MX_FDCAN1_Init+0x108>)
 8001f82:	4815      	ldr	r0, [pc, #84]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f84:	f001 fb0a 	bl	800359c <HAL_FDCAN_ConfigFilter>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_FDCAN1_Init+0xba>
	  Error_Handler();
 8001f8e:	f000 fcdf 	bl	8002950 <Error_Handler>
  }

  if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	2202      	movs	r2, #2
 8001f9a:	2102      	movs	r1, #2
 8001f9c:	480e      	ldr	r0, [pc, #56]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001f9e:	f001 fb57 	bl	8003650 <HAL_FDCAN_ConfigGlobalFilter>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_FDCAN1_Init+0xd4>
	  Error_Handler();
 8001fa8:	f000 fcd2 	bl	8002950 <Error_Handler>
  }

  if( HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK ) {
 8001fac:	2200      	movs	r2, #0
 8001fae:	2101      	movs	r1, #1
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001fb2:	f001 fd35 	bl	8003a20 <HAL_FDCAN_ActivateNotification>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_FDCAN1_Init+0xe8>
	  Error_Handler();
 8001fbc:	f000 fcc8 	bl	8002950 <Error_Handler>
  }

  if( HAL_FDCAN_Start(&hfdcan1) != HAL_OK ) {
 8001fc0:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_FDCAN1_Init+0x100>)
 8001fc2:	f001 fb76 	bl	80036b2 <HAL_FDCAN_Start>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_FDCAN1_Init+0xf8>
	  Error_Handler();
 8001fcc:	f000 fcc0 	bl	8002950 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000288 	.word	0x20000288
 8001fdc:	40006400 	.word	0x40006400
 8001fe0:	20000454 	.word	0x20000454

08001fe4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001fea:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8001fec:	4a3c      	ldr	r2, [pc, #240]	; (80020e0 <MX_FDCAN2_Init+0xfc>)
 8001fee:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001ff0:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001ff6:	4b39      	ldr	r3, [pc, #228]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001ffc:	4b37      	ldr	r3, [pc, #220]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002002:	4b36      	ldr	r3, [pc, #216]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8002004:	2200      	movs	r2, #0
 8002006:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002008:	4b34      	ldr	r3, [pc, #208]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 800200a:	2200      	movs	r2, #0
 800200c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8002010:	2206      	movs	r2, #6
 8002012:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002014:	4b31      	ldr	r3, [pc, #196]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8002016:	2201      	movs	r2, #1
 8002018:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 15;
 800201a:	4b30      	ldr	r3, [pc, #192]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 800201c:	220f      	movs	r2, #15
 800201e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8002022:	2202      	movs	r2, #2
 8002024:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8002028:	2201      	movs	r2, #1
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 800202e:	2201      	movs	r2, #1
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8002034:	2201      	movs	r2, #1
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 800203a:	2201      	movs	r2, #1
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 800203e:	4b27      	ldr	r3, [pc, #156]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8002040:	2201      	movs	r2, #1
 8002042:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8002046:	2200      	movs	r2, #0
 8002048:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 800204c:	2200      	movs	r2, #0
 800204e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002050:	4822      	ldr	r0, [pc, #136]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8002052:	f001 f949 	bl	80032e8 <HAL_FDCAN_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_FDCAN2_Init+0x7c>
  {
    Error_Handler();
 800205c:	f000 fc78 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  can2_filter.IdType = FDCAN_STANDARD_ID;
 8002060:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <MX_FDCAN2_Init+0x100>)
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
  can2_filter.FilterType = FDCAN_FILTER_MASK;
 8002066:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <MX_FDCAN2_Init+0x100>)
 8002068:	2202      	movs	r2, #2
 800206a:	609a      	str	r2, [r3, #8]
  can2_filter.FilterIndex = 0;
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <MX_FDCAN2_Init+0x100>)
 800206e:	2200      	movs	r2, #0
 8002070:	605a      	str	r2, [r3, #4]
  can2_filter.FilterID1 = 0x000;
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <MX_FDCAN2_Init+0x100>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  can2_filter.FilterID2 = 0x000;
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <MX_FDCAN2_Init+0x100>)
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
  can2_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <MX_FDCAN2_Init+0x100>)
 8002080:	2201      	movs	r2, #1
 8002082:	60da      	str	r2, [r3, #12]

  if( HAL_FDCAN_ConfigFilter(&hfdcan2, &can2_filter) != HAL_OK ) {
 8002084:	4917      	ldr	r1, [pc, #92]	; (80020e4 <MX_FDCAN2_Init+0x100>)
 8002086:	4815      	ldr	r0, [pc, #84]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 8002088:	f001 fa88 	bl	800359c <HAL_FDCAN_ConfigFilter>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_FDCAN2_Init+0xb2>
	  Error_Handler();
 8002092:	f000 fc5d 	bl	8002950 <Error_Handler>
  }

  if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8002096:	2300      	movs	r3, #0
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2300      	movs	r3, #0
 800209c:	2202      	movs	r2, #2
 800209e:	2102      	movs	r1, #2
 80020a0:	480e      	ldr	r0, [pc, #56]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 80020a2:	f001 fad5 	bl	8003650 <HAL_FDCAN_ConfigGlobalFilter>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_FDCAN2_Init+0xcc>
	  Error_Handler();
 80020ac:	f000 fc50 	bl	8002950 <Error_Handler>
  }

  if( HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK ) {
 80020b0:	2200      	movs	r2, #0
 80020b2:	2101      	movs	r1, #1
 80020b4:	4809      	ldr	r0, [pc, #36]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 80020b6:	f001 fcb3 	bl	8003a20 <HAL_FDCAN_ActivateNotification>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_FDCAN2_Init+0xe0>
	  Error_Handler();
 80020c0:	f000 fc46 	bl	8002950 <Error_Handler>
  }

  if( HAL_FDCAN_Start(&hfdcan2) != HAL_OK ) {
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_FDCAN2_Init+0xf8>)
 80020c6:	f001 faf4 	bl	80036b2 <HAL_FDCAN_Start>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_FDCAN2_Init+0xf0>
	  Error_Handler();
 80020d0:	f000 fc3e 	bl	8002950 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000035c 	.word	0x2000035c
 80020e0:	40006800 	.word	0x40006800
 80020e4:	200004e0 	.word	0x200004e0

080020e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <MX_RTC_Init+0x64>)
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <MX_RTC_Init+0x68>)
 80020f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <MX_RTC_Init+0x64>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <MX_RTC_Init+0x64>)
 80020fa:	227f      	movs	r2, #127	; 0x7f
 80020fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <MX_RTC_Init+0x64>)
 8002100:	22ff      	movs	r2, #255	; 0xff
 8002102:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_RTC_Init+0x64>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <MX_RTC_Init+0x64>)
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_RTC_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <MX_RTC_Init+0x64>)
 8002118:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800211c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_RTC_Init+0x64>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002124:	4809      	ldr	r0, [pc, #36]	; (800214c <MX_RTC_Init+0x64>)
 8002126:	f003 fa3f 	bl	80055a8 <HAL_RTC_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8002130:	f000 fc0e 	bl	8002950 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	4804      	ldr	r0, [pc, #16]	; (800214c <MX_RTC_Init+0x64>)
 800213a:	f003 fb3b 	bl	80057b4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002144:	f000 fc04 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000046c 	.word	0x2000046c
 8002150:	40002800 	.word	0x40002800

08002154 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <MX_SPI2_Init+0x74>)
 800215a:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <MX_SPI2_Init+0x78>)
 800215c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <MX_SPI2_Init+0x74>)
 8002160:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002164:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002166:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <MX_SPI2_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <MX_SPI2_Init+0x74>)
 800216e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002172:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002174:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <MX_SPI2_Init+0x74>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800217a:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <MX_SPI2_Init+0x74>)
 800217c:	2201      	movs	r2, #1
 800217e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MX_SPI2_Init+0x74>)
 8002182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002186:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <MX_SPI2_Init+0x74>)
 800218a:	2208      	movs	r2, #8
 800218c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <MX_SPI2_Init+0x74>)
 8002190:	2200      	movs	r2, #0
 8002192:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_SPI2_Init+0x74>)
 8002196:	2200      	movs	r2, #0
 8002198:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <MX_SPI2_Init+0x74>)
 800219c:	2200      	movs	r2, #0
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <MX_SPI2_Init+0x74>)
 80021a2:	2207      	movs	r2, #7
 80021a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <MX_SPI2_Init+0x74>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <MX_SPI2_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021b2:	4805      	ldr	r0, [pc, #20]	; (80021c8 <MX_SPI2_Init+0x74>)
 80021b4:	f003 fbfc 	bl	80059b0 <HAL_SPI_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021be:	f000 fbc7 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200003e0 	.word	0x200003e0
 80021cc:	40003800 	.word	0x40003800

080021d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e2:	463b      	mov	r3, r7
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
 80021f0:	615a      	str	r2, [r3, #20]
 80021f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <MX_TIM3_Init+0xcc>)
 80021f6:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <MX_TIM3_Init+0xd0>)
 80021f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 900-1;
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <MX_TIM3_Init+0xcc>)
 80021fc:	f240 3283 	movw	r2, #899	; 0x383
 8002200:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <MX_TIM3_Init+0xcc>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <MX_TIM3_Init+0xcc>)
 800220a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800220e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <MX_TIM3_Init+0xcc>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002216:	4b21      	ldr	r3, [pc, #132]	; (800229c <MX_TIM3_Init+0xcc>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800221c:	481f      	ldr	r0, [pc, #124]	; (800229c <MX_TIM3_Init+0xcc>)
 800221e:	f004 f9d5 	bl	80065cc <HAL_TIM_PWM_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002228:	f000 fb92 	bl	8002950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	4818      	ldr	r0, [pc, #96]	; (800229c <MX_TIM3_Init+0xcc>)
 800223c:	f005 fa7c 	bl	8007738 <HAL_TIMEx_MasterConfigSynchronization>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002246:	f000 fb83 	bl	8002950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224a:	2360      	movs	r3, #96	; 0x60
 800224c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800224e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002252:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800225c:	463b      	mov	r3, r7
 800225e:	2200      	movs	r2, #0
 8002260:	4619      	mov	r1, r3
 8002262:	480e      	ldr	r0, [pc, #56]	; (800229c <MX_TIM3_Init+0xcc>)
 8002264:	f004 fd38 	bl	8006cd8 <HAL_TIM_PWM_ConfigChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 800226e:	f000 fb6f 	bl	8002950 <Error_Handler>
  }
  sConfigOC.Pulse = 700;
 8002272:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002276:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002278:	463b      	mov	r3, r7
 800227a:	2204      	movs	r2, #4
 800227c:	4619      	mov	r1, r3
 800227e:	4807      	ldr	r0, [pc, #28]	; (800229c <MX_TIM3_Init+0xcc>)
 8002280:	f004 fd2a 	bl	8006cd8 <HAL_TIM_PWM_ConfigChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 800228a:	f000 fb61 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800228e:	4803      	ldr	r0, [pc, #12]	; (800229c <MX_TIM3_Init+0xcc>)
 8002290:	f000 fcea 	bl	8002c68 <HAL_TIM_MspPostInit>

}
 8002294:	bf00      	nop
 8002296:	3728      	adds	r7, #40	; 0x28
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000100 	.word	0x20000100
 80022a0:	40000400 	.word	0x40000400

080022a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022b6:	463b      	mov	r3, r7
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
 80022c4:	615a      	str	r2, [r3, #20]
 80022c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <MX_TIM4_Init+0xcc>)
 80022ca:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <MX_TIM4_Init+0xd0>)
 80022cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 900-1;
 80022ce:	4b28      	ldr	r3, [pc, #160]	; (8002370 <MX_TIM4_Init+0xcc>)
 80022d0:	f240 3283 	movw	r2, #899	; 0x383
 80022d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <MX_TIM4_Init+0xcc>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <MX_TIM4_Init+0xcc>)
 80022de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <MX_TIM4_Init+0xcc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ea:	4b21      	ldr	r3, [pc, #132]	; (8002370 <MX_TIM4_Init+0xcc>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022f0:	481f      	ldr	r0, [pc, #124]	; (8002370 <MX_TIM4_Init+0xcc>)
 80022f2:	f004 f96b 	bl	80065cc <HAL_TIM_PWM_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80022fc:	f000 fb28 	bl	8002950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	4619      	mov	r1, r3
 800230e:	4818      	ldr	r0, [pc, #96]	; (8002370 <MX_TIM4_Init+0xcc>)
 8002310:	f005 fa12 	bl	8007738 <HAL_TIMEx_MasterConfigSynchronization>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800231a:	f000 fb19 	bl	8002950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800231e:	2360      	movs	r3, #96	; 0x60
 8002320:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 700;
 8002322:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002326:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002330:	463b      	mov	r3, r7
 8002332:	2208      	movs	r2, #8
 8002334:	4619      	mov	r1, r3
 8002336:	480e      	ldr	r0, [pc, #56]	; (8002370 <MX_TIM4_Init+0xcc>)
 8002338:	f004 fcce 	bl	8006cd8 <HAL_TIM_PWM_ConfigChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002342:	f000 fb05 	bl	8002950 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8002346:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800234a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800234c:	463b      	mov	r3, r7
 800234e:	220c      	movs	r2, #12
 8002350:	4619      	mov	r1, r3
 8002352:	4807      	ldr	r0, [pc, #28]	; (8002370 <MX_TIM4_Init+0xcc>)
 8002354:	f004 fcc0 	bl	8006cd8 <HAL_TIM_PWM_ConfigChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 800235e:	f000 faf7 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002362:	4803      	ldr	r0, [pc, #12]	; (8002370 <MX_TIM4_Init+0xcc>)
 8002364:	f000 fc80 	bl	8002c68 <HAL_TIM_MspPostInit>

}
 8002368:	bf00      	nop
 800236a:	3728      	adds	r7, #40	; 0x28
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000050 	.word	0x20000050
 8002374:	40000800 	.word	0x40000800

08002378 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <MX_TIM6_Init+0x64>)
 800238a:	4a15      	ldr	r2, [pc, #84]	; (80023e0 <MX_TIM6_Init+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1080-1;
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <MX_TIM6_Init+0x64>)
 8002390:	f240 4237 	movw	r2, #1079	; 0x437
 8002394:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_TIM6_Init+0x64>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_TIM6_Init+0x64>)
 800239e:	22c7      	movs	r2, #199	; 0xc7
 80023a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_TIM6_Init+0x64>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80023a8:	480c      	ldr	r0, [pc, #48]	; (80023dc <MX_TIM6_Init+0x64>)
 80023aa:	f004 f83f 	bl	800642c <HAL_TIM_Base_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80023b4:	f000 facc 	bl	8002950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	4619      	mov	r1, r3
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_TIM6_Init+0x64>)
 80023c6:	f005 f9b7 	bl	8007738 <HAL_TIMEx_MasterConfigSynchronization>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80023d0:	f000 fabe 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000494 	.word	0x20000494
 80023e0:	40001000 	.word	0x40001000

080023e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <MX_USART1_UART_Init+0x90>)
 80023ea:	4a23      	ldr	r2, [pc, #140]	; (8002478 <MX_USART1_UART_Init+0x94>)
 80023ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023ee:	4b21      	ldr	r3, [pc, #132]	; (8002474 <MX_USART1_UART_Init+0x90>)
 80023f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <MX_USART1_UART_Init+0x90>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023fc:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <MX_USART1_UART_Init+0x90>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <MX_USART1_UART_Init+0x90>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <MX_USART1_UART_Init+0x90>)
 800240a:	220c      	movs	r2, #12
 800240c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <MX_USART1_UART_Init+0x90>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002414:	4b17      	ldr	r3, [pc, #92]	; (8002474 <MX_USART1_UART_Init+0x90>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <MX_USART1_UART_Init+0x90>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <MX_USART1_UART_Init+0x90>)
 8002422:	2200      	movs	r2, #0
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <MX_USART1_UART_Init+0x90>)
 8002428:	2200      	movs	r2, #0
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800242c:	4811      	ldr	r0, [pc, #68]	; (8002474 <MX_USART1_UART_Init+0x90>)
 800242e:	f005 fa5f 	bl	80078f0 <HAL_UART_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002438:	f000 fa8a 	bl	8002950 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800243c:	2100      	movs	r1, #0
 800243e:	480d      	ldr	r0, [pc, #52]	; (8002474 <MX_USART1_UART_Init+0x90>)
 8002440:	f005 ffac 	bl	800839c <HAL_UARTEx_SetTxFifoThreshold>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800244a:	f000 fa81 	bl	8002950 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800244e:	2100      	movs	r1, #0
 8002450:	4808      	ldr	r0, [pc, #32]	; (8002474 <MX_USART1_UART_Init+0x90>)
 8002452:	f005 ffe1 	bl	8008418 <HAL_UARTEx_SetRxFifoThreshold>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800245c:	f000 fa78 	bl	8002950 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002460:	4804      	ldr	r0, [pc, #16]	; (8002474 <MX_USART1_UART_Init+0x90>)
 8002462:	f005 ff62 	bl	800832a <HAL_UARTEx_DisableFifoMode>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800246c:	f000 fa70 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	200001ac 	.word	0x200001ac
 8002478:	40013800 	.word	0x40013800

0800247c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002492:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <MX_GPIO_Init+0x178>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	4a57      	ldr	r2, [pc, #348]	; (80025f4 <MX_GPIO_Init+0x178>)
 8002498:	f043 0310 	orr.w	r3, r3, #16
 800249c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800249e:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024aa:	4b52      	ldr	r3, [pc, #328]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	4a51      	ldr	r2, [pc, #324]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b6:	4b4f      	ldr	r3, [pc, #316]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	4a4b      	ldr	r2, [pc, #300]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ce:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	4b46      	ldr	r3, [pc, #280]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	4a45      	ldr	r2, [pc, #276]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e6:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f2:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	4a3f      	ldr	r2, [pc, #252]	; (80025f4 <MX_GPIO_Init+0x178>)
 80024f8:	f043 0308 	orr.w	r3, r3, #8
 80024fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <MX_GPIO_Init+0x178>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|SPI2_RST_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002510:	4839      	ldr	r0, [pc, #228]	; (80025f8 <MX_GPIO_Init+0x17c>)
 8002512:	f001 ff8f 	bl	8004434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002516:	2200      	movs	r2, #0
 8002518:	f643 7104 	movw	r1, #16132	; 0x3f04
 800251c:	4837      	ldr	r0, [pc, #220]	; (80025fc <MX_GPIO_Init+0x180>)
 800251e:	f001 ff89 	bl	8004434 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002522:	2200      	movs	r2, #0
 8002524:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8002528:	4835      	ldr	r0, [pc, #212]	; (8002600 <MX_GPIO_Init+0x184>)
 800252a:	f001 ff83 	bl	8004434 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800252e:	233c      	movs	r3, #60	; 0x3c
 8002530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	4619      	mov	r1, r3
 8002540:	4830      	ldr	r0, [pc, #192]	; (8002604 <MX_GPIO_Init+0x188>)
 8002542:	f001 fddd 	bl	8004100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002546:	231f      	movs	r3, #31
 8002548:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	4829      	ldr	r0, [pc, #164]	; (8002600 <MX_GPIO_Init+0x184>)
 800255a:	f001 fdd1 	bl	8004100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800255e:	23fa      	movs	r3, #250	; 0xfa
 8002560:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002574:	f001 fdc4 	bl	8004100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002578:	2304      	movs	r3, #4
 800257a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <MX_GPIO_Init+0x18c>)
 800257e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4619      	mov	r1, r3
 800258a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800258e:	f001 fdb7 	bl	8004100 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI2_RST_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI2_RST_Pin;
 8002592:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002598:	2301      	movs	r3, #1
 800259a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	4813      	ldr	r0, [pc, #76]	; (80025f8 <MX_GPIO_Init+0x17c>)
 80025ac:	f001 fda8 	bl	8004100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80025b0:	f643 7304 	movw	r3, #16132	; 0x3f04
 80025b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	480c      	ldr	r0, [pc, #48]	; (80025fc <MX_GPIO_Init+0x180>)
 80025ca:	f001 fd99 	bl	8004100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80025ce:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80025d2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	4806      	ldr	r0, [pc, #24]	; (8002600 <MX_GPIO_Init+0x184>)
 80025e8:	f001 fd8a 	bl	8004100 <HAL_GPIO_Init>

}
 80025ec:	bf00      	nop
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	48000400 	.word	0x48000400
 80025fc:	48000c00 	.word	0x48000c00
 8002600:	48000800 	.word	0x48000800
 8002604:	48001000 	.word	0x48001000
 8002608:	10120000 	.word	0x10120000

0800260c <CurrentDataReceive>:

/* USER CODE BEGIN 4 */
void CurrentDataReceive()
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af02      	add	r7, sp, #8
	float head_low_lamp_curr_f;
	float stop_lamp_curr_f;
	float distant_volt_curr_f;
	float sun_volt_curr_f;

	spi2_tx_data[0] = ADC_DUMMY;
 8002612:	4ba9      	ldr	r3, [pc, #676]	; (80028b8 <CurrentDataReceive+0x2ac>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
	spi2_tx_data[1] = ADC_CH1_ENABLE;			// CH1 Read //조도센서.
 8002618:	4ba7      	ldr	r3, [pc, #668]	; (80028b8 <CurrentDataReceive+0x2ac>)
 800261a:	22c0      	movs	r2, #192	; 0xc0
 800261c:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);		// SET /CS 0 (Active)
 800261e:	2200      	movs	r2, #0
 8002620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002624:	48a5      	ldr	r0, [pc, #660]	; (80028bc <CurrentDataReceive+0x2b0>)
 8002626:	f001 ff05 	bl	8004434 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, spi2_tx_data, spi2_rx_data, 8, 100);
 800262a:	2364      	movs	r3, #100	; 0x64
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2308      	movs	r3, #8
 8002630:	4aa3      	ldr	r2, [pc, #652]	; (80028c0 <CurrentDataReceive+0x2b4>)
 8002632:	49a1      	ldr	r1, [pc, #644]	; (80028b8 <CurrentDataReceive+0x2ac>)
 8002634:	48a3      	ldr	r0, [pc, #652]	; (80028c4 <CurrentDataReceive+0x2b8>)
 8002636:	f003 fa66 	bl	8005b06 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);		// SET /CS 1 (Deactivate)
 800263a:	2201      	movs	r2, #1
 800263c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002640:	489e      	ldr	r0, [pc, #632]	; (80028bc <CurrentDataReceive+0x2b0>)
 8002642:	f001 fef7 	bl	8004434 <HAL_GPIO_WritePin>

	sun_volt_curr_f = (spi2_rx_data[2]) | (spi2_rx_data[3]<<8);
 8002646:	4b9e      	ldr	r3, [pc, #632]	; (80028c0 <CurrentDataReceive+0x2b4>)
 8002648:	789b      	ldrb	r3, [r3, #2]
 800264a:	461a      	mov	r2, r3
 800264c:	4b9c      	ldr	r3, [pc, #624]	; (80028c0 <CurrentDataReceive+0x2b4>)
 800264e:	78db      	ldrb	r3, [r3, #3]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	4313      	orrs	r3, r2
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265c:	edc7 7a03 	vstr	s15, [r7, #12]
	sun_volt_curr_f = (sun_volt_curr_f-32765) / 13235 * 5 * 1000;
 8002660:	edd7 7a03 	vldr	s15, [r7, #12]
 8002664:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80028c8 <CurrentDataReceive+0x2bc>
 8002668:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800266c:	eddf 6a97 	vldr	s13, [pc, #604]	; 80028cc <CurrentDataReceive+0x2c0>
 8002670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002674:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800267c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80028d0 <CurrentDataReceive+0x2c4>
 8002680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002684:	edc7 7a03 	vstr	s15, [r7, #12]


	spi2_tx_data[0] = ADC_DUMMY;
 8002688:	4b8b      	ldr	r3, [pc, #556]	; (80028b8 <CurrentDataReceive+0x2ac>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
	spi2_tx_data[1] = ADC_CH2_ENABLE;			// CH2 Read
 800268e:	4b8a      	ldr	r3, [pc, #552]	; (80028b8 <CurrentDataReceive+0x2ac>)
 8002690:	22c4      	movs	r2, #196	; 0xc4
 8002692:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);		// SET /CS 0 (Active)
 8002694:	2200      	movs	r2, #0
 8002696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800269a:	4888      	ldr	r0, [pc, #544]	; (80028bc <CurrentDataReceive+0x2b0>)
 800269c:	f001 feca 	bl	8004434 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, spi2_tx_data, spi2_rx_data, 8, 100);
 80026a0:	2364      	movs	r3, #100	; 0x64
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2308      	movs	r3, #8
 80026a6:	4a86      	ldr	r2, [pc, #536]	; (80028c0 <CurrentDataReceive+0x2b4>)
 80026a8:	4983      	ldr	r1, [pc, #524]	; (80028b8 <CurrentDataReceive+0x2ac>)
 80026aa:	4886      	ldr	r0, [pc, #536]	; (80028c4 <CurrentDataReceive+0x2b8>)
 80026ac:	f003 fa2b 	bl	8005b06 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);		// SET /CS 1 (Deactivate)
 80026b0:	2201      	movs	r2, #1
 80026b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026b6:	4881      	ldr	r0, [pc, #516]	; (80028bc <CurrentDataReceive+0x2b0>)
 80026b8:	f001 febc 	bl	8004434 <HAL_GPIO_WritePin>

	head_low_lamp_curr_f = (spi2_rx_data[2]) | (spi2_rx_data[3]<<8);
 80026bc:	4b80      	ldr	r3, [pc, #512]	; (80028c0 <CurrentDataReceive+0x2b4>)
 80026be:	789b      	ldrb	r3, [r3, #2]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b7f      	ldr	r3, [pc, #508]	; (80028c0 <CurrentDataReceive+0x2b4>)
 80026c4:	78db      	ldrb	r3, [r3, #3]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	4313      	orrs	r3, r2
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d2:	edc7 7a02 	vstr	s15, [r7, #8]
	head_low_lamp_curr_f = (head_low_lamp_curr_f-32765) / 13235 * 5 * 1000;
 80026d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026da:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80028c8 <CurrentDataReceive+0x2bc>
 80026de:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026e2:	eddf 6a7a 	vldr	s13, [pc, #488]	; 80028cc <CurrentDataReceive+0x2c0>
 80026e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ea:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80026ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f2:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80028d0 <CurrentDataReceive+0x2c4>
 80026f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026fa:	edc7 7a02 	vstr	s15, [r7, #8]


	spi2_tx_data[0] = ADC_DUMMY;
 80026fe:	4b6e      	ldr	r3, [pc, #440]	; (80028b8 <CurrentDataReceive+0x2ac>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
	spi2_tx_data[1] = ADC_CH3_ENABLE;			// CH3 Read
 8002704:	4b6c      	ldr	r3, [pc, #432]	; (80028b8 <CurrentDataReceive+0x2ac>)
 8002706:	22c8      	movs	r2, #200	; 0xc8
 8002708:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);		// SET /CS 0 (Active)
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002710:	486a      	ldr	r0, [pc, #424]	; (80028bc <CurrentDataReceive+0x2b0>)
 8002712:	f001 fe8f 	bl	8004434 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, spi2_tx_data, spi2_rx_data, 8, 100);
 8002716:	2364      	movs	r3, #100	; 0x64
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	2308      	movs	r3, #8
 800271c:	4a68      	ldr	r2, [pc, #416]	; (80028c0 <CurrentDataReceive+0x2b4>)
 800271e:	4966      	ldr	r1, [pc, #408]	; (80028b8 <CurrentDataReceive+0x2ac>)
 8002720:	4868      	ldr	r0, [pc, #416]	; (80028c4 <CurrentDataReceive+0x2b8>)
 8002722:	f003 f9f0 	bl	8005b06 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);		// SET /CS 1 (Deactivate)
 8002726:	2201      	movs	r2, #1
 8002728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800272c:	4863      	ldr	r0, [pc, #396]	; (80028bc <CurrentDataReceive+0x2b0>)
 800272e:	f001 fe81 	bl	8004434 <HAL_GPIO_WritePin>

	stop_lamp_curr_f = (spi2_rx_data[2]) | (spi2_rx_data[3]<<8);
 8002732:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <CurrentDataReceive+0x2b4>)
 8002734:	789b      	ldrb	r3, [r3, #2]
 8002736:	461a      	mov	r2, r3
 8002738:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <CurrentDataReceive+0x2b4>)
 800273a:	78db      	ldrb	r3, [r3, #3]
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	4313      	orrs	r3, r2
 8002740:	ee07 3a90 	vmov	s15, r3
 8002744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002748:	edc7 7a01 	vstr	s15, [r7, #4]
	stop_lamp_curr_f = (stop_lamp_curr_f-32765) / 13235 * 5 * 1000;
 800274c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002750:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80028c8 <CurrentDataReceive+0x2bc>
 8002754:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002758:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80028cc <CurrentDataReceive+0x2c0>
 800275c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002760:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002768:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80028d0 <CurrentDataReceive+0x2c4>
 800276c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002770:	edc7 7a01 	vstr	s15, [r7, #4]


	spi2_tx_data[0] = ADC_DUMMY;
 8002774:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <CurrentDataReceive+0x2ac>)
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
	spi2_tx_data[1] = ADC_CH4_ENABLE;			// CH4 Read
 800277a:	4b4f      	ldr	r3, [pc, #316]	; (80028b8 <CurrentDataReceive+0x2ac>)
 800277c:	22cc      	movs	r2, #204	; 0xcc
 800277e:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);		// SET /CS 0 (Active)
 8002780:	2200      	movs	r2, #0
 8002782:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002786:	484d      	ldr	r0, [pc, #308]	; (80028bc <CurrentDataReceive+0x2b0>)
 8002788:	f001 fe54 	bl	8004434 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, spi2_tx_data, spi2_rx_data, 8, 100);
 800278c:	2364      	movs	r3, #100	; 0x64
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2308      	movs	r3, #8
 8002792:	4a4b      	ldr	r2, [pc, #300]	; (80028c0 <CurrentDataReceive+0x2b4>)
 8002794:	4948      	ldr	r1, [pc, #288]	; (80028b8 <CurrentDataReceive+0x2ac>)
 8002796:	484b      	ldr	r0, [pc, #300]	; (80028c4 <CurrentDataReceive+0x2b8>)
 8002798:	f003 f9b5 	bl	8005b06 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);		// SET /CS 1 (Deactivate)
 800279c:	2201      	movs	r2, #1
 800279e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027a2:	4846      	ldr	r0, [pc, #280]	; (80028bc <CurrentDataReceive+0x2b0>)
 80027a4:	f001 fe46 	bl	8004434 <HAL_GPIO_WritePin>

	distant_volt_curr_f = (spi2_rx_data[2]) | (spi2_rx_data[3]<<8);
 80027a8:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <CurrentDataReceive+0x2b4>)
 80027aa:	789b      	ldrb	r3, [r3, #2]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <CurrentDataReceive+0x2b4>)
 80027b0:	78db      	ldrb	r3, [r3, #3]
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	4313      	orrs	r3, r2
 80027b6:	ee07 3a90 	vmov	s15, r3
 80027ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027be:	edc7 7a00 	vstr	s15, [r7]
	distant_volt_curr_f = (distant_volt_curr_f-32765) / 13235 * 5 * 1000;
 80027c2:	edd7 7a00 	vldr	s15, [r7]
 80027c6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80028c8 <CurrentDataReceive+0x2bc>
 80027ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027ce:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80028cc <CurrentDataReceive+0x2c0>
 80027d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027d6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80027da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027de:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80028d0 <CurrentDataReceive+0x2c4>
 80027e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e6:	edc7 7a00 	vstr	s15, [r7]


	head_low_lamp_curr = (uint16_t)head_low_lamp_curr_f;
 80027ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f2:	ee17 3a90 	vmov	r3, s15
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <CurrentDataReceive+0x2c8>)
 80027fa:	801a      	strh	r2, [r3, #0]
	stop_lamp_curr = (uint16_t)stop_lamp_curr_f;
 80027fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002804:	ee17 3a90 	vmov	r3, s15
 8002808:	b29a      	uxth	r2, r3
 800280a:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <CurrentDataReceive+0x2cc>)
 800280c:	801a      	strh	r2, [r3, #0]
	distant_volt = (uint16_t)distant_volt_curr_f;
 800280e:	edd7 7a00 	vldr	s15, [r7]
 8002812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002816:	ee17 3a90 	vmov	r3, s15
 800281a:	b29a      	uxth	r2, r3
 800281c:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <CurrentDataReceive+0x2d0>)
 800281e:	801a      	strh	r2, [r3, #0]
	sun_volt = (uint16_t)sun_volt_curr_f;
 8002820:	edd7 7a03 	vldr	s15, [r7, #12]
 8002824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002828:	ee17 3a90 	vmov	r3, s15
 800282c:	b29a      	uxth	r2, r3
 800282e:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <CurrentDataReceive+0x2d4>)
 8002830:	801a      	strh	r2, [r3, #0]

	if( headlamp_low_on == 1 ) {
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <CurrentDataReceive+0x2d8>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d10f      	bne.n	800285a <CurrentDataReceive+0x24e>
		if( head_low_lamp_curr < 1000 ) {
 800283a:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <CurrentDataReceive+0x2c8>)
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002842:	d206      	bcs.n	8002852 <CurrentDataReceive+0x246>
			if( ++head_low_lamp_fail_cnt > 16 ) {
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <CurrentDataReceive+0x2dc>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	3301      	adds	r3, #1
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <CurrentDataReceive+0x2dc>)
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e00e      	b.n	8002870 <CurrentDataReceive+0x264>
//				head_low_lamp_fail = 1;
			}
		} else {
			head_low_lamp_fail = 0;
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <CurrentDataReceive+0x2e0>)
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e00a      	b.n	8002870 <CurrentDataReceive+0x264>
		}
	} else if( headlamp_low_on == 0 ) {
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <CurrentDataReceive+0x2d8>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <CurrentDataReceive+0x264>
		head_low_lamp_fail = head_low_lamp_fail_cnt = 0;
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <CurrentDataReceive+0x2dc>)
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <CurrentDataReceive+0x2dc>)
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <CurrentDataReceive+0x2e0>)
 800286e:	701a      	strb	r2, [r3, #0]
	}

	if( Lamp_Status.stop_lamp == 1 ) {
 8002870:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <CurrentDataReceive+0x2e4>)
 8002872:	795b      	ldrb	r3, [r3, #5]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d10f      	bne.n	8002898 <CurrentDataReceive+0x28c>
		if( stop_lamp_curr < 1000 ) {
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <CurrentDataReceive+0x2cc>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002880:	d206      	bcs.n	8002890 <CurrentDataReceive+0x284>
			if( ++stop_lamp_fail_cnt > 16 ) {
 8002882:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <CurrentDataReceive+0x2e8>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <CurrentDataReceive+0x2e8>)
 800288c:	701a      	strb	r2, [r3, #0]
		}
	} else if( Lamp_Status.stop_lamp == 0 ) {
		stop_lamp_fail = stop_lamp_fail_cnt = 0;
	}
#endif
}
 800288e:	e00e      	b.n	80028ae <CurrentDataReceive+0x2a2>
			stop_lamp_fail = 0;
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <CurrentDataReceive+0x2ec>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
}
 8002896:	e00a      	b.n	80028ae <CurrentDataReceive+0x2a2>
	} else if( Lamp_Status.stop_lamp == 0 ) {
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <CurrentDataReceive+0x2e4>)
 800289a:	795b      	ldrb	r3, [r3, #5]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d106      	bne.n	80028ae <CurrentDataReceive+0x2a2>
		stop_lamp_fail = stop_lamp_fail_cnt = 0;
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <CurrentDataReceive+0x2e8>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <CurrentDataReceive+0x2e8>)
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <CurrentDataReceive+0x2ec>)
 80028ac:	701a      	strb	r2, [r3, #0]
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	2000044c 	.word	0x2000044c
 80028bc:	48000400 	.word	0x48000400
 80028c0:	20000444 	.word	0x20000444
 80028c4:	200003e0 	.word	0x200003e0
 80028c8:	46fffa00 	.word	0x46fffa00
 80028cc:	464ecc00 	.word	0x464ecc00
 80028d0:	447a0000 	.word	0x447a0000
 80028d4:	20000282 	.word	0x20000282
 80028d8:	20000356 	.word	0x20000356
 80028dc:	200003c2 	.word	0x200003c2
 80028e0:	2000032a 	.word	0x2000032a
 80028e4:	200000cd 	.word	0x200000cd
 80028e8:	2000004e 	.word	0x2000004e
 80028ec:	20000040 	.word	0x20000040
 80028f0:	20000344 	.word	0x20000344
 80028f4:	20000190 	.word	0x20000190
 80028f8:	200002ee 	.word	0x200002ee

080028fc <StopModeStart>:

void StopModeStart()
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 8002902:	f000 fb5b 	bl	8002fbc <HAL_SuspendTick>

	__HAL_RCC_PWR_CLK_ENABLE();
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <StopModeStart+0x4c>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <StopModeStart+0x4c>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002910:	6593      	str	r3, [r2, #88]	; 0x58
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <StopModeStart+0x4c>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
	   32768 / 16 = 2048Hz
	   1Hz = 0.00048828125 sec
	   10sec = 20,480Hz (0x5000)
	 */
//	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xF000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xCC, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800291e:	2200      	movs	r2, #0
 8002920:	21cc      	movs	r1, #204	; 0xcc
 8002922:	480a      	ldr	r0, [pc, #40]	; (800294c <StopModeStart+0x50>)
 8002924:	f002 ff46 	bl	80057b4 <HAL_RTCEx_SetWakeUpTimer_IT>

	HAL_PWR_EnterSTOPMode(0, PWR_SLEEPENTRY_WFE);
 8002928:	2102      	movs	r1, #2
 800292a:	2000      	movs	r0, #0
 800292c:	f001 fd9a 	bl	8004464 <HAL_PWR_EnterSTOPMode>

	HAL_ResumeTick();
 8002930:	f000 fb54 	bl	8002fdc <HAL_ResumeTick>

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002934:	4805      	ldr	r0, [pc, #20]	; (800294c <StopModeStart+0x50>)
 8002936:	f002 ffbb 	bl	80058b0 <HAL_RTCEx_DeactivateWakeUpTimer>

	SystemClock_Config();
 800293a:	f7ff fa59 	bl	8001df0 <SystemClock_Config>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	2000046c 	.word	0x2000046c

08002950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002954:	b672      	cpsid	i
}
 8002956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
//  SCB->AIRCR = SCB_AIRCR_VECTKEY_Msk | 0x04;
  NVIC_SystemReset();
 8002958:	f7ff fa02 	bl	8001d60 <__NVIC_SystemReset>

0800295c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002962:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_MspInit+0x44>)
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <HAL_MspInit+0x44>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6613      	str	r3, [r2, #96]	; 0x60
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <HAL_MspInit+0x44>)
 8002970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_MspInit+0x44>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <HAL_MspInit+0x44>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6593      	str	r3, [r2, #88]	; 0x58
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_MspInit+0x44>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002992:	f001 fe79 	bl	8004688 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	; 0x30
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 031c 	add.w	r3, r7, #28
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3f      	ldr	r2, [pc, #252]	; (8002ac0 <HAL_FDCAN_MspInit+0x11c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d139      	bne.n	8002a3a <HAL_FDCAN_MspInit+0x96>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80029c6:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <HAL_FDCAN_MspInit+0x120>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	4a3d      	ldr	r2, [pc, #244]	; (8002ac4 <HAL_FDCAN_MspInit+0x120>)
 80029ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80029d0:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <HAL_FDCAN_MspInit+0x120>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d10b      	bne.n	80029f0 <HAL_FDCAN_MspInit+0x4c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80029d8:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	4a3a      	ldr	r2, [pc, #232]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 80029de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029e2:	6593      	str	r3, [r2, #88]	; 0x58
 80029e4:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f0:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 80029f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f4:	4a34      	ldr	r2, [pc, #208]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 80029f6:	f043 0308 	orr.w	r3, r3, #8
 80029fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029fc:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 80029fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002a18:	2309      	movs	r3, #9
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	4619      	mov	r1, r3
 8002a22:	482a      	ldr	r0, [pc, #168]	; (8002acc <HAL_FDCAN_MspInit+0x128>)
 8002a24:	f001 fb6c 	bl	8004100 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2015      	movs	r0, #21
 8002a2e:	f000 fbc0 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002a32:	2015      	movs	r0, #21
 8002a34:	f000 fbd7 	bl	80031e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002a38:	e03d      	b.n	8002ab6 <HAL_FDCAN_MspInit+0x112>
  else if(hfdcan->Instance==FDCAN2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <HAL_FDCAN_MspInit+0x12c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d138      	bne.n	8002ab6 <HAL_FDCAN_MspInit+0x112>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002a44:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <HAL_FDCAN_MspInit+0x120>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <HAL_FDCAN_MspInit+0x120>)
 8002a4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_FDCAN_MspInit+0x120>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d10b      	bne.n	8002a6e <HAL_FDCAN_MspInit+0xca>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002a56:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 8002a5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a60:	6593      	str	r3, [r2, #88]	; 0x58
 8002a62:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <HAL_FDCAN_MspInit+0x124>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a86:	2360      	movs	r3, #96	; 0x60
 8002a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002a96:	2309      	movs	r3, #9
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9a:	f107 031c 	add.w	r3, r7, #28
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <HAL_FDCAN_MspInit+0x130>)
 8002aa2:	f001 fb2d 	bl	8004100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	2056      	movs	r0, #86	; 0x56
 8002aac:	f000 fb81 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002ab0:	2056      	movs	r0, #86	; 0x56
 8002ab2:	f000 fb98 	bl	80031e6 <HAL_NVIC_EnableIRQ>
}
 8002ab6:	bf00      	nop
 8002ab8:	3730      	adds	r7, #48	; 0x30
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40006400 	.word	0x40006400
 8002ac4:	2000003c 	.word	0x2000003c
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	48000c00 	.word	0x48000c00
 8002ad0:	40006800 	.word	0x40006800
 8002ad4:	48000400 	.word	0x48000400

08002ad8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <HAL_RTC_MspInit+0x3c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10f      	bne.n	8002b0a <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RTC_MspInit+0x40>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af0:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <HAL_RTC_MspInit+0x40>)
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2100      	movs	r1, #0
 8002afe:	2003      	movs	r0, #3
 8002b00:	f000 fb57 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002b04:	2003      	movs	r0, #3
 8002b06:	f000 fb6e 	bl	80031e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40002800 	.word	0x40002800
 8002b18:	40021000 	.word	0x40021000

08002b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	; 0x28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_SPI_MspInit+0x8c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d130      	bne.n	8002ba0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	4a1a      	ldr	r2, [pc, #104]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b48:	6593      	str	r3, [r2, #88]	; 0x58
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	4a14      	ldr	r2, [pc, #80]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_SPI_MspInit+0x90>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002b6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b80:	2305      	movs	r3, #5
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4809      	ldr	r0, [pc, #36]	; (8002bb0 <HAL_SPI_MspInit+0x94>)
 8002b8c:	f001 fab8 	bl	8004100 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2100      	movs	r1, #0
 8002b94:	2024      	movs	r0, #36	; 0x24
 8002b96:	f000 fb0c 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002b9a:	2024      	movs	r0, #36	; 0x24
 8002b9c:	f000 fb23 	bl	80031e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ba0:	bf00      	nop
 8002ba2:	3728      	adds	r7, #40	; 0x28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40003800 	.word	0x40003800
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	48000400 	.word	0x48000400

08002bb4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <HAL_TIM_PWM_MspInit+0x5c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10c      	bne.n	8002be0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_TIM_PWM_MspInit+0x60>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <HAL_TIM_PWM_MspInit+0x60>)
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_TIM_PWM_MspInit+0x60>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002bde:	e010      	b.n	8002c02 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <HAL_TIM_PWM_MspInit+0x64>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10b      	bne.n	8002c02 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_TIM_PWM_MspInit+0x60>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <HAL_TIM_PWM_MspInit+0x60>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf6:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <HAL_TIM_PWM_MspInit+0x60>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40000800 	.word	0x40000800

08002c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <HAL_TIM_Base_MspInit+0x44>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d113      	bne.n	8002c56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_TIM_Base_MspInit+0x48>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <HAL_TIM_Base_MspInit+0x48>)
 8002c34:	f043 0310 	orr.w	r3, r3, #16
 8002c38:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_TIM_Base_MspInit+0x48>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2101      	movs	r1, #1
 8002c4a:	2036      	movs	r0, #54	; 0x36
 8002c4c:	f000 fab1 	bl	80031b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c50:	2036      	movs	r0, #54	; 0x36
 8002c52:	f000 fac8 	bl	80031e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40001000 	.word	0x40001000
 8002c64:	40021000 	.word	0x40021000

08002c68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a22      	ldr	r2, [pc, #136]	; (8002d10 <HAL_TIM_MspPostInit+0xa8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d11c      	bne.n	8002cc4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <HAL_TIM_MspPostInit+0xac>)
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8e:	4a21      	ldr	r2, [pc, #132]	; (8002d14 <HAL_TIM_MspPostInit+0xac>)
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c96:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <HAL_TIM_MspPostInit+0xac>)
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ca2:	23c0      	movs	r3, #192	; 0xc0
 8002ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4816      	ldr	r0, [pc, #88]	; (8002d18 <HAL_TIM_MspPostInit+0xb0>)
 8002cbe:	f001 fa1f 	bl	8004100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002cc2:	e021      	b.n	8002d08 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_TIM_MspPostInit+0xb4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d11c      	bne.n	8002d08 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_TIM_MspPostInit+0xac>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_TIM_MspPostInit+0xac>)
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_TIM_MspPostInit+0xac>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002ce6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	4619      	mov	r1, r3
 8002d02:	4807      	ldr	r0, [pc, #28]	; (8002d20 <HAL_TIM_MspPostInit+0xb8>)
 8002d04:	f001 f9fc 	bl	8004100 <HAL_GPIO_Init>
}
 8002d08:	bf00      	nop
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40021000 	.word	0x40021000
 8002d18:	48000800 	.word	0x48000800
 8002d1c:	40000800 	.word	0x40000800
 8002d20:	48000c00 	.word	0x48000c00

08002d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a18      	ldr	r2, [pc, #96]	; (8002da4 <HAL_UART_MspInit+0x80>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d129      	bne.n	8002d9a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <HAL_UART_MspInit+0x84>)
 8002d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4a:	4a17      	ldr	r2, [pc, #92]	; (8002da8 <HAL_UART_MspInit+0x84>)
 8002d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d50:	6613      	str	r3, [r2, #96]	; 0x60
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <HAL_UART_MspInit+0x84>)
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_UART_MspInit+0x84>)
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <HAL_UART_MspInit+0x84>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_UART_MspInit+0x84>)
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d84:	2300      	movs	r3, #0
 8002d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d88:	2307      	movs	r3, #7
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	4619      	mov	r1, r3
 8002d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d96:	f001 f9b3 	bl	8004100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d9a:	bf00      	nop
 8002d9c:	3728      	adds	r7, #40	; 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40013800 	.word	0x40013800
 8002da8:	40021000 	.word	0x40021000

08002dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002db0:	e7fe      	b.n	8002db0 <NMI_Handler+0x4>

08002db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <HardFault_Handler+0x4>

08002db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <MemManage_Handler+0x4>

08002dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <BusFault_Handler+0x4>

08002dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <UsageFault_Handler+0x4>

08002dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df8:	f000 f8c2 	bl	8002f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <RTC_WKUP_IRQHandler+0x10>)
 8002e06:	f002 fda9 	bl	800595c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	2000046c 	.word	0x2000046c

08002e14 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <FDCAN1_IT0_IRQHandler+0x10>)
 8002e1a:	f000 fee7 	bl	8003bec <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000288 	.word	0x20000288

08002e28 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <SPI2_IRQHandler+0x10>)
 8002e2e:	f003 f87d 	bl	8005f2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200003e0 	.word	0x200003e0

08002e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <TIM6_DAC_IRQHandler+0x10>)
 8002e42:	f003 fdc9 	bl	80069d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000494 	.word	0x20000494

08002e50 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <FDCAN2_IT0_IRQHandler+0x10>)
 8002e56:	f000 fec9 	bl	8003bec <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	2000035c 	.word	0x2000035c

08002e64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <SystemInit+0x20>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <SystemInit+0x20>)
 8002e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e88:	480d      	ldr	r0, [pc, #52]	; (8002ec0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e8c:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e8e:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e90:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <LoopForever+0xe>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e94:	e002      	b.n	8002e9c <LoopCopyDataInit>

08002e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9a:	3304      	adds	r3, #4

08002e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea0:	d3f9      	bcc.n	8002e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ea2:	4a0b      	ldr	r2, [pc, #44]	; (8002ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ea4:	4c0b      	ldr	r4, [pc, #44]	; (8002ed4 <LoopForever+0x16>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea8:	e001      	b.n	8002eae <LoopFillZerobss>

08002eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eac:	3204      	adds	r2, #4

08002eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb0:	d3fb      	bcc.n	8002eaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002eb2:	f7ff ffd7 	bl	8002e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eb6:	f005 fb3b 	bl	8008530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002eba:	f7fe ff67 	bl	8001d8c <main>

08002ebe <LoopForever>:

LoopForever:
    b LoopForever
 8002ebe:	e7fe      	b.n	8002ebe <LoopForever>
  ldr   r0, =_estack
 8002ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002ecc:	08008600 	.word	0x08008600
  ldr r2, =_sbss
 8002ed0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002ed4:	20000504 	.word	0x20000504

08002ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ed8:	e7fe      	b.n	8002ed8 <ADC1_2_IRQHandler>

08002eda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee4:	2003      	movs	r0, #3
 8002ee6:	f000 f959 	bl	800319c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eea:	2000      	movs	r0, #0
 8002eec:	f000 f80e 	bl	8002f0c <HAL_InitTick>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	71fb      	strb	r3, [r7, #7]
 8002efa:	e001      	b.n	8002f00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002efc:	f7ff fd2e 	bl	800295c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f00:	79fb      	ldrb	r3, [r7, #7]

}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_InitTick+0x68>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d022      	beq.n	8002f66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_InitTick+0x6c>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_InitTick+0x68>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f964 	bl	8003202 <HAL_SYSTICK_Config>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10f      	bne.n	8002f60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b0f      	cmp	r3, #15
 8002f44:	d809      	bhi.n	8002f5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f46:	2200      	movs	r2, #0
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4e:	f000 f930 	bl	80031b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <HAL_InitTick+0x70>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	e007      	b.n	8002f6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
 8002f5e:	e004      	b.n	8002f6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	e001      	b.n	8002f6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000018 	.word	0x20000018
 8002f78:	20000010 	.word	0x20000010
 8002f7c:	20000014 	.word	0x20000014

08002f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_IncTick+0x1c>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_IncTick+0x20>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4a03      	ldr	r2, [pc, #12]	; (8002f9c <HAL_IncTick+0x1c>)
 8002f90:	6013      	str	r3, [r2, #0]
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	20000500 	.word	0x20000500
 8002fa0:	20000018 	.word	0x20000018

08002fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <HAL_GetTick+0x14>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000500 	.word	0x20000500

08002fbc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_SuspendTick+0x1c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <HAL_SuspendTick+0x1c>)
 8002fc6:	f023 0302 	bic.w	r3, r3, #2
 8002fca:	6013      	str	r3, [r2, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000e010 	.word	0xe000e010

08002fdc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_ResumeTick+0x1c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_ResumeTick+0x1c>)
 8002fe6:	f043 0302 	orr.w	r3, r3, #2
 8002fea:	6013      	str	r3, [r2, #0]
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000e010 	.word	0xe000e010

08002ffc <__NVIC_SetPriorityGrouping>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_GetPriorityGrouping>:
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_EnableIRQ>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db0b      	blt.n	800308a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4907      	ldr	r1, [pc, #28]	; (8003098 <__NVIC_EnableIRQ+0x38>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2001      	movs	r0, #1
 8003082:	fa00 f202 	lsl.w	r2, r0, r2
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_SetPriority>:
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	db0a      	blt.n	80030c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	490c      	ldr	r1, [pc, #48]	; (80030e8 <__NVIC_SetPriority+0x4c>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	440b      	add	r3, r1
 80030c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030c4:	e00a      	b.n	80030dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4908      	ldr	r1, [pc, #32]	; (80030ec <__NVIC_SetPriority+0x50>)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3b04      	subs	r3, #4
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	440b      	add	r3, r1
 80030da:	761a      	strb	r2, [r3, #24]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <NVIC_EncodePriority>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f1c3 0307 	rsb	r3, r3, #7
 800310a:	2b04      	cmp	r3, #4
 800310c:	bf28      	it	cs
 800310e:	2304      	movcs	r3, #4
 8003110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3304      	adds	r3, #4
 8003116:	2b06      	cmp	r3, #6
 8003118:	d902      	bls.n	8003120 <NVIC_EncodePriority+0x30>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3b03      	subs	r3, #3
 800311e:	e000      	b.n	8003122 <NVIC_EncodePriority+0x32>
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	f04f 32ff 	mov.w	r2, #4294967295
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	401a      	ands	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003138:	f04f 31ff 	mov.w	r1, #4294967295
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43d9      	mvns	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	4313      	orrs	r3, r2
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3b01      	subs	r3, #1
 8003164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003168:	d301      	bcc.n	800316e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316a:	2301      	movs	r3, #1
 800316c:	e00f      	b.n	800318e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <SysTick_Config+0x40>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003176:	210f      	movs	r1, #15
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	f7ff ff8e 	bl	800309c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <SysTick_Config+0x40>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <SysTick_Config+0x40>)
 8003188:	2207      	movs	r2, #7
 800318a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	e000e010 	.word	0xe000e010

0800319c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff29 	bl	8002ffc <__NVIC_SetPriorityGrouping>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
 80031be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031c0:	f7ff ff40 	bl	8003044 <__NVIC_GetPriorityGrouping>
 80031c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	6978      	ldr	r0, [r7, #20]
 80031cc:	f7ff ff90 	bl	80030f0 <NVIC_EncodePriority>
 80031d0:	4602      	mov	r2, r0
 80031d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff5f 	bl	800309c <__NVIC_SetPriority>
}
 80031de:	bf00      	nop
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	4603      	mov	r3, r0
 80031ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff33 	bl	8003060 <__NVIC_EnableIRQ>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ffa4 	bl	8003158 <SysTick_Config>
 8003210:	4603      	mov	r3, r0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d00d      	beq.n	800324e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2204      	movs	r2, #4
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
 800324c:	e047      	b.n	80032de <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 020e 	bic.w	r2, r2, #14
 800325c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800327c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f003 021f 	and.w	r2, r3, #31
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f202 	lsl.w	r2, r1, r2
 8003290:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800329a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
    }
  }
  return status;
 80032de:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e147      	b.n	800358a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fb48 	bl	80029a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0210 	bic.w	r2, r2, #16
 8003322:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003324:	f7ff fe3e 	bl	8002fa4 <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800332a:	e012      	b.n	8003352 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800332c:	f7ff fe3a 	bl	8002fa4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b0a      	cmp	r3, #10
 8003338:	d90b      	bls.n	8003352 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333e:	f043 0201 	orr.w	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2203      	movs	r2, #3
 800334a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e11b      	b.n	800358a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b08      	cmp	r3, #8
 800335e:	d0e5      	beq.n	800332c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003370:	f7ff fe18 	bl	8002fa4 <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003376:	e012      	b.n	800339e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003378:	f7ff fe14 	bl	8002fa4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b0a      	cmp	r3, #10
 8003384:	d90b      	bls.n	800339e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0f5      	b.n	800358a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0e5      	beq.n	8003378 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0202 	orr.w	r2, r2, #2
 80033ba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a74      	ldr	r2, [pc, #464]	; (8003594 <HAL_FDCAN_Init+0x2ac>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d103      	bne.n	80033ce <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80033c6:	4a74      	ldr	r2, [pc, #464]	; (8003598 <HAL_FDCAN_Init+0x2b0>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	7c1b      	ldrb	r3, [r3, #16]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d108      	bne.n	80033e8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e4:	619a      	str	r2, [r3, #24]
 80033e6:	e007      	b.n	80033f8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7c5b      	ldrb	r3, [r3, #17]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d108      	bne.n	8003412 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800340e:	619a      	str	r2, [r3, #24]
 8003410:	e007      	b.n	8003422 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003420:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	7c9b      	ldrb	r3, [r3, #18]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d108      	bne.n	800343c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699a      	ldr	r2, [r3, #24]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003438:	619a      	str	r2, [r3, #24]
 800343a:	e007      	b.n	800344c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800344a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003470:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0210 	bic.w	r2, r2, #16
 8003480:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d108      	bne.n	800349c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0204 	orr.w	r2, r2, #4
 8003498:	619a      	str	r2, [r3, #24]
 800349a:	e02c      	b.n	80034f6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d028      	beq.n	80034f6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d01c      	beq.n	80034e6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034ba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0210 	orr.w	r2, r2, #16
 80034ca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d110      	bne.n	80034f6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0220 	orr.w	r2, r2, #32
 80034e2:	619a      	str	r2, [r3, #24]
 80034e4:	e007      	b.n	80034f6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0220 	orr.w	r2, r2, #32
 80034f4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	3b01      	subs	r3, #1
 8003504:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003506:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800350e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	3b01      	subs	r3, #1
 8003518:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800351e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003520:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800352a:	d115      	bne.n	8003558 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	3b01      	subs	r3, #1
 8003538:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800353a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	3b01      	subs	r3, #1
 8003542:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003544:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	3b01      	subs	r3, #1
 800354e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003554:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003556:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fcde 	bl	8003f30 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40006400 	.word	0x40006400
 8003598:	40006500 	.word	0x40006500

0800359c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035ac:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d002      	beq.n	80035ba <HAL_FDCAN_ConfigFilter+0x1e>
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d13d      	bne.n	8003636 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d119      	bne.n	80035f6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035ce:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80035d6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e01d      	b.n	8003632 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	075a      	lsls	r2, r3, #29
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	079a      	lsls	r2, r3, #30
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3304      	adds	r3, #4
 800362a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e006      	b.n	8003644 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363a:	f043 0202 	orr.w	r2, r3, #2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d116      	bne.n	8003698 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003672:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	011a      	lsls	r2, r3, #4
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	431a      	orrs	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	431a      	orrs	r2, r3
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	431a      	orrs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e006      	b.n	80036a6 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369c:	f043 0204 	orr.w	r2, r3, #4
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d110      	bne.n	80036e8 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e006      	b.n	80036f6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ec:	f043 0204 	orr.w	r2, r3, #4
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d156      	bne.n	80037c8 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800372a:	e011      	b.n	8003750 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b0a      	cmp	r3, #10
 8003730:	d90b      	bls.n	800374a <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2203      	movs	r2, #3
 8003742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e045      	b.n	80037d6 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	3301      	adds	r3, #1
 800374e:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0e6      	beq.n	800372c <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0210 	bic.w	r2, r2, #16
 8003770:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003772:	e011      	b.n	8003798 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b0a      	cmp	r3, #10
 8003778:	d90b      	bls.n	8003792 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2203      	movs	r2, #3
 800378a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e021      	b.n	80037d6 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3301      	adds	r3, #1
 8003796:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d0e6      	beq.n	8003774 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699a      	ldr	r2, [r3, #24]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0202 	orr.w	r2, r2, #2
 80037b4:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e006      	b.n	80037d6 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037cc:	f043 0208 	orr.w	r2, r3, #8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d12c      	bne.n	8003854 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800380e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e023      	b.n	8003862 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003822:	0c1b      	lsrs	r3, r3, #16
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fbe9 	bl	8004008 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2101      	movs	r1, #1
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	fa01 f202 	lsl.w	r2, r1, r2
 8003842:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003846:	2201      	movs	r2, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e006      	b.n	8003862 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003858:	f043 0208 	orr.w	r2, r3, #8
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
  }
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800386c:	b480      	push	{r7}
 800386e:	b08b      	sub	sp, #44	; 0x2c
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003880:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003882:	7efb      	ldrb	r3, [r7, #27]
 8003884:	2b02      	cmp	r3, #2
 8003886:	f040 80bc 	bne.w	8003a02 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d121      	bne.n	80038d4 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	2b00      	cmp	r3, #0
 800389e:	d107      	bne.n	80038b0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0af      	b.n	8003a10 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	e020      	b.n	8003916 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d107      	bne.n	80038f4 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e08d      	b.n	8003a10 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	440b      	add	r3, r1
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d107      	bne.n	800393a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	0c9b      	lsrs	r3, r3, #18
 8003930:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e005      	b.n	8003946 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	3304      	adds	r3, #4
 8003962:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b29a      	uxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	0e1b      	lsrs	r3, r3, #24
 8003998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	0fda      	lsrs	r2, r3, #31
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	3304      	adds	r3, #4
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	e00a      	b.n	80039d0 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	441a      	add	r2, r3
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	440b      	add	r3, r1
 80039c6:	7812      	ldrb	r2, [r2, #0]
 80039c8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	3301      	adds	r3, #1
 80039ce:	623b      	str	r3, [r7, #32]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <HAL_FDCAN_GetRxMessage+0x1b0>)
 80039d8:	5cd3      	ldrb	r3, [r2, r3]
 80039da:	461a      	mov	r2, r3
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	4293      	cmp	r3, r2
 80039e0:	d3eb      	bcc.n	80039ba <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d105      	bne.n	80039f4 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80039f2:	e004      	b.n	80039fe <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e006      	b.n	8003a10 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a06:	f043 0208 	orr.w	r2, r3, #8
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
  }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	372c      	adds	r7, #44	; 0x2c
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	080085b8 	.word	0x080085b8

08003a20 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a32:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d003      	beq.n	8003a42 <HAL_FDCAN_ActivateNotification+0x22>
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	f040 80c8 	bne.w	8003bd2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d004      	beq.n	8003a5e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d03b      	beq.n	8003ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d031      	beq.n	8003ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d027      	beq.n	8003ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d01d      	beq.n	8003ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d013      	beq.n	8003ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00c      	beq.n	8003ae6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d107      	bne.n	8003ae6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d13b      	bne.n	8003b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d131      	bne.n	8003b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d127      	bne.n	8003b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d11d      	bne.n	8003b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d004      	beq.n	8003b4a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d113      	bne.n	8003b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d004      	beq.n	8003b5e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00c      	beq.n	8003b82 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0202 	orr.w	r2, r2, #2
 8003b80:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e006      	b.n	8003be0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd6:	f043 0202 	orr.w	r2, r3, #2
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
  }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	4013      	ands	r3, r2
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	6a3a      	ldr	r2, [r7, #32]
 8003c20:	4013      	ands	r3, r2
 8003c22:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c2e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c42:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8003c46:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c5e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d006      	beq.n	8003c96 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2240      	movs	r2, #64	; 0x40
 8003c8e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f92e 	bl	8003ef2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01b      	beq.n	8003cdc <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d014      	beq.n	8003cdc <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003cba:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cd2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003cd4:	6939      	ldr	r1, [r7, #16]
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8ec 	bl	8003eb4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f8b6 	bl	8003e5e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6a3a      	ldr	r2, [r7, #32]
 8003cfe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003d00:	6a39      	ldr	r1, [r7, #32]
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fc fce4 	bl	80006d0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003d16:	69f9      	ldr	r1, [r7, #28]
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8ab 	bl	8003e74 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d42:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f8a0 	bl	8003e8a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01a      	beq.n	8003d8e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d013      	beq.n	8003d8e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003d6e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003d86:	68f9      	ldr	r1, [r7, #12]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f888 	bl	8003e9e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00e      	beq.n	8003dba <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003db2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f888 	bl	8003eca <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00e      	beq.n	8003de6 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003dde:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f87c 	bl	8003ede <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d011      	beq.n	8003e18 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003e26:	6979      	ldr	r1, [r7, #20]
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f876 	bl	8003f1a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d009      	beq.n	8003e48 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f858 	bl	8003f06 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003e56:	bf00      	nop
 8003e58:	3728      	adds	r7, #40	; 0x28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003f38:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003f3a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d103      	bne.n	8003f4e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003f4c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d103      	bne.n	8003f60 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8003f5e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f6e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	041a      	lsls	r2, r3, #16
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f94:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	061a      	lsls	r2, r3, #24
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	e005      	b.n	8003fe2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d3f3      	bcc.n	8003fd6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8003fee:	bf00      	nop
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	4000a400 	.word	0x4000a400
 8004000:	40006800 	.word	0x40006800
 8004004:	40006c00 	.word	0x40006c00

08004008 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8004008:	b480      	push	{r7}
 800400a:	b089      	sub	sp, #36	; 0x24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004026:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800402e:	4313      	orrs	r3, r2
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	e00a      	b.n	800404a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800403c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004042:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004048:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004054:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800405a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004060:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	440b      	add	r3, r1
 800407a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	3304      	adds	r3, #4
 8004086:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	3304      	adds	r3, #4
 8004092:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e020      	b.n	80040dc <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	3303      	adds	r3, #3
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	3302      	adds	r3, #2
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	440b      	add	r3, r1
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80040b2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	3301      	adds	r3, #1
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	440b      	add	r3, r1
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80040c0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	440a      	add	r2, r1
 80040c8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80040ca:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	3304      	adds	r3, #4
 80040d4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	3304      	adds	r3, #4
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0c1b      	lsrs	r3, r3, #16
 80040e2:	4a06      	ldr	r2, [pc, #24]	; (80040fc <FDCAN_CopyMessageToRAM+0xf4>)
 80040e4:	5cd3      	ldrb	r3, [r2, r3]
 80040e6:	461a      	mov	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d3d5      	bcc.n	800409a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	3724      	adds	r7, #36	; 0x24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	080085b8 	.word	0x080085b8

08004100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800410e:	e15a      	b.n	80043c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	4013      	ands	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 814c 	beq.w	80043c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d00b      	beq.n	8004148 <HAL_GPIO_Init+0x48>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d007      	beq.n	8004148 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800413c:	2b11      	cmp	r3, #17
 800413e:	d003      	beq.n	8004148 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b12      	cmp	r3, #18
 8004146:	d130      	bne.n	80041aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	2203      	movs	r2, #3
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800417e:	2201      	movs	r2, #1
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43db      	mvns	r3, r3
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 0201 	and.w	r2, r3, #1
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	2203      	movs	r2, #3
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4013      	ands	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0xea>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b12      	cmp	r3, #18
 80041e8:	d123      	bne.n	8004232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	08da      	lsrs	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3208      	adds	r2, #8
 80041f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	220f      	movs	r2, #15
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	08da      	lsrs	r2, r3, #3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3208      	adds	r2, #8
 800422c:	6939      	ldr	r1, [r7, #16]
 800422e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	2203      	movs	r2, #3
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4013      	ands	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f003 0203 	and.w	r2, r3, #3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 80a6 	beq.w	80043c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004274:	4b5b      	ldr	r3, [pc, #364]	; (80043e4 <HAL_GPIO_Init+0x2e4>)
 8004276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004278:	4a5a      	ldr	r2, [pc, #360]	; (80043e4 <HAL_GPIO_Init+0x2e4>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6613      	str	r3, [r2, #96]	; 0x60
 8004280:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <HAL_GPIO_Init+0x2e4>)
 8004282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800428c:	4a56      	ldr	r2, [pc, #344]	; (80043e8 <HAL_GPIO_Init+0x2e8>)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	3302      	adds	r3, #2
 8004294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004298:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	220f      	movs	r2, #15
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4013      	ands	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042b6:	d01f      	beq.n	80042f8 <HAL_GPIO_Init+0x1f8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a4c      	ldr	r2, [pc, #304]	; (80043ec <HAL_GPIO_Init+0x2ec>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d019      	beq.n	80042f4 <HAL_GPIO_Init+0x1f4>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a4b      	ldr	r2, [pc, #300]	; (80043f0 <HAL_GPIO_Init+0x2f0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <HAL_GPIO_Init+0x1f0>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a4a      	ldr	r2, [pc, #296]	; (80043f4 <HAL_GPIO_Init+0x2f4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00d      	beq.n	80042ec <HAL_GPIO_Init+0x1ec>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a49      	ldr	r2, [pc, #292]	; (80043f8 <HAL_GPIO_Init+0x2f8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <HAL_GPIO_Init+0x1e8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a48      	ldr	r2, [pc, #288]	; (80043fc <HAL_GPIO_Init+0x2fc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_GPIO_Init+0x1e4>
 80042e0:	2305      	movs	r3, #5
 80042e2:	e00a      	b.n	80042fa <HAL_GPIO_Init+0x1fa>
 80042e4:	2306      	movs	r3, #6
 80042e6:	e008      	b.n	80042fa <HAL_GPIO_Init+0x1fa>
 80042e8:	2304      	movs	r3, #4
 80042ea:	e006      	b.n	80042fa <HAL_GPIO_Init+0x1fa>
 80042ec:	2303      	movs	r3, #3
 80042ee:	e004      	b.n	80042fa <HAL_GPIO_Init+0x1fa>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e002      	b.n	80042fa <HAL_GPIO_Init+0x1fa>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_GPIO_Init+0x1fa>
 80042f8:	2300      	movs	r3, #0
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	f002 0203 	and.w	r2, r2, #3
 8004300:	0092      	lsls	r2, r2, #2
 8004302:	4093      	lsls	r3, r2
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800430a:	4937      	ldr	r1, [pc, #220]	; (80043e8 <HAL_GPIO_Init+0x2e8>)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	3302      	adds	r3, #2
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004318:	4b39      	ldr	r3, [pc, #228]	; (8004400 <HAL_GPIO_Init+0x300>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	43db      	mvns	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800433c:	4a30      	ldr	r2, [pc, #192]	; (8004400 <HAL_GPIO_Init+0x300>)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004342:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <HAL_GPIO_Init+0x300>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	43db      	mvns	r3, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004366:	4a26      	ldr	r2, [pc, #152]	; (8004400 <HAL_GPIO_Init+0x300>)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800436c:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_GPIO_Init+0x300>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	43db      	mvns	r3, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004390:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <HAL_GPIO_Init+0x300>)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <HAL_GPIO_Init+0x300>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	43db      	mvns	r3, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4013      	ands	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043ba:	4a11      	ldr	r2, [pc, #68]	; (8004400 <HAL_GPIO_Init+0x300>)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3301      	adds	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f47f ae9d 	bne.w	8004110 <HAL_GPIO_Init+0x10>
  }
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40010000 	.word	0x40010000
 80043ec:	48000400 	.word	0x48000400
 80043f0:	48000800 	.word	0x48000800
 80043f4:	48000c00 	.word	0x48000c00
 80043f8:	48001000 	.word	0x48001000
 80043fc:	48001400 	.word	0x48001400
 8004400:	40010400 	.word	0x40010400

08004404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	887b      	ldrh	r3, [r7, #2]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
 8004420:	e001      	b.n	8004426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004422:	2300      	movs	r3, #0
 8004424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	807b      	strh	r3, [r7, #2]
 8004440:	4613      	mov	r3, r2
 8004442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004444:	787b      	ldrb	r3, [r7, #1]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800444a:	887a      	ldrh	r2, [r7, #2]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004450:	e002      	b.n	8004458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004452:	887a      	ldrh	r2, [r7, #2]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004476:	d104      	bne.n	8004482 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f8d8 	bl	8004630 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8004480:	e003      	b.n	800448a <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f8a9 	bl	80045dc <HAL_PWREx_EnterSTOP0Mode>
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d141      	bne.n	8004526 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044a2:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ae:	d131      	bne.n	8004514 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044b0:	4b47      	ldr	r3, [pc, #284]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b6:	4a46      	ldr	r2, [pc, #280]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c0:	4b43      	ldr	r3, [pc, #268]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044c8:	4a41      	ldr	r2, [pc, #260]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044d0:	4b40      	ldr	r3, [pc, #256]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2232      	movs	r2, #50	; 0x32
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	4a3f      	ldr	r2, [pc, #252]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	0c9b      	lsrs	r3, r3, #18
 80044e2:	3301      	adds	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044e6:	e002      	b.n	80044ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044ee:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fa:	d102      	bne.n	8004502 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f2      	bne.n	80044e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004502:	4b33      	ldr	r3, [pc, #204]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450e:	d158      	bne.n	80045c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e057      	b.n	80045c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004514:	4b2e      	ldr	r3, [pc, #184]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800451a:	4a2d      	ldr	r2, [pc, #180]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004520:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004524:	e04d      	b.n	80045c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452c:	d141      	bne.n	80045b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800452e:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453a:	d131      	bne.n	80045a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800453c:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004542:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004548:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800454c:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004554:	4a1e      	ldr	r2, [pc, #120]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800455a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2232      	movs	r2, #50	; 0x32
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	0c9b      	lsrs	r3, r3, #18
 800456e:	3301      	adds	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004572:	e002      	b.n	800457a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3b01      	subs	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004586:	d102      	bne.n	800458e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f2      	bne.n	8004574 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800458e:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459a:	d112      	bne.n	80045c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e011      	b.n	80045c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a6:	4a0a      	ldr	r2, [pc, #40]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80045b0:	e007      	b.n	80045c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045b2:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045ba:	4a05      	ldr	r2, [pc, #20]	; (80045d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	40007000 	.word	0x40007000
 80045d4:	20000010 	.word	0x20000010
 80045d8:	431bde83 	.word	0x431bde83

080045dc <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a0f      	ldr	r2, [pc, #60]	; (8004628 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80045ec:	f023 0307 	bic.w	r3, r3, #7
 80045f0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	4a0d      	ldr	r2, [pc, #52]	; (800462c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004604:	bf30      	wfi
 8004606:	e002      	b.n	800460e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004608:	bf40      	sev
    __WFE();
 800460a:	bf20      	wfe
    __WFE();
 800460c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800460e:	4b07      	ldr	r3, [pc, #28]	; (800462c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	4a06      	ldr	r2, [pc, #24]	; (800462c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8004614:	f023 0304 	bic.w	r3, r3, #4
 8004618:	6113      	str	r3, [r2, #16]
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40007000 	.word	0x40007000
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 800463a:	4b11      	ldr	r3, [pc, #68]	; (8004680 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 0307 	bic.w	r3, r3, #7
 8004642:	4a0f      	ldr	r2, [pc, #60]	; (8004680 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800464a:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	4a0d      	ldr	r2, [pc, #52]	; (8004684 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004650:	f043 0304 	orr.w	r3, r3, #4
 8004654:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800465c:	bf30      	wfi
 800465e:	e002      	b.n	8004666 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004660:	bf40      	sev
    __WFE();
 8004662:	bf20      	wfe
    __WFE();
 8004664:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004666:	4b07      	ldr	r3, [pc, #28]	; (8004684 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	4a06      	ldr	r2, [pc, #24]	; (8004684 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800466c:	f023 0304 	bic.w	r3, r3, #4
 8004670:	6113      	str	r3, [r2, #16]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40007000 	.word	0x40007000
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004696:	6093      	str	r3, [r2, #8]
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40007000 	.word	0x40007000

080046a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e308      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d075      	beq.n	80047b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c6:	4ba3      	ldr	r3, [pc, #652]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d0:	4ba0      	ldr	r3, [pc, #640]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d102      	bne.n	80046e6 <HAL_RCC_OscConfig+0x3e>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d002      	beq.n	80046ec <HAL_RCC_OscConfig+0x44>
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d10b      	bne.n	8004704 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ec:	4b99      	ldr	r3, [pc, #612]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d05b      	beq.n	80047b0 <HAL_RCC_OscConfig+0x108>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d157      	bne.n	80047b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e2e3      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470c:	d106      	bne.n	800471c <HAL_RCC_OscConfig+0x74>
 800470e:	4b91      	ldr	r3, [pc, #580]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a90      	ldr	r2, [pc, #576]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	e01d      	b.n	8004758 <HAL_RCC_OscConfig+0xb0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x98>
 8004726:	4b8b      	ldr	r3, [pc, #556]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a8a      	ldr	r2, [pc, #552]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800472c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b88      	ldr	r3, [pc, #544]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a87      	ldr	r2, [pc, #540]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e00b      	b.n	8004758 <HAL_RCC_OscConfig+0xb0>
 8004740:	4b84      	ldr	r3, [pc, #528]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a83      	ldr	r2, [pc, #524]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b81      	ldr	r3, [pc, #516]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a80      	ldr	r2, [pc, #512]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d013      	beq.n	8004788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fe fc20 	bl	8002fa4 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004768:	f7fe fc1c 	bl	8002fa4 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	; 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e2a8      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477a:	4b76      	ldr	r3, [pc, #472]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0xc0>
 8004786:	e014      	b.n	80047b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe fc0c 	bl	8002fa4 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004790:	f7fe fc08 	bl	8002fa4 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e294      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047a2:	4b6c      	ldr	r3, [pc, #432]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0xe8>
 80047ae:	e000      	b.n	80047b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d075      	beq.n	80048aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047be:	4b65      	ldr	r3, [pc, #404]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c8:	4b62      	ldr	r3, [pc, #392]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	d102      	bne.n	80047de <HAL_RCC_OscConfig+0x136>
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d002      	beq.n	80047e4 <HAL_RCC_OscConfig+0x13c>
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d11f      	bne.n	8004824 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e4:	4b5b      	ldr	r3, [pc, #364]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_OscConfig+0x154>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e267      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fc:	4b55      	ldr	r3, [pc, #340]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	4952      	ldr	r1, [pc, #328]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004810:	4b51      	ldr	r3, [pc, #324]	; (8004958 <HAL_RCC_OscConfig+0x2b0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe fb79 	bl	8002f0c <HAL_InitTick>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d043      	beq.n	80048a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e253      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d023      	beq.n	8004874 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800482c:	4b49      	ldr	r3, [pc, #292]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a48      	ldr	r2, [pc, #288]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fe fbb4 	bl	8002fa4 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004840:	f7fe fbb0 	bl	8002fa4 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e23c      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004852:	4b40      	ldr	r3, [pc, #256]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485e:	4b3d      	ldr	r3, [pc, #244]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	061b      	lsls	r3, r3, #24
 800486c:	4939      	ldr	r1, [pc, #228]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800486e:	4313      	orrs	r3, r2
 8004870:	604b      	str	r3, [r1, #4]
 8004872:	e01a      	b.n	80048aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004874:	4b37      	ldr	r3, [pc, #220]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a36      	ldr	r2, [pc, #216]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800487a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fe fb90 	bl	8002fa4 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004888:	f7fe fb8c 	bl	8002fa4 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e218      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800489a:	4b2e      	ldr	r3, [pc, #184]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x1e0>
 80048a6:	e000      	b.n	80048aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d03c      	beq.n	8004930 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01c      	beq.n	80048f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048be:	4b25      	ldr	r3, [pc, #148]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c4:	4a23      	ldr	r2, [pc, #140]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7fe fb69 	bl	8002fa4 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d6:	f7fe fb65 	bl	8002fa4 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e1f1      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048e8:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80048ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0ef      	beq.n	80048d6 <HAL_RCC_OscConfig+0x22e>
 80048f6:	e01b      	b.n	8004930 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f8:	4b16      	ldr	r3, [pc, #88]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 80048fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fe:	4a15      	ldr	r2, [pc, #84]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	f023 0301 	bic.w	r3, r3, #1
 8004904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004908:	f7fe fb4c 	bl	8002fa4 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004910:	f7fe fb48 	bl	8002fa4 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e1d4      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ef      	bne.n	8004910 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80ab 	beq.w	8004a94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493e:	2300      	movs	r3, #0
 8004940:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004942:	4b04      	ldr	r3, [pc, #16]	; (8004954 <HAL_RCC_OscConfig+0x2ac>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_RCC_OscConfig+0x2b4>
 800494e:	2301      	movs	r3, #1
 8004950:	e005      	b.n	800495e <HAL_RCC_OscConfig+0x2b6>
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
 8004958:	20000014 	.word	0x20000014
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00d      	beq.n	800497e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	4baf      	ldr	r3, [pc, #700]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004966:	4aae      	ldr	r2, [pc, #696]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496c:	6593      	str	r3, [r2, #88]	; 0x58
 800496e:	4bac      	ldr	r3, [pc, #688]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800497a:	2301      	movs	r3, #1
 800497c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497e:	4ba9      	ldr	r3, [pc, #676]	; (8004c24 <HAL_RCC_OscConfig+0x57c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d118      	bne.n	80049bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800498a:	4ba6      	ldr	r3, [pc, #664]	; (8004c24 <HAL_RCC_OscConfig+0x57c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4aa5      	ldr	r2, [pc, #660]	; (8004c24 <HAL_RCC_OscConfig+0x57c>)
 8004990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004996:	f7fe fb05 	bl	8002fa4 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499e:	f7fe fb01 	bl	8002fa4 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e18d      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b0:	4b9c      	ldr	r3, [pc, #624]	; (8004c24 <HAL_RCC_OscConfig+0x57c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d108      	bne.n	80049d6 <HAL_RCC_OscConfig+0x32e>
 80049c4:	4b96      	ldr	r3, [pc, #600]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	4a95      	ldr	r2, [pc, #596]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049d4:	e024      	b.n	8004a20 <HAL_RCC_OscConfig+0x378>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d110      	bne.n	8004a00 <HAL_RCC_OscConfig+0x358>
 80049de:	4b90      	ldr	r3, [pc, #576]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	4a8e      	ldr	r2, [pc, #568]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 80049e6:	f043 0304 	orr.w	r3, r3, #4
 80049ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ee:	4b8c      	ldr	r3, [pc, #560]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	4a8a      	ldr	r2, [pc, #552]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049fe:	e00f      	b.n	8004a20 <HAL_RCC_OscConfig+0x378>
 8004a00:	4b87      	ldr	r3, [pc, #540]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	4a86      	ldr	r2, [pc, #536]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a10:	4b83      	ldr	r3, [pc, #524]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	4a82      	ldr	r2, [pc, #520]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004a18:	f023 0304 	bic.w	r3, r3, #4
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d016      	beq.n	8004a56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fe fabc 	bl	8002fa4 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a30:	f7fe fab8 	bl	8002fa4 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e142      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a46:	4b76      	ldr	r3, [pc, #472]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ed      	beq.n	8004a30 <HAL_RCC_OscConfig+0x388>
 8004a54:	e015      	b.n	8004a82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a56:	f7fe faa5 	bl	8002fa4 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5e:	f7fe faa1 	bl	8002fa4 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e12b      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a74:	4b6a      	ldr	r3, [pc, #424]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1ed      	bne.n	8004a5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a82:	7ffb      	ldrb	r3, [r7, #31]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a88:	4b65      	ldr	r3, [pc, #404]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8c:	4a64      	ldr	r2, [pc, #400]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d03c      	beq.n	8004b1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01c      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004aa8:	4b5d      	ldr	r3, [pc, #372]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aae:	4a5c      	ldr	r2, [pc, #368]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004ab0:	f043 0301 	orr.w	r3, r3, #1
 8004ab4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7fe fa74 	bl	8002fa4 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac0:	f7fe fa70 	bl	8002fa4 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e0fc      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ad2:	4b53      	ldr	r3, [pc, #332]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0ef      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x418>
 8004ae0:	e01b      	b.n	8004b1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ae2:	4b4f      	ldr	r3, [pc, #316]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ae8:	4a4d      	ldr	r2, [pc, #308]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af2:	f7fe fa57 	bl	8002fa4 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004af8:	e008      	b.n	8004b0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004afa:	f7fe fa53 	bl	8002fa4 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e0df      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b0c:	4b44      	ldr	r3, [pc, #272]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1ef      	bne.n	8004afa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80d3 	beq.w	8004cca <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b24:	4b3e      	ldr	r3, [pc, #248]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 030c 	and.w	r3, r3, #12
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	f000 808d 	beq.w	8004c4c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d15a      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3a:	4b39      	ldr	r3, [pc, #228]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a38      	ldr	r2, [pc, #224]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fe fa2d 	bl	8002fa4 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4e:	f7fe fa29 	bl	8002fa4 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e0b5      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b60:	4b2f      	ldr	r3, [pc, #188]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f0      	bne.n	8004b4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b6c:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <HAL_RCC_OscConfig+0x580>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6a11      	ldr	r1, [r2, #32]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b7c:	3a01      	subs	r2, #1
 8004b7e:	0112      	lsls	r2, r2, #4
 8004b80:	4311      	orrs	r1, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004b86:	0212      	lsls	r2, r2, #8
 8004b88:	4311      	orrs	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b8e:	0852      	lsrs	r2, r2, #1
 8004b90:	3a01      	subs	r2, #1
 8004b92:	0552      	lsls	r2, r2, #21
 8004b94:	4311      	orrs	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b9a:	0852      	lsrs	r2, r2, #1
 8004b9c:	3a01      	subs	r2, #1
 8004b9e:	0652      	lsls	r2, r2, #25
 8004ba0:	4311      	orrs	r1, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ba6:	06d2      	lsls	r2, r2, #27
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	491d      	ldr	r1, [pc, #116]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1a      	ldr	r2, [pc, #104]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bbc:	4b18      	ldr	r3, [pc, #96]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fe f9ec 	bl	8002fa4 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fe f9e8 	bl	8002fa4 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e074      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be2:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x528>
 8004bee:	e06c      	b.n	8004cca <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0a      	ldr	r2, [pc, #40]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004bfc:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a07      	ldr	r2, [pc, #28]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004c02:	f023 0303 	bic.w	r3, r3, #3
 8004c06:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <HAL_RCC_OscConfig+0x578>)
 8004c0e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fe f9c4 	bl	8002fa4 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c1e:	e00e      	b.n	8004c3e <HAL_RCC_OscConfig+0x596>
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40007000 	.word	0x40007000
 8004c28:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7fe f9ba 	bl	8002fa4 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e046      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c3e:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <HAL_RCC_OscConfig+0x62c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f0      	bne.n	8004c2c <HAL_RCC_OscConfig+0x584>
 8004c4a:	e03e      	b.n	8004cca <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e039      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c58:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <HAL_RCC_OscConfig+0x62c>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f003 0203 	and.w	r2, r3, #3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d12c      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	3b01      	subs	r3, #1
 8004c78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d123      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d11b      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d113      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	3b01      	subs	r3, #1
 8004cac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d109      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d001      	beq.n	8004cca <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40021000 	.word	0x40021000

08004cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e11e      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b91      	ldr	r3, [pc, #580]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d910      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b8e      	ldr	r3, [pc, #568]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 020f 	bic.w	r2, r3, #15
 8004d06:	498c      	ldr	r1, [pc, #560]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b8a      	ldr	r3, [pc, #552]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e106      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d073      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d129      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d34:	4b81      	ldr	r3, [pc, #516]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0f4      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d44:	f000 f99e 	bl	8005084 <RCC_GetSysClockFreqFromPLLSource>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	4a7c      	ldr	r2, [pc, #496]	; (8004f40 <HAL_RCC_ClockConfig+0x268>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d93f      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d52:	4b7a      	ldr	r3, [pc, #488]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d033      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d12f      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d72:	4b72      	ldr	r3, [pc, #456]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d7a:	4a70      	ldr	r2, [pc, #448]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e024      	b.n	8004dd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d90:	4b6a      	ldr	r3, [pc, #424]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0c6      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004da0:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0be      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004db0:	f000 f8ce 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8004db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	4a61      	ldr	r2, [pc, #388]	; (8004f40 <HAL_RCC_ClockConfig+0x268>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d909      	bls.n	8004dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dbe:	4b5f      	ldr	r3, [pc, #380]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc6:	4a5d      	ldr	r2, [pc, #372]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dd2:	4b5a      	ldr	r3, [pc, #360]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f023 0203 	bic.w	r2, r3, #3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4957      	ldr	r1, [pc, #348]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de4:	f7fe f8de 	bl	8002fa4 <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dea:	e00a      	b.n	8004e02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dec:	f7fe f8da 	bl	8002fa4 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e095      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	4b4e      	ldr	r3, [pc, #312]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 020c 	and.w	r2, r3, #12
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d1eb      	bne.n	8004dec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d023      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e2c:	4b43      	ldr	r3, [pc, #268]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a42      	ldr	r2, [pc, #264]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e44:	4b3d      	ldr	r3, [pc, #244]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e4c:	4a3b      	ldr	r2, [pc, #236]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e54:	4b39      	ldr	r3, [pc, #228]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4936      	ldr	r1, [pc, #216]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d105      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e6e:	4b33      	ldr	r3, [pc, #204]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	4a32      	ldr	r2, [pc, #200]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e7a:	4b2f      	ldr	r3, [pc, #188]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d21d      	bcs.n	8004ec4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e88:	4b2b      	ldr	r3, [pc, #172]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f023 020f 	bic.w	r2, r3, #15
 8004e90:	4929      	ldr	r1, [pc, #164]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e98:	f7fe f884 	bl	8002fa4 <HAL_GetTick>
 8004e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9e:	e00a      	b.n	8004eb6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea0:	f7fe f880 	bl	8002fa4 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e03b      	b.n	8004f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb6:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <HAL_RCC_ClockConfig+0x260>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1ed      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4917      	ldr	r1, [pc, #92]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eee:	4b13      	ldr	r3, [pc, #76]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	490f      	ldr	r1, [pc, #60]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f02:	f000 f825 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8004f06:	4602      	mov	r2, r0
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <HAL_RCC_ClockConfig+0x264>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	490c      	ldr	r1, [pc, #48]	; (8004f44 <HAL_RCC_ClockConfig+0x26c>)
 8004f14:	5ccb      	ldrb	r3, [r1, r3]
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <HAL_RCC_ClockConfig+0x270>)
 8004f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f22:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <HAL_RCC_ClockConfig+0x274>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd fff0 	bl	8002f0c <HAL_InitTick>
 8004f2c:	4603      	mov	r3, r0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40022000 	.word	0x40022000
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	04c4b400 	.word	0x04c4b400
 8004f44:	080085a0 	.word	0x080085a0
 8004f48:	20000010 	.word	0x20000010
 8004f4c:	20000014 	.word	0x20000014

08004f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f56:	4b2c      	ldr	r3, [pc, #176]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d102      	bne.n	8004f68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f62:	4b2a      	ldr	r3, [pc, #168]	; (800500c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e047      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f68:	4b27      	ldr	r3, [pc, #156]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 030c 	and.w	r3, r3, #12
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d102      	bne.n	8004f7a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f74:	4b26      	ldr	r3, [pc, #152]	; (8005010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	e03e      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b0c      	cmp	r3, #12
 8004f84:	d136      	bne.n	8004ff4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f86:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f90:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	091b      	lsrs	r3, r3, #4
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d10c      	bne.n	8004fbe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fa4:	4a1a      	ldr	r2, [pc, #104]	; (8005010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	4a16      	ldr	r2, [pc, #88]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fae:	68d2      	ldr	r2, [r2, #12]
 8004fb0:	0a12      	lsrs	r2, r2, #8
 8004fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	617b      	str	r3, [r7, #20]
      break;
 8004fbc:	e00c      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004fbe:	4a13      	ldr	r2, [pc, #76]	; (800500c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc6:	4a10      	ldr	r2, [pc, #64]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fc8:	68d2      	ldr	r2, [r2, #12]
 8004fca:	0a12      	lsrs	r2, r2, #8
 8004fcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fd0:	fb02 f303 	mul.w	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]
      break;
 8004fd6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	0e5b      	lsrs	r3, r3, #25
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e001      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ff8:	693b      	ldr	r3, [r7, #16]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000
 800500c:	00f42400 	.word	0x00f42400
 8005010:	007a1200 	.word	0x007a1200

08005014 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005018:	4b03      	ldr	r3, [pc, #12]	; (8005028 <HAL_RCC_GetHCLKFreq+0x14>)
 800501a:	681b      	ldr	r3, [r3, #0]
}
 800501c:	4618      	mov	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000010 	.word	0x20000010

0800502c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005030:	f7ff fff0 	bl	8005014 <HAL_RCC_GetHCLKFreq>
 8005034:	4602      	mov	r2, r0
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	0a1b      	lsrs	r3, r3, #8
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	4904      	ldr	r1, [pc, #16]	; (8005054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005042:	5ccb      	ldrb	r3, [r1, r3]
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800504c:	4618      	mov	r0, r3
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	080085b0 	.word	0x080085b0

08005058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800505c:	f7ff ffda 	bl	8005014 <HAL_RCC_GetHCLKFreq>
 8005060:	4602      	mov	r2, r0
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	0adb      	lsrs	r3, r3, #11
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	4904      	ldr	r1, [pc, #16]	; (8005080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800506e:	5ccb      	ldrb	r3, [r1, r3]
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000
 8005080:	080085b0 	.word	0x080085b0

08005084 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800508a:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	3301      	adds	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d10c      	bne.n	80050c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050a8:	4a17      	ldr	r2, [pc, #92]	; (8005108 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	4a14      	ldr	r2, [pc, #80]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050b2:	68d2      	ldr	r2, [r2, #12]
 80050b4:	0a12      	lsrs	r2, r2, #8
 80050b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	617b      	str	r3, [r7, #20]
    break;
 80050c0:	e00c      	b.n	80050dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050c2:	4a12      	ldr	r2, [pc, #72]	; (800510c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	4a0e      	ldr	r2, [pc, #56]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050cc:	68d2      	ldr	r2, [r2, #12]
 80050ce:	0a12      	lsrs	r2, r2, #8
 80050d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050d4:	fb02 f303 	mul.w	r3, r2, r3
 80050d8:	617b      	str	r3, [r7, #20]
    break;
 80050da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050dc:	4b09      	ldr	r3, [pc, #36]	; (8005104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	0e5b      	lsrs	r3, r3, #25
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	3301      	adds	r3, #1
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80050f6:	687b      	ldr	r3, [r7, #4]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40021000 	.word	0x40021000
 8005108:	007a1200 	.word	0x007a1200
 800510c:	00f42400 	.word	0x00f42400

08005110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005118:	2300      	movs	r3, #0
 800511a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800511c:	2300      	movs	r3, #0
 800511e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8098 	beq.w	800525e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800512e:	2300      	movs	r3, #0
 8005130:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005132:	4b43      	ldr	r3, [pc, #268]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10d      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513e:	4b40      	ldr	r3, [pc, #256]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005142:	4a3f      	ldr	r2, [pc, #252]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005148:	6593      	str	r3, [r2, #88]	; 0x58
 800514a:	4b3d      	ldr	r3, [pc, #244]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800514c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005156:	2301      	movs	r3, #1
 8005158:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800515a:	4b3a      	ldr	r3, [pc, #232]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a39      	ldr	r2, [pc, #228]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005164:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005166:	f7fd ff1d 	bl	8002fa4 <HAL_GetTick>
 800516a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800516c:	e009      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800516e:	f7fd ff19 	bl	8002fa4 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d902      	bls.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	74fb      	strb	r3, [r7, #19]
        break;
 8005180:	e005      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005182:	4b30      	ldr	r3, [pc, #192]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0ef      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800518e:	7cfb      	ldrb	r3, [r7, #19]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d159      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005194:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01e      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d019      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051b0:	4b23      	ldr	r3, [pc, #140]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051bc:	4b20      	ldr	r3, [pc, #128]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c2:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051cc:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051dc:	4a18      	ldr	r2, [pc, #96]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d016      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fd fed9 	bl	8002fa4 <HAL_GetTick>
 80051f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f4:	e00b      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f6:	f7fd fed5 	bl	8002fa4 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f241 3288 	movw	r2, #5000	; 0x1388
 8005204:	4293      	cmp	r3, r2
 8005206:	d902      	bls.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	74fb      	strb	r3, [r7, #19]
            break;
 800520c:	e006      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520e:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0ec      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005222:	4b07      	ldr	r3, [pc, #28]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005230:	4903      	ldr	r1, [pc, #12]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005238:	e008      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800523a:	7cfb      	ldrb	r3, [r7, #19]
 800523c:	74bb      	strb	r3, [r7, #18]
 800523e:	e005      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005240:	40021000 	.word	0x40021000
 8005244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005248:	7cfb      	ldrb	r3, [r7, #19]
 800524a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800524c:	7c7b      	ldrb	r3, [r7, #17]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d105      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005252:	4baf      	ldr	r3, [pc, #700]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005256:	4aae      	ldr	r2, [pc, #696]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800525c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800526a:	4ba9      	ldr	r3, [pc, #676]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	f023 0203 	bic.w	r2, r3, #3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	49a5      	ldr	r1, [pc, #660]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800528c:	4ba0      	ldr	r3, [pc, #640]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005292:	f023 020c 	bic.w	r2, r3, #12
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	499d      	ldr	r1, [pc, #628]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052ae:	4b98      	ldr	r3, [pc, #608]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4994      	ldr	r1, [pc, #592]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052d0:	4b8f      	ldr	r3, [pc, #572]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	498c      	ldr	r1, [pc, #560]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052f2:	4b87      	ldr	r3, [pc, #540]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	4983      	ldr	r1, [pc, #524]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005314:	4b7e      	ldr	r3, [pc, #504]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	497b      	ldr	r1, [pc, #492]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005336:	4b76      	ldr	r3, [pc, #472]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	4972      	ldr	r1, [pc, #456]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005358:	4b6d      	ldr	r3, [pc, #436]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	496a      	ldr	r1, [pc, #424]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005368:	4313      	orrs	r3, r2
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800537a:	4b65      	ldr	r3, [pc, #404]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	4961      	ldr	r1, [pc, #388]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800539c:	4b5c      	ldr	r3, [pc, #368]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800539e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053a2:	f023 0203 	bic.w	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	4959      	ldr	r1, [pc, #356]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053be:	4b54      	ldr	r3, [pc, #336]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	4950      	ldr	r1, [pc, #320]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d015      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053e0:	4b4b      	ldr	r3, [pc, #300]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	4948      	ldr	r1, [pc, #288]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053fe:	d105      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005400:	4b43      	ldr	r3, [pc, #268]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4a42      	ldr	r2, [pc, #264]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800540a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005414:	2b00      	cmp	r3, #0
 8005416:	d015      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005418:	4b3d      	ldr	r3, [pc, #244]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005426:	493a      	ldr	r1, [pc, #232]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005436:	d105      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005438:	4b35      	ldr	r3, [pc, #212]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4a34      	ldr	r2, [pc, #208]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800543e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005442:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d015      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005450:	4b2f      	ldr	r3, [pc, #188]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	492c      	ldr	r1, [pc, #176]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800546e:	d105      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005470:	4b27      	ldr	r3, [pc, #156]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4a26      	ldr	r2, [pc, #152]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800547a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d015      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005488:	4b21      	ldr	r3, [pc, #132]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	491e      	ldr	r1, [pc, #120]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a6:	d105      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a8:	4b19      	ldr	r3, [pc, #100]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4a18      	ldr	r2, [pc, #96]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d015      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054c0:	4b13      	ldr	r3, [pc, #76]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	4910      	ldr	r1, [pc, #64]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054de:	d105      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	4a0a      	ldr	r2, [pc, #40]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d018      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005506:	4902      	ldr	r1, [pc, #8]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800550e:	e001      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005510:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800551c:	d105      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800551e:	4b21      	ldr	r3, [pc, #132]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	4a20      	ldr	r2, [pc, #128]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005528:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d015      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005536:	4b1b      	ldr	r3, [pc, #108]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005544:	4917      	ldr	r1, [pc, #92]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005554:	d105      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005556:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	4a12      	ldr	r2, [pc, #72]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800555c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005560:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d015      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005570:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005574:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557c:	4909      	ldr	r1, [pc, #36]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800558c:	d105      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558e:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005598:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800559a:	7cbb      	ldrb	r3, [r7, #18]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40021000 	.word	0x40021000

080055a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d05c      	beq.n	8005674 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fd fa82 	bl	8002ad8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055dc:	4b28      	ldr	r3, [pc, #160]	; (8005680 <HAL_RTC_Init+0xd8>)
 80055de:	22ca      	movs	r2, #202	; 0xca
 80055e0:	625a      	str	r2, [r3, #36]	; 0x24
 80055e2:	4b27      	ldr	r3, [pc, #156]	; (8005680 <HAL_RTC_Init+0xd8>)
 80055e4:	2253      	movs	r2, #83	; 0x53
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f871 	bl	80056d0 <RTC_EnterInitMode>
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d133      	bne.n	8005660 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80055f8:	4b21      	ldr	r3, [pc, #132]	; (8005680 <HAL_RTC_Init+0xd8>)
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	4a20      	ldr	r2, [pc, #128]	; (8005680 <HAL_RTC_Init+0xd8>)
 80055fe:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005606:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005608:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <HAL_RTC_Init+0xd8>)
 800560a:	699a      	ldr	r2, [r3, #24]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6859      	ldr	r1, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	4319      	orrs	r1, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	430b      	orrs	r3, r1
 800561c:	4918      	ldr	r1, [pc, #96]	; (8005680 <HAL_RTC_Init+0xd8>)
 800561e:	4313      	orrs	r3, r2
 8005620:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	4914      	ldr	r1, [pc, #80]	; (8005680 <HAL_RTC_Init+0xd8>)
 800562e:	4313      	orrs	r3, r2
 8005630:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f880 	bl	8005738 <RTC_ExitInitMode>
 8005638:	4603      	mov	r3, r0
 800563a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10e      	bne.n	8005660 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8005642:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <HAL_RTC_Init+0xd8>)
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a19      	ldr	r1, [r3, #32]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	4319      	orrs	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	430b      	orrs	r3, r1
 800565a:	4909      	ldr	r1, [pc, #36]	; (8005680 <HAL_RTC_Init+0xd8>)
 800565c:	4313      	orrs	r3, r2
 800565e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <HAL_RTC_Init+0xd8>)
 8005662:	22ff      	movs	r2, #255	; 0xff
 8005664:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d103      	bne.n	8005674 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40002800 	.word	0x40002800

08005684 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <HAL_RTC_WaitForSynchro+0x48>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <HAL_RTC_WaitForSynchro+0x48>)
 8005692:	f023 0320 	bic.w	r3, r3, #32
 8005696:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005698:	f7fd fc84 	bl	8002fa4 <HAL_GetTick>
 800569c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800569e:	e009      	b.n	80056b4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056a0:	f7fd fc80 	bl	8002fa4 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ae:	d901      	bls.n	80056b4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e006      	b.n	80056c2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RTC_WaitForSynchro+0x48>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0ef      	beq.n	80056a0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40002800 	.word	0x40002800

080056d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80056dc:	4b15      	ldr	r3, [pc, #84]	; (8005734 <RTC_EnterInitMode+0x64>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d120      	bne.n	800572a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80056e8:	4b12      	ldr	r3, [pc, #72]	; (8005734 <RTC_EnterInitMode+0x64>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a11      	ldr	r2, [pc, #68]	; (8005734 <RTC_EnterInitMode+0x64>)
 80056ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80056f4:	f7fd fc56 	bl	8002fa4 <HAL_GetTick>
 80056f8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056fa:	e00d      	b.n	8005718 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80056fc:	f7fd fc52 	bl	8002fa4 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800570a:	d905      	bls.n	8005718 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2203      	movs	r2, #3
 8005714:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005718:	4b06      	ldr	r3, [pc, #24]	; (8005734 <RTC_EnterInitMode+0x64>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <RTC_EnterInitMode+0x5a>
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b03      	cmp	r3, #3
 8005728:	d1e8      	bne.n	80056fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40002800 	.word	0x40002800

08005738 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005744:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <RTC_ExitInitMode+0x78>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <RTC_ExitInitMode+0x78>)
 800574a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800574e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005750:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <RTC_ExitInitMode+0x78>)
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	f003 0320 	and.w	r3, r3, #32
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10c      	bne.n	8005776 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff ff91 	bl	8005684 <HAL_RTC_WaitForSynchro>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01e      	beq.n	80057a6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2203      	movs	r2, #3
 800576c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	73fb      	strb	r3, [r7, #15]
 8005774:	e017      	b.n	80057a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <RTC_ExitInitMode+0x78>)
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	4a0d      	ldr	r2, [pc, #52]	; (80057b0 <RTC_ExitInitMode+0x78>)
 800577c:	f023 0320 	bic.w	r3, r3, #32
 8005780:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ff7e 	bl	8005684 <HAL_RTC_WaitForSynchro>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2203      	movs	r2, #3
 8005792:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <RTC_ExitInitMode+0x78>)
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	4a04      	ldr	r2, [pc, #16]	; (80057b0 <RTC_ExitInitMode+0x78>)
 80057a0:	f043 0320 	orr.w	r3, r3, #32
 80057a4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40002800 	.word	0x40002800

080057b4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e068      	b.n	80058a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057de:	4b32      	ldr	r3, [pc, #200]	; (80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 80057e0:	22ca      	movs	r2, #202	; 0xca
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24
 80057e4:	4b30      	ldr	r3, [pc, #192]	; (80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 80057e6:	2253      	movs	r2, #83	; 0x53
 80057e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f8:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80057fa:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 80057fc:	2204      	movs	r2, #4
 80057fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d11f      	bne.n	800584e <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    tickstart = HAL_GetTick();
 800580e:	f7fd fbc9 	bl	8002fa4 <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8005814:	e014      	b.n	8005840 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005816:	f7fd fbc5 	bl	8002fa4 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005824:	d90c      	bls.n	8005840 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005826:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005828:	22ff      	movs	r2, #255	; 0xff
 800582a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2203      	movs	r2, #3
 8005830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e02f      	b.n	80058a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0e3      	beq.n	8005816 <HAL_RTCEx_SetWakeUpTimer_IT+0x62>
      }
    }
  }
  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 800584e:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6153      	str	r3, [r2, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005854:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f023 0207 	bic.w	r2, r3, #7
 800585c:	4912      	ldr	r1, [pc, #72]	; (80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4313      	orrs	r3, r2
 8005862:	618b      	str	r3, [r1, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005864:	4b11      	ldr	r3, [pc, #68]	; (80058ac <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a10      	ldr	r2, [pc, #64]	; (80058ac <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 800586a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800586e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_RISING_IT();
 8005870:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8005876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800587a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer */ 
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8005882:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8005886:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 800588a:	22ff      	movs	r2, #255	; 0xff
 800588c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40002800 	.word	0x40002800
 80058ac:	40010400 	.word	0x40010400

080058b0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e042      	b.n	800594c <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058d6:	4b1f      	ldr	r3, [pc, #124]	; (8005954 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80058d8:	22ca      	movs	r2, #202	; 0xca
 80058da:	625a      	str	r2, [r3, #36]	; 0x24
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80058de:	2253      	movs	r2, #83	; 0x53
 80058e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE | RTC_CR_WUTIE);
 80058e2:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	4a1b      	ldr	r2, [pc, #108]	; (8005954 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80058e8:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 80058ec:	6193      	str	r3, [r2, #24]

  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 80058ee:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>)
 80058f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058f4:	615a      	str	r2, [r3, #20]

  tickstart = HAL_GetTick();
 80058f6:	f7fd fb55 	bl	8002fa4 <HAL_GetTick>
 80058fa:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80058fc:	e014      	b.n	8005928 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058fe:	f7fd fb51 	bl	8002fa4 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800590c:	d90c      	bls.n	8005928 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800590e:	4b11      	ldr	r3, [pc, #68]	; (8005954 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8005910:	22ff      	movs	r2, #255	; 0xff
 8005912:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2203      	movs	r2, #3
 8005918:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e011      	b.n	800594c <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8005928:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0e4      	beq.n	80058fe <HAL_RTCEx_DeactivateWakeUpTimer+0x4e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005934:	4b07      	ldr	r3, [pc, #28]	; (8005954 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8005936:	22ff      	movs	r2, #255	; 0xff
 8005938:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40002800 	.word	0x40002800
 8005958:	40010400 	.word	0x40010400

0800595c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->SR, RTC_SR_WUTF) != 0U)
 8005964:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <HAL_RTCEx_WakeUpTimerIRQHandler+0x38>)
 8005966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d009      	beq.n	8005984 <HAL_RTCEx_WakeUpTimerIRQHandler+0x28>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8005970:	4b08      	ldr	r3, [pc, #32]	; (8005994 <HAL_RTCEx_WakeUpTimerIRQHandler+0x38>)
 8005972:	2204      	movs	r2, #4
 8005974:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 8005976:	4b08      	ldr	r3, [pc, #32]	; (8005998 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 8005978:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800597c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f80c 	bl	800599c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800598c:	bf00      	nop
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40002800 	.word	0x40002800
 8005998:	40010400 	.word	0x40010400

0800599c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e09d      	b.n	8005afe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d108      	bne.n	80059dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059d2:	d009      	beq.n	80059e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	61da      	str	r2, [r3, #28]
 80059da:	e005      	b.n	80059e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fd f88a 	bl	8002b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a28:	d902      	bls.n	8005a30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	e002      	b.n	8005a36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a3e:	d007      	beq.n	8005a50 <HAL_SPI_Init+0xa0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a48:	d002      	beq.n	8005a50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	ea42 0103 	orr.w	r1, r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	0c1b      	lsrs	r3, r3, #16
 8005aac:	f003 0204 	and.w	r2, r3, #4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005acc:	ea42 0103 	orr.w	r1, r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b08a      	sub	sp, #40	; 0x28
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b14:	2301      	movs	r3, #1
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_SPI_TransmitReceive+0x26>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e1fb      	b.n	8005f24 <HAL_SPI_TransmitReceive+0x41e>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b34:	f7fd fa36 	bl	8002fa4 <HAL_GetTick>
 8005b38:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b40:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005b48:	887b      	ldrh	r3, [r7, #2]
 8005b4a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005b4c:	887b      	ldrh	r3, [r7, #2]
 8005b4e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b50:	7efb      	ldrb	r3, [r7, #27]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d00e      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x6e>
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b5c:	d106      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d102      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x66>
 8005b66:	7efb      	ldrb	r3, [r7, #27]
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d003      	beq.n	8005b74 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005b72:	e1cd      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d005      	beq.n	8005b86 <HAL_SPI_TransmitReceive+0x80>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <HAL_SPI_TransmitReceive+0x80>
 8005b80:	887b      	ldrh	r3, [r7, #2]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005b8c:	e1c0      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d003      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2205      	movs	r2, #5
 8005b9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	887a      	ldrh	r2, [r7, #2]
 8005bb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	887a      	ldrh	r2, [r7, #2]
 8005bba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	887a      	ldrh	r2, [r7, #2]
 8005bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	887a      	ldrh	r2, [r7, #2]
 8005bce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005be4:	d802      	bhi.n	8005bec <HAL_SPI_TransmitReceive+0xe6>
 8005be6:	8a3b      	ldrh	r3, [r7, #16]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d908      	bls.n	8005bfe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	e007      	b.n	8005c0e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c0c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d007      	beq.n	8005c2c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c34:	d97c      	bls.n	8005d30 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_SPI_TransmitReceive+0x13e>
 8005c3e:	8a7b      	ldrh	r3, [r7, #18]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d169      	bne.n	8005d18 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	881a      	ldrh	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	1c9a      	adds	r2, r3, #2
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c68:	e056      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d11b      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x1aa>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d016      	beq.n	8005cb0 <HAL_SPI_TransmitReceive+0x1aa>
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d113      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	881a      	ldrh	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	1c9a      	adds	r2, r3, #2
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d11c      	bne.n	8005cf8 <HAL_SPI_TransmitReceive+0x1f2>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d016      	beq.n	8005cf8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	b292      	uxth	r2, r2
 8005cd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	1c9a      	adds	r2, r3, #2
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cf8:	f7fd f954 	bl	8002fa4 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d807      	bhi.n	8005d18 <HAL_SPI_TransmitReceive+0x212>
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0e:	d003      	beq.n	8005d18 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d16:	e0fb      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1a3      	bne.n	8005c6a <HAL_SPI_TransmitReceive+0x164>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d19d      	bne.n	8005c6a <HAL_SPI_TransmitReceive+0x164>
 8005d2e:	e0df      	b.n	8005ef0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x23a>
 8005d38:	8a7b      	ldrh	r3, [r7, #18]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	f040 80cb 	bne.w	8005ed6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d912      	bls.n	8005d70 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	881a      	ldrh	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	1c9a      	adds	r2, r3, #2
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b02      	subs	r3, #2
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d6e:	e0b2      	b.n	8005ed6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	330c      	adds	r3, #12
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d96:	e09e      	b.n	8005ed6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d134      	bne.n	8005e10 <HAL_SPI_TransmitReceive+0x30a>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d02f      	beq.n	8005e10 <HAL_SPI_TransmitReceive+0x30a>
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d12c      	bne.n	8005e10 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d912      	bls.n	8005de6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	881a      	ldrh	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	1c9a      	adds	r2, r3, #2
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b02      	subs	r3, #2
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005de4:	e012      	b.n	8005e0c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	330c      	adds	r3, #12
 8005df0:	7812      	ldrb	r2, [r2, #0]
 8005df2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d148      	bne.n	8005eb0 <HAL_SPI_TransmitReceive+0x3aa>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d042      	beq.n	8005eb0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d923      	bls.n	8005e7e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	b292      	uxth	r2, r2
 8005e42:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	1c9a      	adds	r2, r3, #2
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b02      	subs	r3, #2
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d81f      	bhi.n	8005eac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e7a:	605a      	str	r2, [r3, #4]
 8005e7c:	e016      	b.n	8005eac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f103 020c 	add.w	r2, r3, #12
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	7812      	ldrb	r2, [r2, #0]
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eac:	2301      	movs	r3, #1
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005eb0:	f7fd f878 	bl	8002fa4 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d803      	bhi.n	8005ec8 <HAL_SPI_TransmitReceive+0x3c2>
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec6:	d102      	bne.n	8005ece <HAL_SPI_TransmitReceive+0x3c8>
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d103      	bne.n	8005ed6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ed4:	e01c      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f47f af5b 	bne.w	8005d98 <HAL_SPI_TransmitReceive+0x292>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f47f af54 	bne.w	8005d98 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fa53 	bl	80063a0 <SPI_EndRxTxTransaction>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d006      	beq.n	8005f0e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	661a      	str	r2, [r3, #96]	; 0x60
 8005f0c:	e000      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005f0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3728      	adds	r7, #40	; 0x28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	099b      	lsrs	r3, r3, #6
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10f      	bne.n	8005f70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	099b      	lsrs	r3, r3, #6
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d004      	beq.n	8005f70 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
    return;
 8005f6e:	e0d7      	b.n	8006120 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	085b      	lsrs	r3, r3, #1
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <HAL_SPI_IRQHandler+0x66>
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	09db      	lsrs	r3, r3, #7
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d004      	beq.n	8005f92 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
    return;
 8005f90:	e0c6      	b.n	8006120 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_SPI_IRQHandler+0x8c>
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	099b      	lsrs	r3, r3, #6
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	0a1b      	lsrs	r3, r3, #8
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 80b4 	beq.w	8006120 <HAL_SPI_IRQHandler+0x1f4>
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 80ad 	beq.w	8006120 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	099b      	lsrs	r3, r3, #6
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d023      	beq.n	800601a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d011      	beq.n	8006002 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe2:	f043 0204 	orr.w	r2, r3, #4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	e00b      	b.n	800601a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	693b      	ldr	r3, [r7, #16]
        return;
 8006018:	e082      	b.n	8006120 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d014      	beq.n	8006050 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602a:	f043 0201 	orr.w	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	0a1b      	lsrs	r3, r3, #8
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00c      	beq.n	8006076 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006060:	f043 0208 	orr.w	r2, r3, #8
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006068:	2300      	movs	r3, #0
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	60bb      	str	r3, [r7, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607a:	2b00      	cmp	r3, #0
 800607c:	d04f      	beq.n	800611e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800608c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d104      	bne.n	80060aa <HAL_SPI_IRQHandler+0x17e>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d034      	beq.n	8006114 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0203 	bic.w	r2, r2, #3
 80060b8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d011      	beq.n	80060e6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c6:	4a18      	ldr	r2, [pc, #96]	; (8006128 <HAL_SPI_IRQHandler+0x1fc>)
 80060c8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fd f8a3 	bl	800321a <HAL_DMA_Abort_IT>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d016      	beq.n	800611c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	4a0d      	ldr	r2, [pc, #52]	; (8006128 <HAL_SPI_IRQHandler+0x1fc>)
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fd f88d 	bl	800321a <HAL_DMA_Abort_IT>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006112:	e003      	b.n	800611c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f809 	bl	800612c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800611a:	e000      	b.n	800611e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800611c:	bf00      	nop
    return;
 800611e:	bf00      	nop
  }
}
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	08006141 	.word	0x08006141

0800612c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff ffe5 	bl	800612c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800617c:	f7fc ff12 	bl	8002fa4 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	4413      	add	r3, r2
 800618a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800618c:	f7fc ff0a 	bl	8002fa4 <HAL_GetTick>
 8006190:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006192:	4b39      	ldr	r3, [pc, #228]	; (8006278 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	015b      	lsls	r3, r3, #5
 8006198:	0d1b      	lsrs	r3, r3, #20
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	fb02 f303 	mul.w	r3, r2, r3
 80061a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061a2:	e054      	b.n	800624e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d050      	beq.n	800624e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061ac:	f7fc fefa 	bl	8002fa4 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d902      	bls.n	80061c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d13d      	bne.n	800623e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061da:	d111      	bne.n	8006200 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e4:	d004      	beq.n	80061f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ee:	d107      	bne.n	8006200 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006208:	d10f      	bne.n	800622a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e017      	b.n	800626e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	3b01      	subs	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4013      	ands	r3, r2
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	429a      	cmp	r2, r3
 800625c:	bf0c      	ite	eq
 800625e:	2301      	moveq	r3, #1
 8006260:	2300      	movne	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	429a      	cmp	r2, r3
 800626a:	d19b      	bne.n	80061a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3720      	adds	r7, #32
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000010 	.word	0x20000010

0800627c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800628a:	f7fc fe8b 	bl	8002fa4 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	4413      	add	r3, r2
 8006298:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800629a:	f7fc fe83 	bl	8002fa4 <HAL_GetTick>
 800629e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062a0:	4b3e      	ldr	r3, [pc, #248]	; (800639c <SPI_WaitFifoStateUntilTimeout+0x120>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	00da      	lsls	r2, r3, #3
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	0d1b      	lsrs	r3, r3, #20
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	fb02 f303 	mul.w	r3, r2, r3
 80062b6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80062b8:	e062      	b.n	8006380 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062c0:	d109      	bne.n	80062d6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	330c      	adds	r3, #12
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80062d4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d050      	beq.n	8006380 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062de:	f7fc fe61 	bl	8002fa4 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d902      	bls.n	80062f4 <SPI_WaitFifoStateUntilTimeout+0x78>
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d13d      	bne.n	8006370 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006302:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800630c:	d111      	bne.n	8006332 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006316:	d004      	beq.n	8006322 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006320:	d107      	bne.n	8006332 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006330:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633a:	d10f      	bne.n	800635c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800635a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e010      	b.n	8006392 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	3b01      	subs	r3, #1
 800637e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	4013      	ands	r3, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	429a      	cmp	r2, r3
 800638e:	d194      	bne.n	80062ba <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3720      	adds	r7, #32
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000010 	.word	0x20000010

080063a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f7ff ff5f 	bl	800627c <SPI_WaitFifoStateUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c8:	f043 0220 	orr.w	r2, r3, #32
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e027      	b.n	8006424 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2200      	movs	r2, #0
 80063dc:	2180      	movs	r1, #128	; 0x80
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff fec4 	bl	800616c <SPI_WaitFlagStateUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ee:	f043 0220 	orr.w	r2, r3, #32
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e014      	b.n	8006424 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2200      	movs	r2, #0
 8006402:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff ff38 	bl	800627c <SPI_WaitFifoStateUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d007      	beq.n	8006422 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006416:	f043 0220 	orr.w	r2, r3, #32
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e000      	b.n	8006424 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e049      	b.n	80064d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fc fbe2 	bl	8002c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3304      	adds	r3, #4
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f000 fd6c 	bl	8006f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d001      	beq.n	80064f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e054      	b.n	800659e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a26      	ldr	r2, [pc, #152]	; (80065ac <HAL_TIM_Base_Start_IT+0xd0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d022      	beq.n	800655c <HAL_TIM_Base_Start_IT+0x80>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651e:	d01d      	beq.n	800655c <HAL_TIM_Base_Start_IT+0x80>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a22      	ldr	r2, [pc, #136]	; (80065b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d018      	beq.n	800655c <HAL_TIM_Base_Start_IT+0x80>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d013      	beq.n	800655c <HAL_TIM_Base_Start_IT+0x80>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00e      	beq.n	800655c <HAL_TIM_Base_Start_IT+0x80>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <HAL_TIM_Base_Start_IT+0xe0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d009      	beq.n	800655c <HAL_TIM_Base_Start_IT+0x80>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d004      	beq.n	800655c <HAL_TIM_Base_Start_IT+0x80>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1b      	ldr	r2, [pc, #108]	; (80065c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d115      	bne.n	8006588 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	4b19      	ldr	r3, [pc, #100]	; (80065c8 <HAL_TIM_Base_Start_IT+0xec>)
 8006564:	4013      	ands	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b06      	cmp	r3, #6
 800656c:	d015      	beq.n	800659a <HAL_TIM_Base_Start_IT+0xbe>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006574:	d011      	beq.n	800659a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f042 0201 	orr.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006586:	e008      	b.n	800659a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0201 	orr.w	r2, r2, #1
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	e000      	b.n	800659c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40000c00 	.word	0x40000c00
 80065bc:	40013400 	.word	0x40013400
 80065c0:	40014000 	.word	0x40014000
 80065c4:	40015000 	.word	0x40015000
 80065c8:	00010007 	.word	0x00010007

080065cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e049      	b.n	8006672 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fc fade 	bl	8002bb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3304      	adds	r3, #4
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f000 fc9c 	bl	8006f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d109      	bne.n	80066a0 <HAL_TIM_PWM_Start+0x24>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b01      	cmp	r3, #1
 8006696:	bf14      	ite	ne
 8006698:	2301      	movne	r3, #1
 800669a:	2300      	moveq	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e03c      	b.n	800671a <HAL_TIM_PWM_Start+0x9e>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d109      	bne.n	80066ba <HAL_TIM_PWM_Start+0x3e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	bf14      	ite	ne
 80066b2:	2301      	movne	r3, #1
 80066b4:	2300      	moveq	r3, #0
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	e02f      	b.n	800671a <HAL_TIM_PWM_Start+0x9e>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d109      	bne.n	80066d4 <HAL_TIM_PWM_Start+0x58>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	bf14      	ite	ne
 80066cc:	2301      	movne	r3, #1
 80066ce:	2300      	moveq	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	e022      	b.n	800671a <HAL_TIM_PWM_Start+0x9e>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b0c      	cmp	r3, #12
 80066d8:	d109      	bne.n	80066ee <HAL_TIM_PWM_Start+0x72>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	bf14      	ite	ne
 80066e6:	2301      	movne	r3, #1
 80066e8:	2300      	moveq	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	e015      	b.n	800671a <HAL_TIM_PWM_Start+0x9e>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d109      	bne.n	8006708 <HAL_TIM_PWM_Start+0x8c>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	bf14      	ite	ne
 8006700:	2301      	movne	r3, #1
 8006702:	2300      	moveq	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	e008      	b.n	800671a <HAL_TIM_PWM_Start+0x9e>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	bf14      	ite	ne
 8006714:	2301      	movne	r3, #1
 8006716:	2300      	moveq	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e0a6      	b.n	8006870 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d104      	bne.n	8006732 <HAL_TIM_PWM_Start+0xb6>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006730:	e023      	b.n	800677a <HAL_TIM_PWM_Start+0xfe>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b04      	cmp	r3, #4
 8006736:	d104      	bne.n	8006742 <HAL_TIM_PWM_Start+0xc6>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006740:	e01b      	b.n	800677a <HAL_TIM_PWM_Start+0xfe>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b08      	cmp	r3, #8
 8006746:	d104      	bne.n	8006752 <HAL_TIM_PWM_Start+0xd6>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006750:	e013      	b.n	800677a <HAL_TIM_PWM_Start+0xfe>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b0c      	cmp	r3, #12
 8006756:	d104      	bne.n	8006762 <HAL_TIM_PWM_Start+0xe6>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006760:	e00b      	b.n	800677a <HAL_TIM_PWM_Start+0xfe>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b10      	cmp	r3, #16
 8006766:	d104      	bne.n	8006772 <HAL_TIM_PWM_Start+0xf6>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006770:	e003      	b.n	800677a <HAL_TIM_PWM_Start+0xfe>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2201      	movs	r2, #1
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 ffb2 	bl	80076ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a3a      	ldr	r2, [pc, #232]	; (8006878 <HAL_TIM_PWM_Start+0x1fc>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d018      	beq.n	80067c4 <HAL_TIM_PWM_Start+0x148>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a39      	ldr	r2, [pc, #228]	; (800687c <HAL_TIM_PWM_Start+0x200>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d013      	beq.n	80067c4 <HAL_TIM_PWM_Start+0x148>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a37      	ldr	r2, [pc, #220]	; (8006880 <HAL_TIM_PWM_Start+0x204>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00e      	beq.n	80067c4 <HAL_TIM_PWM_Start+0x148>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a36      	ldr	r2, [pc, #216]	; (8006884 <HAL_TIM_PWM_Start+0x208>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d009      	beq.n	80067c4 <HAL_TIM_PWM_Start+0x148>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a34      	ldr	r2, [pc, #208]	; (8006888 <HAL_TIM_PWM_Start+0x20c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_TIM_PWM_Start+0x148>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a33      	ldr	r2, [pc, #204]	; (800688c <HAL_TIM_PWM_Start+0x210>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d101      	bne.n	80067c8 <HAL_TIM_PWM_Start+0x14c>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e000      	b.n	80067ca <HAL_TIM_PWM_Start+0x14e>
 80067c8:	2300      	movs	r3, #0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a25      	ldr	r2, [pc, #148]	; (8006878 <HAL_TIM_PWM_Start+0x1fc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d022      	beq.n	800682e <HAL_TIM_PWM_Start+0x1b2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f0:	d01d      	beq.n	800682e <HAL_TIM_PWM_Start+0x1b2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a26      	ldr	r2, [pc, #152]	; (8006890 <HAL_TIM_PWM_Start+0x214>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d018      	beq.n	800682e <HAL_TIM_PWM_Start+0x1b2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a24      	ldr	r2, [pc, #144]	; (8006894 <HAL_TIM_PWM_Start+0x218>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d013      	beq.n	800682e <HAL_TIM_PWM_Start+0x1b2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a23      	ldr	r2, [pc, #140]	; (8006898 <HAL_TIM_PWM_Start+0x21c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00e      	beq.n	800682e <HAL_TIM_PWM_Start+0x1b2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a19      	ldr	r2, [pc, #100]	; (800687c <HAL_TIM_PWM_Start+0x200>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d009      	beq.n	800682e <HAL_TIM_PWM_Start+0x1b2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a18      	ldr	r2, [pc, #96]	; (8006880 <HAL_TIM_PWM_Start+0x204>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d004      	beq.n	800682e <HAL_TIM_PWM_Start+0x1b2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a18      	ldr	r2, [pc, #96]	; (800688c <HAL_TIM_PWM_Start+0x210>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d115      	bne.n	800685a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	4b19      	ldr	r3, [pc, #100]	; (800689c <HAL_TIM_PWM_Start+0x220>)
 8006836:	4013      	ands	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b06      	cmp	r3, #6
 800683e:	d015      	beq.n	800686c <HAL_TIM_PWM_Start+0x1f0>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006846:	d011      	beq.n	800686c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006858:	e008      	b.n	800686c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0201 	orr.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	e000      	b.n	800686e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40012c00 	.word	0x40012c00
 800687c:	40013400 	.word	0x40013400
 8006880:	40014000 	.word	0x40014000
 8006884:	40014400 	.word	0x40014400
 8006888:	40014800 	.word	0x40014800
 800688c:	40015000 	.word	0x40015000
 8006890:	40000400 	.word	0x40000400
 8006894:	40000800 	.word	0x40000800
 8006898:	40000c00 	.word	0x40000c00
 800689c:	00010007 	.word	0x00010007

080068a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2200      	movs	r2, #0
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 ff1a 	bl	80076ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a40      	ldr	r2, [pc, #256]	; (80069c0 <HAL_TIM_PWM_Stop+0x120>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d018      	beq.n	80068f4 <HAL_TIM_PWM_Stop+0x54>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a3f      	ldr	r2, [pc, #252]	; (80069c4 <HAL_TIM_PWM_Stop+0x124>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d013      	beq.n	80068f4 <HAL_TIM_PWM_Stop+0x54>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a3d      	ldr	r2, [pc, #244]	; (80069c8 <HAL_TIM_PWM_Stop+0x128>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00e      	beq.n	80068f4 <HAL_TIM_PWM_Stop+0x54>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a3c      	ldr	r2, [pc, #240]	; (80069cc <HAL_TIM_PWM_Stop+0x12c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d009      	beq.n	80068f4 <HAL_TIM_PWM_Stop+0x54>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a3a      	ldr	r2, [pc, #232]	; (80069d0 <HAL_TIM_PWM_Stop+0x130>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d004      	beq.n	80068f4 <HAL_TIM_PWM_Stop+0x54>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a39      	ldr	r2, [pc, #228]	; (80069d4 <HAL_TIM_PWM_Stop+0x134>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d101      	bne.n	80068f8 <HAL_TIM_PWM_Stop+0x58>
 80068f4:	2301      	movs	r3, #1
 80068f6:	e000      	b.n	80068fa <HAL_TIM_PWM_Stop+0x5a>
 80068f8:	2300      	movs	r3, #0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d017      	beq.n	800692e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6a1a      	ldr	r2, [r3, #32]
 8006904:	f241 1311 	movw	r3, #4369	; 0x1111
 8006908:	4013      	ands	r3, r2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10f      	bne.n	800692e <HAL_TIM_PWM_Stop+0x8e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6a1a      	ldr	r2, [r3, #32]
 8006914:	f244 4344 	movw	r3, #17476	; 0x4444
 8006918:	4013      	ands	r3, r2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d107      	bne.n	800692e <HAL_TIM_PWM_Stop+0x8e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800692c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6a1a      	ldr	r2, [r3, #32]
 8006934:	f241 1311 	movw	r3, #4369	; 0x1111
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10f      	bne.n	800695e <HAL_TIM_PWM_Stop+0xbe>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6a1a      	ldr	r2, [r3, #32]
 8006944:	f244 4344 	movw	r3, #17476	; 0x4444
 8006948:	4013      	ands	r3, r2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d107      	bne.n	800695e <HAL_TIM_PWM_Stop+0xbe>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <HAL_TIM_PWM_Stop+0xce>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800696c:	e023      	b.n	80069b6 <HAL_TIM_PWM_Stop+0x116>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b04      	cmp	r3, #4
 8006972:	d104      	bne.n	800697e <HAL_TIM_PWM_Stop+0xde>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800697c:	e01b      	b.n	80069b6 <HAL_TIM_PWM_Stop+0x116>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b08      	cmp	r3, #8
 8006982:	d104      	bne.n	800698e <HAL_TIM_PWM_Stop+0xee>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800698c:	e013      	b.n	80069b6 <HAL_TIM_PWM_Stop+0x116>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b0c      	cmp	r3, #12
 8006992:	d104      	bne.n	800699e <HAL_TIM_PWM_Stop+0xfe>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800699c:	e00b      	b.n	80069b6 <HAL_TIM_PWM_Stop+0x116>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b10      	cmp	r3, #16
 80069a2:	d104      	bne.n	80069ae <HAL_TIM_PWM_Stop+0x10e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069ac:	e003      	b.n	80069b6 <HAL_TIM_PWM_Stop+0x116>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40013400 	.word	0x40013400
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40014400 	.word	0x40014400
 80069d0:	40014800 	.word	0x40014800
 80069d4:	40015000 	.word	0x40015000

080069d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d122      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d11b      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0202 	mvn.w	r2, #2
 8006a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa76 	bl	8006f0c <HAL_TIM_IC_CaptureCallback>
 8006a20:	e005      	b.n	8006a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa68 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fa79 	bl	8006f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d122      	bne.n	8006a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d11b      	bne.n	8006a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0204 	mvn.w	r2, #4
 8006a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa4c 	bl	8006f0c <HAL_TIM_IC_CaptureCallback>
 8006a74:	e005      	b.n	8006a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fa3e 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fa4f 	bl	8006f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b08      	cmp	r3, #8
 8006a94:	d122      	bne.n	8006adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d11b      	bne.n	8006adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f06f 0208 	mvn.w	r2, #8
 8006aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa22 	bl	8006f0c <HAL_TIM_IC_CaptureCallback>
 8006ac8:	e005      	b.n	8006ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fa14 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fa25 	bl	8006f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 0310 	and.w	r3, r3, #16
 8006ae6:	2b10      	cmp	r3, #16
 8006ae8:	d122      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d11b      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f06f 0210 	mvn.w	r2, #16
 8006b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2208      	movs	r2, #8
 8006b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f9f8 	bl	8006f0c <HAL_TIM_IC_CaptureCallback>
 8006b1c:	e005      	b.n	8006b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f9ea 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f9fb 	bl	8006f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d10e      	bne.n	8006b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d107      	bne.n	8006b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0201 	mvn.w	r2, #1
 8006b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7f9 fcda 	bl	8000510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b66:	2b80      	cmp	r3, #128	; 0x80
 8006b68:	d10e      	bne.n	8006b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b74:	2b80      	cmp	r3, #128	; 0x80
 8006b76:	d107      	bne.n	8006b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fe78 	bl	8007878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b96:	d10e      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba2:	2b80      	cmp	r3, #128	; 0x80
 8006ba4:	d107      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fe6b 	bl	800788c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc0:	2b40      	cmp	r3, #64	; 0x40
 8006bc2:	d10e      	bne.n	8006be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d107      	bne.n	8006be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f9a9 	bl	8006f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f003 0320 	and.w	r3, r3, #32
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d10e      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d107      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f06f 0220 	mvn.w	r2, #32
 8006c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fe2b 	bl	8007864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c1c:	d10f      	bne.n	8006c3e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c2c:	d107      	bne.n	8006c3e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fe31 	bl	80078a0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c4c:	d10f      	bne.n	8006c6e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c5c:	d107      	bne.n	8006c6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fe23 	bl	80078b4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c7c:	d10f      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c8c:	d107      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fe15 	bl	80078c8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ca8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cac:	d10f      	bne.n	8006cce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cbc:	d107      	bne.n	8006cce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fe07 	bl	80078dc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cce:	bf00      	nop
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e0fd      	b.n	8006eee <HAL_TIM_PWM_ConfigChannel+0x216>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b14      	cmp	r3, #20
 8006cfe:	f200 80f0 	bhi.w	8006ee2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d5d 	.word	0x08006d5d
 8006d0c:	08006ee3 	.word	0x08006ee3
 8006d10:	08006ee3 	.word	0x08006ee3
 8006d14:	08006ee3 	.word	0x08006ee3
 8006d18:	08006d9d 	.word	0x08006d9d
 8006d1c:	08006ee3 	.word	0x08006ee3
 8006d20:	08006ee3 	.word	0x08006ee3
 8006d24:	08006ee3 	.word	0x08006ee3
 8006d28:	08006ddf 	.word	0x08006ddf
 8006d2c:	08006ee3 	.word	0x08006ee3
 8006d30:	08006ee3 	.word	0x08006ee3
 8006d34:	08006ee3 	.word	0x08006ee3
 8006d38:	08006e1f 	.word	0x08006e1f
 8006d3c:	08006ee3 	.word	0x08006ee3
 8006d40:	08006ee3 	.word	0x08006ee3
 8006d44:	08006ee3 	.word	0x08006ee3
 8006d48:	08006e61 	.word	0x08006e61
 8006d4c:	08006ee3 	.word	0x08006ee3
 8006d50:	08006ee3 	.word	0x08006ee3
 8006d54:	08006ee3 	.word	0x08006ee3
 8006d58:	08006ea1 	.word	0x08006ea1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 f998 	bl	8007098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0208 	orr.w	r2, r2, #8
 8006d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0204 	bic.w	r2, r2, #4
 8006d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6999      	ldr	r1, [r3, #24]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	619a      	str	r2, [r3, #24]
      break;
 8006d9a:	e0a3      	b.n	8006ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fa12 	bl	80071cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699a      	ldr	r2, [r3, #24]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699a      	ldr	r2, [r3, #24]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6999      	ldr	r1, [r3, #24]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	021a      	lsls	r2, r3, #8
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	619a      	str	r2, [r3, #24]
      break;
 8006ddc:	e082      	b.n	8006ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68b9      	ldr	r1, [r7, #8]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fa85 	bl	80072f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0208 	orr.w	r2, r2, #8
 8006df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69da      	ldr	r2, [r3, #28]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0204 	bic.w	r2, r2, #4
 8006e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69d9      	ldr	r1, [r3, #28]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	61da      	str	r2, [r3, #28]
      break;
 8006e1c:	e062      	b.n	8006ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 faf7 	bl	8007418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69da      	ldr	r2, [r3, #28]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69da      	ldr	r2, [r3, #28]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69d9      	ldr	r1, [r3, #28]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	021a      	lsls	r2, r3, #8
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	61da      	str	r2, [r3, #28]
      break;
 8006e5e:	e041      	b.n	8006ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 fb6a 	bl	8007540 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0208 	orr.w	r2, r2, #8
 8006e7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0204 	bic.w	r2, r2, #4
 8006e8a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	691a      	ldr	r2, [r3, #16]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006e9e:	e021      	b.n	8006ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fbb4 	bl	8007614 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	021a      	lsls	r2, r3, #8
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006ee0:	e000      	b.n	8006ee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006ee2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop

08006ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a46      	ldr	r2, [pc, #280]	; (8007074 <TIM_Base_SetConfig+0x12c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d017      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f66:	d013      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a43      	ldr	r2, [pc, #268]	; (8007078 <TIM_Base_SetConfig+0x130>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00f      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a42      	ldr	r2, [pc, #264]	; (800707c <TIM_Base_SetConfig+0x134>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00b      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a41      	ldr	r2, [pc, #260]	; (8007080 <TIM_Base_SetConfig+0x138>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d007      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a40      	ldr	r2, [pc, #256]	; (8007084 <TIM_Base_SetConfig+0x13c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a3f      	ldr	r2, [pc, #252]	; (8007088 <TIM_Base_SetConfig+0x140>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d108      	bne.n	8006fa2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a33      	ldr	r2, [pc, #204]	; (8007074 <TIM_Base_SetConfig+0x12c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d023      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb0:	d01f      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a30      	ldr	r2, [pc, #192]	; (8007078 <TIM_Base_SetConfig+0x130>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d01b      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a2f      	ldr	r2, [pc, #188]	; (800707c <TIM_Base_SetConfig+0x134>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d017      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a2e      	ldr	r2, [pc, #184]	; (8007080 <TIM_Base_SetConfig+0x138>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d013      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a2d      	ldr	r2, [pc, #180]	; (8007084 <TIM_Base_SetConfig+0x13c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00f      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a2d      	ldr	r2, [pc, #180]	; (800708c <TIM_Base_SetConfig+0x144>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00b      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a2c      	ldr	r2, [pc, #176]	; (8007090 <TIM_Base_SetConfig+0x148>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d007      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2b      	ldr	r2, [pc, #172]	; (8007094 <TIM_Base_SetConfig+0x14c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d003      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a26      	ldr	r2, [pc, #152]	; (8007088 <TIM_Base_SetConfig+0x140>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d108      	bne.n	8007004 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a12      	ldr	r2, [pc, #72]	; (8007074 <TIM_Base_SetConfig+0x12c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d013      	beq.n	8007058 <TIM_Base_SetConfig+0x110>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a14      	ldr	r2, [pc, #80]	; (8007084 <TIM_Base_SetConfig+0x13c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00f      	beq.n	8007058 <TIM_Base_SetConfig+0x110>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a14      	ldr	r2, [pc, #80]	; (800708c <TIM_Base_SetConfig+0x144>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00b      	beq.n	8007058 <TIM_Base_SetConfig+0x110>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a13      	ldr	r2, [pc, #76]	; (8007090 <TIM_Base_SetConfig+0x148>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d007      	beq.n	8007058 <TIM_Base_SetConfig+0x110>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a12      	ldr	r2, [pc, #72]	; (8007094 <TIM_Base_SetConfig+0x14c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d003      	beq.n	8007058 <TIM_Base_SetConfig+0x110>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a0d      	ldr	r2, [pc, #52]	; (8007088 <TIM_Base_SetConfig+0x140>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d103      	bne.n	8007060 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	615a      	str	r2, [r3, #20]
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40000400 	.word	0x40000400
 800707c:	40000800 	.word	0x40000800
 8007080:	40000c00 	.word	0x40000c00
 8007084:	40013400 	.word	0x40013400
 8007088:	40015000 	.word	0x40015000
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800

08007098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	f023 0201 	bic.w	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 0303 	bic.w	r3, r3, #3
 80070d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f023 0302 	bic.w	r3, r3, #2
 80070e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a30      	ldr	r2, [pc, #192]	; (80071b4 <TIM_OC1_SetConfig+0x11c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d013      	beq.n	8007120 <TIM_OC1_SetConfig+0x88>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a2f      	ldr	r2, [pc, #188]	; (80071b8 <TIM_OC1_SetConfig+0x120>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00f      	beq.n	8007120 <TIM_OC1_SetConfig+0x88>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a2e      	ldr	r2, [pc, #184]	; (80071bc <TIM_OC1_SetConfig+0x124>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00b      	beq.n	8007120 <TIM_OC1_SetConfig+0x88>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a2d      	ldr	r2, [pc, #180]	; (80071c0 <TIM_OC1_SetConfig+0x128>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d007      	beq.n	8007120 <TIM_OC1_SetConfig+0x88>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a2c      	ldr	r2, [pc, #176]	; (80071c4 <TIM_OC1_SetConfig+0x12c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d003      	beq.n	8007120 <TIM_OC1_SetConfig+0x88>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a2b      	ldr	r2, [pc, #172]	; (80071c8 <TIM_OC1_SetConfig+0x130>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d10c      	bne.n	800713a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f023 0308 	bic.w	r3, r3, #8
 8007126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f023 0304 	bic.w	r3, r3, #4
 8007138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a1d      	ldr	r2, [pc, #116]	; (80071b4 <TIM_OC1_SetConfig+0x11c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d013      	beq.n	800716a <TIM_OC1_SetConfig+0xd2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a1c      	ldr	r2, [pc, #112]	; (80071b8 <TIM_OC1_SetConfig+0x120>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00f      	beq.n	800716a <TIM_OC1_SetConfig+0xd2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a1b      	ldr	r2, [pc, #108]	; (80071bc <TIM_OC1_SetConfig+0x124>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00b      	beq.n	800716a <TIM_OC1_SetConfig+0xd2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a1a      	ldr	r2, [pc, #104]	; (80071c0 <TIM_OC1_SetConfig+0x128>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d007      	beq.n	800716a <TIM_OC1_SetConfig+0xd2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a19      	ldr	r2, [pc, #100]	; (80071c4 <TIM_OC1_SetConfig+0x12c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d003      	beq.n	800716a <TIM_OC1_SetConfig+0xd2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a18      	ldr	r2, [pc, #96]	; (80071c8 <TIM_OC1_SetConfig+0x130>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d111      	bne.n	800718e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	621a      	str	r2, [r3, #32]
}
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	40012c00 	.word	0x40012c00
 80071b8:	40013400 	.word	0x40013400
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40014400 	.word	0x40014400
 80071c4:	40014800 	.word	0x40014800
 80071c8:	40015000 	.word	0x40015000

080071cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	f023 0210 	bic.w	r2, r3, #16
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	021b      	lsls	r3, r3, #8
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f023 0320 	bic.w	r3, r3, #32
 800721a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	011b      	lsls	r3, r3, #4
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a2c      	ldr	r2, [pc, #176]	; (80072dc <TIM_OC2_SetConfig+0x110>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d007      	beq.n	8007240 <TIM_OC2_SetConfig+0x74>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a2b      	ldr	r2, [pc, #172]	; (80072e0 <TIM_OC2_SetConfig+0x114>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_OC2_SetConfig+0x74>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a2a      	ldr	r2, [pc, #168]	; (80072e4 <TIM_OC2_SetConfig+0x118>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d10d      	bne.n	800725c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	4313      	orrs	r3, r2
 8007252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800725a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a1f      	ldr	r2, [pc, #124]	; (80072dc <TIM_OC2_SetConfig+0x110>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d013      	beq.n	800728c <TIM_OC2_SetConfig+0xc0>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a1e      	ldr	r2, [pc, #120]	; (80072e0 <TIM_OC2_SetConfig+0x114>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00f      	beq.n	800728c <TIM_OC2_SetConfig+0xc0>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a1e      	ldr	r2, [pc, #120]	; (80072e8 <TIM_OC2_SetConfig+0x11c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00b      	beq.n	800728c <TIM_OC2_SetConfig+0xc0>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a1d      	ldr	r2, [pc, #116]	; (80072ec <TIM_OC2_SetConfig+0x120>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d007      	beq.n	800728c <TIM_OC2_SetConfig+0xc0>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a1c      	ldr	r2, [pc, #112]	; (80072f0 <TIM_OC2_SetConfig+0x124>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_OC2_SetConfig+0xc0>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a17      	ldr	r2, [pc, #92]	; (80072e4 <TIM_OC2_SetConfig+0x118>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d113      	bne.n	80072b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800729a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	621a      	str	r2, [r3, #32]
}
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40012c00 	.word	0x40012c00
 80072e0:	40013400 	.word	0x40013400
 80072e4:	40015000 	.word	0x40015000
 80072e8:	40014000 	.word	0x40014000
 80072ec:	40014400 	.word	0x40014400
 80072f0:	40014800 	.word	0x40014800

080072f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0303 	bic.w	r3, r3, #3
 800732e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	021b      	lsls	r3, r3, #8
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a2b      	ldr	r2, [pc, #172]	; (8007400 <TIM_OC3_SetConfig+0x10c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d007      	beq.n	8007366 <TIM_OC3_SetConfig+0x72>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a2a      	ldr	r2, [pc, #168]	; (8007404 <TIM_OC3_SetConfig+0x110>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d003      	beq.n	8007366 <TIM_OC3_SetConfig+0x72>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a29      	ldr	r2, [pc, #164]	; (8007408 <TIM_OC3_SetConfig+0x114>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d10d      	bne.n	8007382 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800736c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a1e      	ldr	r2, [pc, #120]	; (8007400 <TIM_OC3_SetConfig+0x10c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d013      	beq.n	80073b2 <TIM_OC3_SetConfig+0xbe>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <TIM_OC3_SetConfig+0x110>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d00f      	beq.n	80073b2 <TIM_OC3_SetConfig+0xbe>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a1d      	ldr	r2, [pc, #116]	; (800740c <TIM_OC3_SetConfig+0x118>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00b      	beq.n	80073b2 <TIM_OC3_SetConfig+0xbe>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a1c      	ldr	r2, [pc, #112]	; (8007410 <TIM_OC3_SetConfig+0x11c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d007      	beq.n	80073b2 <TIM_OC3_SetConfig+0xbe>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a1b      	ldr	r2, [pc, #108]	; (8007414 <TIM_OC3_SetConfig+0x120>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d003      	beq.n	80073b2 <TIM_OC3_SetConfig+0xbe>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a16      	ldr	r2, [pc, #88]	; (8007408 <TIM_OC3_SetConfig+0x114>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d113      	bne.n	80073da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	621a      	str	r2, [r3, #32]
}
 80073f4:	bf00      	nop
 80073f6:	371c      	adds	r7, #28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40013400 	.word	0x40013400
 8007408:	40015000 	.word	0x40015000
 800740c:	40014000 	.word	0x40014000
 8007410:	40014400 	.word	0x40014400
 8007414:	40014800 	.word	0x40014800

08007418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800744a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	021b      	lsls	r3, r3, #8
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	031b      	lsls	r3, r3, #12
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a2c      	ldr	r2, [pc, #176]	; (8007528 <TIM_OC4_SetConfig+0x110>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d007      	beq.n	800748c <TIM_OC4_SetConfig+0x74>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a2b      	ldr	r2, [pc, #172]	; (800752c <TIM_OC4_SetConfig+0x114>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d003      	beq.n	800748c <TIM_OC4_SetConfig+0x74>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <TIM_OC4_SetConfig+0x118>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d10d      	bne.n	80074a8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	031b      	lsls	r3, r3, #12
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	4313      	orrs	r3, r2
 800749e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a1f      	ldr	r2, [pc, #124]	; (8007528 <TIM_OC4_SetConfig+0x110>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d013      	beq.n	80074d8 <TIM_OC4_SetConfig+0xc0>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a1e      	ldr	r2, [pc, #120]	; (800752c <TIM_OC4_SetConfig+0x114>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d00f      	beq.n	80074d8 <TIM_OC4_SetConfig+0xc0>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a1e      	ldr	r2, [pc, #120]	; (8007534 <TIM_OC4_SetConfig+0x11c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00b      	beq.n	80074d8 <TIM_OC4_SetConfig+0xc0>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a1d      	ldr	r2, [pc, #116]	; (8007538 <TIM_OC4_SetConfig+0x120>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d007      	beq.n	80074d8 <TIM_OC4_SetConfig+0xc0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a1c      	ldr	r2, [pc, #112]	; (800753c <TIM_OC4_SetConfig+0x124>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d003      	beq.n	80074d8 <TIM_OC4_SetConfig+0xc0>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a17      	ldr	r2, [pc, #92]	; (8007530 <TIM_OC4_SetConfig+0x118>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d113      	bne.n	8007500 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	019b      	lsls	r3, r3, #6
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	019b      	lsls	r3, r3, #6
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	621a      	str	r2, [r3, #32]
}
 800751a:	bf00      	nop
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40012c00 	.word	0x40012c00
 800752c:	40013400 	.word	0x40013400
 8007530:	40015000 	.word	0x40015000
 8007534:	40014000 	.word	0x40014000
 8007538:	40014400 	.word	0x40014400
 800753c:	40014800 	.word	0x40014800

08007540 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800756e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007584:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	041b      	lsls	r3, r3, #16
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4313      	orrs	r3, r2
 8007590:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a19      	ldr	r2, [pc, #100]	; (80075fc <TIM_OC5_SetConfig+0xbc>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d013      	beq.n	80075c2 <TIM_OC5_SetConfig+0x82>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a18      	ldr	r2, [pc, #96]	; (8007600 <TIM_OC5_SetConfig+0xc0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00f      	beq.n	80075c2 <TIM_OC5_SetConfig+0x82>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a17      	ldr	r2, [pc, #92]	; (8007604 <TIM_OC5_SetConfig+0xc4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00b      	beq.n	80075c2 <TIM_OC5_SetConfig+0x82>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a16      	ldr	r2, [pc, #88]	; (8007608 <TIM_OC5_SetConfig+0xc8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d007      	beq.n	80075c2 <TIM_OC5_SetConfig+0x82>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a15      	ldr	r2, [pc, #84]	; (800760c <TIM_OC5_SetConfig+0xcc>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d003      	beq.n	80075c2 <TIM_OC5_SetConfig+0x82>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a14      	ldr	r2, [pc, #80]	; (8007610 <TIM_OC5_SetConfig+0xd0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d109      	bne.n	80075d6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	621a      	str	r2, [r3, #32]
}
 80075f0:	bf00      	nop
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	40012c00 	.word	0x40012c00
 8007600:	40013400 	.word	0x40013400
 8007604:	40014000 	.word	0x40014000
 8007608:	40014400 	.word	0x40014400
 800760c:	40014800 	.word	0x40014800
 8007610:	40015000 	.word	0x40015000

08007614 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	4313      	orrs	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800765a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	051b      	lsls	r3, r3, #20
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4313      	orrs	r3, r2
 8007666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a1a      	ldr	r2, [pc, #104]	; (80076d4 <TIM_OC6_SetConfig+0xc0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d013      	beq.n	8007698 <TIM_OC6_SetConfig+0x84>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <TIM_OC6_SetConfig+0xc4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d00f      	beq.n	8007698 <TIM_OC6_SetConfig+0x84>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a18      	ldr	r2, [pc, #96]	; (80076dc <TIM_OC6_SetConfig+0xc8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00b      	beq.n	8007698 <TIM_OC6_SetConfig+0x84>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a17      	ldr	r2, [pc, #92]	; (80076e0 <TIM_OC6_SetConfig+0xcc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d007      	beq.n	8007698 <TIM_OC6_SetConfig+0x84>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a16      	ldr	r2, [pc, #88]	; (80076e4 <TIM_OC6_SetConfig+0xd0>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d003      	beq.n	8007698 <TIM_OC6_SetConfig+0x84>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a15      	ldr	r2, [pc, #84]	; (80076e8 <TIM_OC6_SetConfig+0xd4>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d109      	bne.n	80076ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800769e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	029b      	lsls	r3, r3, #10
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	40012c00 	.word	0x40012c00
 80076d8:	40013400 	.word	0x40013400
 80076dc:	40014000 	.word	0x40014000
 80076e0:	40014400 	.word	0x40014400
 80076e4:	40014800 	.word	0x40014800
 80076e8:	40015000 	.word	0x40015000

080076ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f003 031f 	and.w	r3, r3, #31
 80076fe:	2201      	movs	r2, #1
 8007700:	fa02 f303 	lsl.w	r3, r2, r3
 8007704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a1a      	ldr	r2, [r3, #32]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	43db      	mvns	r3, r3
 800770e:	401a      	ands	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a1a      	ldr	r2, [r3, #32]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f003 031f 	and.w	r3, r3, #31
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	fa01 f303 	lsl.w	r3, r1, r3
 8007724:	431a      	orrs	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
	...

08007738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800774c:	2302      	movs	r3, #2
 800774e:	e074      	b.n	800783a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a34      	ldr	r2, [pc, #208]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d009      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a33      	ldr	r2, [pc, #204]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d004      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a31      	ldr	r2, [pc, #196]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d108      	bne.n	80077a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007794:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4313      	orrs	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80077a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a21      	ldr	r2, [pc, #132]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d022      	beq.n	800780e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d0:	d01d      	beq.n	800780e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a1f      	ldr	r2, [pc, #124]	; (8007854 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d018      	beq.n	800780e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1d      	ldr	r2, [pc, #116]	; (8007858 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d013      	beq.n	800780e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1c      	ldr	r2, [pc, #112]	; (800785c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d00e      	beq.n	800780e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a15      	ldr	r2, [pc, #84]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d009      	beq.n	800780e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a18      	ldr	r2, [pc, #96]	; (8007860 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d004      	beq.n	800780e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a11      	ldr	r2, [pc, #68]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d10c      	bne.n	8007828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	4313      	orrs	r3, r2
 800781e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40013400 	.word	0x40013400
 8007850:	40015000 	.word	0x40015000
 8007854:	40000400 	.word	0x40000400
 8007858:	40000800 	.word	0x40000800
 800785c:	40000c00 	.word	0x40000c00
 8007860:	40014000 	.word	0x40014000

08007864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e042      	b.n	8007988 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7fb fa05 	bl	8002d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2224      	movs	r2, #36	; 0x24
 800791e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0201 	bic.w	r2, r2, #1
 8007930:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f8c2 	bl	8007abc <UART_SetConfig>
 8007938:	4603      	mov	r3, r0
 800793a:	2b01      	cmp	r3, #1
 800793c:	d101      	bne.n	8007942 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e022      	b.n	8007988 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb80 	bl	8008050 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800795e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800796e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0201 	orr.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fc07 	bl	8008194 <UART_CheckIdleState>
 8007986:	4603      	mov	r3, r0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08a      	sub	sp, #40	; 0x28
 8007994:	af02      	add	r7, sp, #8
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	603b      	str	r3, [r7, #0]
 800799c:	4613      	mov	r3, r2
 800799e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079a6:	2b20      	cmp	r3, #32
 80079a8:	f040 8083 	bne.w	8007ab2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_UART_Transmit+0x28>
 80079b2:	88fb      	ldrh	r3, [r7, #6]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e07b      	b.n	8007ab4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_UART_Transmit+0x3a>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e074      	b.n	8007ab4 <HAL_UART_Transmit+0x124>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2221      	movs	r2, #33	; 0x21
 80079de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079e2:	f7fb fadf 	bl	8002fa4 <HAL_GetTick>
 80079e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	88fa      	ldrh	r2, [r7, #6]
 80079f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a00:	d108      	bne.n	8007a14 <HAL_UART_Transmit+0x84>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d104      	bne.n	8007a14 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	61bb      	str	r3, [r7, #24]
 8007a12:	e003      	b.n	8007a1c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007a24:	e02c      	b.n	8007a80 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2180      	movs	r1, #128	; 0x80
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fbfa 	bl	800822a <UART_WaitOnFlagUntilTimeout>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e039      	b.n	8007ab4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	3302      	adds	r3, #2
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	e007      	b.n	8007a6e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	781a      	ldrb	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	3b01      	subs	r3, #1
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1cc      	bne.n	8007a26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2200      	movs	r2, #0
 8007a94:	2140      	movs	r1, #64	; 0x40
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fbc7 	bl	800822a <UART_WaitOnFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e006      	b.n	8007ab4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e000      	b.n	8007ab4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007ab2:	2302      	movs	r3, #2
  }
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3720      	adds	r7, #32
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007abc:	b5b0      	push	{r4, r5, r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4bb1      	ldr	r3, [pc, #708]	; (8007dac <UART_SetConfig+0x2f0>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	6812      	ldr	r2, [r2, #0]
 8007aee:	69f9      	ldr	r1, [r7, #28]
 8007af0:	430b      	orrs	r3, r1
 8007af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4aa6      	ldr	r2, [pc, #664]	; (8007db0 <UART_SetConfig+0x2f4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d004      	beq.n	8007b24 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6812      	ldr	r2, [r2, #0]
 8007b36:	69f9      	ldr	r1, [r7, #28]
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	f023 010f 	bic.w	r1, r3, #15
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a97      	ldr	r2, [pc, #604]	; (8007db4 <UART_SetConfig+0x2f8>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d120      	bne.n	8007b9e <UART_SetConfig+0xe2>
 8007b5c:	4b96      	ldr	r3, [pc, #600]	; (8007db8 <UART_SetConfig+0x2fc>)
 8007b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d816      	bhi.n	8007b98 <UART_SetConfig+0xdc>
 8007b6a:	a201      	add	r2, pc, #4	; (adr r2, 8007b70 <UART_SetConfig+0xb4>)
 8007b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b70:	08007b81 	.word	0x08007b81
 8007b74:	08007b8d 	.word	0x08007b8d
 8007b78:	08007b87 	.word	0x08007b87
 8007b7c:	08007b93 	.word	0x08007b93
 8007b80:	2301      	movs	r3, #1
 8007b82:	76fb      	strb	r3, [r7, #27]
 8007b84:	e0e7      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007b86:	2302      	movs	r3, #2
 8007b88:	76fb      	strb	r3, [r7, #27]
 8007b8a:	e0e4      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007b8c:	2304      	movs	r3, #4
 8007b8e:	76fb      	strb	r3, [r7, #27]
 8007b90:	e0e1      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007b92:	2308      	movs	r3, #8
 8007b94:	76fb      	strb	r3, [r7, #27]
 8007b96:	e0de      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007b98:	2310      	movs	r3, #16
 8007b9a:	76fb      	strb	r3, [r7, #27]
 8007b9c:	e0db      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a86      	ldr	r2, [pc, #536]	; (8007dbc <UART_SetConfig+0x300>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d132      	bne.n	8007c0e <UART_SetConfig+0x152>
 8007ba8:	4b83      	ldr	r3, [pc, #524]	; (8007db8 <UART_SetConfig+0x2fc>)
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bae:	f003 030c 	and.w	r3, r3, #12
 8007bb2:	2b0c      	cmp	r3, #12
 8007bb4:	d828      	bhi.n	8007c08 <UART_SetConfig+0x14c>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <UART_SetConfig+0x100>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bf1 	.word	0x08007bf1
 8007bc0:	08007c09 	.word	0x08007c09
 8007bc4:	08007c09 	.word	0x08007c09
 8007bc8:	08007c09 	.word	0x08007c09
 8007bcc:	08007bfd 	.word	0x08007bfd
 8007bd0:	08007c09 	.word	0x08007c09
 8007bd4:	08007c09 	.word	0x08007c09
 8007bd8:	08007c09 	.word	0x08007c09
 8007bdc:	08007bf7 	.word	0x08007bf7
 8007be0:	08007c09 	.word	0x08007c09
 8007be4:	08007c09 	.word	0x08007c09
 8007be8:	08007c09 	.word	0x08007c09
 8007bec:	08007c03 	.word	0x08007c03
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	76fb      	strb	r3, [r7, #27]
 8007bf4:	e0af      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	76fb      	strb	r3, [r7, #27]
 8007bfa:	e0ac      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007bfc:	2304      	movs	r3, #4
 8007bfe:	76fb      	strb	r3, [r7, #27]
 8007c00:	e0a9      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007c02:	2308      	movs	r3, #8
 8007c04:	76fb      	strb	r3, [r7, #27]
 8007c06:	e0a6      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007c08:	2310      	movs	r3, #16
 8007c0a:	76fb      	strb	r3, [r7, #27]
 8007c0c:	e0a3      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a6b      	ldr	r2, [pc, #428]	; (8007dc0 <UART_SetConfig+0x304>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d120      	bne.n	8007c5a <UART_SetConfig+0x19e>
 8007c18:	4b67      	ldr	r3, [pc, #412]	; (8007db8 <UART_SetConfig+0x2fc>)
 8007c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c22:	2b30      	cmp	r3, #48	; 0x30
 8007c24:	d013      	beq.n	8007c4e <UART_SetConfig+0x192>
 8007c26:	2b30      	cmp	r3, #48	; 0x30
 8007c28:	d814      	bhi.n	8007c54 <UART_SetConfig+0x198>
 8007c2a:	2b20      	cmp	r3, #32
 8007c2c:	d009      	beq.n	8007c42 <UART_SetConfig+0x186>
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	d810      	bhi.n	8007c54 <UART_SetConfig+0x198>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <UART_SetConfig+0x180>
 8007c36:	2b10      	cmp	r3, #16
 8007c38:	d006      	beq.n	8007c48 <UART_SetConfig+0x18c>
 8007c3a:	e00b      	b.n	8007c54 <UART_SetConfig+0x198>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	76fb      	strb	r3, [r7, #27]
 8007c40:	e089      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007c42:	2302      	movs	r3, #2
 8007c44:	76fb      	strb	r3, [r7, #27]
 8007c46:	e086      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	76fb      	strb	r3, [r7, #27]
 8007c4c:	e083      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007c4e:	2308      	movs	r3, #8
 8007c50:	76fb      	strb	r3, [r7, #27]
 8007c52:	e080      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007c54:	2310      	movs	r3, #16
 8007c56:	76fb      	strb	r3, [r7, #27]
 8007c58:	e07d      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a59      	ldr	r2, [pc, #356]	; (8007dc4 <UART_SetConfig+0x308>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d120      	bne.n	8007ca6 <UART_SetConfig+0x1ea>
 8007c64:	4b54      	ldr	r3, [pc, #336]	; (8007db8 <UART_SetConfig+0x2fc>)
 8007c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c70:	d013      	beq.n	8007c9a <UART_SetConfig+0x1de>
 8007c72:	2bc0      	cmp	r3, #192	; 0xc0
 8007c74:	d814      	bhi.n	8007ca0 <UART_SetConfig+0x1e4>
 8007c76:	2b80      	cmp	r3, #128	; 0x80
 8007c78:	d009      	beq.n	8007c8e <UART_SetConfig+0x1d2>
 8007c7a:	2b80      	cmp	r3, #128	; 0x80
 8007c7c:	d810      	bhi.n	8007ca0 <UART_SetConfig+0x1e4>
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <UART_SetConfig+0x1cc>
 8007c82:	2b40      	cmp	r3, #64	; 0x40
 8007c84:	d006      	beq.n	8007c94 <UART_SetConfig+0x1d8>
 8007c86:	e00b      	b.n	8007ca0 <UART_SetConfig+0x1e4>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	76fb      	strb	r3, [r7, #27]
 8007c8c:	e063      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	76fb      	strb	r3, [r7, #27]
 8007c92:	e060      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007c94:	2304      	movs	r3, #4
 8007c96:	76fb      	strb	r3, [r7, #27]
 8007c98:	e05d      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007c9a:	2308      	movs	r3, #8
 8007c9c:	76fb      	strb	r3, [r7, #27]
 8007c9e:	e05a      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	76fb      	strb	r3, [r7, #27]
 8007ca4:	e057      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a47      	ldr	r2, [pc, #284]	; (8007dc8 <UART_SetConfig+0x30c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d125      	bne.n	8007cfc <UART_SetConfig+0x240>
 8007cb0:	4b41      	ldr	r3, [pc, #260]	; (8007db8 <UART_SetConfig+0x2fc>)
 8007cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cbe:	d017      	beq.n	8007cf0 <UART_SetConfig+0x234>
 8007cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cc4:	d817      	bhi.n	8007cf6 <UART_SetConfig+0x23a>
 8007cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cca:	d00b      	beq.n	8007ce4 <UART_SetConfig+0x228>
 8007ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd0:	d811      	bhi.n	8007cf6 <UART_SetConfig+0x23a>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <UART_SetConfig+0x222>
 8007cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cda:	d006      	beq.n	8007cea <UART_SetConfig+0x22e>
 8007cdc:	e00b      	b.n	8007cf6 <UART_SetConfig+0x23a>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	76fb      	strb	r3, [r7, #27]
 8007ce2:	e038      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	76fb      	strb	r3, [r7, #27]
 8007ce8:	e035      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007cea:	2304      	movs	r3, #4
 8007cec:	76fb      	strb	r3, [r7, #27]
 8007cee:	e032      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	76fb      	strb	r3, [r7, #27]
 8007cf4:	e02f      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007cf6:	2310      	movs	r3, #16
 8007cf8:	76fb      	strb	r3, [r7, #27]
 8007cfa:	e02c      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a2b      	ldr	r2, [pc, #172]	; (8007db0 <UART_SetConfig+0x2f4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d125      	bne.n	8007d52 <UART_SetConfig+0x296>
 8007d06:	4b2c      	ldr	r3, [pc, #176]	; (8007db8 <UART_SetConfig+0x2fc>)
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d14:	d017      	beq.n	8007d46 <UART_SetConfig+0x28a>
 8007d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d1a:	d817      	bhi.n	8007d4c <UART_SetConfig+0x290>
 8007d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d20:	d00b      	beq.n	8007d3a <UART_SetConfig+0x27e>
 8007d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d26:	d811      	bhi.n	8007d4c <UART_SetConfig+0x290>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <UART_SetConfig+0x278>
 8007d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d30:	d006      	beq.n	8007d40 <UART_SetConfig+0x284>
 8007d32:	e00b      	b.n	8007d4c <UART_SetConfig+0x290>
 8007d34:	2300      	movs	r3, #0
 8007d36:	76fb      	strb	r3, [r7, #27]
 8007d38:	e00d      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	76fb      	strb	r3, [r7, #27]
 8007d3e:	e00a      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007d40:	2304      	movs	r3, #4
 8007d42:	76fb      	strb	r3, [r7, #27]
 8007d44:	e007      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007d46:	2308      	movs	r3, #8
 8007d48:	76fb      	strb	r3, [r7, #27]
 8007d4a:	e004      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	76fb      	strb	r3, [r7, #27]
 8007d50:	e001      	b.n	8007d56 <UART_SetConfig+0x29a>
 8007d52:	2310      	movs	r3, #16
 8007d54:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a15      	ldr	r2, [pc, #84]	; (8007db0 <UART_SetConfig+0x2f4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	f040 809f 	bne.w	8007ea0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d62:	7efb      	ldrb	r3, [r7, #27]
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d837      	bhi.n	8007dd8 <UART_SetConfig+0x31c>
 8007d68:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <UART_SetConfig+0x2b4>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007d95 	.word	0x08007d95
 8007d74:	08007dd9 	.word	0x08007dd9
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007dd9 	.word	0x08007dd9
 8007d80:	08007da3 	.word	0x08007da3
 8007d84:	08007dd9 	.word	0x08007dd9
 8007d88:	08007dd9 	.word	0x08007dd9
 8007d8c:	08007dd9 	.word	0x08007dd9
 8007d90:	08007dd1 	.word	0x08007dd1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d94:	f7fd f94a 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 8007d98:	6178      	str	r0, [r7, #20]
        break;
 8007d9a:	e022      	b.n	8007de2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <UART_SetConfig+0x310>)
 8007d9e:	617b      	str	r3, [r7, #20]
        break;
 8007da0:	e01f      	b.n	8007de2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007da2:	f7fd f8d5 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8007da6:	6178      	str	r0, [r7, #20]
        break;
 8007da8:	e01b      	b.n	8007de2 <UART_SetConfig+0x326>
 8007daa:	bf00      	nop
 8007dac:	cfff69f3 	.word	0xcfff69f3
 8007db0:	40008000 	.word	0x40008000
 8007db4:	40013800 	.word	0x40013800
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	40004400 	.word	0x40004400
 8007dc0:	40004800 	.word	0x40004800
 8007dc4:	40004c00 	.word	0x40004c00
 8007dc8:	40005000 	.word	0x40005000
 8007dcc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dd4:	617b      	str	r3, [r7, #20]
        break;
 8007dd6:	e004      	b.n	8007de2 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	76bb      	strb	r3, [r7, #26]
        break;
 8007de0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 811b 	beq.w	8008020 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	4a96      	ldr	r2, [pc, #600]	; (8008048 <UART_SetConfig+0x58c>)
 8007df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007df4:	461a      	mov	r2, r3
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dfc:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	4413      	add	r3, r2
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d305      	bcc.n	8007e1a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d902      	bls.n	8007e20 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	76bb      	strb	r3, [r7, #26]
 8007e1e:	e0ff      	b.n	8008020 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f04f 0100 	mov.w	r1, #0
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	4a86      	ldr	r2, [pc, #536]	; (8008048 <UART_SetConfig+0x58c>)
 8007e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	f04f 0300 	mov.w	r3, #0
 8007e38:	f7f8 f9ee 	bl	8000218 <__aeabi_uldivmod>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4610      	mov	r0, r2
 8007e42:	4619      	mov	r1, r3
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	020b      	lsls	r3, r1, #8
 8007e4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e52:	0202      	lsls	r2, r0, #8
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	6849      	ldr	r1, [r1, #4]
 8007e58:	0849      	lsrs	r1, r1, #1
 8007e5a:	4608      	mov	r0, r1
 8007e5c:	f04f 0100 	mov.w	r1, #0
 8007e60:	1814      	adds	r4, r2, r0
 8007e62:	eb43 0501 	adc.w	r5, r3, r1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	4620      	mov	r0, r4
 8007e72:	4629      	mov	r1, r5
 8007e74:	f7f8 f9d0 	bl	8000218 <__aeabi_uldivmod>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e86:	d308      	bcc.n	8007e9a <UART_SetConfig+0x3de>
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e8e:	d204      	bcs.n	8007e9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	60da      	str	r2, [r3, #12]
 8007e98:	e0c2      	b.n	8008020 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	76bb      	strb	r3, [r7, #26]
 8007e9e:	e0bf      	b.n	8008020 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ea8:	d165      	bne.n	8007f76 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8007eaa:	7efb      	ldrb	r3, [r7, #27]
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d828      	bhi.n	8007f02 <UART_SetConfig+0x446>
 8007eb0:	a201      	add	r2, pc, #4	; (adr r2, 8007eb8 <UART_SetConfig+0x3fc>)
 8007eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb6:	bf00      	nop
 8007eb8:	08007edd 	.word	0x08007edd
 8007ebc:	08007ee5 	.word	0x08007ee5
 8007ec0:	08007eed 	.word	0x08007eed
 8007ec4:	08007f03 	.word	0x08007f03
 8007ec8:	08007ef3 	.word	0x08007ef3
 8007ecc:	08007f03 	.word	0x08007f03
 8007ed0:	08007f03 	.word	0x08007f03
 8007ed4:	08007f03 	.word	0x08007f03
 8007ed8:	08007efb 	.word	0x08007efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007edc:	f7fd f8a6 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 8007ee0:	6178      	str	r0, [r7, #20]
        break;
 8007ee2:	e013      	b.n	8007f0c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ee4:	f7fd f8b8 	bl	8005058 <HAL_RCC_GetPCLK2Freq>
 8007ee8:	6178      	str	r0, [r7, #20]
        break;
 8007eea:	e00f      	b.n	8007f0c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eec:	4b57      	ldr	r3, [pc, #348]	; (800804c <UART_SetConfig+0x590>)
 8007eee:	617b      	str	r3, [r7, #20]
        break;
 8007ef0:	e00c      	b.n	8007f0c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ef2:	f7fd f82d 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8007ef6:	6178      	str	r0, [r7, #20]
        break;
 8007ef8:	e008      	b.n	8007f0c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007efe:	617b      	str	r3, [r7, #20]
        break;
 8007f00:	e004      	b.n	8007f0c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	76bb      	strb	r3, [r7, #26]
        break;
 8007f0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 8086 	beq.w	8008020 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	4a4b      	ldr	r2, [pc, #300]	; (8008048 <UART_SetConfig+0x58c>)
 8007f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f26:	005a      	lsls	r2, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	085b      	lsrs	r3, r3, #1
 8007f2e:	441a      	add	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	2b0f      	cmp	r3, #15
 8007f40:	d916      	bls.n	8007f70 <UART_SetConfig+0x4b4>
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f48:	d212      	bcs.n	8007f70 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f023 030f 	bic.w	r3, r3, #15
 8007f52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	085b      	lsrs	r3, r3, #1
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	89fb      	ldrh	r3, [r7, #14]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	89fa      	ldrh	r2, [r7, #14]
 8007f6c:	60da      	str	r2, [r3, #12]
 8007f6e:	e057      	b.n	8008020 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	76bb      	strb	r3, [r7, #26]
 8007f74:	e054      	b.n	8008020 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f76:	7efb      	ldrb	r3, [r7, #27]
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d828      	bhi.n	8007fce <UART_SetConfig+0x512>
 8007f7c:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <UART_SetConfig+0x4c8>)
 8007f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f82:	bf00      	nop
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fb1 	.word	0x08007fb1
 8007f8c:	08007fb9 	.word	0x08007fb9
 8007f90:	08007fcf 	.word	0x08007fcf
 8007f94:	08007fbf 	.word	0x08007fbf
 8007f98:	08007fcf 	.word	0x08007fcf
 8007f9c:	08007fcf 	.word	0x08007fcf
 8007fa0:	08007fcf 	.word	0x08007fcf
 8007fa4:	08007fc7 	.word	0x08007fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa8:	f7fd f840 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 8007fac:	6178      	str	r0, [r7, #20]
        break;
 8007fae:	e013      	b.n	8007fd8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fb0:	f7fd f852 	bl	8005058 <HAL_RCC_GetPCLK2Freq>
 8007fb4:	6178      	str	r0, [r7, #20]
        break;
 8007fb6:	e00f      	b.n	8007fd8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fb8:	4b24      	ldr	r3, [pc, #144]	; (800804c <UART_SetConfig+0x590>)
 8007fba:	617b      	str	r3, [r7, #20]
        break;
 8007fbc:	e00c      	b.n	8007fd8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fbe:	f7fc ffc7 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8007fc2:	6178      	str	r0, [r7, #20]
        break;
 8007fc4:	e008      	b.n	8007fd8 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fca:	617b      	str	r3, [r7, #20]
        break;
 8007fcc:	e004      	b.n	8007fd8 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	76bb      	strb	r3, [r7, #26]
        break;
 8007fd6:	bf00      	nop
    }

    if (pclk != 0U)
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d020      	beq.n	8008020 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	4a19      	ldr	r2, [pc, #100]	; (8008048 <UART_SetConfig+0x58c>)
 8007fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	085b      	lsrs	r3, r3, #1
 8007ff6:	441a      	add	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008000:	b29b      	uxth	r3, r3
 8008002:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2b0f      	cmp	r3, #15
 8008008:	d908      	bls.n	800801c <UART_SetConfig+0x560>
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008010:	d204      	bcs.n	800801c <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	60da      	str	r2, [r3, #12]
 800801a:	e001      	b.n	8008020 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800803c:	7ebb      	ldrb	r3, [r7, #26]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3720      	adds	r7, #32
 8008042:	46bd      	mov	sp, r7
 8008044:	bdb0      	pop	{r4, r5, r7, pc}
 8008046:	bf00      	nop
 8008048:	080085c8 	.word	0x080085c8
 800804c:	00f42400 	.word	0x00f42400

08008050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00a      	beq.n	800807a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00a      	beq.n	800809c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	430a      	orrs	r2, r1
 800809a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00a      	beq.n	80080be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c2:	f003 0308 	and.w	r3, r3, #8
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01a      	beq.n	8008166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800814e:	d10a      	bne.n	8008166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
  }
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af02      	add	r7, sp, #8
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081a4:	f7fa fefe 	bl	8002fa4 <HAL_GetTick>
 80081a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d10e      	bne.n	80081d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f82f 	bl	800822a <UART_WaitOnFlagUntilTimeout>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e025      	b.n	8008222 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	2b04      	cmp	r3, #4
 80081e2:	d10e      	bne.n	8008202 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f819 	bl	800822a <UART_WaitOnFlagUntilTimeout>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e00f      	b.n	8008222 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2220      	movs	r2, #32
 8008206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	603b      	str	r3, [r7, #0]
 8008236:	4613      	mov	r3, r2
 8008238:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800823a:	e062      	b.n	8008302 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008242:	d05e      	beq.n	8008302 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008244:	f7fa feae 	bl	8002fa4 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	429a      	cmp	r2, r3
 8008252:	d302      	bcc.n	800825a <UART_WaitOnFlagUntilTimeout+0x30>
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d11d      	bne.n	8008296 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008268:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0201 	bic.w	r2, r2, #1
 8008278:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2220      	movs	r2, #32
 800827e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2220      	movs	r2, #32
 8008286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e045      	b.n	8008322 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d02e      	beq.n	8008302 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082b2:	d126      	bne.n	8008302 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80082cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689a      	ldr	r2, [r3, #8]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0201 	bic.w	r2, r2, #1
 80082dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e00f      	b.n	8008322 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69da      	ldr	r2, [r3, #28]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	4013      	ands	r3, r2
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	429a      	cmp	r2, r3
 8008310:	bf0c      	ite	eq
 8008312:	2301      	moveq	r3, #1
 8008314:	2300      	movne	r3, #0
 8008316:	b2db      	uxtb	r3, r3
 8008318:	461a      	mov	r2, r3
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	429a      	cmp	r2, r3
 800831e:	d08d      	beq.n	800823c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800832a:	b480      	push	{r7}
 800832c:	b085      	sub	sp, #20
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008338:	2b01      	cmp	r3, #1
 800833a:	d101      	bne.n	8008340 <HAL_UARTEx_DisableFifoMode+0x16>
 800833c:	2302      	movs	r3, #2
 800833e:	e027      	b.n	8008390 <HAL_UARTEx_DisableFifoMode+0x66>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2224      	movs	r2, #36	; 0x24
 800834c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 0201 	bic.w	r2, r2, #1
 8008366:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800836e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2220      	movs	r2, #32
 8008382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d101      	bne.n	80083b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083b0:	2302      	movs	r3, #2
 80083b2:	e02d      	b.n	8008410 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2224      	movs	r2, #36	; 0x24
 80083c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 0201 	bic.w	r2, r2, #1
 80083da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f84f 	bl	8008494 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800842c:	2302      	movs	r3, #2
 800842e:	e02d      	b.n	800848c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2224      	movs	r2, #36	; 0x24
 800843c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0201 	bic.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f811 	bl	8008494 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d108      	bne.n	80084b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084b4:	e031      	b.n	800851a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084b6:	2308      	movs	r3, #8
 80084b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084ba:	2308      	movs	r3, #8
 80084bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	0e5b      	lsrs	r3, r3, #25
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	0f5b      	lsrs	r3, r3, #29
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	f003 0307 	and.w	r3, r3, #7
 80084dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	7b3a      	ldrb	r2, [r7, #12]
 80084e2:	4911      	ldr	r1, [pc, #68]	; (8008528 <UARTEx_SetNbDataToProcess+0x94>)
 80084e4:	5c8a      	ldrb	r2, [r1, r2]
 80084e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084ea:	7b3a      	ldrb	r2, [r7, #12]
 80084ec:	490f      	ldr	r1, [pc, #60]	; (800852c <UARTEx_SetNbDataToProcess+0x98>)
 80084ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	7b7a      	ldrb	r2, [r7, #13]
 8008500:	4909      	ldr	r1, [pc, #36]	; (8008528 <UARTEx_SetNbDataToProcess+0x94>)
 8008502:	5c8a      	ldrb	r2, [r1, r2]
 8008504:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008508:	7b7a      	ldrb	r2, [r7, #13]
 800850a:	4908      	ldr	r1, [pc, #32]	; (800852c <UARTEx_SetNbDataToProcess+0x98>)
 800850c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800850e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008512:	b29a      	uxth	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800851a:	bf00      	nop
 800851c:	3714      	adds	r7, #20
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	080085e0 	.word	0x080085e0
 800852c:	080085e8 	.word	0x080085e8

08008530 <__libc_init_array>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	4d0d      	ldr	r5, [pc, #52]	; (8008568 <__libc_init_array+0x38>)
 8008534:	4c0d      	ldr	r4, [pc, #52]	; (800856c <__libc_init_array+0x3c>)
 8008536:	1b64      	subs	r4, r4, r5
 8008538:	10a4      	asrs	r4, r4, #2
 800853a:	2600      	movs	r6, #0
 800853c:	42a6      	cmp	r6, r4
 800853e:	d109      	bne.n	8008554 <__libc_init_array+0x24>
 8008540:	4d0b      	ldr	r5, [pc, #44]	; (8008570 <__libc_init_array+0x40>)
 8008542:	4c0c      	ldr	r4, [pc, #48]	; (8008574 <__libc_init_array+0x44>)
 8008544:	f000 f820 	bl	8008588 <_init>
 8008548:	1b64      	subs	r4, r4, r5
 800854a:	10a4      	asrs	r4, r4, #2
 800854c:	2600      	movs	r6, #0
 800854e:	42a6      	cmp	r6, r4
 8008550:	d105      	bne.n	800855e <__libc_init_array+0x2e>
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	f855 3b04 	ldr.w	r3, [r5], #4
 8008558:	4798      	blx	r3
 800855a:	3601      	adds	r6, #1
 800855c:	e7ee      	b.n	800853c <__libc_init_array+0xc>
 800855e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008562:	4798      	blx	r3
 8008564:	3601      	adds	r6, #1
 8008566:	e7f2      	b.n	800854e <__libc_init_array+0x1e>
 8008568:	080085f8 	.word	0x080085f8
 800856c:	080085f8 	.word	0x080085f8
 8008570:	080085f8 	.word	0x080085f8
 8008574:	080085fc 	.word	0x080085fc

08008578 <memset>:
 8008578:	4402      	add	r2, r0
 800857a:	4603      	mov	r3, r0
 800857c:	4293      	cmp	r3, r2
 800857e:	d100      	bne.n	8008582 <memset+0xa>
 8008580:	4770      	bx	lr
 8008582:	f803 1b01 	strb.w	r1, [r3], #1
 8008586:	e7f9      	b.n	800857c <memset+0x4>

08008588 <_init>:
 8008588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858a:	bf00      	nop
 800858c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858e:	bc08      	pop	{r3}
 8008590:	469e      	mov	lr, r3
 8008592:	4770      	bx	lr

08008594 <_fini>:
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	bf00      	nop
 8008598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859a:	bc08      	pop	{r3}
 800859c:	469e      	mov	lr, r3
 800859e:	4770      	bx	lr
