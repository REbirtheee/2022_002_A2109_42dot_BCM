
42DOT_aDRT_2nd_BCM_ILC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ec  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f4  080056f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056fc  080056fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000000c  08005710  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08005710  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e0b  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002735  00000000  00000000  00035e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00038580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00039510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277c0  00000000  00000000  0003a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f19  00000000  00000000  00061b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f98e7  00000000  00000000  00073a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e8  00000000  00000000  0016d388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080056cc 	.word	0x080056cc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080056cc 	.word	0x080056cc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <ButtonRead>:

#include "button_ctrl.h"


void ButtonRead()
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	Input_Status_Raw.ign1_status = READ_PIN_DI_0;
 8000540:	2101      	movs	r1, #1
 8000542:	483a      	ldr	r0, [pc, #232]	; (800062c <ButtonRead+0xf0>)
 8000544:	f003 f9e4 	bl	8003910 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	461a      	mov	r2, r3
 800054c:	4b38      	ldr	r3, [pc, #224]	; (8000630 <ButtonRead+0xf4>)
 800054e:	701a      	strb	r2, [r3, #0]
	if( Button_Status.ign1_status == 1 ) {
 8000550:	4b38      	ldr	r3, [pc, #224]	; (8000634 <ButtonRead+0xf8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d107      	bne.n	8000568 <ButtonRead+0x2c>
		Input_Status_Raw.defogger = READ_PIN_DI_2;
 8000558:	2104      	movs	r1, #4
 800055a:	4834      	ldr	r0, [pc, #208]	; (800062c <ButtonRead+0xf0>)
 800055c:	f003 f9d8 	bl	8003910 <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	461a      	mov	r2, r3
 8000564:	4b32      	ldr	r3, [pc, #200]	; (8000630 <ButtonRead+0xf4>)
 8000566:	709a      	strb	r2, [r3, #2]
	}
	Input_Status_Raw.autonomous = READ_PIN_DI_3;
 8000568:	2108      	movs	r1, #8
 800056a:	4830      	ldr	r0, [pc, #192]	; (800062c <ButtonRead+0xf0>)
 800056c:	f003 f9d0 	bl	8003910 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <ButtonRead+0xf4>)
 8000576:	721a      	strb	r2, [r3, #8]
	Input_Status_Raw.ps_close = READ_PIN_DI_4;
 8000578:	2110      	movs	r1, #16
 800057a:	482c      	ldr	r0, [pc, #176]	; (800062c <ButtonRead+0xf0>)
 800057c:	f003 f9c8 	bl	8003910 <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	461a      	mov	r2, r3
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <ButtonRead+0xf4>)
 8000586:	70da      	strb	r2, [r3, #3]
	Input_Status_Raw.ps_open = READ_PIN_DI_8;
 8000588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058c:	4827      	ldr	r0, [pc, #156]	; (800062c <ButtonRead+0xf0>)
 800058e:	f003 f9bf 	bl	8003910 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	461a      	mov	r2, r3
 8000596:	4b26      	ldr	r3, [pc, #152]	; (8000630 <ButtonRead+0xf4>)
 8000598:	711a      	strb	r2, [r3, #4]
	Input_Status_Raw.drv_close = READ_PIN_DI_6;
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	4823      	ldr	r0, [pc, #140]	; (800062c <ButtonRead+0xf0>)
 800059e:	f003 f9b7 	bl	8003910 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <ButtonRead+0xf4>)
 80005a8:	715a      	strb	r2, [r3, #5]
	Input_Status_Raw.drv_open = READ_PIN_DI_7;
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	481f      	ldr	r0, [pc, #124]	; (800062c <ButtonRead+0xf0>)
 80005ae:	f003 f9af 	bl	8003910 <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <ButtonRead+0xf4>)
 80005b8:	719a      	strb	r2, [r3, #6]
	Input_Status_Raw.ign2_status = READ_PIN_DI_9;
 80005ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005be:	481b      	ldr	r0, [pc, #108]	; (800062c <ButtonRead+0xf0>)
 80005c0:	f003 f9a6 	bl	8003910 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <ButtonRead+0xf4>)
 80005ca:	71da      	strb	r2, [r3, #7]
	Input_Status_Raw.cluster_trip = READ_PIN_DI_5;
 80005cc:	2120      	movs	r1, #32
 80005ce:	4817      	ldr	r0, [pc, #92]	; (800062c <ButtonRead+0xf0>)
 80005d0:	f003 f99e 	bl	8003910 <HAL_GPIO_ReadPin>
 80005d4:	4603      	mov	r3, r0
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <ButtonRead+0xf4>)
 80005da:	725a      	strb	r2, [r3, #9]

	ButtonSWChatt();		// Switch Chattering Function
 80005dc:	f000 f82e 	bl	800063c <ButtonSWChatt>

	Input_Status_Raw_Prev.ign1_status = Input_Status_Raw.ign1_status;
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <ButtonRead+0xf4>)
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <ButtonRead+0xfc>)
 80005e6:	701a      	strb	r2, [r3, #0]
	Input_Status_Raw_Prev.defogger = Input_Status_Raw.defogger;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <ButtonRead+0xf4>)
 80005ea:	789a      	ldrb	r2, [r3, #2]
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <ButtonRead+0xfc>)
 80005ee:	709a      	strb	r2, [r3, #2]
	Input_Status_Raw_Prev.autonomous = Input_Status_Raw.autonomous;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <ButtonRead+0xf4>)
 80005f2:	7a1a      	ldrb	r2, [r3, #8]
 80005f4:	4b10      	ldr	r3, [pc, #64]	; (8000638 <ButtonRead+0xfc>)
 80005f6:	721a      	strb	r2, [r3, #8]
	Input_Status_Raw_Prev.ps_close = Input_Status_Raw.ps_close;
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <ButtonRead+0xf4>)
 80005fa:	78da      	ldrb	r2, [r3, #3]
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <ButtonRead+0xfc>)
 80005fe:	70da      	strb	r2, [r3, #3]
	Input_Status_Raw_Prev.ps_open = Input_Status_Raw.ps_open;
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <ButtonRead+0xf4>)
 8000602:	791a      	ldrb	r2, [r3, #4]
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <ButtonRead+0xfc>)
 8000606:	711a      	strb	r2, [r3, #4]
	Input_Status_Raw_Prev.drv_close = Input_Status_Raw.drv_close;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <ButtonRead+0xf4>)
 800060a:	795a      	ldrb	r2, [r3, #5]
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <ButtonRead+0xfc>)
 800060e:	715a      	strb	r2, [r3, #5]
	Input_Status_Raw_Prev.drv_open = Input_Status_Raw.drv_open;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <ButtonRead+0xf4>)
 8000612:	799a      	ldrb	r2, [r3, #6]
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <ButtonRead+0xfc>)
 8000616:	719a      	strb	r2, [r3, #6]
	Input_Status_Raw_Prev.ign2_status = Input_Status_Raw.ign2_status;
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <ButtonRead+0xf4>)
 800061a:	79da      	ldrb	r2, [r3, #7]
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <ButtonRead+0xfc>)
 800061e:	71da      	strb	r2, [r3, #7]
	Input_Status_Raw_Prev.cluster_trip = Input_Status_Raw.cluster_trip;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <ButtonRead+0xf4>)
 8000622:	7a5a      	ldrb	r2, [r3, #9]
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <ButtonRead+0xfc>)
 8000626:	725a      	strb	r2, [r3, #9]
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021400 	.word	0x40021400
 8000630:	200002d0 	.word	0x200002d0
 8000634:	2000029c 	.word	0x2000029c
 8000638:	2000005c 	.word	0x2000005c

0800063c <ButtonSWChatt>:

void ButtonSWChatt()
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	if( Input_Status_Raw_Prev.ign1_status == Input_Status_Raw.ign1_status ) {
 8000640:	4b89      	ldr	r3, [pc, #548]	; (8000868 <ButtonSWChatt+0x22c>)
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	4b89      	ldr	r3, [pc, #548]	; (800086c <ButtonSWChatt+0x230>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	429a      	cmp	r2, r3
 800064a:	d111      	bne.n	8000670 <ButtonSWChatt+0x34>
		if( ++Chattering.ign1_status_cnt > 2 ) {
 800064c:	4b88      	ldr	r3, [pc, #544]	; (8000870 <ButtonSWChatt+0x234>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b86      	ldr	r3, [pc, #536]	; (8000870 <ButtonSWChatt+0x234>)
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	4b85      	ldr	r3, [pc, #532]	; (8000870 <ButtonSWChatt+0x234>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d90a      	bls.n	8000676 <ButtonSWChatt+0x3a>
			Input_Status.ign1_status = Input_Status_Raw.ign1_status;
 8000660:	4b82      	ldr	r3, [pc, #520]	; (800086c <ButtonSWChatt+0x230>)
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	4b83      	ldr	r3, [pc, #524]	; (8000874 <ButtonSWChatt+0x238>)
 8000666:	701a      	strb	r2, [r3, #0]
			Chattering.ign1_status_cnt = 3;
 8000668:	4b81      	ldr	r3, [pc, #516]	; (8000870 <ButtonSWChatt+0x234>)
 800066a:	2203      	movs	r2, #3
 800066c:	701a      	strb	r2, [r3, #0]
 800066e:	e002      	b.n	8000676 <ButtonSWChatt+0x3a>
		}
	} else {
		Chattering.ign1_status_cnt = 0;
 8000670:	4b7f      	ldr	r3, [pc, #508]	; (8000870 <ButtonSWChatt+0x234>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	}

	if( Input_Status_Raw_Prev.defogger == Input_Status_Raw.defogger ) {
 8000676:	4b7c      	ldr	r3, [pc, #496]	; (8000868 <ButtonSWChatt+0x22c>)
 8000678:	789a      	ldrb	r2, [r3, #2]
 800067a:	4b7c      	ldr	r3, [pc, #496]	; (800086c <ButtonSWChatt+0x230>)
 800067c:	789b      	ldrb	r3, [r3, #2]
 800067e:	429a      	cmp	r2, r3
 8000680:	d12c      	bne.n	80006dc <ButtonSWChatt+0xa0>
		if( ++Chattering.defogger_cnt > 2 ) {
 8000682:	4b7b      	ldr	r3, [pc, #492]	; (8000870 <ButtonSWChatt+0x234>)
 8000684:	789b      	ldrb	r3, [r3, #2]
 8000686:	3301      	adds	r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b79      	ldr	r3, [pc, #484]	; (8000870 <ButtonSWChatt+0x234>)
 800068c:	709a      	strb	r2, [r3, #2]
 800068e:	4b78      	ldr	r3, [pc, #480]	; (8000870 <ButtonSWChatt+0x234>)
 8000690:	789b      	ldrb	r3, [r3, #2]
 8000692:	2b02      	cmp	r3, #2
 8000694:	d925      	bls.n	80006e2 <ButtonSWChatt+0xa6>
			Input_Status.defogger = Input_Status_Raw.defogger;
 8000696:	4b75      	ldr	r3, [pc, #468]	; (800086c <ButtonSWChatt+0x230>)
 8000698:	789a      	ldrb	r2, [r3, #2]
 800069a:	4b76      	ldr	r3, [pc, #472]	; (8000874 <ButtonSWChatt+0x238>)
 800069c:	709a      	strb	r2, [r3, #2]
			if( (Input_Status_Prev.defogger==0) && (Input_Status.defogger==1) ) {
 800069e:	4b76      	ldr	r3, [pc, #472]	; (8000878 <ButtonSWChatt+0x23c>)
 80006a0:	789b      	ldrb	r3, [r3, #2]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d112      	bne.n	80006cc <ButtonSWChatt+0x90>
 80006a6:	4b73      	ldr	r3, [pc, #460]	; (8000874 <ButtonSWChatt+0x238>)
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d10e      	bne.n	80006cc <ButtonSWChatt+0x90>
				if( Button_Status.defogger == 0 ) {
 80006ae:	4b73      	ldr	r3, [pc, #460]	; (800087c <ButtonSWChatt+0x240>)
 80006b0:	789b      	ldrb	r3, [r3, #2]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d103      	bne.n	80006be <ButtonSWChatt+0x82>
					defogger_sw = 1;
 80006b6:	4b72      	ldr	r3, [pc, #456]	; (8000880 <ButtonSWChatt+0x244>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e006      	b.n	80006cc <ButtonSWChatt+0x90>
				} else if( Button_Status.defogger == 1 ) {
 80006be:	4b6f      	ldr	r3, [pc, #444]	; (800087c <ButtonSWChatt+0x240>)
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d102      	bne.n	80006cc <ButtonSWChatt+0x90>
					defogger_sw = 0;
 80006c6:	4b6e      	ldr	r3, [pc, #440]	; (8000880 <ButtonSWChatt+0x244>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
				}
			}
			Input_Status_Prev.defogger = Input_Status.defogger;
 80006cc:	4b69      	ldr	r3, [pc, #420]	; (8000874 <ButtonSWChatt+0x238>)
 80006ce:	789a      	ldrb	r2, [r3, #2]
 80006d0:	4b69      	ldr	r3, [pc, #420]	; (8000878 <ButtonSWChatt+0x23c>)
 80006d2:	709a      	strb	r2, [r3, #2]
			Chattering.defogger_cnt = 3;
 80006d4:	4b66      	ldr	r3, [pc, #408]	; (8000870 <ButtonSWChatt+0x234>)
 80006d6:	2203      	movs	r2, #3
 80006d8:	709a      	strb	r2, [r3, #2]
 80006da:	e002      	b.n	80006e2 <ButtonSWChatt+0xa6>
		}
	} else {
		Chattering.defogger_cnt = 0;
 80006dc:	4b64      	ldr	r3, [pc, #400]	; (8000870 <ButtonSWChatt+0x234>)
 80006de:	2200      	movs	r2, #0
 80006e0:	709a      	strb	r2, [r3, #2]
	}


	if( Input_Status_Raw_Prev.ps_close == Input_Status_Raw.ps_close ) {
 80006e2:	4b61      	ldr	r3, [pc, #388]	; (8000868 <ButtonSWChatt+0x22c>)
 80006e4:	78da      	ldrb	r2, [r3, #3]
 80006e6:	4b61      	ldr	r3, [pc, #388]	; (800086c <ButtonSWChatt+0x230>)
 80006e8:	78db      	ldrb	r3, [r3, #3]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d111      	bne.n	8000712 <ButtonSWChatt+0xd6>
		if( ++Chattering.ps_close_cnt > 2 ) {
 80006ee:	4b60      	ldr	r3, [pc, #384]	; (8000870 <ButtonSWChatt+0x234>)
 80006f0:	78db      	ldrb	r3, [r3, #3]
 80006f2:	3301      	adds	r3, #1
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b5e      	ldr	r3, [pc, #376]	; (8000870 <ButtonSWChatt+0x234>)
 80006f8:	70da      	strb	r2, [r3, #3]
 80006fa:	4b5d      	ldr	r3, [pc, #372]	; (8000870 <ButtonSWChatt+0x234>)
 80006fc:	78db      	ldrb	r3, [r3, #3]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d90a      	bls.n	8000718 <ButtonSWChatt+0xdc>
			Input_Status.ps_close = Input_Status_Raw.ps_close;
 8000702:	4b5a      	ldr	r3, [pc, #360]	; (800086c <ButtonSWChatt+0x230>)
 8000704:	78da      	ldrb	r2, [r3, #3]
 8000706:	4b5b      	ldr	r3, [pc, #364]	; (8000874 <ButtonSWChatt+0x238>)
 8000708:	70da      	strb	r2, [r3, #3]
			Chattering.ps_close_cnt = 3;
 800070a:	4b59      	ldr	r3, [pc, #356]	; (8000870 <ButtonSWChatt+0x234>)
 800070c:	2203      	movs	r2, #3
 800070e:	70da      	strb	r2, [r3, #3]
 8000710:	e002      	b.n	8000718 <ButtonSWChatt+0xdc>
		}
	} else {
		Chattering.ps_close_cnt = 0;
 8000712:	4b57      	ldr	r3, [pc, #348]	; (8000870 <ButtonSWChatt+0x234>)
 8000714:	2200      	movs	r2, #0
 8000716:	70da      	strb	r2, [r3, #3]
	}

	if( Input_Status_Raw_Prev.ps_open == Input_Status_Raw.ps_open ) {
 8000718:	4b53      	ldr	r3, [pc, #332]	; (8000868 <ButtonSWChatt+0x22c>)
 800071a:	791a      	ldrb	r2, [r3, #4]
 800071c:	4b53      	ldr	r3, [pc, #332]	; (800086c <ButtonSWChatt+0x230>)
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	d111      	bne.n	8000748 <ButtonSWChatt+0x10c>
		if( ++Chattering.ps_open_cnt > 2 ) {
 8000724:	4b52      	ldr	r3, [pc, #328]	; (8000870 <ButtonSWChatt+0x234>)
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b50      	ldr	r3, [pc, #320]	; (8000870 <ButtonSWChatt+0x234>)
 800072e:	711a      	strb	r2, [r3, #4]
 8000730:	4b4f      	ldr	r3, [pc, #316]	; (8000870 <ButtonSWChatt+0x234>)
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d90a      	bls.n	800074e <ButtonSWChatt+0x112>
			Input_Status.ps_open = Input_Status_Raw.ps_open;
 8000738:	4b4c      	ldr	r3, [pc, #304]	; (800086c <ButtonSWChatt+0x230>)
 800073a:	791a      	ldrb	r2, [r3, #4]
 800073c:	4b4d      	ldr	r3, [pc, #308]	; (8000874 <ButtonSWChatt+0x238>)
 800073e:	711a      	strb	r2, [r3, #4]
			Chattering.ps_open_cnt = 3;
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <ButtonSWChatt+0x234>)
 8000742:	2203      	movs	r2, #3
 8000744:	711a      	strb	r2, [r3, #4]
 8000746:	e002      	b.n	800074e <ButtonSWChatt+0x112>
		}
	} else {
		Chattering.ps_open_cnt = 0;
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <ButtonSWChatt+0x234>)
 800074a:	2200      	movs	r2, #0
 800074c:	711a      	strb	r2, [r3, #4]
	}

	if( Input_Status_Raw_Prev.drv_close == Input_Status_Raw.drv_close ) {
 800074e:	4b46      	ldr	r3, [pc, #280]	; (8000868 <ButtonSWChatt+0x22c>)
 8000750:	795a      	ldrb	r2, [r3, #5]
 8000752:	4b46      	ldr	r3, [pc, #280]	; (800086c <ButtonSWChatt+0x230>)
 8000754:	795b      	ldrb	r3, [r3, #5]
 8000756:	429a      	cmp	r2, r3
 8000758:	d111      	bne.n	800077e <ButtonSWChatt+0x142>
		if( ++Chattering.drv_close_cnt > 2 ) {
 800075a:	4b45      	ldr	r3, [pc, #276]	; (8000870 <ButtonSWChatt+0x234>)
 800075c:	795b      	ldrb	r3, [r3, #5]
 800075e:	3301      	adds	r3, #1
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b43      	ldr	r3, [pc, #268]	; (8000870 <ButtonSWChatt+0x234>)
 8000764:	715a      	strb	r2, [r3, #5]
 8000766:	4b42      	ldr	r3, [pc, #264]	; (8000870 <ButtonSWChatt+0x234>)
 8000768:	795b      	ldrb	r3, [r3, #5]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d90a      	bls.n	8000784 <ButtonSWChatt+0x148>
			Input_Status.drv_close = Input_Status_Raw.drv_close;
 800076e:	4b3f      	ldr	r3, [pc, #252]	; (800086c <ButtonSWChatt+0x230>)
 8000770:	795a      	ldrb	r2, [r3, #5]
 8000772:	4b40      	ldr	r3, [pc, #256]	; (8000874 <ButtonSWChatt+0x238>)
 8000774:	715a      	strb	r2, [r3, #5]
			Chattering.drv_close_cnt = 3;
 8000776:	4b3e      	ldr	r3, [pc, #248]	; (8000870 <ButtonSWChatt+0x234>)
 8000778:	2203      	movs	r2, #3
 800077a:	715a      	strb	r2, [r3, #5]
 800077c:	e002      	b.n	8000784 <ButtonSWChatt+0x148>
		}
	} else {
		Chattering.drv_close_cnt = 0;
 800077e:	4b3c      	ldr	r3, [pc, #240]	; (8000870 <ButtonSWChatt+0x234>)
 8000780:	2200      	movs	r2, #0
 8000782:	715a      	strb	r2, [r3, #5]
	}


	if( Input_Status_Raw_Prev.drv_open == Input_Status_Raw.drv_open ) {
 8000784:	4b38      	ldr	r3, [pc, #224]	; (8000868 <ButtonSWChatt+0x22c>)
 8000786:	799a      	ldrb	r2, [r3, #6]
 8000788:	4b38      	ldr	r3, [pc, #224]	; (800086c <ButtonSWChatt+0x230>)
 800078a:	799b      	ldrb	r3, [r3, #6]
 800078c:	429a      	cmp	r2, r3
 800078e:	d111      	bne.n	80007b4 <ButtonSWChatt+0x178>
		if( ++Chattering.drv_open_cnt > 2 ) {
 8000790:	4b37      	ldr	r3, [pc, #220]	; (8000870 <ButtonSWChatt+0x234>)
 8000792:	799b      	ldrb	r3, [r3, #6]
 8000794:	3301      	adds	r3, #1
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b35      	ldr	r3, [pc, #212]	; (8000870 <ButtonSWChatt+0x234>)
 800079a:	719a      	strb	r2, [r3, #6]
 800079c:	4b34      	ldr	r3, [pc, #208]	; (8000870 <ButtonSWChatt+0x234>)
 800079e:	799b      	ldrb	r3, [r3, #6]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d90a      	bls.n	80007ba <ButtonSWChatt+0x17e>
			Input_Status.drv_open = Input_Status_Raw.drv_open;
 80007a4:	4b31      	ldr	r3, [pc, #196]	; (800086c <ButtonSWChatt+0x230>)
 80007a6:	799a      	ldrb	r2, [r3, #6]
 80007a8:	4b32      	ldr	r3, [pc, #200]	; (8000874 <ButtonSWChatt+0x238>)
 80007aa:	719a      	strb	r2, [r3, #6]
			Chattering.drv_open_cnt = 3;
 80007ac:	4b30      	ldr	r3, [pc, #192]	; (8000870 <ButtonSWChatt+0x234>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	719a      	strb	r2, [r3, #6]
 80007b2:	e002      	b.n	80007ba <ButtonSWChatt+0x17e>
		}
	} else {
		Chattering.drv_open_cnt = 0;
 80007b4:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <ButtonSWChatt+0x234>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	719a      	strb	r2, [r3, #6]
	}

	if( Input_Status_Raw_Prev.ign2_status == Input_Status_Raw.ign2_status ) {
 80007ba:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <ButtonSWChatt+0x22c>)
 80007bc:	79da      	ldrb	r2, [r3, #7]
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <ButtonSWChatt+0x230>)
 80007c0:	79db      	ldrb	r3, [r3, #7]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d111      	bne.n	80007ea <ButtonSWChatt+0x1ae>
		if( ++Chattering.ign2_status_cnt > 2 ) {
 80007c6:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <ButtonSWChatt+0x234>)
 80007c8:	79db      	ldrb	r3, [r3, #7]
 80007ca:	3301      	adds	r3, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <ButtonSWChatt+0x234>)
 80007d0:	71da      	strb	r2, [r3, #7]
 80007d2:	4b27      	ldr	r3, [pc, #156]	; (8000870 <ButtonSWChatt+0x234>)
 80007d4:	79db      	ldrb	r3, [r3, #7]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d90a      	bls.n	80007f0 <ButtonSWChatt+0x1b4>
			Input_Status.ign2_status = Input_Status_Raw.ign2_status;
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <ButtonSWChatt+0x230>)
 80007dc:	79da      	ldrb	r2, [r3, #7]
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <ButtonSWChatt+0x238>)
 80007e0:	71da      	strb	r2, [r3, #7]
			Chattering.ign2_status_cnt = 3;
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <ButtonSWChatt+0x234>)
 80007e4:	2203      	movs	r2, #3
 80007e6:	71da      	strb	r2, [r3, #7]
 80007e8:	e002      	b.n	80007f0 <ButtonSWChatt+0x1b4>
		}
	} else {
		Chattering.ign2_status_cnt = 0;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <ButtonSWChatt+0x234>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	71da      	strb	r2, [r3, #7]
	}

	if( Input_Status_Raw_Prev.autonomous == Input_Status_Raw.autonomous ) {
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <ButtonSWChatt+0x22c>)
 80007f2:	7a1a      	ldrb	r2, [r3, #8]
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <ButtonSWChatt+0x230>)
 80007f6:	7a1b      	ldrb	r3, [r3, #8]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d111      	bne.n	8000820 <ButtonSWChatt+0x1e4>
		if( ++Chattering.autonomous_cnt > 2 ) {
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <ButtonSWChatt+0x234>)
 80007fe:	7a1b      	ldrb	r3, [r3, #8]
 8000800:	3301      	adds	r3, #1
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <ButtonSWChatt+0x234>)
 8000806:	721a      	strb	r2, [r3, #8]
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <ButtonSWChatt+0x234>)
 800080a:	7a1b      	ldrb	r3, [r3, #8]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d90a      	bls.n	8000826 <ButtonSWChatt+0x1ea>
			Input_Status.autonomous = Input_Status_Raw.autonomous;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <ButtonSWChatt+0x230>)
 8000812:	7a1a      	ldrb	r2, [r3, #8]
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <ButtonSWChatt+0x238>)
 8000816:	721a      	strb	r2, [r3, #8]
			Chattering.autonomous_cnt = 3;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <ButtonSWChatt+0x234>)
 800081a:	2203      	movs	r2, #3
 800081c:	721a      	strb	r2, [r3, #8]
 800081e:	e002      	b.n	8000826 <ButtonSWChatt+0x1ea>
		}
	} else {
		Chattering.autonomous_cnt = 0;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <ButtonSWChatt+0x234>)
 8000822:	2200      	movs	r2, #0
 8000824:	721a      	strb	r2, [r3, #8]
	}

	if( Input_Status_Raw_Prev.cluster_trip == Input_Status_Raw.cluster_trip ) {
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <ButtonSWChatt+0x22c>)
 8000828:	7a5a      	ldrb	r2, [r3, #9]
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <ButtonSWChatt+0x230>)
 800082c:	7a5b      	ldrb	r3, [r3, #9]
 800082e:	429a      	cmp	r2, r3
 8000830:	d111      	bne.n	8000856 <ButtonSWChatt+0x21a>
		if( ++Chattering.cluster_trip_cnt > 2 ) {
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <ButtonSWChatt+0x234>)
 8000834:	7a5b      	ldrb	r3, [r3, #9]
 8000836:	3301      	adds	r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <ButtonSWChatt+0x234>)
 800083c:	725a      	strb	r2, [r3, #9]
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <ButtonSWChatt+0x234>)
 8000840:	7a5b      	ldrb	r3, [r3, #9]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d90a      	bls.n	800085c <ButtonSWChatt+0x220>
			Input_Status.cluster_trip = Input_Status_Raw.cluster_trip;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <ButtonSWChatt+0x230>)
 8000848:	7a5a      	ldrb	r2, [r3, #9]
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <ButtonSWChatt+0x238>)
 800084c:	725a      	strb	r2, [r3, #9]
			Chattering.cluster_trip_cnt = 3;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <ButtonSWChatt+0x234>)
 8000850:	2203      	movs	r2, #3
 8000852:	725a      	strb	r2, [r3, #9]
		}
	} else {
		Chattering.cluster_trip_cnt = 0;
	}
}
 8000854:	e002      	b.n	800085c <ButtonSWChatt+0x220>
		Chattering.cluster_trip_cnt = 0;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <ButtonSWChatt+0x234>)
 8000858:	2200      	movs	r2, #0
 800085a:	725a      	strb	r2, [r3, #9]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2000005c 	.word	0x2000005c
 800086c:	200002d0 	.word	0x200002d0
 8000870:	200001f0 	.word	0x200001f0
 8000874:	200001d4 	.word	0x200001d4
 8000878:	200000e4 	.word	0x200000e4
 800087c:	2000029c 	.word	0x2000029c
 8000880:	200001df 	.word	0x200001df

08000884 <ButtonConrtrol>:

void ButtonConrtrol()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	//static uint8_t cluster_trip_status_prev = 0;
	//static uint16_t cluster_trip_push_cnt = 0;


	if( Input_Status.ign1_status == 1 )  {
 8000888:	4b84      	ldr	r3, [pc, #528]	; (8000a9c <ButtonConrtrol+0x218>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d103      	bne.n	8000898 <ButtonConrtrol+0x14>
		Button_Status.ign1_status = 1;
 8000890:	4b83      	ldr	r3, [pc, #524]	; (8000aa0 <ButtonConrtrol+0x21c>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e006      	b.n	80008a6 <ButtonConrtrol+0x22>
	} else if( Input_Status.ign1_status == 0 ) {
 8000898:	4b80      	ldr	r3, [pc, #512]	; (8000a9c <ButtonConrtrol+0x218>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <ButtonConrtrol+0x22>
		Button_Status.ign1_status = 0;
 80008a0:	4b7f      	ldr	r3, [pc, #508]	; (8000aa0 <ButtonConrtrol+0x21c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	}

	if( Input_Status.ign2_status == 1 ) {
 80008a6:	4b7d      	ldr	r3, [pc, #500]	; (8000a9c <ButtonConrtrol+0x218>)
 80008a8:	79db      	ldrb	r3, [r3, #7]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d103      	bne.n	80008b6 <ButtonConrtrol+0x32>
		Button_Status.ign2_status = 1;
 80008ae:	4b7c      	ldr	r3, [pc, #496]	; (8000aa0 <ButtonConrtrol+0x21c>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	71da      	strb	r2, [r3, #7]
 80008b4:	e006      	b.n	80008c4 <ButtonConrtrol+0x40>
	} else if( Input_Status.ign2_status == 0 ) {
 80008b6:	4b79      	ldr	r3, [pc, #484]	; (8000a9c <ButtonConrtrol+0x218>)
 80008b8:	79db      	ldrb	r3, [r3, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d102      	bne.n	80008c4 <ButtonConrtrol+0x40>
		Button_Status.ign2_status = 0;
 80008be:	4b78      	ldr	r3, [pc, #480]	; (8000aa0 <ButtonConrtrol+0x21c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	71da      	strb	r2, [r3, #7]
	}

	/*
	 * Defogger Control
	 */
	if( Button_Status.ign1_status == 1 ) {
 80008c4:	4b76      	ldr	r3, [pc, #472]	; (8000aa0 <ButtonConrtrol+0x21c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d135      	bne.n	8000938 <ButtonConrtrol+0xb4>
		if( defogger_sw == 1 ) {
 80008cc:	4b75      	ldr	r3, [pc, #468]	; (8000aa4 <ButtonConrtrol+0x220>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d121      	bne.n	8000918 <ButtonConrtrol+0x94>
			Button_Status.defogger = 1;
 80008d4:	4b72      	ldr	r3, [pc, #456]	; (8000aa0 <ButtonConrtrol+0x21c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_3, SET);			// defogger sig/lamp on
 80008da:	2201      	movs	r2, #1
 80008dc:	210c      	movs	r1, #12
 80008de:	4872      	ldr	r0, [pc, #456]	; (8000aa8 <ButtonConrtrol+0x224>)
 80008e0:	f003 f82e 	bl	8003940 <HAL_GPIO_WritePin>
			if( ++deffoger_cnt > 30000 ) {									// on until 15m
 80008e4:	4b71      	ldr	r3, [pc, #452]	; (8000aac <ButtonConrtrol+0x228>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a70      	ldr	r2, [pc, #448]	; (8000aac <ButtonConrtrol+0x228>)
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	4b6f      	ldr	r3, [pc, #444]	; (8000aac <ButtonConrtrol+0x228>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f247 5230 	movw	r2, #30000	; 0x7530
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d930      	bls.n	800095c <ButtonConrtrol+0xd8>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2| GPIO_PIN_3, RESET);	// defogger sig/lamp off
 80008fa:	2200      	movs	r2, #0
 80008fc:	210c      	movs	r1, #12
 80008fe:	486a      	ldr	r0, [pc, #424]	; (8000aa8 <ButtonConrtrol+0x224>)
 8000900:	f003 f81e 	bl	8003940 <HAL_GPIO_WritePin>
				Button_Status.defogger = 0;
 8000904:	4b66      	ldr	r3, [pc, #408]	; (8000aa0 <ButtonConrtrol+0x21c>)
 8000906:	2200      	movs	r2, #0
 8000908:	709a      	strb	r2, [r3, #2]
				defogger_sw = 0;
 800090a:	4b66      	ldr	r3, [pc, #408]	; (8000aa4 <ButtonConrtrol+0x220>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
				deffoger_cnt = 0;
 8000910:	4b66      	ldr	r3, [pc, #408]	; (8000aac <ButtonConrtrol+0x228>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e021      	b.n	800095c <ButtonConrtrol+0xd8>
			}
		} else if( defogger_sw == 0) {
 8000918:	4b62      	ldr	r3, [pc, #392]	; (8000aa4 <ButtonConrtrol+0x220>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d11d      	bne.n	800095c <ButtonConrtrol+0xd8>
			Button_Status.defogger = 0;
 8000920:	4b5f      	ldr	r3, [pc, #380]	; (8000aa0 <ButtonConrtrol+0x21c>)
 8000922:	2200      	movs	r2, #0
 8000924:	709a      	strb	r2, [r3, #2]
			deffoger_cnt = 0;
 8000926:	4b61      	ldr	r3, [pc, #388]	; (8000aac <ButtonConrtrol+0x228>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_3, RESET);		// defogger sig/lamp off
 800092c:	2200      	movs	r2, #0
 800092e:	210c      	movs	r1, #12
 8000930:	485d      	ldr	r0, [pc, #372]	; (8000aa8 <ButtonConrtrol+0x224>)
 8000932:	f003 f805 	bl	8003940 <HAL_GPIO_WritePin>
 8000936:	e011      	b.n	800095c <ButtonConrtrol+0xd8>
		}
	} else if( Button_Status.ign1_status == 0 ) {
 8000938:	4b59      	ldr	r3, [pc, #356]	; (8000aa0 <ButtonConrtrol+0x21c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10d      	bne.n	800095c <ButtonConrtrol+0xd8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_3, RESET);			// defogger sig/lamp off
 8000940:	2200      	movs	r2, #0
 8000942:	210c      	movs	r1, #12
 8000944:	4858      	ldr	r0, [pc, #352]	; (8000aa8 <ButtonConrtrol+0x224>)
 8000946:	f002 fffb 	bl	8003940 <HAL_GPIO_WritePin>
		Button_Status.defogger = 0;
 800094a:	4b55      	ldr	r3, [pc, #340]	; (8000aa0 <ButtonConrtrol+0x21c>)
 800094c:	2200      	movs	r2, #0
 800094e:	709a      	strb	r2, [r3, #2]
		defogger_sw = 0;
 8000950:	4b54      	ldr	r3, [pc, #336]	; (8000aa4 <ButtonConrtrol+0x220>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
		deffoger_cnt = 0;
 8000956:	4b55      	ldr	r3, [pc, #340]	; (8000aac <ButtonConrtrol+0x228>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
	}

	if( Input_Status.drv_open == 1 ) {
 800095c:	4b4f      	ldr	r3, [pc, #316]	; (8000a9c <ButtonConrtrol+0x218>)
 800095e:	799b      	ldrb	r3, [r3, #6]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d103      	bne.n	800096c <ButtonConrtrol+0xe8>
		Button_Status.drv_open = 1;
 8000964:	4b4e      	ldr	r3, [pc, #312]	; (8000aa0 <ButtonConrtrol+0x21c>)
 8000966:	2201      	movs	r2, #1
 8000968:	719a      	strb	r2, [r3, #6]
 800096a:	e006      	b.n	800097a <ButtonConrtrol+0xf6>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, SET);		//  sw lamp on
	} else if( Input_Status.drv_open == 0 ) {
 800096c:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <ButtonConrtrol+0x218>)
 800096e:	799b      	ldrb	r3, [r3, #6]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <ButtonConrtrol+0xf6>
		Button_Status.drv_open = 0;
 8000974:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <ButtonConrtrol+0x21c>)
 8000976:	2200      	movs	r2, #0
 8000978:	719a      	strb	r2, [r3, #6]
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, RESET);	//  sw lamp on
	}

	if( Input_Status.drv_close == 1 ) {
 800097a:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <ButtonConrtrol+0x218>)
 800097c:	795b      	ldrb	r3, [r3, #5]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d103      	bne.n	800098a <ButtonConrtrol+0x106>
		Button_Status.drv_close = 1;
 8000982:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <ButtonConrtrol+0x21c>)
 8000984:	2201      	movs	r2, #1
 8000986:	715a      	strb	r2, [r3, #5]
 8000988:	e006      	b.n	8000998 <ButtonConrtrol+0x114>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, SET);		//  sw lamp on
	} else if( Input_Status.drv_close == 0 ) {
 800098a:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <ButtonConrtrol+0x218>)
 800098c:	795b      	ldrb	r3, [r3, #5]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d102      	bne.n	8000998 <ButtonConrtrol+0x114>
		Button_Status.drv_close = 0;
 8000992:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <ButtonConrtrol+0x21c>)
 8000994:	2200      	movs	r2, #0
 8000996:	715a      	strb	r2, [r3, #5]
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, RESET);	//  sw lamp on
	}

	if( Input_Status.ps_open == 1 ) {
 8000998:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <ButtonConrtrol+0x218>)
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d103      	bne.n	80009a8 <ButtonConrtrol+0x124>
		Button_Status.ps_open = 1;
 80009a0:	4b3f      	ldr	r3, [pc, #252]	; (8000aa0 <ButtonConrtrol+0x21c>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	711a      	strb	r2, [r3, #4]
 80009a6:	e006      	b.n	80009b6 <ButtonConrtrol+0x132>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, SET);		//  sw lamp on
	} else if( Input_Status.ps_open == 0 ) {
 80009a8:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <ButtonConrtrol+0x218>)
 80009aa:	791b      	ldrb	r3, [r3, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <ButtonConrtrol+0x132>
		Button_Status.ps_open = 0;
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <ButtonConrtrol+0x21c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	711a      	strb	r2, [r3, #4]
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, RESET);	//  sw lamp on
	}

	if( Input_Status.ps_close == 1 ) {
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <ButtonConrtrol+0x218>)
 80009b8:	78db      	ldrb	r3, [r3, #3]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d103      	bne.n	80009c6 <ButtonConrtrol+0x142>
		Button_Status.ps_close = 1;
 80009be:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <ButtonConrtrol+0x21c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	70da      	strb	r2, [r3, #3]
 80009c4:	e006      	b.n	80009d4 <ButtonConrtrol+0x150>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, SET);		//  sw lamp on
	} else if( Input_Status.ps_close == 0 ) {
 80009c6:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <ButtonConrtrol+0x218>)
 80009c8:	78db      	ldrb	r3, [r3, #3]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d102      	bne.n	80009d4 <ButtonConrtrol+0x150>
		Button_Status.ps_close = 0;
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <ButtonConrtrol+0x21c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	70da      	strb	r2, [r3, #3]
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, RESET);	//  sw lamp on
	}

	if( autonomous_sw == 1 ) {
 80009d4:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <ButtonConrtrol+0x22c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d103      	bne.n	80009e4 <ButtonConrtrol+0x160>
		Button_Status.autonomous = 1;
 80009dc:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <ButtonConrtrol+0x21c>)
 80009de:	2201      	movs	r2, #1
 80009e0:	721a      	strb	r2, [r3, #8]
 80009e2:	e006      	b.n	80009f2 <ButtonConrtrol+0x16e>
	} else if( autonomous_sw == 0 ) {
 80009e4:	4b32      	ldr	r3, [pc, #200]	; (8000ab0 <ButtonConrtrol+0x22c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <ButtonConrtrol+0x16e>
		Button_Status.autonomous = 0;
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <ButtonConrtrol+0x21c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	721a      	strb	r2, [r3, #8]
	}

	if( auto_mode == 1 ) {
 80009f2:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <ButtonConrtrol+0x230>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d106      	bne.n	8000a08 <ButtonConrtrol+0x184>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, SET);// autonomous button lamp on // 220419 only use LED 1
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a00:	4829      	ldr	r0, [pc, #164]	; (8000aa8 <ButtonConrtrol+0x224>)
 8000a02:	f002 ff9d 	bl	8003940 <HAL_GPIO_WritePin>
 8000a06:	e009      	b.n	8000a1c <ButtonConrtrol+0x198>

	} else if( auto_mode == 0 ) {
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <ButtonConrtrol+0x230>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d105      	bne.n	8000a1c <ButtonConrtrol+0x198>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, RESET);	// autonomous button lamp off
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a16:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <ButtonConrtrol+0x224>)
 8000a18:	f002 ff92 	bl	8003940 <HAL_GPIO_WritePin>
		cluster_trip_status = cluster_trip_push_cnt = 0;
	}
	cluster_trip_status_prev = cluster_trip_status;
	*/

	if( Input_Status.cluster_trip == 1 ){
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <ButtonConrtrol+0x218>)
 8000a1e:	7a5b      	ldrb	r3, [r3, #9]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d109      	bne.n	8000a38 <ButtonConrtrol+0x1b4>
			cluster_trip_push_cnt++;
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <ButtonConrtrol+0x234>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <ButtonConrtrol+0x234>)
 8000a2e:	701a      	strb	r2, [r3, #0]
			cluster_trip_check_cnt = 0;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <ButtonConrtrol+0x238>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8000a36:	e02f      	b.n	8000a98 <ButtonConrtrol+0x214>
	}else if( Input_Status.cluster_trip == 0 ){
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <ButtonConrtrol+0x218>)
 8000a3a:	7a5b      	ldrb	r3, [r3, #9]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d12b      	bne.n	8000a98 <ButtonConrtrol+0x214>
		if( cluster_trip_push_cnt == 0){
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <ButtonConrtrol+0x234>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d103      	bne.n	8000a50 <ButtonConrtrol+0x1cc>
				cluster_trip_status_tx = 0;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <ButtonConrtrol+0x23c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	e012      	b.n	8000a76 <ButtonConrtrol+0x1f2>
		}else if( cluster_trip_push_cnt >= 5 && cluster_trip_push_cnt < 25){
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <ButtonConrtrol+0x234>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d907      	bls.n	8000a68 <ButtonConrtrol+0x1e4>
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <ButtonConrtrol+0x234>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b18      	cmp	r3, #24
 8000a5e:	d803      	bhi.n	8000a68 <ButtonConrtrol+0x1e4>
				cluster_trip_status_tx = 1;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <ButtonConrtrol+0x23c>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	e006      	b.n	8000a76 <ButtonConrtrol+0x1f2>
		}else if( cluster_trip_push_cnt >= 25){
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <ButtonConrtrol+0x234>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b18      	cmp	r3, #24
 8000a6e:	d902      	bls.n	8000a76 <ButtonConrtrol+0x1f2>
				cluster_trip_status_tx = 2;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <ButtonConrtrol+0x23c>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	701a      	strb	r2, [r3, #0]
		if( cluster_trip_check_cnt >= 3 ){
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <ButtonConrtrol+0x238>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d906      	bls.n	8000a8c <ButtonConrtrol+0x208>
			cluster_trip_push_cnt = 0;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <ButtonConrtrol+0x234>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
			cluster_trip_check_cnt = 10;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <ButtonConrtrol+0x238>)
 8000a86:	220a      	movs	r2, #10
 8000a88:	701a      	strb	r2, [r3, #0]
}
 8000a8a:	e005      	b.n	8000a98 <ButtonConrtrol+0x214>
			cluster_trip_check_cnt++;
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <ButtonConrtrol+0x238>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <ButtonConrtrol+0x238>)
 8000a96:	701a      	strb	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200001d4 	.word	0x200001d4
 8000aa0:	2000029c 	.word	0x2000029c
 8000aa4:	200001df 	.word	0x200001df
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	200001d0 	.word	0x200001d0
 8000ab0:	200000bf 	.word	0x200000bf
 8000ab4:	200001e1 	.word	0x200001e1
 8000ab8:	20000240 	.word	0x20000240
 8000abc:	20000229 	.word	0x20000229
 8000ac0:	200000ef 	.word	0x200000ef

08000ac4 <ButtonDataConv>:


void ButtonDataConv(uint8_t *txdata, uint8_t *flag)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	txdata[0] = Button_Status.ign1_status | (Button_Status.defogger<<2) | (Button_Status.drv_open<<3) |
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <ButtonDataConv+0xf0>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b25a      	sxtb	r2, r3
 8000ad4:	4b37      	ldr	r3, [pc, #220]	; (8000bb4 <ButtonDataConv+0xf0>)
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b25a      	sxtb	r2, r3
 8000ae0:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <ButtonDataConv+0xf0>)
 8000ae2:	799b      	ldrb	r3, [r3, #6]
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	b25b      	sxtb	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b25a      	sxtb	r2, r3
			(Button_Status.drv_close<<4) | (Button_Status.ps_open<<5) | (Button_Status.ps_close<<6) | (Button_Status.ign2_status<<7);
 8000aec:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <ButtonDataConv+0xf0>)
 8000aee:	795b      	ldrb	r3, [r3, #5]
 8000af0:	011b      	lsls	r3, r3, #4
	txdata[0] = Button_Status.ign1_status | (Button_Status.defogger<<2) | (Button_Status.drv_open<<3) |
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25a      	sxtb	r2, r3
			(Button_Status.drv_close<<4) | (Button_Status.ps_open<<5) | (Button_Status.ps_close<<6) | (Button_Status.ign2_status<<7);
 8000af8:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <ButtonDataConv+0xf0>)
 8000afa:	791b      	ldrb	r3, [r3, #4]
 8000afc:	015b      	lsls	r3, r3, #5
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b25a      	sxtb	r2, r3
 8000b04:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <ButtonDataConv+0xf0>)
 8000b06:	78db      	ldrb	r3, [r3, #3]
 8000b08:	019b      	lsls	r3, r3, #6
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <ButtonDataConv+0xf0>)
 8000b12:	79db      	ldrb	r3, [r3, #7]
 8000b14:	01db      	lsls	r3, r3, #7
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	b2da      	uxtb	r2, r3
	txdata[0] = Button_Status.ign1_status | (Button_Status.defogger<<2) | (Button_Status.drv_open<<3) |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	701a      	strb	r2, [r3, #0]
	txdata[1] = vehicle_vel;
 8000b22:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <ButtonDataConv+0xf4>)
 8000b24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	701a      	strb	r2, [r3, #0]
	txdata[2] = vehicle_vel >> 8;
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <ButtonDataConv+0xf4>)
 8000b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b36:	121b      	asrs	r3, r3, #8
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	701a      	strb	r2, [r3, #0]
	txdata[3] = vehicle_dec;
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <ButtonDataConv+0xf8>)
 8000b44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3303      	adds	r3, #3
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	701a      	strb	r2, [r3, #0]
	txdata[4] = vehicle_dec >> 8;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <ButtonDataConv+0xf8>)
 8000b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b56:	121b      	asrs	r3, r3, #8
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
	txdata[5] = brake_stauts | (shift_status<<1) | (epb_status<<3);
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <ButtonDataConv+0xfc>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	b25a      	sxtb	r2, r3
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <ButtonDataConv+0x100>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <ButtonDataConv+0x104>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b25a      	sxtb	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3305      	adds	r3, #5
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	701a      	strb	r2, [r3, #0]
	txdata[6] = ems_status | (auto_mode<<1);
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <ButtonDataConv+0x108>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	b25a      	sxtb	r2, r3
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <ButtonDataConv+0x10c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b25a      	sxtb	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3306      	adds	r3, #6
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	701a      	strb	r2, [r3, #0]

	(*flag) = 1;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	2000029c 	.word	0x2000029c
 8000bb8:	200002cc 	.word	0x200002cc
 8000bbc:	20000248 	.word	0x20000248
 8000bc0:	20000034 	.word	0x20000034
 8000bc4:	200000f1 	.word	0x200000f1
 8000bc8:	20000247 	.word	0x20000247
 8000bcc:	200001e1 	.word	0x200001e1
 8000bd0:	2000022a 	.word	0x2000022a

08000bd4 <HAL_TIM_PeriodElapsedCallback>:
#include "ctrl_routine.h"
#include "string.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a74      	ldr	r2, [pc, #464]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	f040 818c 	bne.w	8000f00 <HAL_TIM_PeriodElapsedCallback+0x32c>
		if( timer6_cmd_num == 0 ) {
 8000be8:	4b73      	ldr	r3, [pc, #460]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <HAL_TIM_PeriodElapsedCallback+0x22>
			ButtonRead();		// Read Switch
 8000bf0:	f7ff fca4 	bl	800053c <ButtonRead>
 8000bf4:	e13e      	b.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>

		} else if( timer6_cmd_num == 1 ) {
 8000bf6:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d102      	bne.n	8000c04 <HAL_TIM_PeriodElapsedCallback+0x30>
			ButtonConrtrol();
 8000bfe:	f7ff fe41 	bl	8000884 <ButtonConrtrol>
 8000c02:	e137      	b.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>


		} else if( timer6_cmd_num == 2 ) {
 8000c04:	4b6c      	ldr	r3, [pc, #432]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d10b      	bne.n	8000c24 <HAL_TIM_PeriodElapsedCallback+0x50>
			ButtonDataConv(button_tx_data, &button_tx_flag);
 8000c0c:	496b      	ldr	r1, [pc, #428]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000c0e:	486c      	ldr	r0, [pc, #432]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c10:	f7ff ff58 	bl	8000ac4 <ButtonDataConv>
			LocalTxMessage(CAN_ID_ILCINFO, 8, button_tx_data, &button_tx_flag);
 8000c14:	4b69      	ldr	r3, [pc, #420]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000c16:	4a6a      	ldr	r2, [pc, #424]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c18:	2108      	movs	r1, #8
 8000c1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c1e:	f000 fbc5 	bl	80013ac <LocalTxMessage>
 8000c22:	e127      	b.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>

		} else if( timer6_cmd_num == 3 ) {
 8000c24:	4b64      	ldr	r3, [pc, #400]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d10c      	bne.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x72>
			AkitCmdConv(ak2bc_tx_data, ak2bc_rx_data, &ak2bc_tx_flag);
 8000c2c:	4a65      	ldr	r2, [pc, #404]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000c2e:	4966      	ldr	r1, [pc, #408]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000c30:	4866      	ldr	r0, [pc, #408]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000c32:	f000 fec5 	bl	80019c0 <AkitCmdConv>
			LocalTxMessage(CAN_ID_AKIT_CMD, 8, ak2bc_tx_data, &ak2bc_tx_flag);
 8000c36:	4b63      	ldr	r3, [pc, #396]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000c38:	4a64      	ldr	r2, [pc, #400]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	f44f 7004 	mov.w	r0, #528	; 0x210
 8000c40:	f000 fbb4 	bl	80013ac <LocalTxMessage>
 8000c44:	e116      	b.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>

		} else if( timer6_cmd_num == 4 ) {
 8000c46:	4b5c      	ldr	r3, [pc, #368]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d10a      	bne.n	8000c64 <HAL_TIM_PeriodElapsedCallback+0x90>

			BCMDataConv(bcm_tx_data, &bcm_tx_flag);
 8000c4e:	4960      	ldr	r1, [pc, #384]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000c50:	4860      	ldr	r0, [pc, #384]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c52:	f000 fe5d 	bl	8001910 <BCMDataConv>
			LLCTxMessage(CAN_ID_BCMINFO, 8, bcm_tx_data, &bcm_tx_flag);
 8000c56:	4b5e      	ldr	r3, [pc, #376]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000c58:	4a5e      	ldr	r2, [pc, #376]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	2030      	movs	r0, #48	; 0x30
 8000c5e:	f000 fbd7 	bl	8001410 <LLCTxMessage>
 8000c62:	e107      	b.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>


		} else if( timer6_cmd_num == 5 ) {
 8000c64:	4b54      	ldr	r3, [pc, #336]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b05      	cmp	r3, #5
 8000c6a:	d11c      	bne.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0xd2>
			if( ++cc2ic_tx_cnt > 49 ) {
 8000c6c:	4b5a      	ldr	r3, [pc, #360]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b58      	ldr	r3, [pc, #352]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c76:	701a      	strb	r2, [r3, #0]
 8000c78:	4b57      	ldr	r3, [pc, #348]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b31      	cmp	r3, #49	; 0x31
 8000c7e:	f240 80f9 	bls.w	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				if( cluster_can_tx_flag == 1 ) {
 8000c82:	4b56      	ldr	r3, [pc, #344]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d109      	bne.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0xca>
					CC2ICDataConv(cc2ic_tx_data, &cc2ic_tx_flag);
 8000c8a:	4955      	ldr	r1, [pc, #340]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000c8c:	4855      	ldr	r0, [pc, #340]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000c8e:	f000 fddf 	bl	8001850 <CC2ICDataConv>
					ULCTxMessage(CAN_ID_CC2ICINFO, 8, cc2ic_tx_data, &cc2ic_tx_flag);
 8000c92:	4b53      	ldr	r3, [pc, #332]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000c94:	4a53      	ldr	r2, [pc, #332]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000c96:	2108      	movs	r1, #8
 8000c98:	4853      	ldr	r0, [pc, #332]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000c9a:	f000 fb45 	bl	8001328 <ULCTxMessage>
				}
				cc2ic_tx_cnt = 0;
 8000c9e:	4b4e      	ldr	r3, [pc, #312]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e0e6      	b.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
			}


		} else if( timer6_cmd_num == 6 ) {
 8000ca6:	4b44      	ldr	r3, [pc, #272]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d11c      	bne.n	8000ce8 <HAL_TIM_PeriodElapsedCallback+0x114>
			if( ++sm2ic_tx_cnt > 4 ) {
 8000cae:	4b4f      	ldr	r3, [pc, #316]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	4b4c      	ldr	r3, [pc, #304]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	f240 80d8 	bls.w	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				if( cluster_can_tx_flag == 1 ) {
 8000cc4:	4b45      	ldr	r3, [pc, #276]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d109      	bne.n	8000ce0 <HAL_TIM_PeriodElapsedCallback+0x10c>
					SM2ICDataConv(sm2ic_tx_data, &sm2ic_tx_flag);
 8000ccc:	4948      	ldr	r1, [pc, #288]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000cce:	4849      	ldr	r0, [pc, #292]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000cd0:	f000 fd58 	bl	8001784 <SM2ICDataConv>
					ULCTxMessage(CAN_ID_SM2ICINFO, 8, sm2ic_tx_data, &sm2ic_tx_flag);
 8000cd4:	4b46      	ldr	r3, [pc, #280]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000cd6:	4a47      	ldr	r2, [pc, #284]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000cd8:	2108      	movs	r1, #8
 8000cda:	4847      	ldr	r0, [pc, #284]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000cdc:	f000 fb24 	bl	8001328 <ULCTxMessage>
				}
				sm2ic_tx_cnt = 0;
 8000ce0:	4b42      	ldr	r3, [pc, #264]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e0c5      	b.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
			}


		} else if( timer6_cmd_num == 7 ) {
 8000ce8:	4b33      	ldr	r3, [pc, #204]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b07      	cmp	r3, #7
 8000cee:	d11c      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x156>
			if( ++dtc_tx_cnt > 4 ) {
 8000cf0:	4b42      	ldr	r3, [pc, #264]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	f240 80b7 	bls.w	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				if( cluster_can_tx_flag == 1 ) {
 8000d06:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d109      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x14e>
					DTCDataConv(dtc_tx_data, &dtc_tx_flag);
 8000d0e:	493c      	ldr	r1, [pc, #240]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d10:	483c      	ldr	r0, [pc, #240]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000d12:	f000 fcb3 	bl	800167c <DTCDataConv>
					ULCTxMessage(CAN_ID_DTCINFO, 8, dtc_tx_data, &dtc_tx_flag);
 8000d16:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d18:	4a3a      	ldr	r2, [pc, #232]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000d1a:	2108      	movs	r1, #8
 8000d1c:	483a      	ldr	r0, [pc, #232]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000d1e:	f000 fb03 	bl	8001328 <ULCTxMessage>
				}
				dtc_tx_cnt = 0;
 8000d22:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	e0a4      	b.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
			}


		} else if( timer6_cmd_num == 8 ) {
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b08      	cmp	r3, #8
 8000d30:	d11c      	bne.n	8000d6c <HAL_TIM_PeriodElapsedCallback+0x198>
			if( ++bc2ic_tx_cnt > 4 ) {
 8000d32:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	f240 8096 	bls.w	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				if( cluster_can_tx_flag == 1 ) {
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d109      	bne.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x190>
					BC2ICDataConv(bc2ic_tx_data, &bc2ic_tx_flag);
 8000d50:	492f      	ldr	r1, [pc, #188]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000d52:	4830      	ldr	r0, [pc, #192]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d54:	f000 fb8e 	bl	8001474 <BC2ICDataConv>
					ULCTxMessage(CAN_ID_BC2ICINFO, 8, bc2ic_tx_data, &bc2ic_tx_flag);
 8000d58:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000d5a:	4a2e      	ldr	r2, [pc, #184]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	482e      	ldr	r0, [pc, #184]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000d60:	f000 fae2 	bl	8001328 <ULCTxMessage>
				}
				bc2ic_tx_cnt = 0;
 8000d64:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e083      	b.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
			}

		} else if( timer6_cmd_num == 9 ) {
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b09      	cmp	r3, #9
 8000d72:	d17f      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
//			CANReStart();
			// stop mode wake-up condition
			if( (Button_Status.ign1_status==1) || (door_open_status==1) || (charge_door_status==1) || (rke_lock_staus==1)
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d013      	beq.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d00f      	beq.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d00b      	beq.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d007      	beq.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x1d0>
					|| (rke_unlock_staus==1) || (stop_lamp_on==1) ) {
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d003      	beq.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d149      	bne.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x264>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000daa:	4822      	ldr	r0, [pc, #136]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000dac:	f002 fdc8 	bl	8003940 <HAL_GPIO_WritePin>
 8000db0:	e060      	b.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000db2:	bf00      	nop
 8000db4:	40001000 	.word	0x40001000
 8000db8:	2000027d 	.word	0x2000027d
 8000dbc:	2000010c 	.word	0x2000010c
 8000dc0:	20000040 	.word	0x20000040
 8000dc4:	20000250 	.word	0x20000250
 8000dc8:	20000068 	.word	0x20000068
 8000dcc:	200001e4 	.word	0x200001e4
 8000dd0:	20000228 	.word	0x20000228
 8000dd4:	200000c8 	.word	0x200000c8
 8000dd8:	200001e2 	.word	0x200001e2
 8000ddc:	2000019d 	.word	0x2000019d
 8000de0:	20000098 	.word	0x20000098
 8000de4:	200002ac 	.word	0x200002ac
 8000de8:	18ff1747 	.word	0x18ff1747
 8000dec:	2000024e 	.word	0x2000024e
 8000df0:	200000d8 	.word	0x200000d8
 8000df4:	200000a0 	.word	0x200000a0
 8000df8:	18ff171f 	.word	0x18ff171f
 8000dfc:	2000022c 	.word	0x2000022c
 8000e00:	20000070 	.word	0x20000070
 8000e04:	20000048 	.word	0x20000048
 8000e08:	18ff1722 	.word	0x18ff1722
 8000e0c:	200000bc 	.word	0x200000bc
 8000e10:	20000241 	.word	0x20000241
 8000e14:	200000d0 	.word	0x200000d0
 8000e18:	18ff1721 	.word	0x18ff1721
 8000e1c:	2000029c 	.word	0x2000029c
 8000e20:	2000024f 	.word	0x2000024f
 8000e24:	2000009d 	.word	0x2000009d
 8000e28:	200001ec 	.word	0x200001ec
 8000e2c:	200002b4 	.word	0x200002b4
 8000e30:	20000141 	.word	0x20000141
 8000e34:	40021000 	.word	0x40021000
			} else if( (Button_Status.ign1_status==0) && (door_open_status==0) && (charge_door_status==0) && (rke_unlock_staus==0)
 8000e38:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d119      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000e40:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d115      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000e48:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d111      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10d      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
					&& (rke_lock_staus==0) && (stop_lamp_on==0) ) {
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d109      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000e60:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d105      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6e:	482c      	ldr	r0, [pc, #176]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000e70:	f002 fd66 	bl	8003940 <HAL_GPIO_WritePin>
			}

		}

		if( ++timer6_cmd_num == 10 ) {
 8000e74:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b0a      	cmp	r3, #10
 8000e86:	d13b      	bne.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x32c>
			timer6_cmd_num = 0;
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
			// Stop mode enable condition
			if( (Button_Status.ign1_status==0) && (door_open_status==0) && (charge_door_status==0) && (rke_unlock_staus==0)
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d12a      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x318>
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d126      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x318>
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d122      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x318>
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d11e      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x318>
					&& (rke_lock_staus==0) && (stop_lamp_on==0) ) {
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d11a      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x318>
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d116      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x318>
				if( ++stop_mode_cnt > 1500 ) {	// wait until 30s
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000ec8:	801a      	strh	r2, [r3, #0]
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d914      	bls.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x32c>
					stop_enable = 1;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
					stop_mode_cnt = 1495;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000ede:	f240 52d7 	movw	r2, #1495	; 0x5d7
 8000ee2:	801a      	strh	r2, [r3, #0]
					cluster_can_tx_flag = 0;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
				if( ++stop_mode_cnt > 1500 ) {	// wait until 30s
 8000eea:	e009      	b.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x32c>
				}
			} else {
				stop_mode_cnt = 0;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	801a      	strh	r2, [r3, #0]
				stop_enable = 0;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
				cluster_can_tx_flag = 1;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
			timer6_cmd_num_1000ms = 0;
		}
#endif

	}
}
 8000efe:	e7ff      	b.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x32c>
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	2000029c 	.word	0x2000029c
 8000f0c:	2000024f 	.word	0x2000024f
 8000f10:	2000009d 	.word	0x2000009d
 8000f14:	200002b4 	.word	0x200002b4
 8000f18:	200001ec 	.word	0x200001ec
 8000f1c:	20000141 	.word	0x20000141
 8000f20:	40021000 	.word	0x40021000
 8000f24:	2000027d 	.word	0x2000027d
 8000f28:	200002b6 	.word	0x200002b6
 8000f2c:	20000099 	.word	0x20000099
 8000f30:	2000019d 	.word	0x2000019d

08000f34 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	if( hcan->Instance == CAN1 ) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10a      	bne.n	8000f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1_rx_header, can1_rx_data);
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f48:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f001 feb9 	bl	8002cc4 <HAL_CAN_GetRxMessage>
		ClusterToILC(&can1_rx_header, can1_rx_data);
 8000f52:	4916      	ldr	r1, [pc, #88]	; (8000fac <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f54:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000f56:	f000 f83b 	bl	8000fd0 <ClusterToILC>

	} else if( hcan->Instance == CAN3 ) {
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can3_rx_header, can3_rx_data);
		LLCToILC(&can3_rx_header, can3_rx_data);
	}
}
 8000f5a:	e021      	b.n	8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
	} else if ( hcan->Instance == CAN2 ) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d10d      	bne.n	8000f82 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can2_rx_header, can2_rx_data);
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f001 fea9 	bl	8002cc4 <HAL_CAN_GetRxMessage>
		LocalToILC(&can2_rx_header, can2_rx_data);
 8000f72:	4911      	ldr	r1, [pc, #68]	; (8000fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000f74:	4811      	ldr	r0, [pc, #68]	; (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000f76:	f000 f847 	bl	8001008 <LocalToILC>
		can_not_receive_cnt = 0;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
}
 8000f80:	e00e      	b.n	8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
	} else if( hcan->Instance == CAN3 ) {
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d109      	bne.n	8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can3_rx_header, can3_rx_data);
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000f90:	2100      	movs	r1, #0
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f001 fe96 	bl	8002cc4 <HAL_CAN_GetRxMessage>
		LLCToILC(&can3_rx_header, can3_rx_data);
 8000f98:	490b      	ldr	r1, [pc, #44]	; (8000fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000f9a:	480c      	ldr	r0, [pc, #48]	; (8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000f9c:	f000 f954 	bl	8001248 <LLCToILC>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40006400 	.word	0x40006400
 8000fac:	20000230 	.word	0x20000230
 8000fb0:	200001ac 	.word	0x200001ac
 8000fb4:	40006800 	.word	0x40006800
 8000fb8:	200002b8 	.word	0x200002b8
 8000fbc:	200001fc 	.word	0x200001fc
 8000fc0:	200000bd 	.word	0x200000bd
 8000fc4:	40003400 	.word	0x40003400
 8000fc8:	20000090 	.word	0x20000090
 8000fcc:	20000074 	.word	0x20000074

08000fd0 <ClusterToILC>:

void ClusterToILC(CAN_RxHeaderTypeDef *rxheader, uint8_t *rxdata) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	switch(rxheader->ExtId) {
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <ClusterToILC+0x30>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d106      	bne.n	8000ff2 <ClusterToILC+0x22>
	case CAN_ID_AK2BC:
		memcpy(ak2bc_rx_data, rxdata, 8);
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <ClusterToILC+0x34>)
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	6811      	ldr	r1, [r2, #0]
 8000fea:	6852      	ldr	r2, [r2, #4]
 8000fec:	6019      	str	r1, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
		break;
 8000ff0:	bf00      	nop
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	18ff1725 	.word	0x18ff1725
 8001004:	20000068 	.word	0x20000068

08001008 <LocalToILC>:

void LocalToILC(CAN_RxHeaderTypeDef *rxheader, uint8_t *rxdata) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
	switch(rxheader->StdId) {
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f240 1243 	movw	r2, #323	; 0x143
 800101a:	4293      	cmp	r3, r2
 800101c:	f000 80bb 	beq.w	8001196 <LocalToILC+0x18e>
 8001020:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8001024:	f080 80dc 	bcs.w	80011e0 <LocalToILC+0x1d8>
 8001028:	f240 1221 	movw	r2, #289	; 0x121
 800102c:	4293      	cmp	r3, r2
 800102e:	d027      	beq.n	8001080 <LocalToILC+0x78>
 8001030:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8001034:	f080 80d4 	bcs.w	80011e0 <LocalToILC+0x1d8>
 8001038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800103c:	d004      	beq.n	8001048 <LocalToILC+0x40>
 800103e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001042:	f000 80b1 	beq.w	80011a8 <LocalToILC+0x1a0>
		soc_value = rxdata[1];
		charge_mode = rxdata[2];
		car_ready_status = rxdata[3];
		break;
	}
}
 8001046:	e0cb      	b.n	80011e0 <LocalToILC+0x1d8>
		stop_lamp_on = (rxdata[0]&0x10) >> 4;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	111b      	asrs	r3, r3, #4
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b65      	ldr	r3, [pc, #404]	; (80011ec <LocalToILC+0x1e4>)
 8001058:	701a      	strb	r2, [r3, #0]
		head_low_lamp_fail = rxdata[5]&0x01;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3305      	adds	r3, #5
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b62      	ldr	r3, [pc, #392]	; (80011f0 <LocalToILC+0x1e8>)
 8001068:	701a      	strb	r2, [r3, #0]
		stop_lamp_fail = (rxdata[5]&0x02) >> 1;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	3305      	adds	r3, #5
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	105b      	asrs	r3, r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b5e      	ldr	r3, [pc, #376]	; (80011f4 <LocalToILC+0x1ec>)
 800107c:	701a      	strb	r2, [r3, #0]
		break;
 800107e:	e0af      	b.n	80011e0 <LocalToILC+0x1d8>
		tail_lamp_status = rxdata[0]&0x01;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <LocalToILC+0x1f0>)
 800108c:	701a      	strb	r2, [r3, #0]
		hazard_lamp_status = (rxdata[0]&0x02) >> 1;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	105b      	asrs	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b57      	ldr	r3, [pc, #348]	; (80011fc <LocalToILC+0x1f4>)
 800109e:	701a      	strb	r2, [r3, #0]
		turn_lamp_left_status = (rxdata[0]&0x04) >> 2;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	109b      	asrs	r3, r3, #2
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b54      	ldr	r3, [pc, #336]	; (8001200 <LocalToILC+0x1f8>)
 80010b0:	701a      	strb	r2, [r3, #0]
		turn_lamp_right_status = (rxdata[0]&0x08) >> 3;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	10db      	asrs	r3, r3, #3
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b50      	ldr	r3, [pc, #320]	; (8001204 <LocalToILC+0x1fc>)
 80010c2:	701a      	strb	r2, [r3, #0]
		head_lamp_low_status = (rxdata[0]&0x10) >> 4;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	111b      	asrs	r3, r3, #4
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b4d      	ldr	r3, [pc, #308]	; (8001208 <LocalToILC+0x200>)
 80010d4:	701a      	strb	r2, [r3, #0]
		head_lamp_high_status = (rxdata[0]&0x20) >> 5;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	115b      	asrs	r3, r3, #5
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <LocalToILC+0x204>)
 80010e6:	701a      	strb	r2, [r3, #0]
		door_open_status = (rxdata[0]&0x40) >> 6;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	119b      	asrs	r3, r3, #6
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b46      	ldr	r3, [pc, #280]	; (8001210 <LocalToILC+0x208>)
 80010f8:	701a      	strb	r2, [r3, #0]
		charge_door_status = (rxdata[0]&0x80) >> 7;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	09db      	lsrs	r3, r3, #7
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b44      	ldr	r3, [pc, #272]	; (8001214 <LocalToILC+0x20c>)
 8001104:	701a      	strb	r2, [r3, #0]
		rke_unlock_staus = rxdata[1]&0x01;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b41      	ldr	r3, [pc, #260]	; (8001218 <LocalToILC+0x210>)
 8001114:	701a      	strb	r2, [r3, #0]
		rke_lock_staus = (rxdata[1]&0x02) >> 1;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	105b      	asrs	r3, r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <LocalToILC+0x214>)
 8001128:	701a      	strb	r2, [r3, #0]
		turn_left_lamp_fail = rxdata[6]&0x01;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3306      	adds	r3, #6
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <LocalToILC+0x218>)
 8001138:	701a      	strb	r2, [r3, #0]
		turn_right_lamp_fail = (rxdata[6]&0x02) >> 1;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	3306      	adds	r3, #6
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	105b      	asrs	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b36      	ldr	r3, [pc, #216]	; (8001224 <LocalToILC+0x21c>)
 800114c:	701a      	strb	r2, [r3, #0]
		Button_Status.accel_decel_sw = rxdata[7]&0x03;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3307      	adds	r3, #7
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b33      	ldr	r3, [pc, #204]	; (8001228 <LocalToILC+0x220>)
 800115c:	729a      	strb	r2, [r3, #10]
		Button_Status.drvie_mode_sw = (rxdata[7]&0x0C) >> 2;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3307      	adds	r3, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	109b      	asrs	r3, r3, #2
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <LocalToILC+0x220>)
 8001170:	72da      	strb	r2, [r3, #11]
		Button_Status.logging_sw = (rxdata[7]&0x30) >> 4;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	3307      	adds	r3, #7
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	111b      	asrs	r3, r3, #4
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b29      	ldr	r3, [pc, #164]	; (8001228 <LocalToILC+0x220>)
 8001184:	731a      	strb	r2, [r3, #12]
		Button_Status.marker_sw = (rxdata[7]&0xC0) >> 6;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	3307      	adds	r3, #7
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	099b      	lsrs	r3, r3, #6
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <LocalToILC+0x220>)
 8001192:	735a      	strb	r2, [r3, #13]
		break;
 8001194:	e024      	b.n	80011e0 <LocalToILC+0x1d8>
		seatbelt_warning_status = rxdata[0]&0xFF;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	4b24      	ldr	r3, [pc, #144]	; (800122c <LocalToILC+0x224>)
 800119c:	701a      	strb	r2, [r3, #0]
		seat_status = rxdata[1];
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	785a      	ldrb	r2, [r3, #1]
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <LocalToILC+0x228>)
 80011a4:	701a      	strb	r2, [r3, #0]
		break;
 80011a6:	e01b      	b.n	80011e0 <LocalToILC+0x1d8>
		regenerative_brake_value = rxdata[0];
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <LocalToILC+0x22c>)
 80011ae:	701a      	strb	r2, [r3, #0]
		if( regenerative_brake_value == 0 ) {
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <LocalToILC+0x22c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <LocalToILC+0x1b8>
			regenerative_brake_mode = 0;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <LocalToILC+0x230>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e002      	b.n	80011c6 <LocalToILC+0x1be>
			regenerative_brake_mode = 1;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <LocalToILC+0x230>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
		soc_value = rxdata[1];
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	785a      	ldrb	r2, [r3, #1]
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <LocalToILC+0x234>)
 80011cc:	701a      	strb	r2, [r3, #0]
		charge_mode = rxdata[2];
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	789a      	ldrb	r2, [r3, #2]
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <LocalToILC+0x238>)
 80011d4:	701a      	strb	r2, [r3, #0]
		car_ready_status = rxdata[3];
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	78da      	ldrb	r2, [r3, #3]
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <LocalToILC+0x23c>)
 80011dc:	701a      	strb	r2, [r3, #0]
		break;
 80011de:	bf00      	nop
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	20000141 	.word	0x20000141
 80011f0:	20000050 	.word	0x20000050
 80011f4:	200001ed 	.word	0x200001ed
 80011f8:	200001a8 	.word	0x200001a8
 80011fc:	200001de 	.word	0x200001de
 8001200:	2000009a 	.word	0x2000009a
 8001204:	200001cc 	.word	0x200001cc
 8001208:	200001a9 	.word	0x200001a9
 800120c:	20000242 	.word	0x20000242
 8001210:	2000024f 	.word	0x2000024f
 8001214:	2000009d 	.word	0x2000009d
 8001218:	200002b4 	.word	0x200002b4
 800121c:	200001ec 	.word	0x200001ec
 8001220:	20000138 	.word	0x20000138
 8001224:	200000be 	.word	0x200000be
 8001228:	2000029c 	.word	0x2000029c
 800122c:	2000024b 	.word	0x2000024b
 8001230:	200001aa 	.word	0x200001aa
 8001234:	20000246 	.word	0x20000246
 8001238:	200000f0 	.word	0x200000f0
 800123c:	2000022b 	.word	0x2000022b
 8001240:	200001e0 	.word	0x200001e0
 8001244:	200000f2 	.word	0x200000f2

08001248 <LLCToILC>:

void LLCToILC(CAN_RxHeaderTypeDef *rxheader, uint8_t *rxdata) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	switch(rxheader->StdId) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b20      	cmp	r3, #32
 8001258:	d14f      	bne.n	80012fa <LLCToILC+0xb2>
	case CAN_ID_LLCINFO:
		auto_mode = rxdata[1] & 0x01;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <LLCToILC+0xc0>)
 8001268:	701a      	strb	r2, [r3, #0]
		ems_status = (rxdata[1]&0x02) >> 1;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	105b      	asrs	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <LLCToILC+0xc4>)
 800127c:	701a      	strb	r2, [r3, #0]
		steer_fail_warning = (rxdata[1]&0xF8) >> 3;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <LLCToILC+0xc8>)
 800128a:	701a      	strb	r2, [r3, #0]
		vehicle_vel = rxdata[2] | (rxdata[3]<<8);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	3302      	adds	r3, #2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b21a      	sxth	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	3303      	adds	r3, #3
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <LLCToILC+0xcc>)
 80012a4:	801a      	strh	r2, [r3, #0]
		vehicle_dec = rxdata[4] | (rxdata[5]<<8);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	3304      	adds	r3, #4
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3305      	adds	r3, #5
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <LLCToILC+0xd0>)
 80012be:	801a      	strh	r2, [r3, #0]
		brake_stauts = rxdata[6]&0x01;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	3306      	adds	r3, #6
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <LLCToILC+0xd4>)
 80012ce:	701a      	strb	r2, [r3, #0]
		shift_status = (rxdata[6]&0x06) >> 1;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	3306      	adds	r3, #6
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	105b      	asrs	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <LLCToILC+0xd8>)
 80012e2:	701a      	strb	r2, [r3, #0]
		epb_status = (rxdata[6]&0x38) >> 3;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3306      	adds	r3, #6
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	10db      	asrs	r3, r3, #3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <LLCToILC+0xdc>)
 80012f6:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG_TEST		// for simulator test
		soc_value = rxdata[0];
		charge_mode = rxdata[7]&0x03;
		car_ready_status = (rxdata[7]&0x04) >> 2;
#endif
		break;
 80012f8:	bf00      	nop
	}
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200001e1 	.word	0x200001e1
 800130c:	2000022a 	.word	0x2000022a
 8001310:	2000009c 	.word	0x2000009c
 8001314:	200002cc 	.word	0x200002cc
 8001318:	20000248 	.word	0x20000248
 800131c:	200000f1 	.word	0x200000f1
 8001320:	20000034 	.word	0x20000034
 8001324:	20000247 	.word	0x20000247

08001328 <ULCTxMessage>:

void ULCTxMessage(uint32_t id, uint8_t length, uint8_t *data, uint8_t *flag)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	460b      	mov	r3, r1
 8001336:	72fb      	strb	r3, [r7, #11]
	if( *flag ) {
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d023      	beq.n	8001388 <ULCTxMessage+0x60>
		can1_tx_header.ExtId = id;
 8001340:	4a15      	ldr	r2, [pc, #84]	; (8001398 <ULCTxMessage+0x70>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6053      	str	r3, [r2, #4]
		can1_tx_header.RTR = CAN_RTR_DATA;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <ULCTxMessage+0x70>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
		can1_tx_header.IDE = CAN_ID_EXT;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <ULCTxMessage+0x70>)
 800134e:	2204      	movs	r2, #4
 8001350:	609a      	str	r2, [r3, #8]
		can1_tx_header.DLC = length;
 8001352:	7afb      	ldrb	r3, [r7, #11]
 8001354:	4a10      	ldr	r2, [pc, #64]	; (8001398 <ULCTxMessage+0x70>)
 8001356:	6113      	str	r3, [r2, #16]

		can1_tx_mailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8001358:	4810      	ldr	r0, [pc, #64]	; (800139c <ULCTxMessage+0x74>)
 800135a:	f001 fc7e 	bl	8002c5a <HAL_CAN_GetTxMailboxesFreeLevel>
 800135e:	4603      	mov	r3, r0
 8001360:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <ULCTxMessage+0x78>)
 8001362:	6013      	str	r3, [r2, #0]
		HAL_CAN_AddTxMessage(&hcan1, &can1_tx_header, data, &can1_tx_mailbox);
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <ULCTxMessage+0x78>)
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	490b      	ldr	r1, [pc, #44]	; (8001398 <ULCTxMessage+0x70>)
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <ULCTxMessage+0x74>)
 800136c:	f001 fb9a 	bl	8002aa4 <HAL_CAN_AddTxMessage>

		if( can1_tx_header.ExtId == CAN_ID_BC2ICINFO ) {
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <ULCTxMessage+0x70>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <ULCTxMessage+0x7c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d106      	bne.n	8001388 <ULCTxMessage+0x60>
			if( cluster_trip_status_tx != 0) {
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <ULCTxMessage+0x80>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <ULCTxMessage+0x60>
				cluster_trip_status_tx = 0;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <ULCTxMessage+0x80>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	(*flag) = 0;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200000f4 	.word	0x200000f4
 800139c:	20000254 	.word	0x20000254
 80013a0:	20000144 	.word	0x20000144
 80013a4:	18ff1721 	.word	0x18ff1721
 80013a8:	200000ef 	.word	0x200000ef

080013ac <LocalTxMessage>:

void LocalTxMessage(uint32_t id, uint8_t length, uint8_t *data, uint8_t *flag)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	460b      	mov	r3, r1
 80013ba:	72fb      	strb	r3, [r7, #11]
	if( *flag ) {
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d017      	beq.n	80013f4 <LocalTxMessage+0x48>
		can2_tx_header.StdId = id;
 80013c4:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <LocalTxMessage+0x58>)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6013      	str	r3, [r2, #0]
		can2_tx_header.RTR = CAN_RTR_DATA;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <LocalTxMessage+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
		can2_tx_header.IDE = CAN_ID_STD;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <LocalTxMessage+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
		can2_tx_header.DLC = length;
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <LocalTxMessage+0x58>)
 80013da:	6113      	str	r3, [r2, #16]

		can2_tx_mailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <LocalTxMessage+0x5c>)
 80013de:	f001 fc3c 	bl	8002c5a <HAL_CAN_GetTxMailboxesFreeLevel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a09      	ldr	r2, [pc, #36]	; (800140c <LocalTxMessage+0x60>)
 80013e6:	6013      	str	r3, [r2, #0]
		HAL_CAN_AddTxMessage(&hcan2, &can2_tx_header, data, &can2_tx_mailbox);
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <LocalTxMessage+0x60>)
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4905      	ldr	r1, [pc, #20]	; (8001404 <LocalTxMessage+0x58>)
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <LocalTxMessage+0x5c>)
 80013f0:	f001 fb58 	bl	8002aa4 <HAL_CAN_AddTxMessage>
	}

	(*flag) = 0;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000170 	.word	0x20000170
 8001408:	20000148 	.word	0x20000148
 800140c:	2000013c 	.word	0x2000013c

08001410 <LLCTxMessage>:

void LLCTxMessage(uint32_t id, uint8_t length, uint8_t *data, uint8_t *flag)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	460b      	mov	r3, r1
 800141e:	72fb      	strb	r3, [r7, #11]
	if( *flag ) {
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d017      	beq.n	8001458 <LLCTxMessage+0x48>
		can3_tx_header.StdId = id;
 8001428:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <LLCTxMessage+0x58>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6013      	str	r3, [r2, #0]
		can3_tx_header.RTR = CAN_RTR_DATA;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <LLCTxMessage+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
		can3_tx_header.IDE = CAN_ID_STD;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <LLCTxMessage+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
		can3_tx_header.DLC = length;
 800143a:	7afb      	ldrb	r3, [r7, #11]
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <LLCTxMessage+0x58>)
 800143e:	6113      	str	r3, [r2, #16]

		can3_tx_mailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan3);
 8001440:	480a      	ldr	r0, [pc, #40]	; (800146c <LLCTxMessage+0x5c>)
 8001442:	f001 fc0a 	bl	8002c5a <HAL_CAN_GetTxMailboxesFreeLevel>
 8001446:	4603      	mov	r3, r0
 8001448:	4a09      	ldr	r2, [pc, #36]	; (8001470 <LLCTxMessage+0x60>)
 800144a:	6013      	str	r3, [r2, #0]
		HAL_CAN_AddTxMessage(&hcan3, &can3_tx_header, data, &can3_tx_mailbox);
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <LLCTxMessage+0x60>)
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4905      	ldr	r1, [pc, #20]	; (8001468 <LLCTxMessage+0x58>)
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <LLCTxMessage+0x5c>)
 8001454:	f001 fb26 	bl	8002aa4 <HAL_CAN_AddTxMessage>
	}

	(*flag) = 0;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000280 	.word	0x20000280
 800146c:	20000110 	.word	0x20000110
 8001470:	200001c8 	.word	0x200001c8

08001474 <BC2ICDataConv>:

void BC2ICDataConv(uint8_t *txdata, uint8_t *txflag)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	if( epb_status == 2 ) {
 800147e:	4b68      	ldr	r3, [pc, #416]	; (8001620 <BC2ICDataConv+0x1ac>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d103      	bne.n	800148e <BC2ICDataConv+0x1a>
		pbrake_status = 2;
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <BC2ICDataConv+0x1b0>)
 8001488:	2202      	movs	r2, #2
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e00a      	b.n	80014a4 <BC2ICDataConv+0x30>
	} else if( epb_status == 1 ) {
 800148e:	4b64      	ldr	r3, [pc, #400]	; (8001620 <BC2ICDataConv+0x1ac>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d103      	bne.n	800149e <BC2ICDataConv+0x2a>
		pbrake_status = 1;
 8001496:	4b63      	ldr	r3, [pc, #396]	; (8001624 <BC2ICDataConv+0x1b0>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e002      	b.n	80014a4 <BC2ICDataConv+0x30>
	} else {
		pbrake_status = 0;
 800149e:	4b61      	ldr	r3, [pc, #388]	; (8001624 <BC2ICDataConv+0x1b0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
	}

	if( shift_status == 1 ) {
 80014a4:	4b60      	ldr	r3, [pc, #384]	; (8001628 <BC2ICDataConv+0x1b4>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d103      	bne.n	80014b4 <BC2ICDataConv+0x40>
		gear_status = 2;
 80014ac:	4b5f      	ldr	r3, [pc, #380]	; (800162c <BC2ICDataConv+0x1b8>)
 80014ae:	2202      	movs	r2, #2
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	e019      	b.n	80014e8 <BC2ICDataConv+0x74>
	} else if( shift_status == 2 ) {
 80014b4:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <BC2ICDataConv+0x1b4>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d10a      	bne.n	80014d2 <BC2ICDataConv+0x5e>
		gear_status = 3;
 80014bc:	4b5b      	ldr	r3, [pc, #364]	; (800162c <BC2ICDataConv+0x1b8>)
 80014be:	2203      	movs	r2, #3
 80014c0:	701a      	strb	r2, [r3, #0]
		if( epb_status == 1 ) {
 80014c2:	4b57      	ldr	r3, [pc, #348]	; (8001620 <BC2ICDataConv+0x1ac>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d10e      	bne.n	80014e8 <BC2ICDataConv+0x74>
			gear_status = 1;
 80014ca:	4b58      	ldr	r3, [pc, #352]	; (800162c <BC2ICDataConv+0x1b8>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	e00a      	b.n	80014e8 <BC2ICDataConv+0x74>
		}
	} else if( shift_status == 3 ) {
 80014d2:	4b55      	ldr	r3, [pc, #340]	; (8001628 <BC2ICDataConv+0x1b4>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d103      	bne.n	80014e2 <BC2ICDataConv+0x6e>
		gear_status = 4;
 80014da:	4b54      	ldr	r3, [pc, #336]	; (800162c <BC2ICDataConv+0x1b8>)
 80014dc:	2204      	movs	r2, #4
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e002      	b.n	80014e8 <BC2ICDataConv+0x74>
	} else {
		gear_status = 0;
 80014e2:	4b52      	ldr	r3, [pc, #328]	; (800162c <BC2ICDataConv+0x1b8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
	}


	txdata[0] = charge_mode | (bcm_fail_status<<2) | (head_lamp_low_status<<4) | (door_open_status<<6);
 80014e8:	4b51      	ldr	r3, [pc, #324]	; (8001630 <BC2ICDataConv+0x1bc>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	b25a      	sxtb	r2, r3
 80014f0:	4b50      	ldr	r3, [pc, #320]	; (8001634 <BC2ICDataConv+0x1c0>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <BC2ICDataConv+0x1c4>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	b25b      	sxtb	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b25a      	sxtb	r2, r3
 8001506:	4b4d      	ldr	r3, [pc, #308]	; (800163c <BC2ICDataConv+0x1c8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	019b      	lsls	r3, r3, #6
 800150c:	b25b      	sxtb	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2da      	uxtb	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	701a      	strb	r2, [r3, #0]
	txdata[1] = charge_door_status | (regenerative_brake_mode<<2) | (Input_Status.autonomous<<4) | (auto_mode<<5) | (head_lamp_high_status<<6);
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <BC2ICDataConv+0x1cc>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	b25a      	sxtb	r2, r3
 8001520:	4b48      	ldr	r3, [pc, #288]	; (8001644 <BC2ICDataConv+0x1d0>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b25b      	sxtb	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b25a      	sxtb	r2, r3
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <BC2ICDataConv+0x1d4>)
 800152c:	7a1b      	ldrb	r3, [r3, #8]
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	b25b      	sxtb	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b25a      	sxtb	r2, r3
 8001536:	4b45      	ldr	r3, [pc, #276]	; (800164c <BC2ICDataConv+0x1d8>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	015b      	lsls	r3, r3, #5
 800153c:	b25b      	sxtb	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b25a      	sxtb	r2, r3
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <BC2ICDataConv+0x1dc>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	019b      	lsls	r3, r3, #6
 8001548:	b25b      	sxtb	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b25a      	sxtb	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3301      	adds	r3, #1
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
	txdata[2] = seatbelt_warning_status;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3302      	adds	r3, #2
 800155a:	4a3e      	ldr	r2, [pc, #248]	; (8001654 <BC2ICDataConv+0x1e0>)
 800155c:	7812      	ldrb	r2, [r2, #0]
 800155e:	701a      	strb	r2, [r3, #0]
	txdata[3] = turn_lamp_right_status | (turn_lamp_left_status<<2) | (hazard_lamp_status<<6);
 8001560:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <BC2ICDataConv+0x1e4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	b25a      	sxtb	r2, r3
 8001568:	4b3c      	ldr	r3, [pc, #240]	; (800165c <BC2ICDataConv+0x1e8>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b25a      	sxtb	r2, r3
 8001572:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <BC2ICDataConv+0x1ec>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	019b      	lsls	r3, r3, #6
 8001578:	b25b      	sxtb	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b25a      	sxtb	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3303      	adds	r3, #3
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]
	txdata[4] = gear_status | (pbrake_status<<4);
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <BC2ICDataConv+0x1b0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	b25a      	sxtb	r2, r3
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <BC2ICDataConv+0x1b8>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b25b      	sxtb	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b25a      	sxtb	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3304      	adds	r3, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	701a      	strb	r2, [r3, #0]
	txdata[5] = seat_status;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3305      	adds	r3, #5
 80015a4:	4a2f      	ldr	r2, [pc, #188]	; (8001664 <BC2ICDataConv+0x1f0>)
 80015a6:	7812      	ldrb	r2, [r2, #0]
 80015a8:	701a      	strb	r2, [r3, #0]
	txdata[6] = brake_stauts | (tail_lamp_status<<2) | (cluster_trip_status_tx<<4) | (car_ready_status<<6);
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <BC2ICDataConv+0x1f4>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	b25a      	sxtb	r2, r3
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <BC2ICDataConv+0x1f8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b25a      	sxtb	r2, r3
 80015bc:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <BC2ICDataConv+0x1fc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b25a      	sxtb	r2, r3
 80015c8:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <BC2ICDataConv+0x200>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b25a      	sxtb	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3306      	adds	r3, #6
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
	txdata[7] = (Button_Status.accel_decel_sw) | (Button_Status.drvie_mode_sw<<2) | (Button_Status.logging_sw<<4) | (Button_Status.marker_sw<<6);
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <BC2ICDataConv+0x204>)
 80015de:	7a9b      	ldrb	r3, [r3, #10]
 80015e0:	b25a      	sxtb	r2, r3
 80015e2:	4b25      	ldr	r3, [pc, #148]	; (8001678 <BC2ICDataConv+0x204>)
 80015e4:	7adb      	ldrb	r3, [r3, #11]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <BC2ICDataConv+0x204>)
 80015f0:	7b1b      	ldrb	r3, [r3, #12]
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <BC2ICDataConv+0x204>)
 80015fc:	7b5b      	ldrb	r3, [r3, #13]
 80015fe:	019b      	lsls	r3, r3, #6
 8001600:	b25b      	sxtb	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	b25a      	sxtb	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3307      	adds	r3, #7
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]
	//txdata[7] = cluster_trip_push_cnt;
	*txflag = 1;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	20000247 	.word	0x20000247
 8001624:	2000019c 	.word	0x2000019c
 8001628:	20000034 	.word	0x20000034
 800162c:	200000b0 	.word	0x200000b0
 8001630:	20000142 	.word	0x20000142
 8001634:	200001e0 	.word	0x200001e0
 8001638:	200001a9 	.word	0x200001a9
 800163c:	2000024f 	.word	0x2000024f
 8001640:	200000f0 	.word	0x200000f0
 8001644:	2000009d 	.word	0x2000009d
 8001648:	200001d4 	.word	0x200001d4
 800164c:	200001e1 	.word	0x200001e1
 8001650:	20000242 	.word	0x20000242
 8001654:	2000024b 	.word	0x2000024b
 8001658:	2000009a 	.word	0x2000009a
 800165c:	200001cc 	.word	0x200001cc
 8001660:	200001de 	.word	0x200001de
 8001664:	200001aa 	.word	0x200001aa
 8001668:	200001a8 	.word	0x200001a8
 800166c:	200000f1 	.word	0x200000f1
 8001670:	200000ef 	.word	0x200000ef
 8001674:	200000f2 	.word	0x200000f2
 8001678:	2000029c 	.word	0x2000029c

0800167c <DTCDataConv>:

void DTCDataConv(uint8_t *txdata, uint8_t *txflag)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	if( head_low_lamp_fail || stop_lamp_fail || turn_left_lamp_fail || turn_right_lamp_fail ) {
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <DTCDataConv+0xec>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10b      	bne.n	80016a6 <DTCDataConv+0x2a>
 800168e:	4b37      	ldr	r3, [pc, #220]	; (800176c <DTCDataConv+0xf0>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d107      	bne.n	80016a6 <DTCDataConv+0x2a>
 8001696:	4b36      	ldr	r3, [pc, #216]	; (8001770 <DTCDataConv+0xf4>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <DTCDataConv+0x2a>
 800169e:	4b35      	ldr	r3, [pc, #212]	; (8001774 <DTCDataConv+0xf8>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <DTCDataConv+0x32>
		bcm_fail_status = 1;
 80016a6:	4b34      	ldr	r3, [pc, #208]	; (8001778 <DTCDataConv+0xfc>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e002      	b.n	80016b4 <DTCDataConv+0x38>
	} else {
		bcm_fail_status = 0;
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <DTCDataConv+0xfc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
	}

	Steer_Error_Status.system_interal_fail = (steer_fail_warning&0x01) | ((steer_fail_warning&0x04)>>2);
 80016b4:	4b31      	ldr	r3, [pc, #196]	; (800177c <DTCDataConv+0x100>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	109b      	asrs	r3, r3, #2
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <DTCDataConv+0x100>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <DTCDataConv+0x104>)
 80016d0:	701a      	strb	r2, [r3, #0]
	Steer_Error_Status.system_degrade = (steer_fail_warning&0x02) >> 1;
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <DTCDataConv+0x100>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	105b      	asrs	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <DTCDataConv+0x104>)
 80016e2:	705a      	strb	r2, [r3, #1]
	Steer_Error_Status.communication_fail = (steer_fail_warning&0x08) >> 3;
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <DTCDataConv+0x100>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	10db      	asrs	r3, r3, #3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <DTCDataConv+0x104>)
 80016f4:	709a      	strb	r2, [r3, #2]


	if( bcm_fail_status == 1 ) {
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <DTCDataConv+0xfc>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d12d      	bne.n	800175a <DTCDataConv+0xde>
		txdata[0] = (head_low_lamp_fail) | (turn_right_lamp_fail<<1) | (turn_left_lamp_fail<<2) | (stop_lamp_fail<<3);
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <DTCDataConv+0xf8>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	b25a      	sxtb	r2, r3
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <DTCDataConv+0xec>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b25b      	sxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b25a      	sxtb	r2, r3
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <DTCDataConv+0xf4>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	b25b      	sxtb	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b25a      	sxtb	r2, r3
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <DTCDataConv+0xf0>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	b25b      	sxtb	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b25b      	sxtb	r3, r3
 8001728:	b2da      	uxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	701a      	strb	r2, [r3, #0]
		txdata[3] = (Steer_Error_Status.system_interal_fail) | (Steer_Error_Status.system_degrade<<1) | (Steer_Error_Status.communication_fail<<2);
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <DTCDataConv+0x104>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b25a      	sxtb	r2, r3
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <DTCDataConv+0x104>)
 8001736:	785b      	ldrb	r3, [r3, #1]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	b25b      	sxtb	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b25a      	sxtb	r2, r3
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <DTCDataConv+0x104>)
 8001742:	789b      	ldrb	r3, [r3, #2]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	b25b      	sxtb	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b25a      	sxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3303      	adds	r3, #3
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	701a      	strb	r2, [r3, #0]

		*txflag = 1;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
	}
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000050 	.word	0x20000050
 800176c:	200001ed 	.word	0x200001ed
 8001770:	20000138 	.word	0x20000138
 8001774:	200000be 	.word	0x200000be
 8001778:	20000142 	.word	0x20000142
 800177c:	2000009c 	.word	0x2000009c
 8001780:	200002c8 	.word	0x200002c8

08001784 <SM2ICDataConv>:

void SM2ICDataConv(uint8_t *txdata, uint8_t *txflag)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	uint16_t vehicle_vel_i;
	float vehicle_vel_f;

	if( vehicle_vel < 0 ) {
 800178e:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <SM2ICDataConv+0xbc>)
 8001790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001794:	2b00      	cmp	r3, #0
 8001796:	da08      	bge.n	80017aa <SM2ICDataConv+0x26>
		vehicle_vel = vehicle_vel * (-1);
 8001798:	4b29      	ldr	r3, [pc, #164]	; (8001840 <SM2ICDataConv+0xbc>)
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	425b      	negs	r3, r3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <SM2ICDataConv+0xbc>)
 80017a8:	801a      	strh	r2, [r3, #0]
	}

	vehicle_vel_f = (float)vehicle_vel;
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <SM2ICDataConv+0xbc>)
 80017ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b0:	ee07 3a90 	vmov	s15, r3
 80017b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b8:	edc7 7a03 	vstr	s15, [r7, #12]
	vehicle_vel_f = vehicle_vel_f / 10;
 80017bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80017c0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c8:	edc7 7a03 	vstr	s15, [r7, #12]
	vehicle_vel_f = vehicle_vel_f * 256;
 80017cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001844 <SM2ICDataConv+0xc0>
 80017d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d8:	edc7 7a03 	vstr	s15, [r7, #12]
	vehicle_vel_i = (uint16_t)vehicle_vel_f;
 80017dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e4:	ee17 3a90 	vmov	r3, s15
 80017e8:	817b      	strh	r3, [r7, #10]


	// 220623 LHS

	txdata[0] = vehicle_vel_i;
 80017ea:	897b      	ldrh	r3, [r7, #10]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	701a      	strb	r2, [r3, #0]
	txdata[1] = vehicle_vel_i>>8;
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3301      	adds	r3, #1
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	701a      	strb	r2, [r3, #0]


	if(car_ready_status == 1){
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <SM2ICDataConv+0xc4>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d10b      	bne.n	8001820 <SM2ICDataConv+0x9c>
		txdata[0] = vehicle_vel_i;
 8001808:	897b      	ldrh	r3, [r7, #10]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	701a      	strb	r2, [r3, #0]
		txdata[1] = vehicle_vel_i>>8;
 8001810:	897b      	ldrh	r3, [r7, #10]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3301      	adds	r3, #1
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	e006      	b.n	800182e <SM2ICDataConv+0xaa>
	}else{
		txdata[0] = 0;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
		txdata[1] = 0;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3301      	adds	r3, #1
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
	}

	*txflag = 1;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	200002cc 	.word	0x200002cc
 8001844:	43800000 	.word	0x43800000
 8001848:	200000f2 	.word	0x200000f2
 800184c:	00000000 	.word	0x00000000

08001850 <CC2ICDataConv>:

void CC2ICDataConv(uint8_t *txdata, uint8_t *txflag)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
	uint8_t soc_value_i;
	float soc_value_f;
	uint8_t regenerative_brake_value_i;
	float regenerative_brake_value_f;

	soc_value_f = (float)soc_value;
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <CC2ICDataConv+0xb8>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001866:	edc7 7a07 	vstr	s15, [r7, #28]
	soc_value_f = soc_value_f/0.4;
 800186a:	edd7 7a07 	vldr	s15, [r7, #28]
 800186e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001872:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8001900 <CC2ICDataConv+0xb0>
 8001876:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800187a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800187e:	edc7 7a07 	vstr	s15, [r7, #28]
	soc_value_f = (soc_value_f+1);
 8001882:	edd7 7a07 	vldr	s15, [r7, #28]
 8001886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800188a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800188e:	edc7 7a07 	vstr	s15, [r7, #28]
	soc_value_i = (uint8_t)soc_value_f;
 8001892:	edd7 7a07 	vldr	s15, [r7, #28]
 8001896:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800189a:	edc7 7a01 	vstr	s15, [r7, #4]
 800189e:	793b      	ldrb	r3, [r7, #4]
 80018a0:	76fb      	strb	r3, [r7, #27]

	regenerative_brake_value_f = (float)regenerative_brake_value;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <CC2ICDataConv+0xbc>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ae:	edc7 7a05 	vstr	s15, [r7, #20]
	regenerative_brake_value_f = regenerative_brake_value_f/0.4;
 80018b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80018ba:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8001900 <CC2ICDataConv+0xb0>
 80018be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018c6:	edc7 7a05 	vstr	s15, [r7, #20]
	regenerative_brake_value_i = (uint8_t)regenerative_brake_value_f;
 80018ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80018ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80018d6:	793b      	ldrb	r3, [r7, #4]
 80018d8:	74fb      	strb	r3, [r7, #19]

	txdata[0] = soc_value_i;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	7efa      	ldrb	r2, [r7, #27]
 80018de:	701a      	strb	r2, [r3, #0]
	txdata[1] = regenerative_brake_value_i;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	7cfa      	ldrb	r2, [r7, #19]
 80018e6:	701a      	strb	r2, [r3, #0]

	*txflag = 1;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	f3af 8000 	nop.w
 8001900:	9999999a 	.word	0x9999999a
 8001904:	3fd99999 	.word	0x3fd99999
 8001908:	2000022b 	.word	0x2000022b
 800190c:	20000246 	.word	0x20000246

08001910 <BCMDataConv>:

void BCMDataConv(uint8_t *txdata, uint8_t *txflag)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	if( ++alive_cnt > 15 ) {
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <BCMDataConv+0x9c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <BCMDataConv+0x9c>)
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <BCMDataConv+0x9c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b0f      	cmp	r3, #15
 800192c:	d902      	bls.n	8001934 <BCMDataConv+0x24>
		alive_cnt = 0;
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <BCMDataConv+0x9c>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
	}

	bcm_checksum = (alive_cnt + Input_Status.autonomous + auto_mode + ems_status) & 0xF;
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <BCMDataConv+0xa0>)
 8001936:	7a1a      	ldrb	r2, [r3, #8]
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <BCMDataConv+0x9c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4413      	add	r3, r2
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <BCMDataConv+0xa4>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4413      	add	r3, r2
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <BCMDataConv+0xa8>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4413      	add	r3, r2
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <BCMDataConv+0xac>)
 8001958:	701a      	strb	r2, [r3, #0]

	txdata[0] = bcm_checksum | (alive_cnt<<4);
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <BCMDataConv+0x9c>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	b25a      	sxtb	r2, r3
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <BCMDataConv+0xac>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b25b      	sxtb	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b25b      	sxtb	r3, r3
 800196c:	b2da      	uxtb	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	701a      	strb	r2, [r3, #0]
	txdata[1] = Input_Status.autonomous | (ems_status<<1) | (auto_mode<<2);
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <BCMDataConv+0xa0>)
 8001974:	7a1b      	ldrb	r3, [r3, #8]
 8001976:	b25a      	sxtb	r2, r3
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <BCMDataConv+0xa8>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	b25b      	sxtb	r3, r3
 8001980:	4313      	orrs	r3, r2
 8001982:	b25a      	sxtb	r2, r3
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <BCMDataConv+0xa4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	b25b      	sxtb	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	b25a      	sxtb	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3301      	adds	r3, #1
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]

	*txflag = 1;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000140 	.word	0x20000140
 80019b0:	200001d4 	.word	0x200001d4
 80019b4:	200001e1 	.word	0x200001e1
 80019b8:	2000022a 	.word	0x2000022a
 80019bc:	200000d9 	.word	0x200000d9

080019c0 <AkitCmdConv>:

void AkitCmdConv(uint8_t *txdata, uint8_t *rxdata, uint8_t *txflag)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
	memcpy(txdata, rxdata, 8);
 80019cc:	2208      	movs	r2, #8
 80019ce:	68b9      	ldr	r1, [r7, #8]
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f003 fe65 	bl	80056a0 <memcpy>

	*txflag = 1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019e8:	f3bf 8f4f 	dsb	sy
}
 80019ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <__NVIC_SystemReset+0x24>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019f6:	4904      	ldr	r1, [pc, #16]	; (8001a08 <__NVIC_SystemReset+0x24>)
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <__NVIC_SystemReset+0x28>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019fe:	f3bf 8f4f 	dsb	sy
}
 8001a02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <__NVIC_SystemReset+0x20>
 8001a08:	e000ed00 	.word	0xe000ed00
 8001a0c:	05fa0004 	.word	0x05fa0004

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a14:	f000 fd9d 	bl	8002552 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a18:	f000 f82a 	bl	8001a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1c:	f000 fa72 	bl	8001f04 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001a20:	f000 fa3a 	bl	8001e98 <MX_TIM6_Init>
  MX_RTC_Init();
 8001a24:	f000 fa08 	bl	8001e38 <MX_RTC_Init>
  MX_CAN1_Init();
 8001a28:	f000 f8b8 	bl	8001b9c <MX_CAN1_Init>
  MX_CAN3_Init();
 8001a2c:	f000 f992 	bl	8001d54 <MX_CAN3_Init>
  MX_CAN2_Init();
 8001a30:	f000 f922 	bl	8001c78 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001a34:	480b      	ldr	r0, [pc, #44]	; (8001a64 <main+0x54>)
 8001a36:	f003 fb03 	bl	8005040 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, RESET);		// if MCU is normal mode, turn-off led
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	480a      	ldr	r0, [pc, #40]	; (8001a68 <main+0x58>)
 8001a40:	f001 ff7e 	bl	8003940 <HAL_GPIO_WritePin>
	  if( stop_enable == 1 ) {
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <main+0x5c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d1f6      	bne.n	8001a3a <main+0x2a>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, SET);	// if MCU is stop mode, turn-on led
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <main+0x58>)
 8001a52:	f001 ff75 	bl	8003940 <HAL_GPIO_WritePin>
		  stop_enable = 0;
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <main+0x5c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
		  StopModeStart();								// Stop Mode start
 8001a5c:	f000 faf6 	bl	800204c <StopModeStart>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, RESET);		// if MCU is normal mode, turn-off led
 8001a60:	e7eb      	b.n	8001a3a <main+0x2a>
 8001a62:	bf00      	nop
 8001a64:	20000350 	.word	0x20000350
 8001a68:	40021800 	.word	0x40021800
 8001a6c:	20000099 	.word	0x20000099

08001a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0b8      	sub	sp, #224	; 0xe0
 8001a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a7a:	2234      	movs	r2, #52	; 0x34
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fe1c 	bl	80056bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	2290      	movs	r2, #144	; 0x90
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 fe0d 	bl	80056bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <SystemClock_Config+0x124>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a3b      	ldr	r2, [pc, #236]	; (8001b94 <SystemClock_Config+0x124>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <SystemClock_Config+0x124>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <SystemClock_Config+0x128>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ac2:	4a35      	ldr	r2, [pc, #212]	; (8001b98 <SystemClock_Config+0x128>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b33      	ldr	r3, [pc, #204]	; (8001b98 <SystemClock_Config+0x128>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001adc:	2301      	movs	r3, #1
 8001ade:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aee:	2302      	movs	r3, #2
 8001af0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001afa:	2308      	movs	r3, #8
 8001afc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 108;
 8001b00:	236c      	movs	r3, #108	; 0x6c
 8001b02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 ffb6 	bl	8003a88 <HAL_RCC_OscConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001b22:	f000 fabd 	bl	80020a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b26:	f001 ff5f 	bl	80039e8 <HAL_PWREx_EnableOverDrive>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b30:	f000 fab6 	bl	80020a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b34:	230f      	movs	r3, #15
 8001b36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b5a:	2103      	movs	r1, #3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 fa41 	bl	8003fe4 <HAL_RCC_ClockConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001b68:	f000 fa9a 	bl	80020a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b74:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fbe4 	bl	8004348 <HAL_RCCEx_PeriphCLKConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8001b86:	f000 fa8b 	bl	80020a0 <Error_Handler>
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	37e0      	adds	r7, #224	; 0xe0
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000

08001b9c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001ba2:	4a33      	ldr	r2, [pc, #204]	; (8001c70 <MX_CAN1_Init+0xd4>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001ba6:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001ba8:	2206      	movs	r2, #6
 8001baa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001bba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001bbe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001bc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bc6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001bce:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bec:	481f      	ldr	r0, [pc, #124]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001bee:	f000 fd2d 	bl	800264c <HAL_CAN_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001bf8:	f000 fa52 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  can1_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <MX_CAN1_Init+0xd8>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	61da      	str	r2, [r3, #28]
  can1_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_CAN1_Init+0xd8>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  can1_filter.FilterIdHigh = 0x000;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_CAN1_Init+0xd8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
  can1_filter.FilterIdLow = 0x000;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_CAN1_Init+0xd8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
  can1_filter.FilterMaskIdHigh = 0x000;
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <MX_CAN1_Init+0xd8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  can1_filter.FilterMaskIdLow = 0x000;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_CAN1_Init+0xd8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
  can1_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <MX_CAN1_Init+0xd8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  can1_filter.FilterBank = 0;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <MX_CAN1_Init+0xd8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  can1_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_CAN1_Init+0xd8>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	621a      	str	r2, [r3, #32]

  if( HAL_CAN_ConfigFilter(&hcan1, &can1_filter) != HAL_OK ) {
 8001c32:	4910      	ldr	r1, [pc, #64]	; (8001c74 <MX_CAN1_Init+0xd8>)
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001c36:	f000 fe05 	bl	8002844 <HAL_CAN_ConfigFilter>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_CAN1_Init+0xa8>
	  Error_Handler();
 8001c40:	f000 fa2e 	bl	80020a0 <Error_Handler>
  }
  if( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK ) {
 8001c44:	2102      	movs	r1, #2
 8001c46:	4809      	ldr	r0, [pc, #36]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001c48:	f001 f94e 	bl	8002ee8 <HAL_CAN_ActivateNotification>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_CAN1_Init+0xba>
	  Error_Handler();
 8001c52:	f000 fa25 	bl	80020a0 <Error_Handler>
  }
  if( HAL_CAN_Start(&hcan1) != HAL_OK ) {
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_CAN1_Init+0xd0>)
 8001c58:	f000 fee0 	bl	8002a1c <HAL_CAN_Start>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_CAN1_Init+0xca>
	  Error_Handler();
 8001c62:	f000 fa1d 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000254 	.word	0x20000254
 8001c70:	40006400 	.word	0x40006400
 8001c74:	20000304 	.word	0x20000304

08001c78 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001c7c:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001c7e:	4a33      	ldr	r2, [pc, #204]	; (8001d4c <MX_CAN2_Init+0xd4>)
 8001c80:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8001c82:	4b31      	ldr	r3, [pc, #196]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001c84:	2206      	movs	r2, #6
 8001c86:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001c88:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001c94:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001c96:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c9a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001c9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ca2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001ca4:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8001caa:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001cbc:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001cc8:	481f      	ldr	r0, [pc, #124]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001cca:	f000 fcbf 	bl	800264c <HAL_CAN_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001cd4:	f000 f9e4 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  can2_filter.FilterScale = CAN_FILTERSCALE_16BIT;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <MX_CAN2_Init+0xd8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
  can2_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <MX_CAN2_Init+0xd8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  can2_filter.FilterIdHigh = 0x000 << 5;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_CAN2_Init+0xd8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
  can2_filter.FilterIdLow = 0x000 << 5;
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <MX_CAN2_Init+0xd8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	605a      	str	r2, [r3, #4]
  can2_filter.FilterMaskIdHigh = 0x000 << 5;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MX_CAN2_Init+0xd8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  can2_filter.FilterMaskIdLow = 0x000 << 5;
 8001cf6:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <MX_CAN2_Init+0xd8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	60da      	str	r2, [r3, #12]
  can2_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_CAN2_Init+0xd8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  can2_filter.FilterBank = 0;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <MX_CAN2_Init+0xd8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	615a      	str	r2, [r3, #20]
  can2_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_CAN2_Init+0xd8>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	621a      	str	r2, [r3, #32]

  if( HAL_CAN_ConfigFilter(&hcan2, &can2_filter) != HAL_OK ) {
 8001d0e:	4910      	ldr	r1, [pc, #64]	; (8001d50 <MX_CAN2_Init+0xd8>)
 8001d10:	480d      	ldr	r0, [pc, #52]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001d12:	f000 fd97 	bl	8002844 <HAL_CAN_ConfigFilter>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_CAN2_Init+0xa8>
	  Error_Handler();
 8001d1c:	f000 f9c0 	bl	80020a0 <Error_Handler>
  }
  if( HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK ) {
 8001d20:	2102      	movs	r1, #2
 8001d22:	4809      	ldr	r0, [pc, #36]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001d24:	f001 f8e0 	bl	8002ee8 <HAL_CAN_ActivateNotification>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_CAN2_Init+0xba>
	  Error_Handler();
 8001d2e:	f000 f9b7 	bl	80020a0 <Error_Handler>
  }
  if( HAL_CAN_Start(&hcan2) != HAL_OK ) {
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_CAN2_Init+0xd0>)
 8001d34:	f000 fe72 	bl	8002a1c <HAL_CAN_Start>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_CAN2_Init+0xca>
	  Error_Handler();
 8001d3e:	f000 f9af 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE END CAN2_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000148 	.word	0x20000148
 8001d4c:	40006800 	.word	0x40006800
 8001d50:	2000039c 	.word	0x2000039c

08001d54 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001d58:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d5a:	4a35      	ldr	r2, [pc, #212]	; (8001e30 <MX_CAN3_Init+0xdc>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001d5e:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d60:	2206      	movs	r2, #6
 8001d62:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001d64:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d6a:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001d70:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d72:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d76:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d7e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = ENABLE;
 8001d86:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001d98:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001d9e:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001da4:	4821      	ldr	r0, [pc, #132]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001da6:	f000 fc51 	bl	800264c <HAL_CAN_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001db0:	f000 f976 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
  can3_filter.FilterScale = CAN_FILTERSCALE_16BIT;
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <MX_CAN3_Init+0xe0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
  can3_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <MX_CAN3_Init+0xe0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  can3_filter.FilterIdHigh = 0x020<<5;
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <MX_CAN3_Init+0xe0>)
 8001dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc6:	601a      	str	r2, [r3, #0]
  can3_filter.FilterIdLow = 0x020<<5;
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <MX_CAN3_Init+0xe0>)
 8001dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dce:	605a      	str	r2, [r3, #4]
  can3_filter.FilterMaskIdHigh = 0x7FF<<5;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <MX_CAN3_Init+0xe0>)
 8001dd2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001dd6:	609a      	str	r2, [r3, #8]
  can3_filter.FilterMaskIdLow = 0x7FF<<5;
 8001dd8:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <MX_CAN3_Init+0xe0>)
 8001dda:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001dde:	60da      	str	r2, [r3, #12]
  can3_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <MX_CAN3_Init+0xe0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  can3_filter.FilterBank = 0;
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <MX_CAN3_Init+0xe0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	615a      	str	r2, [r3, #20]
  can3_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_CAN3_Init+0xe0>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	621a      	str	r2, [r3, #32]

  if( HAL_CAN_ConfigFilter(&hcan3, &can3_filter) != HAL_OK ) {
 8001df2:	4910      	ldr	r1, [pc, #64]	; (8001e34 <MX_CAN3_Init+0xe0>)
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001df6:	f000 fd25 	bl	8002844 <HAL_CAN_ConfigFilter>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_CAN3_Init+0xb0>
	  Error_Handler();
 8001e00:	f000 f94e 	bl	80020a0 <Error_Handler>
  }
  if( HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK ) {
 8001e04:	2102      	movs	r1, #2
 8001e06:	4809      	ldr	r0, [pc, #36]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001e08:	f001 f86e 	bl	8002ee8 <HAL_CAN_ActivateNotification>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_CAN3_Init+0xc2>
	  Error_Handler();
 8001e12:	f000 f945 	bl	80020a0 <Error_Handler>
  }
  if( HAL_CAN_Start(&hcan3) != HAL_OK ) {
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_CAN3_Init+0xd8>)
 8001e18:	f000 fe00 	bl	8002a1c <HAL_CAN_Start>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_CAN3_Init+0xd2>
	  Error_Handler();
 8001e22:	f000 f93d 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE END CAN3_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000110 	.word	0x20000110
 8001e30:	40003400 	.word	0x40003400
 8001e34:	200002dc 	.word	0x200002dc

08001e38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_RTC_Init+0x58>)
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <MX_RTC_Init+0x5c>)
 8001e40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <MX_RTC_Init+0x58>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_RTC_Init+0x58>)
 8001e4a:	227f      	movs	r2, #127	; 0x7f
 8001e4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_RTC_Init+0x58>)
 8001e50:	22ff      	movs	r2, #255	; 0xff
 8001e52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_RTC_Init+0x58>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <MX_RTC_Init+0x58>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_RTC_Init+0x58>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e66:	480a      	ldr	r0, [pc, #40]	; (8001e90 <MX_RTC_Init+0x58>)
 8001e68:	f002 fe5e 	bl	8004b28 <HAL_RTC_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001e72:	f000 f915 	bl	80020a0 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_RTC_Init+0x58>)
 8001e7c:	f002 ff3a 	bl	8004cf4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001e86:	f000 f90b 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000330 	.word	0x20000330
 8001e94:	40002800 	.word	0x40002800

08001e98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <MX_TIM6_Init+0x64>)
 8001eaa:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <MX_TIM6_Init+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1080-1;
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <MX_TIM6_Init+0x64>)
 8001eb0:	f240 4237 	movw	r2, #1079	; 0x437
 8001eb4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_TIM6_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <MX_TIM6_Init+0x64>)
 8001ebe:	22c7      	movs	r2, #199	; 0xc7
 8001ec0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_TIM6_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <MX_TIM6_Init+0x64>)
 8001eca:	f003 f861 	bl	8004f90 <HAL_TIM_Base_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ed4:	f000 f8e4 	bl	80020a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_TIM6_Init+0x64>)
 8001ee6:	f003 fb0b 	bl	8005500 <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ef0:	f000 f8d6 	bl	80020a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000350 	.word	0x20000350
 8001f00:	40001000 	.word	0x40001000

08001f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	; 0x30
 8001f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a46      	ldr	r2, [pc, #280]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f20:	f043 0310 	orr.w	r3, r3, #16
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f32:	4b41      	ldr	r3, [pc, #260]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a40      	ldr	r2, [pc, #256]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a3a      	ldr	r2, [pc, #232]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b38      	ldr	r3, [pc, #224]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	4b35      	ldr	r3, [pc, #212]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a34      	ldr	r2, [pc, #208]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b32      	ldr	r3, [pc, #200]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a2e      	ldr	r2, [pc, #184]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b2c      	ldr	r3, [pc, #176]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	4b29      	ldr	r3, [pc, #164]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a28      	ldr	r2, [pc, #160]	; (8002038 <MX_GPIO_Init+0x134>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <MX_GPIO_Init+0x134>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001faa:	2200      	movs	r2, #0
 8001fac:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001fb0:	4822      	ldr	r0, [pc, #136]	; (800203c <MX_GPIO_Init+0x138>)
 8001fb2:	f001 fcc5 	bl	8003940 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4821      	ldr	r0, [pc, #132]	; (8002040 <MX_GPIO_Init+0x13c>)
 8001fbc:	f001 fcc0 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001fc0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001fc4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4818      	ldr	r0, [pc, #96]	; (800203c <MX_GPIO_Init+0x138>)
 8001fda:	f001 faed 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001fde:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001fe2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4814      	ldr	r0, [pc, #80]	; (8002044 <MX_GPIO_Init+0x140>)
 8001ff4:	f001 fae0 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_GPIO_Init+0x144>)
 8002000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <MX_GPIO_Init+0x140>)
 800200e:	f001 fad3 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002012:	2301      	movs	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	4619      	mov	r1, r3
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <MX_GPIO_Init+0x13c>)
 800202a:	f001 fac5 	bl	80035b8 <HAL_GPIO_Init>

}
 800202e:	bf00      	nop
 8002030:	3730      	adds	r7, #48	; 0x30
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	40021000 	.word	0x40021000
 8002040:	40021800 	.word	0x40021800
 8002044:	40021400 	.word	0x40021400
 8002048:	10120000 	.word	0x10120000

0800204c <StopModeStart>:

/* USER CODE BEGIN 4 */
void StopModeStart()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 8002052:	f000 fadb 	bl	800260c <HAL_SuspendTick>

	__HAL_RCC_PWR_CLK_ENABLE();
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <StopModeStart+0x4c>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <StopModeStart+0x4c>)
 800205c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <StopModeStart+0x4c>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
	   32768 / 16 = 2048Hz
	   1Hz = 0.00048828125 sec
	   10sec = 20,480Hz (0x5000)
	 */
//	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xF000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xCC, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800206e:	2200      	movs	r2, #0
 8002070:	21cc      	movs	r1, #204	; 0xcc
 8002072:	480a      	ldr	r0, [pc, #40]	; (800209c <StopModeStart+0x50>)
 8002074:	f002 fe3e 	bl	8004cf4 <HAL_RTCEx_SetWakeUpTimer_IT>

	HAL_PWR_EnterSTOPMode(0, PWR_SLEEPENTRY_WFE);
 8002078:	2102      	movs	r1, #2
 800207a:	2000      	movs	r0, #0
 800207c:	f001 fc7a 	bl	8003974 <HAL_PWR_EnterSTOPMode>

	HAL_ResumeTick();
 8002080:	f000 fad4 	bl	800262c <HAL_ResumeTick>

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002084:	4805      	ldr	r0, [pc, #20]	; (800209c <StopModeStart+0x50>)
 8002086:	f002 fefd 	bl	8004e84 <HAL_RTCEx_DeactivateWakeUpTimer>

	SystemClock_Config();
 800208a:	f7ff fcf1 	bl	8001a70 <SystemClock_Config>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	20000330 	.word	0x20000330

080020a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020a4:	b672      	cpsid	i
}
 80020a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  NVIC_SystemReset();
 80020a8:	f7ff fc9c 	bl	80019e4 <__NVIC_SystemReset>

080020ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_MspInit+0x44>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <HAL_MspInit+0x44>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_MspInit+0x44>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_MspInit+0x44>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	4a08      	ldr	r2, [pc, #32]	; (80020f0 <HAL_MspInit+0x44>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d4:	6453      	str	r3, [r2, #68]	; 0x44
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_MspInit+0x44>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800

080020f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b092      	sub	sp, #72	; 0x48
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a97      	ldr	r2, [pc, #604]	; (8002370 <HAL_CAN_MspInit+0x27c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d139      	bne.n	800218a <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002116:	4b97      	ldr	r3, [pc, #604]	; (8002374 <HAL_CAN_MspInit+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	4a95      	ldr	r2, [pc, #596]	; (8002374 <HAL_CAN_MspInit+0x280>)
 800211e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002120:	4b94      	ldr	r3, [pc, #592]	; (8002374 <HAL_CAN_MspInit+0x280>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d10b      	bne.n	8002140 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002128:	4b93      	ldr	r3, [pc, #588]	; (8002378 <HAL_CAN_MspInit+0x284>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	4a92      	ldr	r2, [pc, #584]	; (8002378 <HAL_CAN_MspInit+0x284>)
 800212e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002132:	6413      	str	r3, [r2, #64]	; 0x40
 8002134:	4b90      	ldr	r3, [pc, #576]	; (8002378 <HAL_CAN_MspInit+0x284>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002140:	4b8d      	ldr	r3, [pc, #564]	; (8002378 <HAL_CAN_MspInit+0x284>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4a8c      	ldr	r2, [pc, #560]	; (8002378 <HAL_CAN_MspInit+0x284>)
 8002146:	f043 0308 	orr.w	r3, r3, #8
 800214a:	6313      	str	r3, [r2, #48]	; 0x30
 800214c:	4b8a      	ldr	r3, [pc, #552]	; (8002378 <HAL_CAN_MspInit+0x284>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002158:	2303      	movs	r3, #3
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002168:	2309      	movs	r3, #9
 800216a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800216c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002170:	4619      	mov	r1, r3
 8002172:	4882      	ldr	r0, [pc, #520]	; (800237c <HAL_CAN_MspInit+0x288>)
 8002174:	f001 fa20 	bl	80035b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2014      	movs	r0, #20
 800217e:	f001 f9e4 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002182:	2014      	movs	r0, #20
 8002184:	f001 f9fd 	bl	8003582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 8002188:	e0ed      	b.n	8002366 <HAL_CAN_MspInit+0x272>
  else if(hcan->Instance==CAN2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a7c      	ldr	r2, [pc, #496]	; (8002380 <HAL_CAN_MspInit+0x28c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d163      	bne.n	800225c <HAL_CAN_MspInit+0x168>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8002194:	4b7b      	ldr	r3, [pc, #492]	; (8002384 <HAL_CAN_MspInit+0x290>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	4a7a      	ldr	r2, [pc, #488]	; (8002384 <HAL_CAN_MspInit+0x290>)
 800219c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 800219e:	4b79      	ldr	r3, [pc, #484]	; (8002384 <HAL_CAN_MspInit+0x290>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10b      	bne.n	80021be <HAL_CAN_MspInit+0xca>
      __HAL_RCC_CAN3_CLK_ENABLE();
 80021a6:	4b74      	ldr	r3, [pc, #464]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a73      	ldr	r2, [pc, #460]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80021ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b71      	ldr	r3, [pc, #452]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80021bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 80021be:	4b72      	ldr	r3, [pc, #456]	; (8002388 <HAL_CAN_MspInit+0x294>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3301      	adds	r3, #1
 80021c4:	4a70      	ldr	r2, [pc, #448]	; (8002388 <HAL_CAN_MspInit+0x294>)
 80021c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 80021c8:	4b6f      	ldr	r3, [pc, #444]	; (8002388 <HAL_CAN_MspInit+0x294>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d10b      	bne.n	80021e8 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN2_CLK_ENABLE();
 80021d0:	4b69      	ldr	r3, [pc, #420]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	4a68      	ldr	r2, [pc, #416]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80021d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021da:	6413      	str	r3, [r2, #64]	; 0x40
 80021dc:	4b66      	ldr	r3, [pc, #408]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 80021e8:	4b62      	ldr	r3, [pc, #392]	; (8002374 <HAL_CAN_MspInit+0x280>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a61      	ldr	r2, [pc, #388]	; (8002374 <HAL_CAN_MspInit+0x280>)
 80021f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80021f2:	4b60      	ldr	r3, [pc, #384]	; (8002374 <HAL_CAN_MspInit+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10b      	bne.n	8002212 <HAL_CAN_MspInit+0x11e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80021fa:	4b5f      	ldr	r3, [pc, #380]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a5e      	ldr	r2, [pc, #376]	; (8002378 <HAL_CAN_MspInit+0x284>)
 8002200:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b5c      	ldr	r3, [pc, #368]	; (8002378 <HAL_CAN_MspInit+0x284>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	623b      	str	r3, [r7, #32]
 8002210:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_CAN_MspInit+0x284>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a58      	ldr	r2, [pc, #352]	; (8002378 <HAL_CAN_MspInit+0x284>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b56      	ldr	r3, [pc, #344]	; (8002378 <HAL_CAN_MspInit+0x284>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800222a:	2360      	movs	r3, #96	; 0x60
 800222c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800223a:	2309      	movs	r3, #9
 800223c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002242:	4619      	mov	r1, r3
 8002244:	4851      	ldr	r0, [pc, #324]	; (800238c <HAL_CAN_MspInit+0x298>)
 8002246:	f001 f9b7 	bl	80035b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2040      	movs	r0, #64	; 0x40
 8002250:	f001 f97b 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002254:	2040      	movs	r0, #64	; 0x40
 8002256:	f001 f994 	bl	8003582 <HAL_NVIC_EnableIRQ>
}
 800225a:	e084      	b.n	8002366 <HAL_CAN_MspInit+0x272>
  else if(hcan->Instance==CAN3)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a4b      	ldr	r2, [pc, #300]	; (8002390 <HAL_CAN_MspInit+0x29c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d17f      	bne.n	8002366 <HAL_CAN_MspInit+0x272>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8002266:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_CAN_MspInit+0x290>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	4a45      	ldr	r2, [pc, #276]	; (8002384 <HAL_CAN_MspInit+0x290>)
 800226e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8002270:	4b44      	ldr	r3, [pc, #272]	; (8002384 <HAL_CAN_MspInit+0x290>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10b      	bne.n	8002290 <HAL_CAN_MspInit+0x19c>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8002278:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <HAL_CAN_MspInit+0x284>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	4a3e      	ldr	r2, [pc, #248]	; (8002378 <HAL_CAN_MspInit+0x284>)
 800227e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002282:	6413      	str	r3, [r2, #64]	; 0x40
 8002284:	4b3c      	ldr	r3, [pc, #240]	; (8002378 <HAL_CAN_MspInit+0x284>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 8002290:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_CAN_MspInit+0x294>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a3c      	ldr	r2, [pc, #240]	; (8002388 <HAL_CAN_MspInit+0x294>)
 8002298:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_CAN_MspInit+0x294>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d10b      	bne.n	80022ba <HAL_CAN_MspInit+0x1c6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 80022a2:	4b35      	ldr	r3, [pc, #212]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a34      	ldr	r2, [pc, #208]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80022a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b32      	ldr	r3, [pc, #200]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80022ba:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <HAL_CAN_MspInit+0x280>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3301      	adds	r3, #1
 80022c0:	4a2c      	ldr	r2, [pc, #176]	; (8002374 <HAL_CAN_MspInit+0x280>)
 80022c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_CAN_MspInit+0x280>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d10b      	bne.n	80022e4 <HAL_CAN_MspInit+0x1f0>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80022cc:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4a29      	ldr	r2, [pc, #164]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80022d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022d6:	6413      	str	r3, [r2, #64]	; 0x40
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6313      	str	r3, [r2, #48]	; 0x30
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <HAL_CAN_MspInit+0x284>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <HAL_CAN_MspInit+0x284>)
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	6313      	str	r3, [r2, #48]	; 0x30
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_CAN_MspInit+0x284>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8002326:	230b      	movs	r3, #11
 8002328:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800232e:	4619      	mov	r1, r3
 8002330:	4818      	ldr	r0, [pc, #96]	; (8002394 <HAL_CAN_MspInit+0x2a0>)
 8002332:	f001 f941 	bl	80035b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002336:	2310      	movs	r3, #16
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8002346:	230b      	movs	r3, #11
 8002348:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800234e:	4619      	mov	r1, r3
 8002350:	480e      	ldr	r0, [pc, #56]	; (800238c <HAL_CAN_MspInit+0x298>)
 8002352:	f001 f931 	bl	80035b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	2069      	movs	r0, #105	; 0x69
 800235c:	f001 f8f5 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8002360:	2069      	movs	r0, #105	; 0x69
 8002362:	f001 f90e 	bl	8003582 <HAL_NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3748      	adds	r7, #72	; 0x48
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40006400 	.word	0x40006400
 8002374:	20000028 	.word	0x20000028
 8002378:	40023800 	.word	0x40023800
 800237c:	40020c00 	.word	0x40020c00
 8002380:	40006800 	.word	0x40006800
 8002384:	2000002c 	.word	0x2000002c
 8002388:	20000030 	.word	0x20000030
 800238c:	40020400 	.word	0x40020400
 8002390:	40003400 	.word	0x40003400
 8002394:	40020000 	.word	0x40020000

08002398 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_RTC_MspInit+0x38>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10d      	bne.n	80023c6 <HAL_RTC_MspInit+0x2e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_RTC_MspInit+0x3c>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <HAL_RTC_MspInit+0x3c>)
 80023b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	2003      	movs	r0, #3
 80023bc:	f001 f8c5 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80023c0:	2003      	movs	r0, #3
 80023c2:	f001 f8de 	bl	8003582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40002800 	.word	0x40002800
 80023d4:	40023800 	.word	0x40023800

080023d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0d      	ldr	r2, [pc, #52]	; (800241c <HAL_TIM_Base_MspInit+0x44>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d113      	bne.n	8002412 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_TIM_Base_MspInit+0x48>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_TIM_Base_MspInit+0x48>)
 80023f0:	f043 0310 	orr.w	r3, r3, #16
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_TIM_Base_MspInit+0x48>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2101      	movs	r1, #1
 8002406:	2036      	movs	r0, #54	; 0x36
 8002408:	f001 f89f 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800240c:	2036      	movs	r0, #54	; 0x36
 800240e:	f001 f8b8 	bl	8003582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40001000 	.word	0x40001000
 8002420:	40023800 	.word	0x40023800

08002424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <NMI_Handler+0x4>

0800242a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <HardFault_Handler+0x4>

08002430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <MemManage_Handler+0x4>

08002436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243a:	e7fe      	b.n	800243a <BusFault_Handler+0x4>

0800243c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <UsageFault_Handler+0x4>

08002442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002470:	f000 f8ac 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}

08002478 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <RTC_WKUP_IRQHandler+0x10>)
 800247e:	f002 fd59 	bl	8004f34 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000330 	.word	0x20000330

0800248c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <CAN1_RX0_IRQHandler+0x10>)
 8002492:	f000 fd4f 	bl	8002f34 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000254 	.word	0x20000254

080024a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <TIM6_DAC_IRQHandler+0x10>)
 80024a6:	f002 fe43 	bl	8005130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000350 	.word	0x20000350

080024b4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <CAN2_RX0_IRQHandler+0x10>)
 80024ba:	f000 fd3b 	bl	8002f34 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000148 	.word	0x20000148

080024c8 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <CAN3_RX0_IRQHandler+0x10>)
 80024ce:	f000 fd31 	bl	8002f34 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000110 	.word	0x20000110

080024dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <SystemInit+0x20>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <SystemInit+0x20>)
 80024e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002504:	480d      	ldr	r0, [pc, #52]	; (800253c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002506:	490e      	ldr	r1, [pc, #56]	; (8002540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002508:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800250c:	e002      	b.n	8002514 <LoopCopyDataInit>

0800250e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002512:	3304      	adds	r3, #4

08002514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002518:	d3f9      	bcc.n	800250e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251a:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800251c:	4c0b      	ldr	r4, [pc, #44]	; (800254c <LoopFillZerobss+0x26>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002520:	e001      	b.n	8002526 <LoopFillZerobss>

08002522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002524:	3204      	adds	r2, #4

08002526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002528:	d3fb      	bcc.n	8002522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800252a:	f7ff ffd7 	bl	80024dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800252e:	f003 f893 	bl	8005658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002532:	f7ff fa6d 	bl	8001a10 <main>
  bx  lr    
 8002536:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002538:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800253c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002540:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002544:	08005704 	.word	0x08005704
  ldr r2, =_sbss
 8002548:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800254c:	200003c8 	.word	0x200003c8

08002550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002550:	e7fe      	b.n	8002550 <ADC_IRQHandler>

08002552 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002556:	2003      	movs	r0, #3
 8002558:	f000 ffec 	bl	8003534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800255c:	2000      	movs	r0, #0
 800255e:	f000 f805 	bl	800256c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002562:	f7ff fda3 	bl	80020ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_InitTick+0x54>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_InitTick+0x58>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002582:	fbb3 f3f1 	udiv	r3, r3, r1
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f001 f807 	bl	800359e <HAL_SYSTICK_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00e      	b.n	80025b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d80a      	bhi.n	80025b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a0:	2200      	movs	r2, #0
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	f000 ffcf 	bl	800354a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025ac:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <HAL_InitTick+0x5c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000008 	.word	0x20000008
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x20>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_IncTick+0x24>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000008 	.word	0x20000008
 80025f0:	200003c4 	.word	0x200003c4

080025f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_GetTick+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	200003c4 	.word	0x200003c4

0800260c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_SuspendTick+0x1c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <HAL_SuspendTick+0x1c>)
 8002616:	f023 0302 	bic.w	r3, r3, #2
 800261a:	6013      	str	r3, [r2, #0]
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000e010 	.word	0xe000e010

0800262c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_ResumeTick+0x1c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_ResumeTick+0x1c>)
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0ed      	b.n	800283a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff fd42 	bl	80020f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0202 	bic.w	r2, r2, #2
 800267e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002680:	f7ff ffb8 	bl	80025f4 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002686:	e012      	b.n	80026ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002688:	f7ff ffb4 	bl	80025f4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b0a      	cmp	r3, #10
 8002694:	d90b      	bls.n	80026ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2205      	movs	r2, #5
 80026a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0c5      	b.n	800283a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e5      	bne.n	8002688 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026cc:	f7ff ff92 	bl	80025f4 <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026d2:	e012      	b.n	80026fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026d4:	f7ff ff8e 	bl	80025f4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b0a      	cmp	r3, #10
 80026e0:	d90b      	bls.n	80026fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2205      	movs	r2, #5
 80026f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e09f      	b.n	800283a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0e5      	beq.n	80026d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7e1b      	ldrb	r3, [r3, #24]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d108      	bne.n	8002722 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e007      	b.n	8002732 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7e5b      	ldrb	r3, [r3, #25]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d108      	bne.n	800274c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e007      	b.n	800275c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7e9b      	ldrb	r3, [r3, #26]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d108      	bne.n	8002776 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e007      	b.n	8002786 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0220 	bic.w	r2, r2, #32
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7edb      	ldrb	r3, [r3, #27]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d108      	bne.n	80027a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0210 	bic.w	r2, r2, #16
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e007      	b.n	80027b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0210 	orr.w	r2, r2, #16
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7f1b      	ldrb	r3, [r3, #28]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d108      	bne.n	80027ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0208 	orr.w	r2, r2, #8
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e007      	b.n	80027da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0208 	bic.w	r2, r2, #8
 80027d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7f5b      	ldrb	r3, [r3, #29]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d108      	bne.n	80027f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0204 	orr.w	r2, r2, #4
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e007      	b.n	8002804 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0204 	bic.w	r2, r2, #4
 8002802:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	ea42 0103 	orr.w	r1, r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d003      	beq.n	800286a <HAL_CAN_ConfigFilter+0x26>
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	2b02      	cmp	r3, #2
 8002866:	f040 80c7 	bne.w	80029f8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a69      	ldr	r2, [pc, #420]	; (8002a14 <HAL_CAN_ConfigFilter+0x1d0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d001      	beq.n	8002878 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002874:	4b68      	ldr	r3, [pc, #416]	; (8002a18 <HAL_CAN_ConfigFilter+0x1d4>)
 8002876:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	4a63      	ldr	r2, [pc, #396]	; (8002a18 <HAL_CAN_ConfigFilter+0x1d4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d111      	bne.n	80028b4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002896:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	431a      	orrs	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2201      	movs	r2, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d123      	bne.n	8002926 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	401a      	ands	r2, r3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002900:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3248      	adds	r2, #72	; 0x48
 8002906:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800291a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800291c:	6979      	ldr	r1, [r7, #20]
 800291e:	3348      	adds	r3, #72	; 0x48
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d122      	bne.n	8002974 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	431a      	orrs	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800294e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3248      	adds	r2, #72	; 0x48
 8002954:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002968:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800296a:	6979      	ldr	r1, [r7, #20]
 800296c:	3348      	adds	r3, #72	; 0x48
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d109      	bne.n	8002990 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800298e:	e007      	b.n	80029a0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	431a      	orrs	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80029ba:	e007      	b.n	80029cc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	431a      	orrs	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029ea:	f023 0201 	bic.w	r2, r3, #1
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e006      	b.n	8002a06 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
  }
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40003400 	.word	0x40003400
 8002a18:	40006400 	.word	0x40006400

08002a1c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d12e      	bne.n	8002a8e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a48:	f7ff fdd4 	bl	80025f4 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a4e:	e012      	b.n	8002a76 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a50:	f7ff fdd0 	bl	80025f4 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b0a      	cmp	r3, #10
 8002a5c:	d90b      	bls.n	8002a76 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2205      	movs	r2, #5
 8002a6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e012      	b.n	8002a9c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e5      	bne.n	8002a50 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e006      	b.n	8002a9c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ac2:	7ffb      	ldrb	r3, [r7, #31]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d003      	beq.n	8002ad0 <HAL_CAN_AddTxMessage+0x2c>
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	f040 80b8 	bne.w	8002c40 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80a0 	beq.w	8002c30 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	0e1b      	lsrs	r3, r3, #24
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d907      	bls.n	8002b10 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e09e      	b.n	8002c4e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b10:	2201      	movs	r2, #1
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	409a      	lsls	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b2c:	68f9      	ldr	r1, [r7, #12]
 8002b2e:	6809      	ldr	r1, [r1, #0]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3318      	adds	r3, #24
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	440b      	add	r3, r1
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e00f      	b.n	8002b5e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b48:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b52:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3318      	adds	r3, #24
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	440b      	add	r3, r1
 8002b5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	3318      	adds	r3, #24
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3304      	adds	r3, #4
 8002b70:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	7d1b      	ldrb	r3, [r3, #20]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d111      	bne.n	8002b9e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	3318      	adds	r3, #24
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6811      	ldr	r1, [r2, #0]
 8002b8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3318      	adds	r3, #24
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	440b      	add	r3, r1
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3307      	adds	r3, #7
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	061a      	lsls	r2, r3, #24
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3306      	adds	r3, #6
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3305      	adds	r3, #5
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	3204      	adds	r2, #4
 8002bbe:	7812      	ldrb	r2, [r2, #0]
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	6811      	ldr	r1, [r2, #0]
 8002bc6:	ea43 0200 	orr.w	r2, r3, r0
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	440b      	add	r3, r1
 8002bd0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002bd4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3303      	adds	r3, #3
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	061a      	lsls	r2, r3, #24
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3302      	adds	r3, #2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3301      	adds	r3, #1
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	6811      	ldr	r1, [r2, #0]
 8002bfc:	ea43 0200 	orr.w	r2, r3, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3318      	adds	r3, #24
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4413      	add	r3, r2
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	6811      	ldr	r1, [r2, #0]
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3318      	adds	r3, #24
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	440b      	add	r3, r1
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e00e      	b.n	8002c4e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e006      	b.n	8002c4e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d002      	beq.n	8002c7a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002c74:	7afb      	ldrb	r3, [r7, #11]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d11d      	bne.n	8002cb6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d003      	beq.n	8002ce8 <HAL_CAN_GetRxMessage+0x24>
 8002ce0:	7dfb      	ldrb	r3, [r7, #23]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	f040 80f3 	bne.w	8002ece <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10e      	bne.n	8002d0c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0e7      	b.n	8002edc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0d8      	b.n	8002edc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	331b      	adds	r3, #27
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	4413      	add	r3, r2
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0204 	and.w	r2, r3, #4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10c      	bne.n	8002d62 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	331b      	adds	r3, #27
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	4413      	add	r3, r2
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	0d5b      	lsrs	r3, r3, #21
 8002d58:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e00b      	b.n	8002d7a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	331b      	adds	r3, #27
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	4413      	add	r3, r2
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	08db      	lsrs	r3, r3, #3
 8002d72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	331b      	adds	r3, #27
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	4413      	add	r3, r2
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0202 	and.w	r2, r3, #2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	331b      	adds	r3, #27
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 020f 	and.w	r2, r3, #15
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	331b      	adds	r3, #27
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	4413      	add	r3, r2
 8002db4:	3304      	adds	r3, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	331b      	adds	r3, #27
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	4413      	add	r3, r2
 8002dcc:	3304      	adds	r3, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0c1b      	lsrs	r3, r3, #16
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	0a1a      	lsrs	r2, r3, #8
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0c1a      	lsrs	r2, r3, #16
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	0e1a      	lsrs	r2, r3, #24
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	3303      	adds	r3, #3
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	0a1a      	lsrs	r2, r3, #8
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	3305      	adds	r3, #5
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0c1a      	lsrs	r2, r3, #16
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	3306      	adds	r3, #6
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0e1a      	lsrs	r2, r3, #24
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	3307      	adds	r3, #7
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d108      	bne.n	8002eba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0220 	orr.w	r2, r2, #32
 8002eb6:	60da      	str	r2, [r3, #12]
 8002eb8:	e007      	b.n	8002eca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0220 	orr.w	r2, r2, #32
 8002ec8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e006      	b.n	8002edc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
  }
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d002      	beq.n	8002f06 <HAL_CAN_ActivateNotification+0x1e>
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d109      	bne.n	8002f1a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6959      	ldr	r1, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e006      	b.n	8002f28 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d07c      	beq.n	8003074 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d023      	beq.n	8002fcc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f983 	bl	80032a2 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f9c:	e016      	b.n	8002fcc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	e00c      	b.n	8002fcc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	e002      	b.n	8002fcc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f989 	bl	80032de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d024      	beq.n	8003020 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fde:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f963 	bl	80032b6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002ff0:	e016      	b.n	8003020 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d004      	beq.n	8003006 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	e00c      	b.n	8003020 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
 8003018:	e002      	b.n	8003020 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f969 	bl	80032f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d024      	beq.n	8003074 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003032:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f943 	bl	80032ca <HAL_CAN_TxMailbox2CompleteCallback>
 8003044:	e016      	b.n	8003074 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	e00c      	b.n	8003074 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
 800306c:	e002      	b.n	8003074 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f949 	bl	8003306 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00c      	beq.n	8003098 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800308e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2210      	movs	r2, #16
 8003096:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2208      	movs	r2, #8
 80030b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f930 	bl	800331a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd ff2e 	bl	8000f34 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2210      	movs	r2, #16
 80030fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d006      	beq.n	800311e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2208      	movs	r2, #8
 8003116:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f912 	bl	8003342 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f8f9 	bl	800332e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2210      	movs	r2, #16
 8003156:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f8fc 	bl	8003356 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00b      	beq.n	8003180 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d006      	beq.n	8003180 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2208      	movs	r2, #8
 8003178:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f8f5 	bl	800336a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d07b      	beq.n	8003282 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d072      	beq.n	800327a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	f043 0302 	orr.w	r3, r3, #2
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	f043 0304 	orr.w	r3, r3, #4
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d043      	beq.n	800327a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d03e      	beq.n	800327a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003202:	2b60      	cmp	r3, #96	; 0x60
 8003204:	d02b      	beq.n	800325e <HAL_CAN_IRQHandler+0x32a>
 8003206:	2b60      	cmp	r3, #96	; 0x60
 8003208:	d82e      	bhi.n	8003268 <HAL_CAN_IRQHandler+0x334>
 800320a:	2b50      	cmp	r3, #80	; 0x50
 800320c:	d022      	beq.n	8003254 <HAL_CAN_IRQHandler+0x320>
 800320e:	2b50      	cmp	r3, #80	; 0x50
 8003210:	d82a      	bhi.n	8003268 <HAL_CAN_IRQHandler+0x334>
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d019      	beq.n	800324a <HAL_CAN_IRQHandler+0x316>
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d826      	bhi.n	8003268 <HAL_CAN_IRQHandler+0x334>
 800321a:	2b30      	cmp	r3, #48	; 0x30
 800321c:	d010      	beq.n	8003240 <HAL_CAN_IRQHandler+0x30c>
 800321e:	2b30      	cmp	r3, #48	; 0x30
 8003220:	d822      	bhi.n	8003268 <HAL_CAN_IRQHandler+0x334>
 8003222:	2b10      	cmp	r3, #16
 8003224:	d002      	beq.n	800322c <HAL_CAN_IRQHandler+0x2f8>
 8003226:	2b20      	cmp	r3, #32
 8003228:	d005      	beq.n	8003236 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800322a:	e01d      	b.n	8003268 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	f043 0308 	orr.w	r3, r3, #8
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003234:	e019      	b.n	800326a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	f043 0310 	orr.w	r3, r3, #16
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800323e:	e014      	b.n	800326a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	f043 0320 	orr.w	r3, r3, #32
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003248:	e00f      	b.n	800326a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003252:	e00a      	b.n	800326a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800325c:	e005      	b.n	800326a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003266:	e000      	b.n	800326a <HAL_CAN_IRQHandler+0x336>
            break;
 8003268:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003278:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2204      	movs	r2, #4
 8003280:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f872 	bl	800337e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800329a:	bf00      	nop
 800329c:	3728      	adds	r7, #40	; 0x28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <__NVIC_SetPriorityGrouping>:
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <__NVIC_SetPriorityGrouping+0x40>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c2:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <__NVIC_SetPriorityGrouping+0x40>)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	60d3      	str	r3, [r2, #12]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00
 80033d8:	05fa0000 	.word	0x05fa0000

080033dc <__NVIC_GetPriorityGrouping>:
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_EnableIRQ>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0b      	blt.n	8003422 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4907      	ldr	r1, [pc, #28]	; (8003430 <__NVIC_EnableIRQ+0x38>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e100 	.word	0xe000e100

08003434 <__NVIC_SetPriority>:
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db0a      	blt.n	800345e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	490c      	ldr	r1, [pc, #48]	; (8003480 <__NVIC_SetPriority+0x4c>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	440b      	add	r3, r1
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800345c:	e00a      	b.n	8003474 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4908      	ldr	r1, [pc, #32]	; (8003484 <__NVIC_SetPriority+0x50>)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3b04      	subs	r3, #4
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	440b      	add	r3, r1
 8003472:	761a      	strb	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <NVIC_EncodePriority>:
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f1c3 0307 	rsb	r3, r3, #7
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf28      	it	cs
 80034a6:	2304      	movcs	r3, #4
 80034a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d902      	bls.n	80034b8 <NVIC_EncodePriority+0x30>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3b03      	subs	r3, #3
 80034b6:	e000      	b.n	80034ba <NVIC_EncodePriority+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43d9      	mvns	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	4313      	orrs	r3, r2
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003500:	d301      	bcc.n	8003506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003502:	2301      	movs	r3, #1
 8003504:	e00f      	b.n	8003526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <SysTick_Config+0x40>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800350e:	210f      	movs	r1, #15
 8003510:	f04f 30ff 	mov.w	r0, #4294967295
 8003514:	f7ff ff8e 	bl	8003434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <SysTick_Config+0x40>)
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351e:	4b04      	ldr	r3, [pc, #16]	; (8003530 <SysTick_Config+0x40>)
 8003520:	2207      	movs	r2, #7
 8003522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	e000e010 	.word	0xe000e010

08003534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff29 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	4603      	mov	r3, r0
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800355c:	f7ff ff3e 	bl	80033dc <__NVIC_GetPriorityGrouping>
 8003560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	6978      	ldr	r0, [r7, #20]
 8003568:	f7ff ff8e 	bl	8003488 <NVIC_EncodePriority>
 800356c:	4602      	mov	r2, r0
 800356e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff5d 	bl	8003434 <__NVIC_SetPriority>
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff31 	bl	80033f8 <__NVIC_EnableIRQ>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ffa2 	bl	80034f0 <SysTick_Config>
 80035ac:	4603      	mov	r3, r0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b089      	sub	sp, #36	; 0x24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	e175      	b.n	80038c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035d8:	2201      	movs	r2, #1
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	f040 8164 	bne.w	80038be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d00b      	beq.n	8003616 <HAL_GPIO_Init+0x5e>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d007      	beq.n	8003616 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800360a:	2b11      	cmp	r3, #17
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b12      	cmp	r3, #18
 8003614:	d130      	bne.n	8003678 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	2203      	movs	r2, #3
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800364c:	2201      	movs	r2, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 0201 	and.w	r2, r3, #1
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x100>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b12      	cmp	r3, #18
 80036b6:	d123      	bne.n	8003700 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	220f      	movs	r2, #15
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	08da      	lsrs	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3208      	adds	r2, #8
 80036fa:	69b9      	ldr	r1, [r7, #24]
 80036fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80be 	beq.w	80038be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003742:	4b66      	ldr	r3, [pc, #408]	; (80038dc <HAL_GPIO_Init+0x324>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	4a65      	ldr	r2, [pc, #404]	; (80038dc <HAL_GPIO_Init+0x324>)
 8003748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800374c:	6453      	str	r3, [r2, #68]	; 0x44
 800374e:	4b63      	ldr	r3, [pc, #396]	; (80038dc <HAL_GPIO_Init+0x324>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800375a:	4a61      	ldr	r2, [pc, #388]	; (80038e0 <HAL_GPIO_Init+0x328>)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	089b      	lsrs	r3, r3, #2
 8003760:	3302      	adds	r3, #2
 8003762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	220f      	movs	r2, #15
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a58      	ldr	r2, [pc, #352]	; (80038e4 <HAL_GPIO_Init+0x32c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d037      	beq.n	80037f6 <HAL_GPIO_Init+0x23e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a57      	ldr	r2, [pc, #348]	; (80038e8 <HAL_GPIO_Init+0x330>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d031      	beq.n	80037f2 <HAL_GPIO_Init+0x23a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a56      	ldr	r2, [pc, #344]	; (80038ec <HAL_GPIO_Init+0x334>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d02b      	beq.n	80037ee <HAL_GPIO_Init+0x236>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a55      	ldr	r2, [pc, #340]	; (80038f0 <HAL_GPIO_Init+0x338>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d025      	beq.n	80037ea <HAL_GPIO_Init+0x232>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a54      	ldr	r2, [pc, #336]	; (80038f4 <HAL_GPIO_Init+0x33c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01f      	beq.n	80037e6 <HAL_GPIO_Init+0x22e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a53      	ldr	r2, [pc, #332]	; (80038f8 <HAL_GPIO_Init+0x340>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d019      	beq.n	80037e2 <HAL_GPIO_Init+0x22a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_GPIO_Init+0x344>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_GPIO_Init+0x226>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a51      	ldr	r2, [pc, #324]	; (8003900 <HAL_GPIO_Init+0x348>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00d      	beq.n	80037da <HAL_GPIO_Init+0x222>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a50      	ldr	r2, [pc, #320]	; (8003904 <HAL_GPIO_Init+0x34c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <HAL_GPIO_Init+0x21e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a4f      	ldr	r2, [pc, #316]	; (8003908 <HAL_GPIO_Init+0x350>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <HAL_GPIO_Init+0x21a>
 80037ce:	2309      	movs	r3, #9
 80037d0:	e012      	b.n	80037f8 <HAL_GPIO_Init+0x240>
 80037d2:	230a      	movs	r3, #10
 80037d4:	e010      	b.n	80037f8 <HAL_GPIO_Init+0x240>
 80037d6:	2308      	movs	r3, #8
 80037d8:	e00e      	b.n	80037f8 <HAL_GPIO_Init+0x240>
 80037da:	2307      	movs	r3, #7
 80037dc:	e00c      	b.n	80037f8 <HAL_GPIO_Init+0x240>
 80037de:	2306      	movs	r3, #6
 80037e0:	e00a      	b.n	80037f8 <HAL_GPIO_Init+0x240>
 80037e2:	2305      	movs	r3, #5
 80037e4:	e008      	b.n	80037f8 <HAL_GPIO_Init+0x240>
 80037e6:	2304      	movs	r3, #4
 80037e8:	e006      	b.n	80037f8 <HAL_GPIO_Init+0x240>
 80037ea:	2303      	movs	r3, #3
 80037ec:	e004      	b.n	80037f8 <HAL_GPIO_Init+0x240>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e002      	b.n	80037f8 <HAL_GPIO_Init+0x240>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_GPIO_Init+0x240>
 80037f6:	2300      	movs	r3, #0
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	f002 0203 	and.w	r2, r2, #3
 80037fe:	0092      	lsls	r2, r2, #2
 8003800:	4093      	lsls	r3, r2
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003808:	4935      	ldr	r1, [pc, #212]	; (80038e0 <HAL_GPIO_Init+0x328>)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	089b      	lsrs	r3, r3, #2
 800380e:	3302      	adds	r3, #2
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003816:	4b3d      	ldr	r3, [pc, #244]	; (800390c <HAL_GPIO_Init+0x354>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800383a:	4a34      	ldr	r2, [pc, #208]	; (800390c <HAL_GPIO_Init+0x354>)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003840:	4b32      	ldr	r3, [pc, #200]	; (800390c <HAL_GPIO_Init+0x354>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003864:	4a29      	ldr	r2, [pc, #164]	; (800390c <HAL_GPIO_Init+0x354>)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800386a:	4b28      	ldr	r3, [pc, #160]	; (800390c <HAL_GPIO_Init+0x354>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800388e:	4a1f      	ldr	r2, [pc, #124]	; (800390c <HAL_GPIO_Init+0x354>)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003894:	4b1d      	ldr	r3, [pc, #116]	; (800390c <HAL_GPIO_Init+0x354>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <HAL_GPIO_Init+0x354>)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3301      	adds	r3, #1
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	2b0f      	cmp	r3, #15
 80038c8:	f67f ae86 	bls.w	80035d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	3724      	adds	r7, #36	; 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40013800 	.word	0x40013800
 80038e4:	40020000 	.word	0x40020000
 80038e8:	40020400 	.word	0x40020400
 80038ec:	40020800 	.word	0x40020800
 80038f0:	40020c00 	.word	0x40020c00
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40021400 	.word	0x40021400
 80038fc:	40021800 	.word	0x40021800
 8003900:	40021c00 	.word	0x40021c00
 8003904:	40022000 	.word	0x40022000
 8003908:	40022400 	.word	0x40022400
 800390c:	40013c00 	.word	0x40013c00

08003910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	887b      	ldrh	r3, [r7, #2]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e001      	b.n	8003932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
 800394c:	4613      	mov	r3, r2
 800394e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003950:	787b      	ldrb	r3, [r7, #1]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800395c:	e003      	b.n	8003966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	041a      	lsls	r2, r3, #16
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	619a      	str	r2, [r3, #24]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR1;
 8003984:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR1_PDDS | PWR_CR1_LPDS);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f023 0303 	bic.w	r3, r3, #3
 8003990:	60fb      	str	r3, [r7, #12]

  /* Set LPDS, MRLVDS and LPLVDS bits according to Regulator value */
  tmpreg |= Regulator;
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR1 = tmpreg;
 800399a:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <HAL_PWR_EnterSTOPMode+0x6c>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80039a0:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <HAL_PWR_EnterSTOPMode+0x70>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	4a0f      	ldr	r2, [pc, #60]	; (80039e4 <HAL_PWR_EnterSTOPMode+0x70>)
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80039ac:	f3bf 8f4f 	dsb	sy
}
 80039b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039b2:	f3bf 8f6f 	isb	sy
}
 80039b6:	bf00      	nop
  /* Ensure that all instructions done before entering STOP mode */
  __DSB();
  __ISB();

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_PWR_EnterSTOPMode+0x4e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80039be:	bf30      	wfi
 80039c0:	e002      	b.n	80039c8 <HAL_PWR_EnterSTOPMode+0x54>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80039c2:	bf40      	sev
    __WFE();
 80039c4:	bf20      	wfe
    __WFE();
 80039c6:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_PWR_EnterSTOPMode+0x70>)
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	4a05      	ldr	r2, [pc, #20]	; (80039e4 <HAL_PWR_EnterSTOPMode+0x70>)
 80039ce:	f023 0304 	bic.w	r3, r3, #4
 80039d2:	6113      	str	r3, [r2, #16]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	40007000 	.word	0x40007000
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	4a22      	ldr	r2, [pc, #136]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6413      	str	r3, [r2, #64]	; 0x40
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a16:	f7fe fded 	bl	80025f4 <HAL_GetTick>
 8003a1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a1c:	e009      	b.n	8003a32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a1e:	f7fe fde9 	bl	80025f4 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a2c:	d901      	bls.n	8003a32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e022      	b.n	8003a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3e:	d1ee      	bne.n	8003a1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a40:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a4c:	f7fe fdd2 	bl	80025f4 <HAL_GetTick>
 8003a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a52:	e009      	b.n	8003a68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a54:	f7fe fdce 	bl	80025f4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a62:	d901      	bls.n	8003a68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e007      	b.n	8003a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a74:	d1ee      	bne.n	8003a54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40007000 	.word	0x40007000

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a90:	2300      	movs	r3, #0
 8003a92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e29b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8087 	beq.w	8003bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aac:	4b96      	ldr	r3, [pc, #600]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab8:	4b93      	ldr	r3, [pc, #588]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d112      	bne.n	8003aea <HAL_RCC_OscConfig+0x62>
 8003ac4:	4b90      	ldr	r3, [pc, #576]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad0:	d10b      	bne.n	8003aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d06c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x130>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d168      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e275      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d106      	bne.n	8003b02 <HAL_RCC_OscConfig+0x7a>
 8003af4:	4b84      	ldr	r3, [pc, #528]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a83      	ldr	r2, [pc, #524]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e02e      	b.n	8003b60 <HAL_RCC_OscConfig+0xd8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x9c>
 8003b0a:	4b7f      	ldr	r3, [pc, #508]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7e      	ldr	r2, [pc, #504]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b7c      	ldr	r3, [pc, #496]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7b      	ldr	r2, [pc, #492]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e01d      	b.n	8003b60 <HAL_RCC_OscConfig+0xd8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0xc0>
 8003b2e:	4b76      	ldr	r3, [pc, #472]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a75      	ldr	r2, [pc, #468]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b73      	ldr	r3, [pc, #460]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a72      	ldr	r2, [pc, #456]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e00b      	b.n	8003b60 <HAL_RCC_OscConfig+0xd8>
 8003b48:	4b6f      	ldr	r3, [pc, #444]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6e      	ldr	r2, [pc, #440]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b6c      	ldr	r3, [pc, #432]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a6b      	ldr	r2, [pc, #428]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe fd44 	bl	80025f4 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe fd40 	bl	80025f4 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e229      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0xe8>
 8003b8e:	e014      	b.n	8003bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fe fd30 	bl	80025f4 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe fd2c 	bl	80025f4 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e215      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	4b57      	ldr	r3, [pc, #348]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x110>
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d069      	beq.n	8003c9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bc6:	4b50      	ldr	r3, [pc, #320]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd2:	4b4d      	ldr	r3, [pc, #308]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d11c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x190>
 8003bde:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d116      	bne.n	8003c18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_RCC_OscConfig+0x17a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e1e9      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	493d      	ldr	r1, [pc, #244]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	e040      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d023      	beq.n	8003c68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c20:	4b39      	ldr	r3, [pc, #228]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fe fce2 	bl	80025f4 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c34:	f7fe fcde 	bl	80025f4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e1c7      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c46:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c52:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4929      	ldr	r1, [pc, #164]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
 8003c66:	e018      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c68:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe fcbe 	bl	80025f4 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7fe fcba 	bl	80025f4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1a3      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d038      	beq.n	8003d18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d019      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb2:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fe fc9b 	bl	80025f4 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fe fc97 	bl	80025f4 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e180      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x23a>
 8003ce0:	e01a      	b.n	8003d18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce2:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce6:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe fc81 	bl	80025f4 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7fe fc7d 	bl	80025f4 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d903      	bls.n	8003d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e166      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
 8003d08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0c:	4b92      	ldr	r3, [pc, #584]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1ee      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80a4 	beq.w	8003e6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d26:	4b8c      	ldr	r3, [pc, #560]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10d      	bne.n	8003d4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4b89      	ldr	r3, [pc, #548]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	4a88      	ldr	r2, [pc, #544]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3e:	4b86      	ldr	r3, [pc, #536]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	4b83      	ldr	r3, [pc, #524]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d118      	bne.n	8003d8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d5a:	4b80      	ldr	r3, [pc, #512]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7f      	ldr	r2, [pc, #508]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d66:	f7fe fc45 	bl	80025f4 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6e:	f7fe fc41 	bl	80025f4 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b64      	cmp	r3, #100	; 0x64
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e12a      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	4b76      	ldr	r3, [pc, #472]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x31a>
 8003d94:	4b70      	ldr	r3, [pc, #448]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	4a6f      	ldr	r2, [pc, #444]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003da0:	e02d      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x33c>
 8003daa:	4b6b      	ldr	r3, [pc, #428]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	4a6a      	ldr	r2, [pc, #424]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70
 8003db6:	4b68      	ldr	r3, [pc, #416]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a67      	ldr	r2, [pc, #412]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	e01c      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d10c      	bne.n	8003de6 <HAL_RCC_OscConfig+0x35e>
 8003dcc:	4b62      	ldr	r3, [pc, #392]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4a61      	ldr	r2, [pc, #388]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dd2:	f043 0304 	orr.w	r3, r3, #4
 8003dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd8:	4b5f      	ldr	r3, [pc, #380]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a5e      	ldr	r2, [pc, #376]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	e00b      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
 8003de6:	4b5c      	ldr	r3, [pc, #368]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	4a5b      	ldr	r2, [pc, #364]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	6713      	str	r3, [r2, #112]	; 0x70
 8003df2:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003df8:	f023 0304 	bic.w	r3, r3, #4
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d015      	beq.n	8003e32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7fe fbf5 	bl	80025f4 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7fe fbf1 	bl	80025f4 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e0d8      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e24:	4b4c      	ldr	r3, [pc, #304]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ee      	beq.n	8003e0e <HAL_RCC_OscConfig+0x386>
 8003e30:	e014      	b.n	8003e5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fe fbdf 	bl	80025f4 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fe fbdb 	bl	80025f4 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0c2      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e50:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d105      	bne.n	8003e6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e62:	4b3d      	ldr	r3, [pc, #244]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a3c      	ldr	r2, [pc, #240]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80ae 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e78:	4b37      	ldr	r3, [pc, #220]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d06d      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d14b      	bne.n	8003f24 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8c:	4b32      	ldr	r3, [pc, #200]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a31      	ldr	r2, [pc, #196]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe fbac 	bl	80025f4 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fe fba8 	bl	80025f4 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e091      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	019b      	lsls	r3, r3, #6
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	491b      	ldr	r1, [pc, #108]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe fb7a 	bl	80025f4 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fe fb76 	bl	80025f4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e05f      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x47c>
 8003f22:	e057      	b.n	8003fd4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe fb60 	bl	80025f4 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fe fb5c 	bl	80025f4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e045      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4b0>
 8003f56:	e03d      	b.n	8003fd4 <HAL_RCC_OscConfig+0x54c>
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f60:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <HAL_RCC_OscConfig+0x558>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d030      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d129      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d122      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d119      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d10f      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800

08003fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0d0      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b6a      	ldr	r3, [pc, #424]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d910      	bls.n	800402c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 020f 	bic.w	r2, r3, #15
 8004012:	4965      	ldr	r1, [pc, #404]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b63      	ldr	r3, [pc, #396]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0b8      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004044:	4b59      	ldr	r3, [pc, #356]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800404a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800404e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800405c:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4a52      	ldr	r2, [pc, #328]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004066:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004068:	4b50      	ldr	r3, [pc, #320]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	494d      	ldr	r1, [pc, #308]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d040      	beq.n	8004108 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d115      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e07f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e073      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b6:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e06b      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c6:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f023 0203 	bic.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4936      	ldr	r1, [pc, #216]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fe fa8c 	bl	80025f4 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e0:	f7fe fa88 	bl	80025f4 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e053      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 020c 	and.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	429a      	cmp	r2, r3
 8004106:	d1eb      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d210      	bcs.n	8004138 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 020f 	bic.w	r2, r3, #15
 800411e:	4922      	ldr	r1, [pc, #136]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e032      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4916      	ldr	r1, [pc, #88]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	490e      	ldr	r1, [pc, #56]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004176:	f000 f821 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 800417a:	4602      	mov	r2, r0
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	490a      	ldr	r1, [pc, #40]	; (80041b0 <HAL_RCC_ClockConfig+0x1cc>)
 8004188:	5ccb      	ldrb	r3, [r1, r3]
 800418a:	fa22 f303 	lsr.w	r3, r2, r3
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1d4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe f9e8 	bl	800256c <HAL_InitTick>

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023c00 	.word	0x40023c00
 80041ac:	40023800 	.word	0x40023800
 80041b0:	080056e4 	.word	0x080056e4
 80041b4:	20000000 	.word	0x20000000
 80041b8:	20000004 	.word	0x20000004

080041bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c0:	b090      	sub	sp, #64	; 0x40
 80041c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	637b      	str	r3, [r7, #52]	; 0x34
 80041c8:	2300      	movs	r3, #0
 80041ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041cc:	2300      	movs	r3, #0
 80041ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d4:	4b59      	ldr	r3, [pc, #356]	; (800433c <HAL_RCC_GetSysClockFreq+0x180>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d00d      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0x40>
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	f200 80a1 	bhi.w	8004328 <HAL_RCC_GetSysClockFreq+0x16c>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x34>
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ee:	e09b      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f0:	4b53      	ldr	r3, [pc, #332]	; (8004340 <HAL_RCC_GetSysClockFreq+0x184>)
 80041f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041f4:	e09b      	b.n	800432e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041f6:	4b53      	ldr	r3, [pc, #332]	; (8004344 <HAL_RCC_GetSysClockFreq+0x188>)
 80041f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041fa:	e098      	b.n	800432e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041fc:	4b4f      	ldr	r3, [pc, #316]	; (800433c <HAL_RCC_GetSysClockFreq+0x180>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004204:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004206:	4b4d      	ldr	r3, [pc, #308]	; (800433c <HAL_RCC_GetSysClockFreq+0x180>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d028      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004212:	4b4a      	ldr	r3, [pc, #296]	; (800433c <HAL_RCC_GetSysClockFreq+0x180>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	099b      	lsrs	r3, r3, #6
 8004218:	2200      	movs	r2, #0
 800421a:	623b      	str	r3, [r7, #32]
 800421c:	627a      	str	r2, [r7, #36]	; 0x24
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004224:	2100      	movs	r1, #0
 8004226:	4b47      	ldr	r3, [pc, #284]	; (8004344 <HAL_RCC_GetSysClockFreq+0x188>)
 8004228:	fb03 f201 	mul.w	r2, r3, r1
 800422c:	2300      	movs	r3, #0
 800422e:	fb00 f303 	mul.w	r3, r0, r3
 8004232:	4413      	add	r3, r2
 8004234:	4a43      	ldr	r2, [pc, #268]	; (8004344 <HAL_RCC_GetSysClockFreq+0x188>)
 8004236:	fba0 1202 	umull	r1, r2, r0, r2
 800423a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800423c:	460a      	mov	r2, r1
 800423e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004242:	4413      	add	r3, r2
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	2200      	movs	r2, #0
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	61fa      	str	r2, [r7, #28]
 800424e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004252:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004256:	f7fb ffef 	bl	8000238 <__aeabi_uldivmod>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4613      	mov	r3, r2
 8004260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004262:	e053      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004264:	4b35      	ldr	r3, [pc, #212]	; (800433c <HAL_RCC_GetSysClockFreq+0x180>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	2200      	movs	r2, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	617a      	str	r2, [r7, #20]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004276:	f04f 0b00 	mov.w	fp, #0
 800427a:	4652      	mov	r2, sl
 800427c:	465b      	mov	r3, fp
 800427e:	f04f 0000 	mov.w	r0, #0
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	0159      	lsls	r1, r3, #5
 8004288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800428c:	0150      	lsls	r0, r2, #5
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	ebb2 080a 	subs.w	r8, r2, sl
 8004296:	eb63 090b 	sbc.w	r9, r3, fp
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042ae:	ebb2 0408 	subs.w	r4, r2, r8
 80042b2:	eb63 0509 	sbc.w	r5, r3, r9
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	00eb      	lsls	r3, r5, #3
 80042c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042c4:	00e2      	lsls	r2, r4, #3
 80042c6:	4614      	mov	r4, r2
 80042c8:	461d      	mov	r5, r3
 80042ca:	eb14 030a 	adds.w	r3, r4, sl
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	eb45 030b 	adc.w	r3, r5, fp
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042e2:	4629      	mov	r1, r5
 80042e4:	028b      	lsls	r3, r1, #10
 80042e6:	4621      	mov	r1, r4
 80042e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042ec:	4621      	mov	r1, r4
 80042ee:	028a      	lsls	r2, r1, #10
 80042f0:	4610      	mov	r0, r2
 80042f2:	4619      	mov	r1, r3
 80042f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f6:	2200      	movs	r2, #0
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	60fa      	str	r2, [r7, #12]
 80042fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004300:	f7fb ff9a 	bl	8000238 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4613      	mov	r3, r2
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_GetSysClockFreq+0x180>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	3301      	adds	r3, #1
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800431c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004326:	e002      	b.n	800432e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetSysClockFreq+0x184>)
 800432a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800432c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004330:	4618      	mov	r0, r3
 8004332:	3740      	adds	r7, #64	; 0x40
 8004334:	46bd      	mov	sp, r7
 8004336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800
 8004340:	00f42400 	.word	0x00f42400
 8004344:	017d7840 	.word	0x017d7840

08004348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d012      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004370:	4b69      	ldr	r3, [pc, #420]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a68      	ldr	r2, [pc, #416]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004376:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800437a:	6093      	str	r3, [r2, #8]
 800437c:	4b66      	ldr	r3, [pc, #408]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004384:	4964      	ldr	r1, [pc, #400]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004392:	2301      	movs	r3, #1
 8004394:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d017      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043a2:	4b5d      	ldr	r3, [pc, #372]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b0:	4959      	ldr	r1, [pc, #356]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c0:	d101      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043c2:	2301      	movs	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043ce:	2301      	movs	r3, #1
 80043d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d017      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043de:	4b4e      	ldr	r3, [pc, #312]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	494a      	ldr	r1, [pc, #296]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043fc:	d101      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043fe:	2301      	movs	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800440a:	2301      	movs	r3, #1
 800440c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800441a:	2301      	movs	r3, #1
 800441c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 808b 	beq.w	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800442c:	4b3a      	ldr	r3, [pc, #232]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	4a39      	ldr	r2, [pc, #228]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004436:	6413      	str	r3, [r2, #64]	; 0x40
 8004438:	4b37      	ldr	r3, [pc, #220]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004444:	4b35      	ldr	r3, [pc, #212]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a34      	ldr	r2, [pc, #208]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800444a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fe f8d0 	bl	80025f4 <HAL_GetTick>
 8004454:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004458:	f7fe f8cc 	bl	80025f4 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e358      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800446a:	4b2c      	ldr	r3, [pc, #176]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004476:	4b28      	ldr	r3, [pc, #160]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d035      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	429a      	cmp	r2, r3
 8004492:	d02e      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004494:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800449e:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044aa:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044b6:	4a18      	ldr	r2, [pc, #96]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044bc:	4b16      	ldr	r3, [pc, #88]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d114      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fe f894 	bl	80025f4 <HAL_GetTick>
 80044cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	e00a      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f7fe f890 	bl	80025f4 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e31a      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0ee      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044fe:	d111      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800450e:	400b      	ands	r3, r1
 8004510:	4901      	ldr	r1, [pc, #4]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
 8004516:	e00b      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004518:	40023800 	.word	0x40023800
 800451c:	40007000 	.word	0x40007000
 8004520:	0ffffcff 	.word	0x0ffffcff
 8004524:	4ba8      	ldr	r3, [pc, #672]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4aa7      	ldr	r2, [pc, #668]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800452a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800452e:	6093      	str	r3, [r2, #8]
 8004530:	4ba5      	ldr	r3, [pc, #660]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453c:	49a2      	ldr	r1, [pc, #648]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800453e:	4313      	orrs	r3, r2
 8004540:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	d010      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800454e:	4b9e      	ldr	r3, [pc, #632]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004554:	4a9c      	ldr	r2, [pc, #624]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800455e:	4b9a      	ldr	r3, [pc, #616]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004560:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	4997      	ldr	r1, [pc, #604]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800457c:	4b92      	ldr	r3, [pc, #584]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800458a:	498f      	ldr	r1, [pc, #572]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800459e:	4b8a      	ldr	r3, [pc, #552]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ac:	4986      	ldr	r1, [pc, #536]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045c0:	4b81      	ldr	r3, [pc, #516]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ce:	497e      	ldr	r1, [pc, #504]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045e2:	4b79      	ldr	r3, [pc, #484]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	4975      	ldr	r1, [pc, #468]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004604:	4b70      	ldr	r3, [pc, #448]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f023 0203 	bic.w	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	496d      	ldr	r1, [pc, #436]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004626:	4b68      	ldr	r3, [pc, #416]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462c:	f023 020c 	bic.w	r2, r3, #12
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004634:	4964      	ldr	r1, [pc, #400]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004648:	4b5f      	ldr	r3, [pc, #380]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004656:	495c      	ldr	r1, [pc, #368]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800466a:	4b57      	ldr	r3, [pc, #348]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004678:	4953      	ldr	r1, [pc, #332]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800468c:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	494b      	ldr	r1, [pc, #300]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046ae:	4b46      	ldr	r3, [pc, #280]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	4942      	ldr	r1, [pc, #264]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046d0:	4b3d      	ldr	r3, [pc, #244]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	493a      	ldr	r1, [pc, #232]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046f2:	4b35      	ldr	r3, [pc, #212]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004700:	4931      	ldr	r1, [pc, #196]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004714:	4b2c      	ldr	r3, [pc, #176]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004722:	4929      	ldr	r1, [pc, #164]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d011      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004744:	4920      	ldr	r1, [pc, #128]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004754:	d101      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004756:	2301      	movs	r3, #1
 8004758:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004766:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004774:	4914      	ldr	r1, [pc, #80]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00b      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004788:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004798:	490b      	ldr	r1, [pc, #44]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00f      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047bc:	4902      	ldr	r1, [pc, #8]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047c4:	e002      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x484>
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047d8:	4b8a      	ldr	r3, [pc, #552]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80047da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	4986      	ldr	r1, [pc, #536]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00b      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047fc:	4b81      	ldr	r3, [pc, #516]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80047fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004802:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800480c:	497d      	ldr	r1, [pc, #500]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d006      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80d6 	beq.w	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004828:	4b76      	ldr	r3, [pc, #472]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a75      	ldr	r2, [pc, #468]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800482e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004834:	f7fd fede 	bl	80025f4 <HAL_GetTick>
 8004838:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800483a:	e008      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x506>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800483c:	f7fd feda 	bl	80025f4 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e166      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800484e:	4b6d      	ldr	r3, [pc, #436]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d021      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486a:	2b00      	cmp	r3, #0
 800486c:	d11d      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800486e:	4b65      	ldr	r3, [pc, #404]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800487c:	4b61      	ldr	r3, [pc, #388]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800487e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004882:	0e1b      	lsrs	r3, r3, #24
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	019a      	lsls	r2, r3, #6
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	431a      	orrs	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	071b      	lsls	r3, r3, #28
 80048a2:	4958      	ldr	r1, [pc, #352]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d004      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x578>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x58e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d02e      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d4:	d129      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048d6:	4b4b      	ldr	r3, [pc, #300]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048e4:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80048e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ea:	0f1b      	lsrs	r3, r3, #28
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	019a      	lsls	r2, r3, #6
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	041b      	lsls	r3, r3, #16
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	061b      	lsls	r3, r3, #24
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	493e      	ldr	r1, [pc, #248]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004912:	4b3c      	ldr	r3, [pc, #240]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004918:	f023 021f 	bic.w	r2, r3, #31
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	3b01      	subs	r3, #1
 8004922:	4938      	ldr	r1, [pc, #224]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01d      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004936:	4b33      	ldr	r3, [pc, #204]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493c:	0e1b      	lsrs	r3, r3, #24
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004944:	4b2f      	ldr	r3, [pc, #188]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494a:	0f1b      	lsrs	r3, r3, #28
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	019a      	lsls	r2, r3, #6
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	431a      	orrs	r2, r3
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	061b      	lsls	r3, r3, #24
 8004964:	431a      	orrs	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	071b      	lsls	r3, r3, #28
 800496a:	4926      	ldr	r1, [pc, #152]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d011      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	019a      	lsls	r2, r3, #6
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	061b      	lsls	r3, r3, #24
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	071b      	lsls	r3, r3, #28
 800499a:	491a      	ldr	r1, [pc, #104]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049a2:	4b18      	ldr	r3, [pc, #96]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80049a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ae:	f7fd fe21 	bl	80025f4 <HAL_GetTick>
 80049b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049b6:	f7fd fe1d 	bl	80025f4 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b64      	cmp	r3, #100	; 0x64
 80049c2:	d901      	bls.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0a9      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049c8:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	f040 809f 	bne.w	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a08      	ldr	r2, [pc, #32]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80049e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fd fe04 	bl	80025f4 <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049ee:	e00b      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049f0:	f7fd fe00 	bl	80025f4 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d904      	bls.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e08c      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a08:	4b46      	ldr	r3, [pc, #280]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a14:	d0ec      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02e      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x74c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d12a      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a3e:	4b39      	ldr	r3, [pc, #228]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a4c:	4b35      	ldr	r3, [pc, #212]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	0f1b      	lsrs	r3, r3, #28
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	019a      	lsls	r2, r3, #6
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	041b      	lsls	r3, r3, #16
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	061b      	lsls	r3, r3, #24
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	071b      	lsls	r3, r3, #28
 8004a72:	492c      	ldr	r1, [pc, #176]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a7a:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	021b      	lsls	r3, r3, #8
 8004a8c:	4925      	ldr	r1, [pc, #148]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d022      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa8:	d11d      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	0e1b      	lsrs	r3, r3, #24
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ab8:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	0f1b      	lsrs	r3, r3, #28
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	019a      	lsls	r2, r3, #6
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	041b      	lsls	r3, r3, #16
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	061b      	lsls	r3, r3, #24
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	071b      	lsls	r3, r3, #28
 8004ade:	4911      	ldr	r1, [pc, #68]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a0e      	ldr	r2, [pc, #56]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af2:	f7fd fd7f 	bl	80025f4 <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004afa:	f7fd fd7b 	bl	80025f4 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b64      	cmp	r3, #100	; 0x64
 8004b06:	d901      	bls.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e007      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b18:	d1ef      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3720      	adds	r7, #32
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40023800 	.word	0x40023800

08004b28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e081      	b.n	8004c3e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	7f5b      	ldrb	r3, [r3, #29]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fd fc24 	bl	8002398 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	22ca      	movs	r2, #202	; 0xca
 8004b5c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2253      	movs	r2, #83	; 0x53
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f898 	bl	8004c9c <RTC_EnterInitMode>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	22ff      	movs	r2, #255	; 0xff
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e05c      	b.n	8004c3e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6899      	ldr	r1, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b2e      	ldr	r3, [pc, #184]	; (8004c48 <HAL_RTC_Init+0x120>)
 8004b90:	400b      	ands	r3, r1
 8004b92:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6899      	ldr	r1, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68d2      	ldr	r2, [r2, #12]
 8004bba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6919      	ldr	r1, [r3, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	041a      	lsls	r2, r3, #16
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bde:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10e      	bne.n	8004c0c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f82c 	bl	8004c4c <HAL_RTC_WaitForSynchro>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	22ff      	movs	r2, #255	; 0xff
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2204      	movs	r2, #4
 8004c06:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e018      	b.n	8004c3e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0208 	bic.w	r2, r2, #8
 8004c1a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	22ff      	movs	r2, #255	; 0xff
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
  }
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	ff8fffbf 	.word	0xff8fffbf

08004c4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c66:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c68:	f7fd fcc4 	bl	80025f4 <HAL_GetTick>
 8004c6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c6e:	e009      	b.n	8004c84 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c70:	f7fd fcc0 	bl	80025f4 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c7e:	d901      	bls.n	8004c84 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e007      	b.n	8004c94 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ee      	beq.n	8004c70 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d119      	bne.n	8004cea <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cc0:	f7fd fc98 	bl	80025f4 <HAL_GetTick>
 8004cc4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cc6:	e009      	b.n	8004cdc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cc8:	f7fd fc94 	bl	80025f4 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cd6:	d901      	bls.n	8004cdc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e007      	b.n	8004cec <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0ee      	beq.n	8004cc8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	7f1b      	ldrb	r3, [r3, #28]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e0ae      	b.n	8004e6a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2202      	movs	r2, #2
 8004d16:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	22ca      	movs	r2, #202	; 0xca
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2253      	movs	r2, #83	; 0x53
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d36:	609a      	str	r2, [r3, #8]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d022      	beq.n	8004d8c <HAL_RTCEx_SetWakeUpTimer_IT+0x98>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8004d46:	4b4c      	ldr	r3, [pc, #304]	; (8004e78 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a4c      	ldr	r2, [pc, #304]	; (8004e7c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	0adb      	lsrs	r3, r3, #11
 8004d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1e5a      	subs	r2, r3, #1
 8004d60:	617a      	str	r2, [r7, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	22ff      	movs	r2, #255	; 0xff
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2203      	movs	r2, #3
 8004d72:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e075      	b.n	8004e6a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e7      	bne.n	8004d5c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8004d9c:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a36      	ldr	r2, [pc, #216]	; (8004e7c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	0adb      	lsrs	r3, r3, #11
 8004da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dac:	fb02 f303 	mul.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	1e5a      	subs	r2, r3, #1
 8004db6:	617a      	str	r2, [r7, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10b      	bne.n	8004dd4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	22ff      	movs	r2, #255	; 0xff
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e04a      	b.n	8004e6a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0e7      	beq.n	8004db2 <HAL_RTCEx_SetWakeUpTimer_IT+0xbe>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0207 	bic.w	r2, r2, #7
 8004df8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6899      	ldr	r1, [r3, #8]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e14:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004e1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e20:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004e32:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e42:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e52:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	22ff      	movs	r2, #255	; 0xff
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000000 	.word	0x20000000
 8004e7c:	10624dd3 	.word	0x10624dd3
 8004e80:	40013c00 	.word	0x40013c00

08004e84 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	7f1b      	ldrb	r3, [r3, #28]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e047      	b.n	8004f2c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	22ca      	movs	r2, #202	; 0xca
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2253      	movs	r2, #83	; 0x53
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ed6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ed8:	f7fd fb8c 	bl	80025f4 <HAL_GetTick>
 8004edc:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004ede:	e013      	b.n	8004f08 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ee0:	f7fd fb88 	bl	80025f4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eee:	d90b      	bls.n	8004f08 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	22ff      	movs	r2, #255	; 0xff
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2203      	movs	r2, #3
 8004efc:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e011      	b.n	8004f2c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0e4      	beq.n	8004ee0 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	22ff      	movs	r2, #255	; 0xff
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f816 	bl	8004f7c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004f60:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8004f64:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004f68:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	775a      	strb	r2, [r3, #29]
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40013c00 	.word	0x40013c00

08004f7c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e049      	b.n	8005036 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fd fa0e 	bl	80023d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f000 f9f6 	bl	80053c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e054      	b.n	8005102 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a26      	ldr	r2, [pc, #152]	; (8005110 <HAL_TIM_Base_Start_IT+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d022      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d01d      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a22      	ldr	r2, [pc, #136]	; (8005114 <HAL_TIM_Base_Start_IT+0xd4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d018      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a21      	ldr	r2, [pc, #132]	; (8005118 <HAL_TIM_Base_Start_IT+0xd8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1f      	ldr	r2, [pc, #124]	; (800511c <HAL_TIM_Base_Start_IT+0xdc>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <HAL_TIM_Base_Start_IT+0xe0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1c      	ldr	r2, [pc, #112]	; (8005124 <HAL_TIM_Base_Start_IT+0xe4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <HAL_TIM_Base_Start_IT+0xe8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d115      	bne.n	80050ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	4b19      	ldr	r3, [pc, #100]	; (800512c <HAL_TIM_Base_Start_IT+0xec>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b06      	cmp	r3, #6
 80050d0:	d015      	beq.n	80050fe <HAL_TIM_Base_Start_IT+0xbe>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d8:	d011      	beq.n	80050fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0201 	orr.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ea:	e008      	b.n	80050fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e000      	b.n	8005100 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40010400 	.word	0x40010400
 8005124:	40014000 	.word	0x40014000
 8005128:	40001800 	.word	0x40001800
 800512c:	00010007 	.word	0x00010007

08005130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b02      	cmp	r3, #2
 8005144:	d122      	bne.n	800518c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b02      	cmp	r3, #2
 8005152:	d11b      	bne.n	800518c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0202 	mvn.w	r2, #2
 800515c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f905 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8f7 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f908 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b04      	cmp	r3, #4
 8005198:	d122      	bne.n	80051e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d11b      	bne.n	80051e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0204 	mvn.w	r2, #4
 80051b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f8db 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f8cd 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f8de 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0208 	mvn.w	r2, #8
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2204      	movs	r2, #4
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f8b1 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8a3 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f8b4 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b10      	cmp	r3, #16
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b10      	cmp	r3, #16
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0210 	mvn.w	r2, #16
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2208      	movs	r2, #8
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f887 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f879 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f88a 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b01      	cmp	r3, #1
 8005294:	d10e      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d107      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0201 	mvn.w	r2, #1
 80052ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fb fc90 	bl	8000bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052be:	2b80      	cmp	r3, #128	; 0x80
 80052c0:	d10e      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052cc:	2b80      	cmp	r3, #128	; 0x80
 80052ce:	d107      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f9a8 	bl	8005630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ee:	d10e      	bne.n	800530e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fa:	2b80      	cmp	r3, #128	; 0x80
 80052fc:	d107      	bne.n	800530e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f99b 	bl	8005644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d10e      	bne.n	800533a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d107      	bne.n	800533a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f838 	bl	80053aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b20      	cmp	r3, #32
 8005346:	d10e      	bne.n	8005366 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b20      	cmp	r3, #32
 8005354:	d107      	bne.n	8005366 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f06f 0220 	mvn.w	r2, #32
 800535e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f95b 	bl	800561c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a40      	ldr	r2, [pc, #256]	; (80054d4 <TIM_Base_SetConfig+0x114>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053de:	d00f      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a3d      	ldr	r2, [pc, #244]	; (80054d8 <TIM_Base_SetConfig+0x118>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00b      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3c      	ldr	r2, [pc, #240]	; (80054dc <TIM_Base_SetConfig+0x11c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d007      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a3b      	ldr	r2, [pc, #236]	; (80054e0 <TIM_Base_SetConfig+0x120>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a3a      	ldr	r2, [pc, #232]	; (80054e4 <TIM_Base_SetConfig+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d108      	bne.n	8005412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a2f      	ldr	r2, [pc, #188]	; (80054d4 <TIM_Base_SetConfig+0x114>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d02b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005420:	d027      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2c      	ldr	r2, [pc, #176]	; (80054d8 <TIM_Base_SetConfig+0x118>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d023      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2b      	ldr	r2, [pc, #172]	; (80054dc <TIM_Base_SetConfig+0x11c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d01f      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <TIM_Base_SetConfig+0x120>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a29      	ldr	r2, [pc, #164]	; (80054e4 <TIM_Base_SetConfig+0x124>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d017      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a28      	ldr	r2, [pc, #160]	; (80054e8 <TIM_Base_SetConfig+0x128>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a27      	ldr	r2, [pc, #156]	; (80054ec <TIM_Base_SetConfig+0x12c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00f      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a26      	ldr	r2, [pc, #152]	; (80054f0 <TIM_Base_SetConfig+0x130>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a25      	ldr	r2, [pc, #148]	; (80054f4 <TIM_Base_SetConfig+0x134>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d007      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a24      	ldr	r2, [pc, #144]	; (80054f8 <TIM_Base_SetConfig+0x138>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d003      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a23      	ldr	r2, [pc, #140]	; (80054fc <TIM_Base_SetConfig+0x13c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d108      	bne.n	8005484 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <TIM_Base_SetConfig+0x114>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0xf8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a0c      	ldr	r2, [pc, #48]	; (80054e4 <TIM_Base_SetConfig+0x124>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d103      	bne.n	80054c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	615a      	str	r2, [r3, #20]
}
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800
 80054e0:	40000c00 	.word	0x40000c00
 80054e4:	40010400 	.word	0x40010400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40014400 	.word	0x40014400
 80054f0:	40014800 	.word	0x40014800
 80054f4:	40001800 	.word	0x40001800
 80054f8:	40001c00 	.word	0x40001c00
 80054fc:	40002000 	.word	0x40002000

08005500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005514:	2302      	movs	r3, #2
 8005516:	e06d      	b.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a30      	ldr	r2, [pc, #192]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a2f      	ldr	r2, [pc, #188]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d108      	bne.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005552:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005564:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4313      	orrs	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a20      	ldr	r2, [pc, #128]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d022      	beq.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558a:	d01d      	beq.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d018      	beq.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1c      	ldr	r2, [pc, #112]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d013      	beq.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00e      	beq.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a15      	ldr	r2, [pc, #84]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d009      	beq.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a16      	ldr	r2, [pc, #88]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d004      	beq.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a15      	ldr	r2, [pc, #84]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d10c      	bne.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	40010000 	.word	0x40010000
 8005604:	40010400 	.word	0x40010400
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40014000 	.word	0x40014000
 8005618:	40001800 	.word	0x40001800

0800561c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <__libc_init_array>:
 8005658:	b570      	push	{r4, r5, r6, lr}
 800565a:	4d0d      	ldr	r5, [pc, #52]	; (8005690 <__libc_init_array+0x38>)
 800565c:	4c0d      	ldr	r4, [pc, #52]	; (8005694 <__libc_init_array+0x3c>)
 800565e:	1b64      	subs	r4, r4, r5
 8005660:	10a4      	asrs	r4, r4, #2
 8005662:	2600      	movs	r6, #0
 8005664:	42a6      	cmp	r6, r4
 8005666:	d109      	bne.n	800567c <__libc_init_array+0x24>
 8005668:	4d0b      	ldr	r5, [pc, #44]	; (8005698 <__libc_init_array+0x40>)
 800566a:	4c0c      	ldr	r4, [pc, #48]	; (800569c <__libc_init_array+0x44>)
 800566c:	f000 f82e 	bl	80056cc <_init>
 8005670:	1b64      	subs	r4, r4, r5
 8005672:	10a4      	asrs	r4, r4, #2
 8005674:	2600      	movs	r6, #0
 8005676:	42a6      	cmp	r6, r4
 8005678:	d105      	bne.n	8005686 <__libc_init_array+0x2e>
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005680:	4798      	blx	r3
 8005682:	3601      	adds	r6, #1
 8005684:	e7ee      	b.n	8005664 <__libc_init_array+0xc>
 8005686:	f855 3b04 	ldr.w	r3, [r5], #4
 800568a:	4798      	blx	r3
 800568c:	3601      	adds	r6, #1
 800568e:	e7f2      	b.n	8005676 <__libc_init_array+0x1e>
 8005690:	080056fc 	.word	0x080056fc
 8005694:	080056fc 	.word	0x080056fc
 8005698:	080056fc 	.word	0x080056fc
 800569c:	08005700 	.word	0x08005700

080056a0 <memcpy>:
 80056a0:	440a      	add	r2, r1
 80056a2:	4291      	cmp	r1, r2
 80056a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a8:	d100      	bne.n	80056ac <memcpy+0xc>
 80056aa:	4770      	bx	lr
 80056ac:	b510      	push	{r4, lr}
 80056ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056b6:	4291      	cmp	r1, r2
 80056b8:	d1f9      	bne.n	80056ae <memcpy+0xe>
 80056ba:	bd10      	pop	{r4, pc}

080056bc <memset>:
 80056bc:	4402      	add	r2, r0
 80056be:	4603      	mov	r3, r0
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d100      	bne.n	80056c6 <memset+0xa>
 80056c4:	4770      	bx	lr
 80056c6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ca:	e7f9      	b.n	80056c0 <memset+0x4>

080056cc <_init>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	bf00      	nop
 80056d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d2:	bc08      	pop	{r3}
 80056d4:	469e      	mov	lr, r3
 80056d6:	4770      	bx	lr

080056d8 <_fini>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	bf00      	nop
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr
