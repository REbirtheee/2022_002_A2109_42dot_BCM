
42DOT_aDRT_2nd_BCM_ILC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000548c  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005694  08005694  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800569c  0800569c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056a0  080056a0  000156a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000000c  080056b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  080056b0  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cff  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bc  00000000  00000000  00036d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  000394f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  0003a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277e2  00000000  00000000  0003b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012007  00000000  00000000  00062ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9d39  00000000  00000000  00074ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016e812  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e0  00000000  00000000  0016e868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800566c 	.word	0x0800566c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800566c 	.word	0x0800566c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <ButtonRead>:

#include "button_ctrl.h"


void ButtonRead()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	Input_Status_Raw.ign1_status = READ_PIN_DI_0;
 8000534:	2101      	movs	r1, #1
 8000536:	483a      	ldr	r0, [pc, #232]	; (8000620 <ButtonRead+0xf0>)
 8000538:	f003 f9ca 	bl	80038d0 <HAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	461a      	mov	r2, r3
 8000540:	4b38      	ldr	r3, [pc, #224]	; (8000624 <ButtonRead+0xf4>)
 8000542:	701a      	strb	r2, [r3, #0]
	if( Button_Status.ign1_status == 1 ) {
 8000544:	4b38      	ldr	r3, [pc, #224]	; (8000628 <ButtonRead+0xf8>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d107      	bne.n	800055c <ButtonRead+0x2c>
		Input_Status_Raw.defogger = READ_PIN_DI_2;
 800054c:	2104      	movs	r1, #4
 800054e:	4834      	ldr	r0, [pc, #208]	; (8000620 <ButtonRead+0xf0>)
 8000550:	f003 f9be 	bl	80038d0 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	461a      	mov	r2, r3
 8000558:	4b32      	ldr	r3, [pc, #200]	; (8000624 <ButtonRead+0xf4>)
 800055a:	709a      	strb	r2, [r3, #2]
	}
	Input_Status_Raw.autonomous = READ_PIN_DI_3;
 800055c:	2108      	movs	r1, #8
 800055e:	4830      	ldr	r0, [pc, #192]	; (8000620 <ButtonRead+0xf0>)
 8000560:	f003 f9b6 	bl	80038d0 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	461a      	mov	r2, r3
 8000568:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <ButtonRead+0xf4>)
 800056a:	721a      	strb	r2, [r3, #8]
	Input_Status_Raw.ps_close = READ_PIN_DI_4;
 800056c:	2110      	movs	r1, #16
 800056e:	482c      	ldr	r0, [pc, #176]	; (8000620 <ButtonRead+0xf0>)
 8000570:	f003 f9ae 	bl	80038d0 <HAL_GPIO_ReadPin>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <ButtonRead+0xf4>)
 800057a:	70da      	strb	r2, [r3, #3]
	Input_Status_Raw.ps_open = READ_PIN_DI_8;
 800057c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000580:	4827      	ldr	r0, [pc, #156]	; (8000620 <ButtonRead+0xf0>)
 8000582:	f003 f9a5 	bl	80038d0 <HAL_GPIO_ReadPin>
 8000586:	4603      	mov	r3, r0
 8000588:	461a      	mov	r2, r3
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <ButtonRead+0xf4>)
 800058c:	711a      	strb	r2, [r3, #4]
	Input_Status_Raw.drv_close = READ_PIN_DI_6;
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4823      	ldr	r0, [pc, #140]	; (8000620 <ButtonRead+0xf0>)
 8000592:	f003 f99d 	bl	80038d0 <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <ButtonRead+0xf4>)
 800059c:	715a      	strb	r2, [r3, #5]
	Input_Status_Raw.drv_open = READ_PIN_DI_7;
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <ButtonRead+0xf0>)
 80005a2:	f003 f995 	bl	80038d0 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <ButtonRead+0xf4>)
 80005ac:	719a      	strb	r2, [r3, #6]
	Input_Status_Raw.ign2_status = READ_PIN_DI_9;
 80005ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b2:	481b      	ldr	r0, [pc, #108]	; (8000620 <ButtonRead+0xf0>)
 80005b4:	f003 f98c 	bl	80038d0 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <ButtonRead+0xf4>)
 80005be:	71da      	strb	r2, [r3, #7]
	Input_Status_Raw.cluster_trip = READ_PIN_DI_5;
 80005c0:	2120      	movs	r1, #32
 80005c2:	4817      	ldr	r0, [pc, #92]	; (8000620 <ButtonRead+0xf0>)
 80005c4:	f003 f984 	bl	80038d0 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <ButtonRead+0xf4>)
 80005ce:	725a      	strb	r2, [r3, #9]

	ButtonSWChatt();		// Switch Chattering Function
 80005d0:	f000 f82e 	bl	8000630 <ButtonSWChatt>

	Input_Status_Raw_Prev.ign1_status = Input_Status_Raw.ign1_status;
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <ButtonRead+0xf4>)
 80005d6:	781a      	ldrb	r2, [r3, #0]
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <ButtonRead+0xfc>)
 80005da:	701a      	strb	r2, [r3, #0]
	Input_Status_Raw_Prev.defogger = Input_Status_Raw.defogger;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <ButtonRead+0xf4>)
 80005de:	789a      	ldrb	r2, [r3, #2]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <ButtonRead+0xfc>)
 80005e2:	709a      	strb	r2, [r3, #2]
	Input_Status_Raw_Prev.autonomous = Input_Status_Raw.autonomous;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <ButtonRead+0xf4>)
 80005e6:	7a1a      	ldrb	r2, [r3, #8]
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <ButtonRead+0xfc>)
 80005ea:	721a      	strb	r2, [r3, #8]
	Input_Status_Raw_Prev.ps_close = Input_Status_Raw.ps_close;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <ButtonRead+0xf4>)
 80005ee:	78da      	ldrb	r2, [r3, #3]
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <ButtonRead+0xfc>)
 80005f2:	70da      	strb	r2, [r3, #3]
	Input_Status_Raw_Prev.ps_open = Input_Status_Raw.ps_open;
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <ButtonRead+0xf4>)
 80005f6:	791a      	ldrb	r2, [r3, #4]
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <ButtonRead+0xfc>)
 80005fa:	711a      	strb	r2, [r3, #4]
	Input_Status_Raw_Prev.drv_close = Input_Status_Raw.drv_close;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <ButtonRead+0xf4>)
 80005fe:	795a      	ldrb	r2, [r3, #5]
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <ButtonRead+0xfc>)
 8000602:	715a      	strb	r2, [r3, #5]
	Input_Status_Raw_Prev.drv_open = Input_Status_Raw.drv_open;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <ButtonRead+0xf4>)
 8000606:	799a      	ldrb	r2, [r3, #6]
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <ButtonRead+0xfc>)
 800060a:	719a      	strb	r2, [r3, #6]
	Input_Status_Raw_Prev.ign2_status = Input_Status_Raw.ign2_status;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <ButtonRead+0xf4>)
 800060e:	79da      	ldrb	r2, [r3, #7]
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <ButtonRead+0xfc>)
 8000612:	71da      	strb	r2, [r3, #7]
	Input_Status_Raw_Prev.cluster_trip = Input_Status_Raw.cluster_trip;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <ButtonRead+0xf4>)
 8000616:	7a5a      	ldrb	r2, [r3, #9]
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <ButtonRead+0xfc>)
 800061a:	725a      	strb	r2, [r3, #9]
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021400 	.word	0x40021400
 8000624:	200002d0 	.word	0x200002d0
 8000628:	2000029c 	.word	0x2000029c
 800062c:	2000005c 	.word	0x2000005c

08000630 <ButtonSWChatt>:

void ButtonSWChatt()
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
	if( Input_Status_Raw_Prev.ign1_status == Input_Status_Raw.ign1_status ) {
 8000634:	4b89      	ldr	r3, [pc, #548]	; (800085c <ButtonSWChatt+0x22c>)
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4b89      	ldr	r3, [pc, #548]	; (8000860 <ButtonSWChatt+0x230>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	429a      	cmp	r2, r3
 800063e:	d111      	bne.n	8000664 <ButtonSWChatt+0x34>
		if( ++Chattering.ign1_status_cnt > 2 ) {
 8000640:	4b88      	ldr	r3, [pc, #544]	; (8000864 <ButtonSWChatt+0x234>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b86      	ldr	r3, [pc, #536]	; (8000864 <ButtonSWChatt+0x234>)
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	4b85      	ldr	r3, [pc, #532]	; (8000864 <ButtonSWChatt+0x234>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d90a      	bls.n	800066a <ButtonSWChatt+0x3a>
			Input_Status.ign1_status = Input_Status_Raw.ign1_status;
 8000654:	4b82      	ldr	r3, [pc, #520]	; (8000860 <ButtonSWChatt+0x230>)
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	4b83      	ldr	r3, [pc, #524]	; (8000868 <ButtonSWChatt+0x238>)
 800065a:	701a      	strb	r2, [r3, #0]
			Chattering.ign1_status_cnt = 3;
 800065c:	4b81      	ldr	r3, [pc, #516]	; (8000864 <ButtonSWChatt+0x234>)
 800065e:	2203      	movs	r2, #3
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	e002      	b.n	800066a <ButtonSWChatt+0x3a>
		}
	} else {
		Chattering.ign1_status_cnt = 0;
 8000664:	4b7f      	ldr	r3, [pc, #508]	; (8000864 <ButtonSWChatt+0x234>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
	}

	if( Input_Status_Raw_Prev.defogger == Input_Status_Raw.defogger ) {
 800066a:	4b7c      	ldr	r3, [pc, #496]	; (800085c <ButtonSWChatt+0x22c>)
 800066c:	789a      	ldrb	r2, [r3, #2]
 800066e:	4b7c      	ldr	r3, [pc, #496]	; (8000860 <ButtonSWChatt+0x230>)
 8000670:	789b      	ldrb	r3, [r3, #2]
 8000672:	429a      	cmp	r2, r3
 8000674:	d12c      	bne.n	80006d0 <ButtonSWChatt+0xa0>
		if( ++Chattering.defogger_cnt > 2 ) {
 8000676:	4b7b      	ldr	r3, [pc, #492]	; (8000864 <ButtonSWChatt+0x234>)
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	3301      	adds	r3, #1
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b79      	ldr	r3, [pc, #484]	; (8000864 <ButtonSWChatt+0x234>)
 8000680:	709a      	strb	r2, [r3, #2]
 8000682:	4b78      	ldr	r3, [pc, #480]	; (8000864 <ButtonSWChatt+0x234>)
 8000684:	789b      	ldrb	r3, [r3, #2]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d925      	bls.n	80006d6 <ButtonSWChatt+0xa6>
			Input_Status.defogger = Input_Status_Raw.defogger;
 800068a:	4b75      	ldr	r3, [pc, #468]	; (8000860 <ButtonSWChatt+0x230>)
 800068c:	789a      	ldrb	r2, [r3, #2]
 800068e:	4b76      	ldr	r3, [pc, #472]	; (8000868 <ButtonSWChatt+0x238>)
 8000690:	709a      	strb	r2, [r3, #2]
			if( (Input_Status_Prev.defogger==0) && (Input_Status.defogger==1) ) {
 8000692:	4b76      	ldr	r3, [pc, #472]	; (800086c <ButtonSWChatt+0x23c>)
 8000694:	789b      	ldrb	r3, [r3, #2]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d112      	bne.n	80006c0 <ButtonSWChatt+0x90>
 800069a:	4b73      	ldr	r3, [pc, #460]	; (8000868 <ButtonSWChatt+0x238>)
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10e      	bne.n	80006c0 <ButtonSWChatt+0x90>
				if( Button_Status.defogger == 0 ) {
 80006a2:	4b73      	ldr	r3, [pc, #460]	; (8000870 <ButtonSWChatt+0x240>)
 80006a4:	789b      	ldrb	r3, [r3, #2]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d103      	bne.n	80006b2 <ButtonSWChatt+0x82>
					defogger_sw = 1;
 80006aa:	4b72      	ldr	r3, [pc, #456]	; (8000874 <ButtonSWChatt+0x244>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	e006      	b.n	80006c0 <ButtonSWChatt+0x90>
				} else if( Button_Status.defogger == 1 ) {
 80006b2:	4b6f      	ldr	r3, [pc, #444]	; (8000870 <ButtonSWChatt+0x240>)
 80006b4:	789b      	ldrb	r3, [r3, #2]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d102      	bne.n	80006c0 <ButtonSWChatt+0x90>
					defogger_sw = 0;
 80006ba:	4b6e      	ldr	r3, [pc, #440]	; (8000874 <ButtonSWChatt+0x244>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
				}
			}
			Input_Status_Prev.defogger = Input_Status.defogger;
 80006c0:	4b69      	ldr	r3, [pc, #420]	; (8000868 <ButtonSWChatt+0x238>)
 80006c2:	789a      	ldrb	r2, [r3, #2]
 80006c4:	4b69      	ldr	r3, [pc, #420]	; (800086c <ButtonSWChatt+0x23c>)
 80006c6:	709a      	strb	r2, [r3, #2]
			Chattering.defogger_cnt = 3;
 80006c8:	4b66      	ldr	r3, [pc, #408]	; (8000864 <ButtonSWChatt+0x234>)
 80006ca:	2203      	movs	r2, #3
 80006cc:	709a      	strb	r2, [r3, #2]
 80006ce:	e002      	b.n	80006d6 <ButtonSWChatt+0xa6>
		}
	} else {
		Chattering.defogger_cnt = 0;
 80006d0:	4b64      	ldr	r3, [pc, #400]	; (8000864 <ButtonSWChatt+0x234>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	709a      	strb	r2, [r3, #2]
	}


	if( Input_Status_Raw_Prev.ps_close == Input_Status_Raw.ps_close ) {
 80006d6:	4b61      	ldr	r3, [pc, #388]	; (800085c <ButtonSWChatt+0x22c>)
 80006d8:	78da      	ldrb	r2, [r3, #3]
 80006da:	4b61      	ldr	r3, [pc, #388]	; (8000860 <ButtonSWChatt+0x230>)
 80006dc:	78db      	ldrb	r3, [r3, #3]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d111      	bne.n	8000706 <ButtonSWChatt+0xd6>
		if( ++Chattering.ps_close_cnt > 2 ) {
 80006e2:	4b60      	ldr	r3, [pc, #384]	; (8000864 <ButtonSWChatt+0x234>)
 80006e4:	78db      	ldrb	r3, [r3, #3]
 80006e6:	3301      	adds	r3, #1
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b5e      	ldr	r3, [pc, #376]	; (8000864 <ButtonSWChatt+0x234>)
 80006ec:	70da      	strb	r2, [r3, #3]
 80006ee:	4b5d      	ldr	r3, [pc, #372]	; (8000864 <ButtonSWChatt+0x234>)
 80006f0:	78db      	ldrb	r3, [r3, #3]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d90a      	bls.n	800070c <ButtonSWChatt+0xdc>
			Input_Status.ps_close = Input_Status_Raw.ps_close;
 80006f6:	4b5a      	ldr	r3, [pc, #360]	; (8000860 <ButtonSWChatt+0x230>)
 80006f8:	78da      	ldrb	r2, [r3, #3]
 80006fa:	4b5b      	ldr	r3, [pc, #364]	; (8000868 <ButtonSWChatt+0x238>)
 80006fc:	70da      	strb	r2, [r3, #3]
			Chattering.ps_close_cnt = 3;
 80006fe:	4b59      	ldr	r3, [pc, #356]	; (8000864 <ButtonSWChatt+0x234>)
 8000700:	2203      	movs	r2, #3
 8000702:	70da      	strb	r2, [r3, #3]
 8000704:	e002      	b.n	800070c <ButtonSWChatt+0xdc>
		}
	} else {
		Chattering.ps_close_cnt = 0;
 8000706:	4b57      	ldr	r3, [pc, #348]	; (8000864 <ButtonSWChatt+0x234>)
 8000708:	2200      	movs	r2, #0
 800070a:	70da      	strb	r2, [r3, #3]
	}

	if( Input_Status_Raw_Prev.ps_open == Input_Status_Raw.ps_open ) {
 800070c:	4b53      	ldr	r3, [pc, #332]	; (800085c <ButtonSWChatt+0x22c>)
 800070e:	791a      	ldrb	r2, [r3, #4]
 8000710:	4b53      	ldr	r3, [pc, #332]	; (8000860 <ButtonSWChatt+0x230>)
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	d111      	bne.n	800073c <ButtonSWChatt+0x10c>
		if( ++Chattering.ps_open_cnt > 2 ) {
 8000718:	4b52      	ldr	r3, [pc, #328]	; (8000864 <ButtonSWChatt+0x234>)
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	3301      	adds	r3, #1
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b50      	ldr	r3, [pc, #320]	; (8000864 <ButtonSWChatt+0x234>)
 8000722:	711a      	strb	r2, [r3, #4]
 8000724:	4b4f      	ldr	r3, [pc, #316]	; (8000864 <ButtonSWChatt+0x234>)
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d90a      	bls.n	8000742 <ButtonSWChatt+0x112>
			Input_Status.ps_open = Input_Status_Raw.ps_open;
 800072c:	4b4c      	ldr	r3, [pc, #304]	; (8000860 <ButtonSWChatt+0x230>)
 800072e:	791a      	ldrb	r2, [r3, #4]
 8000730:	4b4d      	ldr	r3, [pc, #308]	; (8000868 <ButtonSWChatt+0x238>)
 8000732:	711a      	strb	r2, [r3, #4]
			Chattering.ps_open_cnt = 3;
 8000734:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <ButtonSWChatt+0x234>)
 8000736:	2203      	movs	r2, #3
 8000738:	711a      	strb	r2, [r3, #4]
 800073a:	e002      	b.n	8000742 <ButtonSWChatt+0x112>
		}
	} else {
		Chattering.ps_open_cnt = 0;
 800073c:	4b49      	ldr	r3, [pc, #292]	; (8000864 <ButtonSWChatt+0x234>)
 800073e:	2200      	movs	r2, #0
 8000740:	711a      	strb	r2, [r3, #4]
	}

	if( Input_Status_Raw_Prev.drv_close == Input_Status_Raw.drv_close ) {
 8000742:	4b46      	ldr	r3, [pc, #280]	; (800085c <ButtonSWChatt+0x22c>)
 8000744:	795a      	ldrb	r2, [r3, #5]
 8000746:	4b46      	ldr	r3, [pc, #280]	; (8000860 <ButtonSWChatt+0x230>)
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	429a      	cmp	r2, r3
 800074c:	d111      	bne.n	8000772 <ButtonSWChatt+0x142>
		if( ++Chattering.drv_close_cnt > 2 ) {
 800074e:	4b45      	ldr	r3, [pc, #276]	; (8000864 <ButtonSWChatt+0x234>)
 8000750:	795b      	ldrb	r3, [r3, #5]
 8000752:	3301      	adds	r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b43      	ldr	r3, [pc, #268]	; (8000864 <ButtonSWChatt+0x234>)
 8000758:	715a      	strb	r2, [r3, #5]
 800075a:	4b42      	ldr	r3, [pc, #264]	; (8000864 <ButtonSWChatt+0x234>)
 800075c:	795b      	ldrb	r3, [r3, #5]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d90a      	bls.n	8000778 <ButtonSWChatt+0x148>
			Input_Status.drv_close = Input_Status_Raw.drv_close;
 8000762:	4b3f      	ldr	r3, [pc, #252]	; (8000860 <ButtonSWChatt+0x230>)
 8000764:	795a      	ldrb	r2, [r3, #5]
 8000766:	4b40      	ldr	r3, [pc, #256]	; (8000868 <ButtonSWChatt+0x238>)
 8000768:	715a      	strb	r2, [r3, #5]
			Chattering.drv_close_cnt = 3;
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <ButtonSWChatt+0x234>)
 800076c:	2203      	movs	r2, #3
 800076e:	715a      	strb	r2, [r3, #5]
 8000770:	e002      	b.n	8000778 <ButtonSWChatt+0x148>
		}
	} else {
		Chattering.drv_close_cnt = 0;
 8000772:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <ButtonSWChatt+0x234>)
 8000774:	2200      	movs	r2, #0
 8000776:	715a      	strb	r2, [r3, #5]
	}


	if( Input_Status_Raw_Prev.drv_open == Input_Status_Raw.drv_open ) {
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <ButtonSWChatt+0x22c>)
 800077a:	799a      	ldrb	r2, [r3, #6]
 800077c:	4b38      	ldr	r3, [pc, #224]	; (8000860 <ButtonSWChatt+0x230>)
 800077e:	799b      	ldrb	r3, [r3, #6]
 8000780:	429a      	cmp	r2, r3
 8000782:	d111      	bne.n	80007a8 <ButtonSWChatt+0x178>
		if( ++Chattering.drv_open_cnt > 2 ) {
 8000784:	4b37      	ldr	r3, [pc, #220]	; (8000864 <ButtonSWChatt+0x234>)
 8000786:	799b      	ldrb	r3, [r3, #6]
 8000788:	3301      	adds	r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <ButtonSWChatt+0x234>)
 800078e:	719a      	strb	r2, [r3, #6]
 8000790:	4b34      	ldr	r3, [pc, #208]	; (8000864 <ButtonSWChatt+0x234>)
 8000792:	799b      	ldrb	r3, [r3, #6]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d90a      	bls.n	80007ae <ButtonSWChatt+0x17e>
			Input_Status.drv_open = Input_Status_Raw.drv_open;
 8000798:	4b31      	ldr	r3, [pc, #196]	; (8000860 <ButtonSWChatt+0x230>)
 800079a:	799a      	ldrb	r2, [r3, #6]
 800079c:	4b32      	ldr	r3, [pc, #200]	; (8000868 <ButtonSWChatt+0x238>)
 800079e:	719a      	strb	r2, [r3, #6]
			Chattering.drv_open_cnt = 3;
 80007a0:	4b30      	ldr	r3, [pc, #192]	; (8000864 <ButtonSWChatt+0x234>)
 80007a2:	2203      	movs	r2, #3
 80007a4:	719a      	strb	r2, [r3, #6]
 80007a6:	e002      	b.n	80007ae <ButtonSWChatt+0x17e>
		}
	} else {
		Chattering.drv_open_cnt = 0;
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <ButtonSWChatt+0x234>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	719a      	strb	r2, [r3, #6]
	}

	if( Input_Status_Raw_Prev.ign2_status == Input_Status_Raw.ign2_status ) {
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <ButtonSWChatt+0x22c>)
 80007b0:	79da      	ldrb	r2, [r3, #7]
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <ButtonSWChatt+0x230>)
 80007b4:	79db      	ldrb	r3, [r3, #7]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d111      	bne.n	80007de <ButtonSWChatt+0x1ae>
		if( ++Chattering.ign2_status_cnt > 2 ) {
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <ButtonSWChatt+0x234>)
 80007bc:	79db      	ldrb	r3, [r3, #7]
 80007be:	3301      	adds	r3, #1
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <ButtonSWChatt+0x234>)
 80007c4:	71da      	strb	r2, [r3, #7]
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <ButtonSWChatt+0x234>)
 80007c8:	79db      	ldrb	r3, [r3, #7]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d90a      	bls.n	80007e4 <ButtonSWChatt+0x1b4>
			Input_Status.ign2_status = Input_Status_Raw.ign2_status;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <ButtonSWChatt+0x230>)
 80007d0:	79da      	ldrb	r2, [r3, #7]
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <ButtonSWChatt+0x238>)
 80007d4:	71da      	strb	r2, [r3, #7]
			Chattering.ign2_status_cnt = 3;
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <ButtonSWChatt+0x234>)
 80007d8:	2203      	movs	r2, #3
 80007da:	71da      	strb	r2, [r3, #7]
 80007dc:	e002      	b.n	80007e4 <ButtonSWChatt+0x1b4>
		}
	} else {
		Chattering.ign2_status_cnt = 0;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <ButtonSWChatt+0x234>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	71da      	strb	r2, [r3, #7]
	}

	if( Input_Status_Raw_Prev.autonomous == Input_Status_Raw.autonomous ) {
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <ButtonSWChatt+0x22c>)
 80007e6:	7a1a      	ldrb	r2, [r3, #8]
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <ButtonSWChatt+0x230>)
 80007ea:	7a1b      	ldrb	r3, [r3, #8]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d111      	bne.n	8000814 <ButtonSWChatt+0x1e4>
		if( ++Chattering.autonomous_cnt > 2 ) {
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <ButtonSWChatt+0x234>)
 80007f2:	7a1b      	ldrb	r3, [r3, #8]
 80007f4:	3301      	adds	r3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <ButtonSWChatt+0x234>)
 80007fa:	721a      	strb	r2, [r3, #8]
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <ButtonSWChatt+0x234>)
 80007fe:	7a1b      	ldrb	r3, [r3, #8]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d90a      	bls.n	800081a <ButtonSWChatt+0x1ea>
			Input_Status.autonomous = Input_Status_Raw.autonomous;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <ButtonSWChatt+0x230>)
 8000806:	7a1a      	ldrb	r2, [r3, #8]
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <ButtonSWChatt+0x238>)
 800080a:	721a      	strb	r2, [r3, #8]
			Chattering.autonomous_cnt = 3;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <ButtonSWChatt+0x234>)
 800080e:	2203      	movs	r2, #3
 8000810:	721a      	strb	r2, [r3, #8]
 8000812:	e002      	b.n	800081a <ButtonSWChatt+0x1ea>
		}
	} else {
		Chattering.autonomous_cnt = 0;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <ButtonSWChatt+0x234>)
 8000816:	2200      	movs	r2, #0
 8000818:	721a      	strb	r2, [r3, #8]
	}

	if( Input_Status_Raw_Prev.cluster_trip == Input_Status_Raw.cluster_trip ) {
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <ButtonSWChatt+0x22c>)
 800081c:	7a5a      	ldrb	r2, [r3, #9]
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <ButtonSWChatt+0x230>)
 8000820:	7a5b      	ldrb	r3, [r3, #9]
 8000822:	429a      	cmp	r2, r3
 8000824:	d111      	bne.n	800084a <ButtonSWChatt+0x21a>
		if( ++Chattering.cluster_trip_cnt > 2 ) {
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <ButtonSWChatt+0x234>)
 8000828:	7a5b      	ldrb	r3, [r3, #9]
 800082a:	3301      	adds	r3, #1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <ButtonSWChatt+0x234>)
 8000830:	725a      	strb	r2, [r3, #9]
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <ButtonSWChatt+0x234>)
 8000834:	7a5b      	ldrb	r3, [r3, #9]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d90a      	bls.n	8000850 <ButtonSWChatt+0x220>
			Input_Status.cluster_trip = Input_Status_Raw.cluster_trip;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <ButtonSWChatt+0x230>)
 800083c:	7a5a      	ldrb	r2, [r3, #9]
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <ButtonSWChatt+0x238>)
 8000840:	725a      	strb	r2, [r3, #9]
			Chattering.cluster_trip_cnt = 3;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <ButtonSWChatt+0x234>)
 8000844:	2203      	movs	r2, #3
 8000846:	725a      	strb	r2, [r3, #9]
		}
	} else {
		Chattering.cluster_trip_cnt = 0;
	}
}
 8000848:	e002      	b.n	8000850 <ButtonSWChatt+0x220>
		Chattering.cluster_trip_cnt = 0;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <ButtonSWChatt+0x234>)
 800084c:	2200      	movs	r2, #0
 800084e:	725a      	strb	r2, [r3, #9]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2000005c 	.word	0x2000005c
 8000860:	200002d0 	.word	0x200002d0
 8000864:	200001f0 	.word	0x200001f0
 8000868:	200001d4 	.word	0x200001d4
 800086c:	200000e4 	.word	0x200000e4
 8000870:	2000029c 	.word	0x2000029c
 8000874:	200001df 	.word	0x200001df

08000878 <ButtonConrtrol>:

void ButtonConrtrol()
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	static uint8_t cluster_trip_status_prev = 0;
	//static uint16_t cluster_trip_push_cnt = 0;


	if( Input_Status.ign1_status == 1 ) {
 800087c:	4b84      	ldr	r3, [pc, #528]	; (8000a90 <ButtonConrtrol+0x218>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d103      	bne.n	800088c <ButtonConrtrol+0x14>
		Button_Status.ign1_status = 1;
 8000884:	4b83      	ldr	r3, [pc, #524]	; (8000a94 <ButtonConrtrol+0x21c>)
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	e006      	b.n	800089a <ButtonConrtrol+0x22>
	} else if( Input_Status.ign1_status == 0 ) {
 800088c:	4b80      	ldr	r3, [pc, #512]	; (8000a90 <ButtonConrtrol+0x218>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <ButtonConrtrol+0x22>
		Button_Status.ign1_status = 0;
 8000894:	4b7f      	ldr	r3, [pc, #508]	; (8000a94 <ButtonConrtrol+0x21c>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
	}

	if( Input_Status.ign2_status == 1 ) {
 800089a:	4b7d      	ldr	r3, [pc, #500]	; (8000a90 <ButtonConrtrol+0x218>)
 800089c:	79db      	ldrb	r3, [r3, #7]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d103      	bne.n	80008aa <ButtonConrtrol+0x32>
		Button_Status.ign2_status = 1;
 80008a2:	4b7c      	ldr	r3, [pc, #496]	; (8000a94 <ButtonConrtrol+0x21c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	71da      	strb	r2, [r3, #7]
 80008a8:	e006      	b.n	80008b8 <ButtonConrtrol+0x40>
	} else if( Input_Status.ign2_status == 0 ) {
 80008aa:	4b79      	ldr	r3, [pc, #484]	; (8000a90 <ButtonConrtrol+0x218>)
 80008ac:	79db      	ldrb	r3, [r3, #7]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <ButtonConrtrol+0x40>
		Button_Status.ign2_status = 0;
 80008b2:	4b78      	ldr	r3, [pc, #480]	; (8000a94 <ButtonConrtrol+0x21c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	71da      	strb	r2, [r3, #7]
	}

	/*
	 * Defogger Control
	 */
	if( Button_Status.ign1_status == 1 ) {
 80008b8:	4b76      	ldr	r3, [pc, #472]	; (8000a94 <ButtonConrtrol+0x21c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d135      	bne.n	800092c <ButtonConrtrol+0xb4>
		if( defogger_sw == 1 ) {
 80008c0:	4b75      	ldr	r3, [pc, #468]	; (8000a98 <ButtonConrtrol+0x220>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d121      	bne.n	800090c <ButtonConrtrol+0x94>
			Button_Status.defogger = 1;
 80008c8:	4b72      	ldr	r3, [pc, #456]	; (8000a94 <ButtonConrtrol+0x21c>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_3, SET);			// defogger sig/lamp on
 80008ce:	2201      	movs	r2, #1
 80008d0:	210c      	movs	r1, #12
 80008d2:	4872      	ldr	r0, [pc, #456]	; (8000a9c <ButtonConrtrol+0x224>)
 80008d4:	f003 f814 	bl	8003900 <HAL_GPIO_WritePin>
			if( ++deffoger_cnt > 30000 ) {									// on until 15m
 80008d8:	4b71      	ldr	r3, [pc, #452]	; (8000aa0 <ButtonConrtrol+0x228>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	4a70      	ldr	r2, [pc, #448]	; (8000aa0 <ButtonConrtrol+0x228>)
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	4b6f      	ldr	r3, [pc, #444]	; (8000aa0 <ButtonConrtrol+0x228>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f247 5230 	movw	r2, #30000	; 0x7530
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d930      	bls.n	8000950 <ButtonConrtrol+0xd8>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2| GPIO_PIN_3, RESET);	// defogger sig/lamp off
 80008ee:	2200      	movs	r2, #0
 80008f0:	210c      	movs	r1, #12
 80008f2:	486a      	ldr	r0, [pc, #424]	; (8000a9c <ButtonConrtrol+0x224>)
 80008f4:	f003 f804 	bl	8003900 <HAL_GPIO_WritePin>
				Button_Status.defogger = 0;
 80008f8:	4b66      	ldr	r3, [pc, #408]	; (8000a94 <ButtonConrtrol+0x21c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	709a      	strb	r2, [r3, #2]
				defogger_sw = 0;
 80008fe:	4b66      	ldr	r3, [pc, #408]	; (8000a98 <ButtonConrtrol+0x220>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
				deffoger_cnt = 0;
 8000904:	4b66      	ldr	r3, [pc, #408]	; (8000aa0 <ButtonConrtrol+0x228>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	e021      	b.n	8000950 <ButtonConrtrol+0xd8>
			}
		} else if( defogger_sw == 0) {
 800090c:	4b62      	ldr	r3, [pc, #392]	; (8000a98 <ButtonConrtrol+0x220>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11d      	bne.n	8000950 <ButtonConrtrol+0xd8>
			Button_Status.defogger = 0;
 8000914:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <ButtonConrtrol+0x21c>)
 8000916:	2200      	movs	r2, #0
 8000918:	709a      	strb	r2, [r3, #2]
			deffoger_cnt = 0;
 800091a:	4b61      	ldr	r3, [pc, #388]	; (8000aa0 <ButtonConrtrol+0x228>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_3, RESET);		// defogger sig/lamp off
 8000920:	2200      	movs	r2, #0
 8000922:	210c      	movs	r1, #12
 8000924:	485d      	ldr	r0, [pc, #372]	; (8000a9c <ButtonConrtrol+0x224>)
 8000926:	f002 ffeb 	bl	8003900 <HAL_GPIO_WritePin>
 800092a:	e011      	b.n	8000950 <ButtonConrtrol+0xd8>
		}
	} else if( Button_Status.ign1_status == 0 ) {
 800092c:	4b59      	ldr	r3, [pc, #356]	; (8000a94 <ButtonConrtrol+0x21c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10d      	bne.n	8000950 <ButtonConrtrol+0xd8>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_3, RESET);			// defogger sig/lamp off
 8000934:	2200      	movs	r2, #0
 8000936:	210c      	movs	r1, #12
 8000938:	4858      	ldr	r0, [pc, #352]	; (8000a9c <ButtonConrtrol+0x224>)
 800093a:	f002 ffe1 	bl	8003900 <HAL_GPIO_WritePin>
		Button_Status.defogger = 0;
 800093e:	4b55      	ldr	r3, [pc, #340]	; (8000a94 <ButtonConrtrol+0x21c>)
 8000940:	2200      	movs	r2, #0
 8000942:	709a      	strb	r2, [r3, #2]
		defogger_sw = 0;
 8000944:	4b54      	ldr	r3, [pc, #336]	; (8000a98 <ButtonConrtrol+0x220>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
		deffoger_cnt = 0;
 800094a:	4b55      	ldr	r3, [pc, #340]	; (8000aa0 <ButtonConrtrol+0x228>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
	}

	if( Input_Status.drv_open == 1 ) {
 8000950:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <ButtonConrtrol+0x218>)
 8000952:	799b      	ldrb	r3, [r3, #6]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d103      	bne.n	8000960 <ButtonConrtrol+0xe8>
		Button_Status.drv_open = 1;
 8000958:	4b4e      	ldr	r3, [pc, #312]	; (8000a94 <ButtonConrtrol+0x21c>)
 800095a:	2201      	movs	r2, #1
 800095c:	719a      	strb	r2, [r3, #6]
 800095e:	e006      	b.n	800096e <ButtonConrtrol+0xf6>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, SET);		//  sw lamp on
	} else if( Input_Status.drv_open == 0 ) {
 8000960:	4b4b      	ldr	r3, [pc, #300]	; (8000a90 <ButtonConrtrol+0x218>)
 8000962:	799b      	ldrb	r3, [r3, #6]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <ButtonConrtrol+0xf6>
		Button_Status.drv_open = 0;
 8000968:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <ButtonConrtrol+0x21c>)
 800096a:	2200      	movs	r2, #0
 800096c:	719a      	strb	r2, [r3, #6]
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, RESET);	//  sw lamp on
	}

	if( Input_Status.drv_close == 1 ) {
 800096e:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <ButtonConrtrol+0x218>)
 8000970:	795b      	ldrb	r3, [r3, #5]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d103      	bne.n	800097e <ButtonConrtrol+0x106>
		Button_Status.drv_close = 1;
 8000976:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <ButtonConrtrol+0x21c>)
 8000978:	2201      	movs	r2, #1
 800097a:	715a      	strb	r2, [r3, #5]
 800097c:	e006      	b.n	800098c <ButtonConrtrol+0x114>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, SET);		//  sw lamp on
	} else if( Input_Status.drv_close == 0 ) {
 800097e:	4b44      	ldr	r3, [pc, #272]	; (8000a90 <ButtonConrtrol+0x218>)
 8000980:	795b      	ldrb	r3, [r3, #5]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d102      	bne.n	800098c <ButtonConrtrol+0x114>
		Button_Status.drv_close = 0;
 8000986:	4b43      	ldr	r3, [pc, #268]	; (8000a94 <ButtonConrtrol+0x21c>)
 8000988:	2200      	movs	r2, #0
 800098a:	715a      	strb	r2, [r3, #5]
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, RESET);	//  sw lamp on
	}

	if( Input_Status.ps_open == 1 ) {
 800098c:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <ButtonConrtrol+0x218>)
 800098e:	791b      	ldrb	r3, [r3, #4]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d103      	bne.n	800099c <ButtonConrtrol+0x124>
		Button_Status.ps_open = 1;
 8000994:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <ButtonConrtrol+0x21c>)
 8000996:	2201      	movs	r2, #1
 8000998:	711a      	strb	r2, [r3, #4]
 800099a:	e006      	b.n	80009aa <ButtonConrtrol+0x132>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, SET);		//  sw lamp on
	} else if( Input_Status.ps_open == 0 ) {
 800099c:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <ButtonConrtrol+0x218>)
 800099e:	791b      	ldrb	r3, [r3, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <ButtonConrtrol+0x132>
		Button_Status.ps_open = 0;
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <ButtonConrtrol+0x21c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	711a      	strb	r2, [r3, #4]
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, RESET);	//  sw lamp on
	}

	if( Input_Status.ps_close == 1 ) {
 80009aa:	4b39      	ldr	r3, [pc, #228]	; (8000a90 <ButtonConrtrol+0x218>)
 80009ac:	78db      	ldrb	r3, [r3, #3]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d103      	bne.n	80009ba <ButtonConrtrol+0x142>
		Button_Status.ps_close = 1;
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <ButtonConrtrol+0x21c>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	70da      	strb	r2, [r3, #3]
 80009b8:	e006      	b.n	80009c8 <ButtonConrtrol+0x150>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, SET);		//  sw lamp on
	} else if( Input_Status.ps_close == 0 ) {
 80009ba:	4b35      	ldr	r3, [pc, #212]	; (8000a90 <ButtonConrtrol+0x218>)
 80009bc:	78db      	ldrb	r3, [r3, #3]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d102      	bne.n	80009c8 <ButtonConrtrol+0x150>
		Button_Status.ps_close = 0;
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <ButtonConrtrol+0x21c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	70da      	strb	r2, [r3, #3]
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, RESET);	//  sw lamp on
	}

	if( autonomous_sw == 1 ) {
 80009c8:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <ButtonConrtrol+0x22c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d103      	bne.n	80009d8 <ButtonConrtrol+0x160>
		Button_Status.autonomous = 1;
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <ButtonConrtrol+0x21c>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	721a      	strb	r2, [r3, #8]
 80009d6:	e006      	b.n	80009e6 <ButtonConrtrol+0x16e>
	} else if( autonomous_sw == 0 ) {
 80009d8:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <ButtonConrtrol+0x22c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <ButtonConrtrol+0x16e>
		Button_Status.autonomous = 0;
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <ButtonConrtrol+0x21c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	721a      	strb	r2, [r3, #8]
	}

	if( auto_mode == 1 ) {
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <ButtonConrtrol+0x230>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d106      	bne.n	80009fc <ButtonConrtrol+0x184>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, SET);// autonomous button lamp on // 220419 only use LED 1
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	4829      	ldr	r0, [pc, #164]	; (8000a9c <ButtonConrtrol+0x224>)
 80009f6:	f002 ff83 	bl	8003900 <HAL_GPIO_WritePin>
 80009fa:	e009      	b.n	8000a10 <ButtonConrtrol+0x198>

	} else if( auto_mode == 0 ) {
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <ButtonConrtrol+0x230>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d105      	bne.n	8000a10 <ButtonConrtrol+0x198>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, RESET);	// autonomous button lamp off
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0a:	4824      	ldr	r0, [pc, #144]	; (8000a9c <ButtonConrtrol+0x224>)
 8000a0c:	f002 ff78 	bl	8003900 <HAL_GPIO_WritePin>
		cluster_trip_status = cluster_trip_push_cnt = 0;
	}
	cluster_trip_status_prev = cluster_trip_status;
	*/

	if( Input_Status.cluster_trip == 1 ){
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <ButtonConrtrol+0x218>)
 8000a12:	7a5b      	ldrb	r3, [r3, #9]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d109      	bne.n	8000a2c <ButtonConrtrol+0x1b4>
			cluster_trip_push_cnt++;
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <ButtonConrtrol+0x234>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <ButtonConrtrol+0x234>)
 8000a22:	701a      	strb	r2, [r3, #0]
			cluster_trip_check_cnt = 0;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <ButtonConrtrol+0x238>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8000a2a:	e02f      	b.n	8000a8c <ButtonConrtrol+0x214>
	}else if( Input_Status.cluster_trip == 0 ){
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <ButtonConrtrol+0x218>)
 8000a2e:	7a5b      	ldrb	r3, [r3, #9]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d12b      	bne.n	8000a8c <ButtonConrtrol+0x214>
		if( cluster_trip_push_cnt == 0){
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <ButtonConrtrol+0x234>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d103      	bne.n	8000a44 <ButtonConrtrol+0x1cc>
				cluster_trip_status_tx = 0;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <ButtonConrtrol+0x23c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	e012      	b.n	8000a6a <ButtonConrtrol+0x1f2>
		}else if( cluster_trip_push_cnt >= 5 && cluster_trip_push_cnt < 25){
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <ButtonConrtrol+0x234>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d907      	bls.n	8000a5c <ButtonConrtrol+0x1e4>
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <ButtonConrtrol+0x234>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b18      	cmp	r3, #24
 8000a52:	d803      	bhi.n	8000a5c <ButtonConrtrol+0x1e4>
				cluster_trip_status_tx = 1;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <ButtonConrtrol+0x23c>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
 8000a5a:	e006      	b.n	8000a6a <ButtonConrtrol+0x1f2>
		}else if( cluster_trip_push_cnt >= 25){
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <ButtonConrtrol+0x234>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b18      	cmp	r3, #24
 8000a62:	d902      	bls.n	8000a6a <ButtonConrtrol+0x1f2>
				cluster_trip_status_tx = 2;
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <ButtonConrtrol+0x23c>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	701a      	strb	r2, [r3, #0]
		if( cluster_trip_check_cnt >= 3 ){
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <ButtonConrtrol+0x238>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d906      	bls.n	8000a80 <ButtonConrtrol+0x208>
			cluster_trip_push_cnt = 0;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <ButtonConrtrol+0x234>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
			cluster_trip_check_cnt = 10;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <ButtonConrtrol+0x238>)
 8000a7a:	220a      	movs	r2, #10
 8000a7c:	701a      	strb	r2, [r3, #0]
}
 8000a7e:	e005      	b.n	8000a8c <ButtonConrtrol+0x214>
			cluster_trip_check_cnt++;
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <ButtonConrtrol+0x238>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <ButtonConrtrol+0x238>)
 8000a8a:	701a      	strb	r2, [r3, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200001d4 	.word	0x200001d4
 8000a94:	2000029c 	.word	0x2000029c
 8000a98:	200001df 	.word	0x200001df
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	200001d0 	.word	0x200001d0
 8000aa4:	200000bf 	.word	0x200000bf
 8000aa8:	200001e1 	.word	0x200001e1
 8000aac:	20000240 	.word	0x20000240
 8000ab0:	20000229 	.word	0x20000229
 8000ab4:	200000ef 	.word	0x200000ef

08000ab8 <ButtonDataConv>:


void ButtonDataConv(uint8_t *txdata, uint8_t *flag)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
	txdata[0] = Button_Status.ign1_status | (Button_Status.defogger<<2) | (Button_Status.drv_open<<3) |
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <ButtonDataConv+0xf0>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b25a      	sxtb	r2, r3
 8000ac8:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <ButtonDataConv+0xf0>)
 8000aca:	789b      	ldrb	r3, [r3, #2]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b25a      	sxtb	r2, r3
 8000ad4:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <ButtonDataConv+0xf0>)
 8000ad6:	799b      	ldrb	r3, [r3, #6]
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b25a      	sxtb	r2, r3
			(Button_Status.drv_close<<4) | (Button_Status.ps_open<<5) | (Button_Status.ps_close<<6) | (Button_Status.ign2_status<<7);
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <ButtonDataConv+0xf0>)
 8000ae2:	795b      	ldrb	r3, [r3, #5]
 8000ae4:	011b      	lsls	r3, r3, #4
	txdata[0] = Button_Status.ign1_status | (Button_Status.defogger<<2) | (Button_Status.drv_open<<3) |
 8000ae6:	b25b      	sxtb	r3, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b25a      	sxtb	r2, r3
			(Button_Status.drv_close<<4) | (Button_Status.ps_open<<5) | (Button_Status.ps_close<<6) | (Button_Status.ign2_status<<7);
 8000aec:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <ButtonDataConv+0xf0>)
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	015b      	lsls	r3, r3, #5
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25a      	sxtb	r2, r3
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <ButtonDataConv+0xf0>)
 8000afa:	78db      	ldrb	r3, [r3, #3]
 8000afc:	019b      	lsls	r3, r3, #6
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b25a      	sxtb	r2, r3
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <ButtonDataConv+0xf0>)
 8000b06:	79db      	ldrb	r3, [r3, #7]
 8000b08:	01db      	lsls	r3, r3, #7
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	b2da      	uxtb	r2, r3
	txdata[0] = Button_Status.ign1_status | (Button_Status.defogger<<2) | (Button_Status.drv_open<<3) |
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	701a      	strb	r2, [r3, #0]
	txdata[1] = vehicle_vel;
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <ButtonDataConv+0xf4>)
 8000b18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	701a      	strb	r2, [r3, #0]
	txdata[2] = vehicle_vel >> 8;
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <ButtonDataConv+0xf4>)
 8000b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2a:	121b      	asrs	r3, r3, #8
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3302      	adds	r3, #2
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	701a      	strb	r2, [r3, #0]
	txdata[3] = vehicle_dec;
 8000b36:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <ButtonDataConv+0xf8>)
 8000b38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3303      	adds	r3, #3
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	701a      	strb	r2, [r3, #0]
	txdata[4] = vehicle_dec >> 8;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <ButtonDataConv+0xf8>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	121b      	asrs	r3, r3, #8
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3304      	adds	r3, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	701a      	strb	r2, [r3, #0]
	txdata[5] = brake_stauts | (shift_status<<1) | (epb_status<<3);
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <ButtonDataConv+0xfc>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	b25a      	sxtb	r2, r3
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <ButtonDataConv+0x100>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b25a      	sxtb	r2, r3
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <ButtonDataConv+0x104>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b25a      	sxtb	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3305      	adds	r3, #5
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	701a      	strb	r2, [r3, #0]
	txdata[6] = ems_status | (auto_mode<<1);
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <ButtonDataConv+0x108>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	b25a      	sxtb	r2, r3
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <ButtonDataConv+0x10c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b25a      	sxtb	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3306      	adds	r3, #6
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	701a      	strb	r2, [r3, #0]

	(*flag) = 1;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	2000029c 	.word	0x2000029c
 8000bac:	200002cc 	.word	0x200002cc
 8000bb0:	20000248 	.word	0x20000248
 8000bb4:	20000034 	.word	0x20000034
 8000bb8:	200000f1 	.word	0x200000f1
 8000bbc:	20000247 	.word	0x20000247
 8000bc0:	200001e1 	.word	0x200001e1
 8000bc4:	2000022a 	.word	0x2000022a

08000bc8 <HAL_TIM_PeriodElapsedCallback>:
#include "ctrl_routine.h"
#include "string.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a74      	ldr	r2, [pc, #464]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	f040 818c 	bne.w	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x32c>
		if( timer6_cmd_num == 0 ) {
 8000bdc:	4b73      	ldr	r3, [pc, #460]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x22>
			ButtonRead();		// Read Switch
 8000be4:	f7ff fca4 	bl	8000530 <ButtonRead>
 8000be8:	e13e      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>

		} else if( timer6_cmd_num == 1 ) {
 8000bea:	4b70      	ldr	r3, [pc, #448]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d102      	bne.n	8000bf8 <HAL_TIM_PeriodElapsedCallback+0x30>
			ButtonConrtrol();
 8000bf2:	f7ff fe41 	bl	8000878 <ButtonConrtrol>
 8000bf6:	e137      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>


		} else if( timer6_cmd_num == 2 ) {
 8000bf8:	4b6c      	ldr	r3, [pc, #432]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d10b      	bne.n	8000c18 <HAL_TIM_PeriodElapsedCallback+0x50>
			ButtonDataConv(button_tx_data, &button_tx_flag);
 8000c00:	496b      	ldr	r1, [pc, #428]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000c02:	486c      	ldr	r0, [pc, #432]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c04:	f7ff ff58 	bl	8000ab8 <ButtonDataConv>
			LocalTxMessage(CAN_ID_ILCINFO, 8, button_tx_data, &button_tx_flag);
 8000c08:	4b69      	ldr	r3, [pc, #420]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000c0a:	4a6a      	ldr	r2, [pc, #424]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c12:	f000 fbc5 	bl	80013a0 <LocalTxMessage>
 8000c16:	e127      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>

		} else if( timer6_cmd_num == 3 ) {
 8000c18:	4b64      	ldr	r3, [pc, #400]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d10c      	bne.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x72>
			AkitCmdConv(ak2bc_tx_data, ak2bc_rx_data, &ak2bc_tx_flag);
 8000c20:	4a65      	ldr	r2, [pc, #404]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000c22:	4966      	ldr	r1, [pc, #408]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000c24:	4866      	ldr	r0, [pc, #408]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000c26:	f000 feab 	bl	8001980 <AkitCmdConv>
			LocalTxMessage(CAN_ID_AKIT_CMD, 8, ak2bc_tx_data, &ak2bc_tx_flag);
 8000c2a:	4b63      	ldr	r3, [pc, #396]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000c2c:	4a64      	ldr	r2, [pc, #400]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000c2e:	2108      	movs	r1, #8
 8000c30:	f44f 7004 	mov.w	r0, #528	; 0x210
 8000c34:	f000 fbb4 	bl	80013a0 <LocalTxMessage>
 8000c38:	e116      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>

		} else if( timer6_cmd_num == 4 ) {
 8000c3a:	4b5c      	ldr	r3, [pc, #368]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d10a      	bne.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0x90>

			BCMDataConv(bcm_tx_data, &bcm_tx_flag);
 8000c42:	4960      	ldr	r1, [pc, #384]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000c44:	4860      	ldr	r0, [pc, #384]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c46:	f000 fe43 	bl	80018d0 <BCMDataConv>
			LLCTxMessage(CAN_ID_BCMINFO, 8, bcm_tx_data, &bcm_tx_flag);
 8000c4a:	4b5e      	ldr	r3, [pc, #376]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000c4c:	4a5e      	ldr	r2, [pc, #376]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c4e:	2108      	movs	r1, #8
 8000c50:	2030      	movs	r0, #48	; 0x30
 8000c52:	f000 fbd7 	bl	8001404 <LLCTxMessage>
 8000c56:	e107      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>


		} else if( timer6_cmd_num == 5 ) {
 8000c58:	4b54      	ldr	r3, [pc, #336]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b05      	cmp	r3, #5
 8000c5e:	d11c      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0xd2>
			if( ++cc2ic_tx_cnt > 49 ) {
 8000c60:	4b5a      	ldr	r3, [pc, #360]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	f240 80f9 	bls.w	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				if( cluster_can_tx_flag == 1 ) {
 8000c76:	4b56      	ldr	r3, [pc, #344]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d109      	bne.n	8000c92 <HAL_TIM_PeriodElapsedCallback+0xca>
					CC2ICDataConv(cc2ic_tx_data, &cc2ic_tx_flag);
 8000c7e:	4955      	ldr	r1, [pc, #340]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000c80:	4855      	ldr	r0, [pc, #340]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000c82:	f000 fdc5 	bl	8001810 <CC2ICDataConv>
					ULCTxMessage(CAN_ID_CC2ICINFO, 8, cc2ic_tx_data, &cc2ic_tx_flag);
 8000c86:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000c88:	4a53      	ldr	r2, [pc, #332]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	4853      	ldr	r0, [pc, #332]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000c8e:	f000 fb45 	bl	800131c <ULCTxMessage>
				}
				cc2ic_tx_cnt = 0;
 8000c92:	4b4e      	ldr	r3, [pc, #312]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	e0e6      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
			}


		} else if( timer6_cmd_num == 6 ) {
 8000c9a:	4b44      	ldr	r3, [pc, #272]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d11c      	bne.n	8000cdc <HAL_TIM_PeriodElapsedCallback+0x114>
			if( ++sm2ic_tx_cnt > 4 ) {
 8000ca2:	4b4f      	ldr	r3, [pc, #316]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	f240 80d8 	bls.w	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				if( cluster_can_tx_flag == 1 ) {
 8000cb8:	4b45      	ldr	r3, [pc, #276]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d109      	bne.n	8000cd4 <HAL_TIM_PeriodElapsedCallback+0x10c>
					SM2ICDataConv(sm2ic_tx_data, &sm2ic_tx_flag);
 8000cc0:	4948      	ldr	r1, [pc, #288]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000cc2:	4849      	ldr	r0, [pc, #292]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000cc4:	f000 fd58 	bl	8001778 <SM2ICDataConv>
					ULCTxMessage(CAN_ID_SM2ICINFO, 8, sm2ic_tx_data, &sm2ic_tx_flag);
 8000cc8:	4b46      	ldr	r3, [pc, #280]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000cca:	4a47      	ldr	r2, [pc, #284]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000ccc:	2108      	movs	r1, #8
 8000cce:	4847      	ldr	r0, [pc, #284]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000cd0:	f000 fb24 	bl	800131c <ULCTxMessage>
				}
				sm2ic_tx_cnt = 0;
 8000cd4:	4b42      	ldr	r3, [pc, #264]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e0c5      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
			}


		} else if( timer6_cmd_num == 7 ) {
 8000cdc:	4b33      	ldr	r3, [pc, #204]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d11c      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x156>
			if( ++dtc_tx_cnt > 4 ) {
 8000ce4:	4b42      	ldr	r3, [pc, #264]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b40      	ldr	r3, [pc, #256]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	4b3f      	ldr	r3, [pc, #252]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	f240 80b7 	bls.w	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				if( cluster_can_tx_flag == 1 ) {
 8000cfa:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d109      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x14e>
					DTCDataConv(dtc_tx_data, &dtc_tx_flag);
 8000d02:	493c      	ldr	r1, [pc, #240]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d04:	483c      	ldr	r0, [pc, #240]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000d06:	f000 fcb3 	bl	8001670 <DTCDataConv>
					ULCTxMessage(CAN_ID_DTCINFO, 8, dtc_tx_data, &dtc_tx_flag);
 8000d0a:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000d0c:	4a3a      	ldr	r2, [pc, #232]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000d0e:	2108      	movs	r1, #8
 8000d10:	483a      	ldr	r0, [pc, #232]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000d12:	f000 fb03 	bl	800131c <ULCTxMessage>
				}
				dtc_tx_cnt = 0;
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e0a4      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
			}


		} else if( timer6_cmd_num == 8 ) {
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d11c      	bne.n	8000d60 <HAL_TIM_PeriodElapsedCallback+0x198>
			if( ++bc2ic_tx_cnt > 4 ) {
 8000d26:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	f240 8096 	bls.w	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				if( cluster_can_tx_flag == 1 ) {
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d109      	bne.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x190>
					BC2ICDataConv(bc2ic_tx_data, &bc2ic_tx_flag);
 8000d44:	492f      	ldr	r1, [pc, #188]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000d46:	4830      	ldr	r0, [pc, #192]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d48:	f000 fb8e 	bl	8001468 <BC2ICDataConv>
					ULCTxMessage(CAN_ID_BC2ICINFO, 8, bc2ic_tx_data, &bc2ic_tx_flag);
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000d4e:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000d50:	2108      	movs	r1, #8
 8000d52:	482e      	ldr	r0, [pc, #184]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000d54:	f000 fae2 	bl	800131c <ULCTxMessage>
				}
				bc2ic_tx_cnt = 0;
 8000d58:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e083      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
			}

		} else if( timer6_cmd_num == 9 ) {
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	d17f      	bne.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
//			CANReStart();
			// stop mode wake-up condition
			if( (Button_Status.ign1_status==1) || (door_open_status==1) || (charge_door_status==1) || (rke_lock_staus==1)
 8000d68:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d013      	beq.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d00f      	beq.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d00b      	beq.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d007      	beq.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x1d0>
					|| (rke_unlock_staus==1) || (stop_lamp_on==1) ) {
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d003      	beq.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d149      	bne.n	8000e2c <HAL_TIM_PeriodElapsedCallback+0x264>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9e:	4822      	ldr	r0, [pc, #136]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000da0:	f002 fdae 	bl	8003900 <HAL_GPIO_WritePin>
 8000da4:	e060      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000da6:	bf00      	nop
 8000da8:	40001000 	.word	0x40001000
 8000dac:	2000027d 	.word	0x2000027d
 8000db0:	2000010c 	.word	0x2000010c
 8000db4:	20000040 	.word	0x20000040
 8000db8:	20000250 	.word	0x20000250
 8000dbc:	20000068 	.word	0x20000068
 8000dc0:	200001e4 	.word	0x200001e4
 8000dc4:	20000228 	.word	0x20000228
 8000dc8:	200000c8 	.word	0x200000c8
 8000dcc:	200001e2 	.word	0x200001e2
 8000dd0:	2000019d 	.word	0x2000019d
 8000dd4:	20000098 	.word	0x20000098
 8000dd8:	200002ac 	.word	0x200002ac
 8000ddc:	18ff1747 	.word	0x18ff1747
 8000de0:	2000024e 	.word	0x2000024e
 8000de4:	200000d8 	.word	0x200000d8
 8000de8:	200000a0 	.word	0x200000a0
 8000dec:	18ff171f 	.word	0x18ff171f
 8000df0:	2000022c 	.word	0x2000022c
 8000df4:	20000070 	.word	0x20000070
 8000df8:	20000048 	.word	0x20000048
 8000dfc:	18ff1722 	.word	0x18ff1722
 8000e00:	200000bc 	.word	0x200000bc
 8000e04:	20000241 	.word	0x20000241
 8000e08:	200000d0 	.word	0x200000d0
 8000e0c:	18ff1721 	.word	0x18ff1721
 8000e10:	2000029c 	.word	0x2000029c
 8000e14:	2000024f 	.word	0x2000024f
 8000e18:	2000009d 	.word	0x2000009d
 8000e1c:	200001ec 	.word	0x200001ec
 8000e20:	200002b4 	.word	0x200002b4
 8000e24:	20000141 	.word	0x20000141
 8000e28:	40021000 	.word	0x40021000
			} else if( (Button_Status.ign1_status==0) && (door_open_status==0) && (charge_door_status==0) && (rke_unlock_staus==0)
 8000e2c:	4b33      	ldr	r3, [pc, #204]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d119      	bne.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000e34:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d115      	bne.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000e3c:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d111      	bne.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000e44:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10d      	bne.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
					&& (rke_lock_staus==0) && (stop_lamp_on==0) ) {
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d109      	bne.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000e54:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d105      	bne.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e62:	482c      	ldr	r0, [pc, #176]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000e64:	f002 fd4c 	bl	8003900 <HAL_GPIO_WritePin>
			}

		}

		if( ++timer6_cmd_num == 10 ) {
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b0a      	cmp	r3, #10
 8000e7a:	d13b      	bne.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x32c>
			timer6_cmd_num = 0;
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
			// Stop mode enable condition
			if( (Button_Status.ign1_status==0) && (door_open_status==0) && (charge_door_status==0) && (rke_unlock_staus==0)
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d12a      	bne.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d126      	bne.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d122      	bne.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d11e      	bne.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x318>
					&& (rke_lock_staus==0) && (stop_lamp_on==0) ) {
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d11a      	bne.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d116      	bne.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x318>
				if( ++stop_mode_cnt > 1500 ) {	// wait until 30s
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000ebc:	801a      	strh	r2, [r3, #0]
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d914      	bls.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x32c>
					stop_enable = 1;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
					stop_mode_cnt = 1495;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000ed2:	f240 52d7 	movw	r2, #1495	; 0x5d7
 8000ed6:	801a      	strh	r2, [r3, #0]
					cluster_can_tx_flag = 0;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
				if( ++stop_mode_cnt > 1500 ) {	// wait until 30s
 8000ede:	e009      	b.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x32c>
				}
			} else {
				stop_mode_cnt = 0;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	801a      	strh	r2, [r3, #0]
				stop_enable = 0;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
				cluster_can_tx_flag = 1;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
			timer6_cmd_num_1000ms = 0;
		}
#endif

	}
}
 8000ef2:	e7ff      	b.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0x32c>
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000029c 	.word	0x2000029c
 8000f00:	2000024f 	.word	0x2000024f
 8000f04:	2000009d 	.word	0x2000009d
 8000f08:	200002b4 	.word	0x200002b4
 8000f0c:	200001ec 	.word	0x200001ec
 8000f10:	20000141 	.word	0x20000141
 8000f14:	40021000 	.word	0x40021000
 8000f18:	2000027d 	.word	0x2000027d
 8000f1c:	200002b6 	.word	0x200002b6
 8000f20:	20000099 	.word	0x20000099
 8000f24:	2000019d 	.word	0x2000019d

08000f28 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	if( hcan->Instance == CAN1 ) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d10a      	bne.n	8000f50 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1_rx_header, can1_rx_data);
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f3c:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f001 fe9f 	bl	8002c84 <HAL_CAN_GetRxMessage>
		ClusterToILC(&can1_rx_header, can1_rx_data);
 8000f46:	4916      	ldr	r1, [pc, #88]	; (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000f48:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000f4a:	f000 f83b 	bl	8000fc4 <ClusterToILC>

	} else if( hcan->Instance == CAN3 ) {
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can3_rx_header, can3_rx_data);
		LLCToILC(&can3_rx_header, can3_rx_data);
	}
}
 8000f4e:	e021      	b.n	8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
	} else if ( hcan->Instance == CAN2 ) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10d      	bne.n	8000f76 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can2_rx_header, can2_rx_data);
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f001 fe8f 	bl	8002c84 <HAL_CAN_GetRxMessage>
		LocalToILC(&can2_rx_header, can2_rx_data);
 8000f66:	4911      	ldr	r1, [pc, #68]	; (8000fac <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000f6a:	f000 f847 	bl	8000ffc <LocalToILC>
		can_not_receive_cnt = 0;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
}
 8000f74:	e00e      	b.n	8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
	} else if( hcan->Instance == CAN3 ) {
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d109      	bne.n	8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can3_rx_header, can3_rx_data);
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000f82:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000f84:	2100      	movs	r1, #0
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f001 fe7c 	bl	8002c84 <HAL_CAN_GetRxMessage>
		LLCToILC(&can3_rx_header, can3_rx_data);
 8000f8c:	490b      	ldr	r1, [pc, #44]	; (8000fbc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000f90:	f000 f954 	bl	800123c <LLCToILC>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40006400 	.word	0x40006400
 8000fa0:	20000230 	.word	0x20000230
 8000fa4:	200001ac 	.word	0x200001ac
 8000fa8:	40006800 	.word	0x40006800
 8000fac:	200002b8 	.word	0x200002b8
 8000fb0:	200001fc 	.word	0x200001fc
 8000fb4:	200000bd 	.word	0x200000bd
 8000fb8:	40003400 	.word	0x40003400
 8000fbc:	20000090 	.word	0x20000090
 8000fc0:	20000074 	.word	0x20000074

08000fc4 <ClusterToILC>:

void ClusterToILC(CAN_RxHeaderTypeDef *rxheader, uint8_t *rxdata) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	switch(rxheader->ExtId) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <ClusterToILC+0x30>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d106      	bne.n	8000fe6 <ClusterToILC+0x22>
	case CAN_ID_AK2BC:
		memcpy(ak2bc_rx_data, rxdata, 8);
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <ClusterToILC+0x34>)
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	6811      	ldr	r1, [r2, #0]
 8000fde:	6852      	ldr	r2, [r2, #4]
 8000fe0:	6019      	str	r1, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
		break;
 8000fe4:	bf00      	nop
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	18ff1725 	.word	0x18ff1725
 8000ff8:	20000068 	.word	0x20000068

08000ffc <LocalToILC>:

void LocalToILC(CAN_RxHeaderTypeDef *rxheader, uint8_t *rxdata) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
	switch(rxheader->StdId) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f240 1243 	movw	r2, #323	; 0x143
 800100e:	4293      	cmp	r3, r2
 8001010:	f000 80bb 	beq.w	800118a <LocalToILC+0x18e>
 8001014:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8001018:	f080 80dc 	bcs.w	80011d4 <LocalToILC+0x1d8>
 800101c:	f240 1221 	movw	r2, #289	; 0x121
 8001020:	4293      	cmp	r3, r2
 8001022:	d027      	beq.n	8001074 <LocalToILC+0x78>
 8001024:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8001028:	f080 80d4 	bcs.w	80011d4 <LocalToILC+0x1d8>
 800102c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001030:	d004      	beq.n	800103c <LocalToILC+0x40>
 8001032:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001036:	f000 80b1 	beq.w	800119c <LocalToILC+0x1a0>
		charge_mode = rxdata[2];
		car_ready_status = rxdata[3];
#endif
		break;
	}
}
 800103a:	e0cb      	b.n	80011d4 <LocalToILC+0x1d8>
		stop_lamp_on = (rxdata[0]&0x10) >> 4;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	111b      	asrs	r3, r3, #4
 8001042:	b2db      	uxtb	r3, r3
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b65      	ldr	r3, [pc, #404]	; (80011e0 <LocalToILC+0x1e4>)
 800104c:	701a      	strb	r2, [r3, #0]
		head_low_lamp_fail = rxdata[5]&0x01;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	3305      	adds	r3, #5
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b62      	ldr	r3, [pc, #392]	; (80011e4 <LocalToILC+0x1e8>)
 800105c:	701a      	strb	r2, [r3, #0]
		stop_lamp_fail = (rxdata[5]&0x02) >> 1;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	3305      	adds	r3, #5
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	105b      	asrs	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b5e      	ldr	r3, [pc, #376]	; (80011e8 <LocalToILC+0x1ec>)
 8001070:	701a      	strb	r2, [r3, #0]
		break;
 8001072:	e0af      	b.n	80011d4 <LocalToILC+0x1d8>
		tail_lamp_status = rxdata[0]&0x01;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b5b      	ldr	r3, [pc, #364]	; (80011ec <LocalToILC+0x1f0>)
 8001080:	701a      	strb	r2, [r3, #0]
		hazard_lamp_status = (rxdata[0]&0x02) >> 1;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	105b      	asrs	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <LocalToILC+0x1f4>)
 8001092:	701a      	strb	r2, [r3, #0]
		turn_lamp_left_status = (rxdata[0]&0x04) >> 2;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	109b      	asrs	r3, r3, #2
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <LocalToILC+0x1f8>)
 80010a4:	701a      	strb	r2, [r3, #0]
		turn_lamp_right_status = (rxdata[0]&0x08) >> 3;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	10db      	asrs	r3, r3, #3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <LocalToILC+0x1fc>)
 80010b6:	701a      	strb	r2, [r3, #0]
		head_lamp_low_status = (rxdata[0]&0x10) >> 4;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	111b      	asrs	r3, r3, #4
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b4d      	ldr	r3, [pc, #308]	; (80011fc <LocalToILC+0x200>)
 80010c8:	701a      	strb	r2, [r3, #0]
		head_lamp_high_status = (rxdata[0]&0x20) >> 5;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	115b      	asrs	r3, r3, #5
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b49      	ldr	r3, [pc, #292]	; (8001200 <LocalToILC+0x204>)
 80010da:	701a      	strb	r2, [r3, #0]
		door_open_status = (rxdata[0]&0x40) >> 6;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	119b      	asrs	r3, r3, #6
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b46      	ldr	r3, [pc, #280]	; (8001204 <LocalToILC+0x208>)
 80010ec:	701a      	strb	r2, [r3, #0]
		charge_door_status = (rxdata[0]&0x80) >> 7;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b44      	ldr	r3, [pc, #272]	; (8001208 <LocalToILC+0x20c>)
 80010f8:	701a      	strb	r2, [r3, #0]
		rke_unlock_staus = rxdata[1]&0x01;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <LocalToILC+0x210>)
 8001108:	701a      	strb	r2, [r3, #0]
		rke_lock_staus = (rxdata[1]&0x02) >> 1;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	105b      	asrs	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <LocalToILC+0x214>)
 800111c:	701a      	strb	r2, [r3, #0]
		turn_left_lamp_fail = rxdata[6]&0x01;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	3306      	adds	r3, #6
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b3a      	ldr	r3, [pc, #232]	; (8001214 <LocalToILC+0x218>)
 800112c:	701a      	strb	r2, [r3, #0]
		turn_right_lamp_fail = (rxdata[6]&0x02) >> 1;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	3306      	adds	r3, #6
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	105b      	asrs	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b36      	ldr	r3, [pc, #216]	; (8001218 <LocalToILC+0x21c>)
 8001140:	701a      	strb	r2, [r3, #0]
		Button_Status.accel_decel_sw = rxdata[7]&0x03;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	3307      	adds	r3, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <LocalToILC+0x220>)
 8001150:	729a      	strb	r2, [r3, #10]
		Button_Status.drvie_mode_sw = (rxdata[7]&0x0C) >> 2;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	3307      	adds	r3, #7
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	109b      	asrs	r3, r3, #2
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <LocalToILC+0x220>)
 8001164:	72da      	strb	r2, [r3, #11]
		Button_Status.logging_sw = (rxdata[7]&0x30) >> 4;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	3307      	adds	r3, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	111b      	asrs	r3, r3, #4
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b29      	ldr	r3, [pc, #164]	; (800121c <LocalToILC+0x220>)
 8001178:	731a      	strb	r2, [r3, #12]
		Button_Status.marker_sw = (rxdata[7]&0xC0) >> 6;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	3307      	adds	r3, #7
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	099b      	lsrs	r3, r3, #6
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <LocalToILC+0x220>)
 8001186:	735a      	strb	r2, [r3, #13]
		break;
 8001188:	e024      	b.n	80011d4 <LocalToILC+0x1d8>
		seatbelt_warning_status = rxdata[0]&0xFF;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <LocalToILC+0x224>)
 8001190:	701a      	strb	r2, [r3, #0]
		seat_status = rxdata[1];
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	785a      	ldrb	r2, [r3, #1]
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <LocalToILC+0x228>)
 8001198:	701a      	strb	r2, [r3, #0]
		break;
 800119a:	e01b      	b.n	80011d4 <LocalToILC+0x1d8>
		regenerative_brake_value = rxdata[0];
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	781a      	ldrb	r2, [r3, #0]
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <LocalToILC+0x22c>)
 80011a2:	701a      	strb	r2, [r3, #0]
		if( regenerative_brake_value == 0 ) {
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <LocalToILC+0x22c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d103      	bne.n	80011b4 <LocalToILC+0x1b8>
			regenerative_brake_mode = 0;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <LocalToILC+0x230>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e002      	b.n	80011ba <LocalToILC+0x1be>
			regenerative_brake_mode = 1;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <LocalToILC+0x230>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
		soc_value = rxdata[1];
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	785a      	ldrb	r2, [r3, #1]
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <LocalToILC+0x234>)
 80011c0:	701a      	strb	r2, [r3, #0]
		charge_mode = rxdata[2];
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	789a      	ldrb	r2, [r3, #2]
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <LocalToILC+0x238>)
 80011c8:	701a      	strb	r2, [r3, #0]
		car_ready_status = rxdata[3];
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	78da      	ldrb	r2, [r3, #3]
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <LocalToILC+0x23c>)
 80011d0:	701a      	strb	r2, [r3, #0]
		break;
 80011d2:	bf00      	nop
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000141 	.word	0x20000141
 80011e4:	20000050 	.word	0x20000050
 80011e8:	200001ed 	.word	0x200001ed
 80011ec:	200001a8 	.word	0x200001a8
 80011f0:	200001de 	.word	0x200001de
 80011f4:	2000009a 	.word	0x2000009a
 80011f8:	200001cc 	.word	0x200001cc
 80011fc:	200001a9 	.word	0x200001a9
 8001200:	20000242 	.word	0x20000242
 8001204:	2000024f 	.word	0x2000024f
 8001208:	2000009d 	.word	0x2000009d
 800120c:	200002b4 	.word	0x200002b4
 8001210:	200001ec 	.word	0x200001ec
 8001214:	20000138 	.word	0x20000138
 8001218:	200000be 	.word	0x200000be
 800121c:	2000029c 	.word	0x2000029c
 8001220:	2000024b 	.word	0x2000024b
 8001224:	200001aa 	.word	0x200001aa
 8001228:	20000246 	.word	0x20000246
 800122c:	200000f0 	.word	0x200000f0
 8001230:	2000022b 	.word	0x2000022b
 8001234:	200001e0 	.word	0x200001e0
 8001238:	200000f2 	.word	0x200000f2

0800123c <LLCToILC>:

void LLCToILC(CAN_RxHeaderTypeDef *rxheader, uint8_t *rxdata) {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	switch(rxheader->StdId) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b20      	cmp	r3, #32
 800124c:	d14f      	bne.n	80012ee <LLCToILC+0xb2>
	case CAN_ID_LLCINFO:
		auto_mode = rxdata[1] & 0x01;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <LLCToILC+0xc0>)
 800125c:	701a      	strb	r2, [r3, #0]
		ems_status = (rxdata[1]&0x02) >> 1;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	105b      	asrs	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <LLCToILC+0xc4>)
 8001270:	701a      	strb	r2, [r3, #0]
		steer_fail_warning = (rxdata[1]&0xF8) >> 3;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <LLCToILC+0xc8>)
 800127e:	701a      	strb	r2, [r3, #0]
		vehicle_vel = rxdata[2] | (rxdata[3]<<8);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	3302      	adds	r3, #2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b21a      	sxth	r2, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3303      	adds	r3, #3
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21a      	sxth	r2, r3
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <LLCToILC+0xcc>)
 8001298:	801a      	strh	r2, [r3, #0]
		vehicle_dec = rxdata[4] | (rxdata[5]<<8);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3304      	adds	r3, #4
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3305      	adds	r3, #5
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <LLCToILC+0xd0>)
 80012b2:	801a      	strh	r2, [r3, #0]
		brake_stauts = rxdata[6]&0x01;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	3306      	adds	r3, #6
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <LLCToILC+0xd4>)
 80012c2:	701a      	strb	r2, [r3, #0]
		shift_status = (rxdata[6]&0x06) >> 1;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	3306      	adds	r3, #6
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	105b      	asrs	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <LLCToILC+0xd8>)
 80012d6:	701a      	strb	r2, [r3, #0]
		epb_status = (rxdata[6]&0x38) >> 3;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	3306      	adds	r3, #6
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	10db      	asrs	r3, r3, #3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <LLCToILC+0xdc>)
 80012ea:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG_TEST		// for simulator test
		soc_value = rxdata[0];
		charge_mode = rxdata[7]&0x03;
		car_ready_status = (rxdata[7]&0x04) >> 2;
#endif
		break;
 80012ec:	bf00      	nop
	}
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200001e1 	.word	0x200001e1
 8001300:	2000022a 	.word	0x2000022a
 8001304:	2000009c 	.word	0x2000009c
 8001308:	200002cc 	.word	0x200002cc
 800130c:	20000248 	.word	0x20000248
 8001310:	200000f1 	.word	0x200000f1
 8001314:	20000034 	.word	0x20000034
 8001318:	20000247 	.word	0x20000247

0800131c <ULCTxMessage>:

void ULCTxMessage(uint32_t id, uint8_t length, uint8_t *data, uint8_t *flag)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	460b      	mov	r3, r1
 800132a:	72fb      	strb	r3, [r7, #11]
	if( *flag ) {
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d023      	beq.n	800137c <ULCTxMessage+0x60>
		can1_tx_header.ExtId = id;
 8001334:	4a15      	ldr	r2, [pc, #84]	; (800138c <ULCTxMessage+0x70>)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6053      	str	r3, [r2, #4]
		can1_tx_header.RTR = CAN_RTR_DATA;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <ULCTxMessage+0x70>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
		can1_tx_header.IDE = CAN_ID_EXT;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <ULCTxMessage+0x70>)
 8001342:	2204      	movs	r2, #4
 8001344:	609a      	str	r2, [r3, #8]
		can1_tx_header.DLC = length;
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	4a10      	ldr	r2, [pc, #64]	; (800138c <ULCTxMessage+0x70>)
 800134a:	6113      	str	r3, [r2, #16]

		can1_tx_mailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 800134c:	4810      	ldr	r0, [pc, #64]	; (8001390 <ULCTxMessage+0x74>)
 800134e:	f001 fc64 	bl	8002c1a <HAL_CAN_GetTxMailboxesFreeLevel>
 8001352:	4603      	mov	r3, r0
 8001354:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <ULCTxMessage+0x78>)
 8001356:	6013      	str	r3, [r2, #0]
		HAL_CAN_AddTxMessage(&hcan1, &can1_tx_header, data, &can1_tx_mailbox);
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <ULCTxMessage+0x78>)
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	490b      	ldr	r1, [pc, #44]	; (800138c <ULCTxMessage+0x70>)
 800135e:	480c      	ldr	r0, [pc, #48]	; (8001390 <ULCTxMessage+0x74>)
 8001360:	f001 fb80 	bl	8002a64 <HAL_CAN_AddTxMessage>

		if( can1_tx_header.ExtId == CAN_ID_BC2ICINFO ) {
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <ULCTxMessage+0x70>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <ULCTxMessage+0x7c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d106      	bne.n	800137c <ULCTxMessage+0x60>
			if( cluster_trip_status_tx != 0) {
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <ULCTxMessage+0x80>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <ULCTxMessage+0x60>
				cluster_trip_status_tx = 0;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <ULCTxMessage+0x80>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	(*flag) = 0;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200000f4 	.word	0x200000f4
 8001390:	20000254 	.word	0x20000254
 8001394:	20000144 	.word	0x20000144
 8001398:	18ff1721 	.word	0x18ff1721
 800139c:	200000ef 	.word	0x200000ef

080013a0 <LocalTxMessage>:

void LocalTxMessage(uint32_t id, uint8_t length, uint8_t *data, uint8_t *flag)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	460b      	mov	r3, r1
 80013ae:	72fb      	strb	r3, [r7, #11]
	if( *flag ) {
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d017      	beq.n	80013e8 <LocalTxMessage+0x48>
		can2_tx_header.StdId = id;
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <LocalTxMessage+0x58>)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6013      	str	r3, [r2, #0]
		can2_tx_header.RTR = CAN_RTR_DATA;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <LocalTxMessage+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
		can2_tx_header.IDE = CAN_ID_STD;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <LocalTxMessage+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
		can2_tx_header.DLC = length;
 80013ca:	7afb      	ldrb	r3, [r7, #11]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LocalTxMessage+0x58>)
 80013ce:	6113      	str	r3, [r2, #16]

		can2_tx_mailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan2);
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <LocalTxMessage+0x5c>)
 80013d2:	f001 fc22 	bl	8002c1a <HAL_CAN_GetTxMailboxesFreeLevel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a09      	ldr	r2, [pc, #36]	; (8001400 <LocalTxMessage+0x60>)
 80013da:	6013      	str	r3, [r2, #0]
		HAL_CAN_AddTxMessage(&hcan2, &can2_tx_header, data, &can2_tx_mailbox);
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <LocalTxMessage+0x60>)
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4905      	ldr	r1, [pc, #20]	; (80013f8 <LocalTxMessage+0x58>)
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <LocalTxMessage+0x5c>)
 80013e4:	f001 fb3e 	bl	8002a64 <HAL_CAN_AddTxMessage>
	}

	(*flag) = 0;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000170 	.word	0x20000170
 80013fc:	20000148 	.word	0x20000148
 8001400:	2000013c 	.word	0x2000013c

08001404 <LLCTxMessage>:

void LLCTxMessage(uint32_t id, uint8_t length, uint8_t *data, uint8_t *flag)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	460b      	mov	r3, r1
 8001412:	72fb      	strb	r3, [r7, #11]
	if( *flag ) {
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d017      	beq.n	800144c <LLCTxMessage+0x48>
		can3_tx_header.StdId = id;
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <LLCTxMessage+0x58>)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6013      	str	r3, [r2, #0]
		can3_tx_header.RTR = CAN_RTR_DATA;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <LLCTxMessage+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
		can3_tx_header.IDE = CAN_ID_STD;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <LLCTxMessage+0x58>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
		can3_tx_header.DLC = length;
 800142e:	7afb      	ldrb	r3, [r7, #11]
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <LLCTxMessage+0x58>)
 8001432:	6113      	str	r3, [r2, #16]

		can3_tx_mailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan3);
 8001434:	480a      	ldr	r0, [pc, #40]	; (8001460 <LLCTxMessage+0x5c>)
 8001436:	f001 fbf0 	bl	8002c1a <HAL_CAN_GetTxMailboxesFreeLevel>
 800143a:	4603      	mov	r3, r0
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <LLCTxMessage+0x60>)
 800143e:	6013      	str	r3, [r2, #0]
		HAL_CAN_AddTxMessage(&hcan3, &can3_tx_header, data, &can3_tx_mailbox);
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <LLCTxMessage+0x60>)
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4905      	ldr	r1, [pc, #20]	; (800145c <LLCTxMessage+0x58>)
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <LLCTxMessage+0x5c>)
 8001448:	f001 fb0c 	bl	8002a64 <HAL_CAN_AddTxMessage>
	}

	(*flag) = 0;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000280 	.word	0x20000280
 8001460:	20000110 	.word	0x20000110
 8001464:	200001c8 	.word	0x200001c8

08001468 <BC2ICDataConv>:

void BC2ICDataConv(uint8_t *txdata, uint8_t *txflag)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
	if( epb_status == 2 ) {
 8001472:	4b68      	ldr	r3, [pc, #416]	; (8001614 <BC2ICDataConv+0x1ac>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d103      	bne.n	8001482 <BC2ICDataConv+0x1a>
		pbrake_status = 2;
 800147a:	4b67      	ldr	r3, [pc, #412]	; (8001618 <BC2ICDataConv+0x1b0>)
 800147c:	2202      	movs	r2, #2
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	e00a      	b.n	8001498 <BC2ICDataConv+0x30>
	} else if( epb_status == 1 ) {
 8001482:	4b64      	ldr	r3, [pc, #400]	; (8001614 <BC2ICDataConv+0x1ac>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d103      	bne.n	8001492 <BC2ICDataConv+0x2a>
		pbrake_status = 1;
 800148a:	4b63      	ldr	r3, [pc, #396]	; (8001618 <BC2ICDataConv+0x1b0>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e002      	b.n	8001498 <BC2ICDataConv+0x30>
	} else {
		pbrake_status = 0;
 8001492:	4b61      	ldr	r3, [pc, #388]	; (8001618 <BC2ICDataConv+0x1b0>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
	}

	if( shift_status == 1 ) {
 8001498:	4b60      	ldr	r3, [pc, #384]	; (800161c <BC2ICDataConv+0x1b4>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d103      	bne.n	80014a8 <BC2ICDataConv+0x40>
		gear_status = 2;
 80014a0:	4b5f      	ldr	r3, [pc, #380]	; (8001620 <BC2ICDataConv+0x1b8>)
 80014a2:	2202      	movs	r2, #2
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e019      	b.n	80014dc <BC2ICDataConv+0x74>
	} else if( shift_status == 2 ) {
 80014a8:	4b5c      	ldr	r3, [pc, #368]	; (800161c <BC2ICDataConv+0x1b4>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d10a      	bne.n	80014c6 <BC2ICDataConv+0x5e>
		gear_status = 3;
 80014b0:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <BC2ICDataConv+0x1b8>)
 80014b2:	2203      	movs	r2, #3
 80014b4:	701a      	strb	r2, [r3, #0]
		if( epb_status == 1 ) {
 80014b6:	4b57      	ldr	r3, [pc, #348]	; (8001614 <BC2ICDataConv+0x1ac>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d10e      	bne.n	80014dc <BC2ICDataConv+0x74>
			gear_status = 1;
 80014be:	4b58      	ldr	r3, [pc, #352]	; (8001620 <BC2ICDataConv+0x1b8>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	e00a      	b.n	80014dc <BC2ICDataConv+0x74>
		}
	} else if( shift_status == 3 ) {
 80014c6:	4b55      	ldr	r3, [pc, #340]	; (800161c <BC2ICDataConv+0x1b4>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d103      	bne.n	80014d6 <BC2ICDataConv+0x6e>
		gear_status = 4;
 80014ce:	4b54      	ldr	r3, [pc, #336]	; (8001620 <BC2ICDataConv+0x1b8>)
 80014d0:	2204      	movs	r2, #4
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	e002      	b.n	80014dc <BC2ICDataConv+0x74>
	} else {
		gear_status = 0;
 80014d6:	4b52      	ldr	r3, [pc, #328]	; (8001620 <BC2ICDataConv+0x1b8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
	}


	txdata[0] = charge_mode | (bcm_fail_status<<2) | (head_lamp_low_status<<4) | (door_open_status<<6);
 80014dc:	4b51      	ldr	r3, [pc, #324]	; (8001624 <BC2ICDataConv+0x1bc>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	4b50      	ldr	r3, [pc, #320]	; (8001628 <BC2ICDataConv+0x1c0>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	4b4f      	ldr	r3, [pc, #316]	; (800162c <BC2ICDataConv+0x1c4>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <BC2ICDataConv+0x1c8>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	019b      	lsls	r3, r3, #6
 8001500:	b25b      	sxtb	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b25b      	sxtb	r3, r3
 8001506:	b2da      	uxtb	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	701a      	strb	r2, [r3, #0]
	txdata[1] = charge_door_status | (regenerative_brake_mode<<2) | (Input_Status.autonomous<<4) | (auto_mode<<5) | (head_lamp_high_status<<6);
 800150c:	4b49      	ldr	r3, [pc, #292]	; (8001634 <BC2ICDataConv+0x1cc>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	b25a      	sxtb	r2, r3
 8001514:	4b48      	ldr	r3, [pc, #288]	; (8001638 <BC2ICDataConv+0x1d0>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b25b      	sxtb	r3, r3
 800151a:	4313      	orrs	r3, r2
 800151c:	b25a      	sxtb	r2, r3
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <BC2ICDataConv+0x1d4>)
 8001520:	7a1b      	ldrb	r3, [r3, #8]
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	b25b      	sxtb	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b25a      	sxtb	r2, r3
 800152a:	4b45      	ldr	r3, [pc, #276]	; (8001640 <BC2ICDataConv+0x1d8>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	015b      	lsls	r3, r3, #5
 8001530:	b25b      	sxtb	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b25a      	sxtb	r2, r3
 8001536:	4b43      	ldr	r3, [pc, #268]	; (8001644 <BC2ICDataConv+0x1dc>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	019b      	lsls	r3, r3, #6
 800153c:	b25b      	sxtb	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b25a      	sxtb	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3301      	adds	r3, #1
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]
	txdata[2] = seatbelt_warning_status;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3302      	adds	r3, #2
 800154e:	4a3e      	ldr	r2, [pc, #248]	; (8001648 <BC2ICDataConv+0x1e0>)
 8001550:	7812      	ldrb	r2, [r2, #0]
 8001552:	701a      	strb	r2, [r3, #0]
	txdata[3] = turn_lamp_right_status | (turn_lamp_left_status<<2) | (hazard_lamp_status<<6);
 8001554:	4b3d      	ldr	r3, [pc, #244]	; (800164c <BC2ICDataConv+0x1e4>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	b25a      	sxtb	r2, r3
 800155c:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <BC2ICDataConv+0x1e8>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b25a      	sxtb	r2, r3
 8001566:	4b3b      	ldr	r3, [pc, #236]	; (8001654 <BC2ICDataConv+0x1ec>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	019b      	lsls	r3, r3, #6
 800156c:	b25b      	sxtb	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b25a      	sxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3303      	adds	r3, #3
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]
	txdata[4] = gear_status | (pbrake_status<<4);
 800157a:	4b27      	ldr	r3, [pc, #156]	; (8001618 <BC2ICDataConv+0x1b0>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	b25a      	sxtb	r2, r3
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <BC2ICDataConv+0x1b8>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b25b      	sxtb	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b25a      	sxtb	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3304      	adds	r3, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	701a      	strb	r2, [r3, #0]
	txdata[5] = seat_status;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3305      	adds	r3, #5
 8001598:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <BC2ICDataConv+0x1f0>)
 800159a:	7812      	ldrb	r2, [r2, #0]
 800159c:	701a      	strb	r2, [r3, #0]
	txdata[6] = brake_stauts | (tail_lamp_status<<2) | (cluster_trip_status_tx<<4) | (car_ready_status<<6);
 800159e:	4b2f      	ldr	r3, [pc, #188]	; (800165c <BC2ICDataConv+0x1f4>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	b25a      	sxtb	r2, r3
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <BC2ICDataConv+0x1f8>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <BC2ICDataConv+0x1fc>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b25a      	sxtb	r2, r3
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <BC2ICDataConv+0x200>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	019b      	lsls	r3, r3, #6
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b25a      	sxtb	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3306      	adds	r3, #6
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]
	txdata[7] = (Button_Status.accel_decel_sw) | (Button_Status.drvie_mode_sw<<2) | (Button_Status.logging_sw<<4) | (Button_Status.marker_sw<<6);
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <BC2ICDataConv+0x204>)
 80015d2:	7a9b      	ldrb	r3, [r3, #10]
 80015d4:	b25a      	sxtb	r2, r3
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <BC2ICDataConv+0x204>)
 80015d8:	7adb      	ldrb	r3, [r3, #11]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b25a      	sxtb	r2, r3
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <BC2ICDataConv+0x204>)
 80015e4:	7b1b      	ldrb	r3, [r3, #12]
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <BC2ICDataConv+0x204>)
 80015f0:	7b5b      	ldrb	r3, [r3, #13]
 80015f2:	019b      	lsls	r3, r3, #6
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3307      	adds	r3, #7
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]
	//txdata[7] = cluster_trip_push_cnt;
	*txflag = 1;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	20000247 	.word	0x20000247
 8001618:	2000019c 	.word	0x2000019c
 800161c:	20000034 	.word	0x20000034
 8001620:	200000b0 	.word	0x200000b0
 8001624:	20000142 	.word	0x20000142
 8001628:	200001e0 	.word	0x200001e0
 800162c:	200001a9 	.word	0x200001a9
 8001630:	2000024f 	.word	0x2000024f
 8001634:	200000f0 	.word	0x200000f0
 8001638:	2000009d 	.word	0x2000009d
 800163c:	200001d4 	.word	0x200001d4
 8001640:	200001e1 	.word	0x200001e1
 8001644:	20000242 	.word	0x20000242
 8001648:	2000024b 	.word	0x2000024b
 800164c:	2000009a 	.word	0x2000009a
 8001650:	200001cc 	.word	0x200001cc
 8001654:	200001de 	.word	0x200001de
 8001658:	200001aa 	.word	0x200001aa
 800165c:	200001a8 	.word	0x200001a8
 8001660:	200000f1 	.word	0x200000f1
 8001664:	200000ef 	.word	0x200000ef
 8001668:	200000f2 	.word	0x200000f2
 800166c:	2000029c 	.word	0x2000029c

08001670 <DTCDataConv>:

void DTCDataConv(uint8_t *txdata, uint8_t *txflag)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
	if( head_low_lamp_fail || stop_lamp_fail || turn_left_lamp_fail || turn_right_lamp_fail ) {
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <DTCDataConv+0xec>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10b      	bne.n	800169a <DTCDataConv+0x2a>
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <DTCDataConv+0xf0>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d107      	bne.n	800169a <DTCDataConv+0x2a>
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <DTCDataConv+0xf4>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <DTCDataConv+0x2a>
 8001692:	4b35      	ldr	r3, [pc, #212]	; (8001768 <DTCDataConv+0xf8>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <DTCDataConv+0x32>
		bcm_fail_status = 1;
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <DTCDataConv+0xfc>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e002      	b.n	80016a8 <DTCDataConv+0x38>
	} else {
		bcm_fail_status = 0;
 80016a2:	4b32      	ldr	r3, [pc, #200]	; (800176c <DTCDataConv+0xfc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
	}

	Steer_Error_Status.system_interal_fail = (steer_fail_warning&0x01) | ((steer_fail_warning&0x04)>>2);
 80016a8:	4b31      	ldr	r3, [pc, #196]	; (8001770 <DTCDataConv+0x100>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	109b      	asrs	r3, r3, #2
 80016ae:	b25a      	sxtb	r2, r3
 80016b0:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <DTCDataConv+0x100>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <DTCDataConv+0x104>)
 80016c4:	701a      	strb	r2, [r3, #0]
	Steer_Error_Status.system_degrade = (steer_fail_warning&0x02) >> 1;
 80016c6:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <DTCDataConv+0x100>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	105b      	asrs	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <DTCDataConv+0x104>)
 80016d6:	705a      	strb	r2, [r3, #1]
	Steer_Error_Status.communication_fail = (steer_fail_warning&0x08) >> 3;
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <DTCDataConv+0x100>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	10db      	asrs	r3, r3, #3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <DTCDataConv+0x104>)
 80016e8:	709a      	strb	r2, [r3, #2]


	if( bcm_fail_status == 1 ) {
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <DTCDataConv+0xfc>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d12d      	bne.n	800174e <DTCDataConv+0xde>
		txdata[0] = (head_low_lamp_fail) | (turn_right_lamp_fail<<1) | (turn_left_lamp_fail<<2) | (stop_lamp_fail<<3);
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <DTCDataConv+0xf8>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <DTCDataConv+0xec>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b25a      	sxtb	r2, r3
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <DTCDataConv+0xf4>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	b25b      	sxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b25a      	sxtb	r2, r3
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <DTCDataConv+0xf0>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	b25b      	sxtb	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b25b      	sxtb	r3, r3
 800171c:	b2da      	uxtb	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	701a      	strb	r2, [r3, #0]
		txdata[3] = (Steer_Error_Status.system_interal_fail) | (Steer_Error_Status.system_degrade<<1) | (Steer_Error_Status.communication_fail<<2);
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <DTCDataConv+0x104>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b25a      	sxtb	r2, r3
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <DTCDataConv+0x104>)
 800172a:	785b      	ldrb	r3, [r3, #1]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	b25b      	sxtb	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b25a      	sxtb	r2, r3
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <DTCDataConv+0x104>)
 8001736:	789b      	ldrb	r3, [r3, #2]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	b25b      	sxtb	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b25a      	sxtb	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3303      	adds	r3, #3
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]

		*txflag = 1;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
	}
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000050 	.word	0x20000050
 8001760:	200001ed 	.word	0x200001ed
 8001764:	20000138 	.word	0x20000138
 8001768:	200000be 	.word	0x200000be
 800176c:	20000142 	.word	0x20000142
 8001770:	2000009c 	.word	0x2000009c
 8001774:	200002c8 	.word	0x200002c8

08001778 <SM2ICDataConv>:

void SM2ICDataConv(uint8_t *txdata, uint8_t *txflag)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	uint16_t vehicle_vel_i;
	float vehicle_vel_f;

	if( vehicle_vel < 0 ) {
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <SM2ICDataConv+0x90>)
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	2b00      	cmp	r3, #0
 800178a:	da08      	bge.n	800179e <SM2ICDataConv+0x26>
		vehicle_vel = vehicle_vel * (-1);
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <SM2ICDataConv+0x90>)
 800178e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001792:	b29b      	uxth	r3, r3
 8001794:	425b      	negs	r3, r3
 8001796:	b29b      	uxth	r3, r3
 8001798:	b21a      	sxth	r2, r3
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <SM2ICDataConv+0x90>)
 800179c:	801a      	strh	r2, [r3, #0]
	}

	vehicle_vel_f = (float)vehicle_vel;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <SM2ICDataConv+0x90>)
 80017a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	edc7 7a03 	vstr	s15, [r7, #12]
	vehicle_vel_f = vehicle_vel_f / 10;
 80017b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80017b4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017bc:	edc7 7a03 	vstr	s15, [r7, #12]
	vehicle_vel_f = vehicle_vel_f * 256;
 80017c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017c4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800180c <SM2ICDataConv+0x94>
 80017c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017cc:	edc7 7a03 	vstr	s15, [r7, #12]
	vehicle_vel_i = (uint16_t)vehicle_vel_f;
 80017d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d8:	ee17 3a90 	vmov	r3, s15
 80017dc:	817b      	strh	r3, [r7, #10]


	// 220623 LHS

	txdata[0] = vehicle_vel_i;
 80017de:	897b      	ldrh	r3, [r7, #10]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	701a      	strb	r2, [r3, #0]
	txdata[1] = vehicle_vel_i>>8;
 80017e6:	897b      	ldrh	r3, [r7, #10]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3301      	adds	r3, #1
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	701a      	strb	r2, [r3, #0]
	}else{
		txdata[0] = 0;
		txdata[1] = 0;
	}
	*/
	*txflag = 1;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	200002cc 	.word	0x200002cc
 800180c:	43800000 	.word	0x43800000

08001810 <CC2ICDataConv>:

void CC2ICDataConv(uint8_t *txdata, uint8_t *txflag)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
	uint8_t soc_value_i;
	float soc_value_f;
	uint8_t regenerative_brake_value_i;
	float regenerative_brake_value_f;

	soc_value_f = (float)soc_value;
 800181a:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <CC2ICDataConv+0xb8>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001826:	edc7 7a07 	vstr	s15, [r7, #28]
	soc_value_f = soc_value_f/0.4;
 800182a:	edd7 7a07 	vldr	s15, [r7, #28]
 800182e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001832:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80018c0 <CC2ICDataConv+0xb0>
 8001836:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800183a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800183e:	edc7 7a07 	vstr	s15, [r7, #28]
	soc_value_f = (soc_value_f+1);
 8001842:	edd7 7a07 	vldr	s15, [r7, #28]
 8001846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800184a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800184e:	edc7 7a07 	vstr	s15, [r7, #28]
	soc_value_i = (uint8_t)soc_value_f;
 8001852:	edd7 7a07 	vldr	s15, [r7, #28]
 8001856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800185a:	edc7 7a01 	vstr	s15, [r7, #4]
 800185e:	793b      	ldrb	r3, [r7, #4]
 8001860:	76fb      	strb	r3, [r7, #27]

	regenerative_brake_value_f = (float)regenerative_brake_value;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <CC2ICDataConv+0xbc>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	ee07 3a90 	vmov	s15, r3
 800186a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800186e:	edc7 7a05 	vstr	s15, [r7, #20]
	regenerative_brake_value_f = regenerative_brake_value_f/0.4;
 8001872:	edd7 7a05 	vldr	s15, [r7, #20]
 8001876:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800187a:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80018c0 <CC2ICDataConv+0xb0>
 800187e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001882:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001886:	edc7 7a05 	vstr	s15, [r7, #20]
	regenerative_brake_value_i = (uint8_t)regenerative_brake_value_f;
 800188a:	edd7 7a05 	vldr	s15, [r7, #20]
 800188e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001892:	edc7 7a01 	vstr	s15, [r7, #4]
 8001896:	793b      	ldrb	r3, [r7, #4]
 8001898:	74fb      	strb	r3, [r7, #19]

	txdata[0] = soc_value_i;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	7efa      	ldrb	r2, [r7, #27]
 800189e:	701a      	strb	r2, [r3, #0]
	txdata[1] = regenerative_brake_value_i;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3301      	adds	r3, #1
 80018a4:	7cfa      	ldrb	r2, [r7, #19]
 80018a6:	701a      	strb	r2, [r3, #0]

	*txflag = 1;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
}
 80018ae:	bf00      	nop
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	f3af 8000 	nop.w
 80018c0:	9999999a 	.word	0x9999999a
 80018c4:	3fd99999 	.word	0x3fd99999
 80018c8:	2000022b 	.word	0x2000022b
 80018cc:	20000246 	.word	0x20000246

080018d0 <BCMDataConv>:

void BCMDataConv(uint8_t *txdata, uint8_t *txflag)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
	if( ++alive_cnt > 15 ) {
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <BCMDataConv+0x9c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <BCMDataConv+0x9c>)
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <BCMDataConv+0x9c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b0f      	cmp	r3, #15
 80018ec:	d902      	bls.n	80018f4 <BCMDataConv+0x24>
		alive_cnt = 0;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <BCMDataConv+0x9c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
	}

	bcm_checksum = (alive_cnt + Input_Status.autonomous + auto_mode + ems_status) & 0xF;
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <BCMDataConv+0xa0>)
 80018f6:	7a1a      	ldrb	r2, [r3, #8]
 80018f8:	4b1c      	ldr	r3, [pc, #112]	; (800196c <BCMDataConv+0x9c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <BCMDataConv+0xa4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4413      	add	r3, r2
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <BCMDataConv+0xa8>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4413      	add	r3, r2
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <BCMDataConv+0xac>)
 8001918:	701a      	strb	r2, [r3, #0]

	txdata[0] = bcm_checksum | (alive_cnt<<4);
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <BCMDataConv+0x9c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	b25a      	sxtb	r2, r3
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <BCMDataConv+0xac>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b25b      	sxtb	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b25b      	sxtb	r3, r3
 800192c:	b2da      	uxtb	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	701a      	strb	r2, [r3, #0]
	txdata[1] = Input_Status.autonomous | (ems_status<<1) | (auto_mode<<2);
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <BCMDataConv+0xa0>)
 8001934:	7a1b      	ldrb	r3, [r3, #8]
 8001936:	b25a      	sxtb	r2, r3
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <BCMDataConv+0xa8>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	b25b      	sxtb	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b25a      	sxtb	r2, r3
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <BCMDataConv+0xa4>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	b25b      	sxtb	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	b25a      	sxtb	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3301      	adds	r3, #1
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	701a      	strb	r2, [r3, #0]

	*txflag = 1;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000140 	.word	0x20000140
 8001970:	200001d4 	.word	0x200001d4
 8001974:	200001e1 	.word	0x200001e1
 8001978:	2000022a 	.word	0x2000022a
 800197c:	200000d9 	.word	0x200000d9

08001980 <AkitCmdConv>:

void AkitCmdConv(uint8_t *txdata, uint8_t *rxdata, uint8_t *txflag)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
	memcpy(txdata, rxdata, 8);
 800198c:	2208      	movs	r2, #8
 800198e:	68b9      	ldr	r1, [r7, #8]
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f003 fe55 	bl	8005640 <memcpy>

	*txflag = 1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019a8:	f3bf 8f4f 	dsb	sy
}
 80019ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <__NVIC_SystemReset+0x24>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019b6:	4904      	ldr	r1, [pc, #16]	; (80019c8 <__NVIC_SystemReset+0x24>)
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <__NVIC_SystemReset+0x28>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019be:	f3bf 8f4f 	dsb	sy
}
 80019c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <__NVIC_SystemReset+0x20>
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	05fa0004 	.word	0x05fa0004

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d4:	f000 fd9d 	bl	8002512 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d8:	f000 f82a 	bl	8001a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019dc:	f000 fa72 	bl	8001ec4 <MX_GPIO_Init>
  MX_TIM6_Init();
 80019e0:	f000 fa3a 	bl	8001e58 <MX_TIM6_Init>
  MX_RTC_Init();
 80019e4:	f000 fa08 	bl	8001df8 <MX_RTC_Init>
  MX_CAN1_Init();
 80019e8:	f000 f8b8 	bl	8001b5c <MX_CAN1_Init>
  MX_CAN3_Init();
 80019ec:	f000 f992 	bl	8001d14 <MX_CAN3_Init>
  MX_CAN2_Init();
 80019f0:	f000 f922 	bl	8001c38 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <main+0x54>)
 80019f6:	f003 faf3 	bl	8004fe0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, RESET);		// if MCU is normal mode, turn-off led
 80019fa:	2200      	movs	r2, #0
 80019fc:	2101      	movs	r1, #1
 80019fe:	480a      	ldr	r0, [pc, #40]	; (8001a28 <main+0x58>)
 8001a00:	f001 ff7e 	bl	8003900 <HAL_GPIO_WritePin>
	  if( stop_enable == 1 ) {
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <main+0x5c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d1f6      	bne.n	80019fa <main+0x2a>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, SET);	// if MCU is stop mode, turn-on led
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <main+0x58>)
 8001a12:	f001 ff75 	bl	8003900 <HAL_GPIO_WritePin>
		  stop_enable = 0;
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <main+0x5c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
		  StopModeStart();								// Stop Mode start
 8001a1c:	f000 faf6 	bl	800200c <StopModeStart>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, RESET);		// if MCU is normal mode, turn-off led
 8001a20:	e7eb      	b.n	80019fa <main+0x2a>
 8001a22:	bf00      	nop
 8001a24:	20000350 	.word	0x20000350
 8001a28:	40021800 	.word	0x40021800
 8001a2c:	20000099 	.word	0x20000099

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0b8      	sub	sp, #224	; 0xe0
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a3a:	2234      	movs	r2, #52	; 0x34
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 fe0c 	bl	800565c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	2290      	movs	r2, #144	; 0x90
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 fdfd 	bl	800565c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <SystemClock_Config+0x124>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a3b      	ldr	r2, [pc, #236]	; (8001b54 <SystemClock_Config+0x124>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <SystemClock_Config+0x124>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a7a:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <SystemClock_Config+0x128>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a82:	4a35      	ldr	r2, [pc, #212]	; (8001b58 <SystemClock_Config+0x128>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b33      	ldr	r3, [pc, #204]	; (8001b58 <SystemClock_Config+0x128>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001a96:	230a      	movs	r3, #10
 8001a98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aa2:	2310      	movs	r3, #16
 8001aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001aba:	2308      	movs	r3, #8
 8001abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 108;
 8001ac0:	236c      	movs	r3, #108	; 0x6c
 8001ac2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 ffb6 	bl	8003a48 <HAL_RCC_OscConfig>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001ae2:	f000 fabd 	bl	8002060 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ae6:	f001 ff5f 	bl	80039a8 <HAL_PWREx_EnableOverDrive>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001af0:	f000 fab6 	bl	8002060 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af4:	230f      	movs	r3, #15
 8001af6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afa:	2302      	movs	r3, #2
 8001afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b16:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b1a:	2103      	movs	r1, #3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 fa41 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001b28:	f000 fa9a 	bl	8002060 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b34:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 fbd4 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8001b46:	f000 fa8b 	bl	8002060 <Error_Handler>
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	37e0      	adds	r7, #224	; 0xe0
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40007000 	.word	0x40007000

08001b5c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b60:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001b62:	4a33      	ldr	r2, [pc, #204]	; (8001c30 <MX_CAN1_Init+0xd4>)
 8001b64:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001b66:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001b68:	2206      	movs	r2, #6
 8001b6a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b72:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001b78:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001b7a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b7e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001b82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b86:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001b8e:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bac:	481f      	ldr	r0, [pc, #124]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001bae:	f000 fd2d 	bl	800260c <HAL_CAN_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001bb8:	f000 fa52 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  can1_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_CAN1_Init+0xd8>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	61da      	str	r2, [r3, #28]
  can1_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <MX_CAN1_Init+0xd8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  can1_filter.FilterIdHigh = 0x000;
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_CAN1_Init+0xd8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
  can1_filter.FilterIdLow = 0x000;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_CAN1_Init+0xd8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]
  can1_filter.FilterMaskIdHigh = 0x000;
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <MX_CAN1_Init+0xd8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  can1_filter.FilterMaskIdLow = 0x000;
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_CAN1_Init+0xd8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
  can1_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_CAN1_Init+0xd8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  can1_filter.FilterBank = 0;
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_CAN1_Init+0xd8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
  can1_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_CAN1_Init+0xd8>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	621a      	str	r2, [r3, #32]

  if( HAL_CAN_ConfigFilter(&hcan1, &can1_filter) != HAL_OK ) {
 8001bf2:	4910      	ldr	r1, [pc, #64]	; (8001c34 <MX_CAN1_Init+0xd8>)
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001bf6:	f000 fe05 	bl	8002804 <HAL_CAN_ConfigFilter>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_CAN1_Init+0xa8>
	  Error_Handler();
 8001c00:	f000 fa2e 	bl	8002060 <Error_Handler>
  }
  if( HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK ) {
 8001c04:	2102      	movs	r1, #2
 8001c06:	4809      	ldr	r0, [pc, #36]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001c08:	f001 f94e 	bl	8002ea8 <HAL_CAN_ActivateNotification>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_CAN1_Init+0xba>
	  Error_Handler();
 8001c12:	f000 fa25 	bl	8002060 <Error_Handler>
  }
  if( HAL_CAN_Start(&hcan1) != HAL_OK ) {
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_CAN1_Init+0xd0>)
 8001c18:	f000 fee0 	bl	80029dc <HAL_CAN_Start>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_CAN1_Init+0xca>
	  Error_Handler();
 8001c22:	f000 fa1d 	bl	8002060 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000254 	.word	0x20000254
 8001c30:	40006400 	.word	0x40006400
 8001c34:	20000304 	.word	0x20000304

08001c38 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001c3c:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c3e:	4a33      	ldr	r2, [pc, #204]	; (8001d0c <MX_CAN2_Init+0xd4>)
 8001c40:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c44:	2206      	movs	r2, #6
 8001c46:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001c48:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c4e:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001c54:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c5a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c62:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001c64:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8001c6a:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001c76:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001c82:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001c88:	481f      	ldr	r0, [pc, #124]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001c8a:	f000 fcbf 	bl	800260c <HAL_CAN_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001c94:	f000 f9e4 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  can2_filter.FilterScale = CAN_FILTERSCALE_16BIT;
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <MX_CAN2_Init+0xd8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  can2_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_CAN2_Init+0xd8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  can2_filter.FilterIdHigh = 0x000 << 5;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_CAN2_Init+0xd8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
  can2_filter.FilterIdLow = 0x000 << 5;
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MX_CAN2_Init+0xd8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	605a      	str	r2, [r3, #4]
  can2_filter.FilterMaskIdHigh = 0x000 << 5;
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_CAN2_Init+0xd8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  can2_filter.FilterMaskIdLow = 0x000 << 5;
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_CAN2_Init+0xd8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
  can2_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_CAN2_Init+0xd8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  can2_filter.FilterBank = 0;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <MX_CAN2_Init+0xd8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	615a      	str	r2, [r3, #20]
  can2_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_CAN2_Init+0xd8>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	621a      	str	r2, [r3, #32]

  if( HAL_CAN_ConfigFilter(&hcan2, &can2_filter) != HAL_OK ) {
 8001cce:	4910      	ldr	r1, [pc, #64]	; (8001d10 <MX_CAN2_Init+0xd8>)
 8001cd0:	480d      	ldr	r0, [pc, #52]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001cd2:	f000 fd97 	bl	8002804 <HAL_CAN_ConfigFilter>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_CAN2_Init+0xa8>
	  Error_Handler();
 8001cdc:	f000 f9c0 	bl	8002060 <Error_Handler>
  }
  if( HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK ) {
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	4809      	ldr	r0, [pc, #36]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001ce4:	f001 f8e0 	bl	8002ea8 <HAL_CAN_ActivateNotification>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_CAN2_Init+0xba>
	  Error_Handler();
 8001cee:	f000 f9b7 	bl	8002060 <Error_Handler>
  }
  if( HAL_CAN_Start(&hcan2) != HAL_OK ) {
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_CAN2_Init+0xd0>)
 8001cf4:	f000 fe72 	bl	80029dc <HAL_CAN_Start>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_CAN2_Init+0xca>
	  Error_Handler();
 8001cfe:	f000 f9af 	bl	8002060 <Error_Handler>
  }
  /* USER CODE END CAN2_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000148 	.word	0x20000148
 8001d0c:	40006800 	.word	0x40006800
 8001d10:	2000039c 	.word	0x2000039c

08001d14 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001d18:	4b34      	ldr	r3, [pc, #208]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d1a:	4a35      	ldr	r2, [pc, #212]	; (8001df0 <MX_CAN3_Init+0xdc>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d20:	2206      	movs	r2, #6
 8001d22:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001d24:	4b31      	ldr	r3, [pc, #196]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d2a:	4b30      	ldr	r3, [pc, #192]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d32:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d36:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d38:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d3e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001d40:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = ENABLE;
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001d64:	4821      	ldr	r0, [pc, #132]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001d66:	f000 fc51 	bl	800260c <HAL_CAN_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001d70:	f000 f976 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
  can3_filter.FilterScale = CAN_FILTERSCALE_16BIT;
 8001d74:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <MX_CAN3_Init+0xe0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  can3_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <MX_CAN3_Init+0xe0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  can3_filter.FilterIdHigh = 0x020<<5;
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <MX_CAN3_Init+0xe0>)
 8001d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d86:	601a      	str	r2, [r3, #0]
  can3_filter.FilterIdLow = 0x020<<5;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <MX_CAN3_Init+0xe0>)
 8001d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d8e:	605a      	str	r2, [r3, #4]
  can3_filter.FilterMaskIdHigh = 0x7FF<<5;
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <MX_CAN3_Init+0xe0>)
 8001d92:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001d96:	609a      	str	r2, [r3, #8]
  can3_filter.FilterMaskIdLow = 0x7FF<<5;
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <MX_CAN3_Init+0xe0>)
 8001d9a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001d9e:	60da      	str	r2, [r3, #12]
  can3_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_CAN3_Init+0xe0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  can3_filter.FilterBank = 0;
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <MX_CAN3_Init+0xe0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	615a      	str	r2, [r3, #20]
  can3_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_CAN3_Init+0xe0>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	621a      	str	r2, [r3, #32]

  if( HAL_CAN_ConfigFilter(&hcan3, &can3_filter) != HAL_OK ) {
 8001db2:	4910      	ldr	r1, [pc, #64]	; (8001df4 <MX_CAN3_Init+0xe0>)
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001db6:	f000 fd25 	bl	8002804 <HAL_CAN_ConfigFilter>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_CAN3_Init+0xb0>
	  Error_Handler();
 8001dc0:	f000 f94e 	bl	8002060 <Error_Handler>
  }
  if( HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK ) {
 8001dc4:	2102      	movs	r1, #2
 8001dc6:	4809      	ldr	r0, [pc, #36]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001dc8:	f001 f86e 	bl	8002ea8 <HAL_CAN_ActivateNotification>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_CAN3_Init+0xc2>
	  Error_Handler();
 8001dd2:	f000 f945 	bl	8002060 <Error_Handler>
  }
  if( HAL_CAN_Start(&hcan3) != HAL_OK ) {
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_CAN3_Init+0xd8>)
 8001dd8:	f000 fe00 	bl	80029dc <HAL_CAN_Start>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_CAN3_Init+0xd2>
	  Error_Handler();
 8001de2:	f000 f93d 	bl	8002060 <Error_Handler>
  }
  /* USER CODE END CAN3_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000110 	.word	0x20000110
 8001df0:	40003400 	.word	0x40003400
 8001df4:	200002dc 	.word	0x200002dc

08001df8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <MX_RTC_Init+0x58>)
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <MX_RTC_Init+0x5c>)
 8001e00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_RTC_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_RTC_Init+0x58>)
 8001e0a:	227f      	movs	r2, #127	; 0x7f
 8001e0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_RTC_Init+0x58>)
 8001e10:	22ff      	movs	r2, #255	; 0xff
 8001e12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_RTC_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <MX_RTC_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_RTC_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e26:	480a      	ldr	r0, [pc, #40]	; (8001e50 <MX_RTC_Init+0x58>)
 8001e28:	f002 fe4e 	bl	8004ac8 <HAL_RTC_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001e32:	f000 f915 	bl	8002060 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_RTC_Init+0x58>)
 8001e3c:	f002 ff2a 	bl	8004c94 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001e46:	f000 f90b 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000330 	.word	0x20000330
 8001e54:	40002800 	.word	0x40002800

08001e58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_TIM6_Init+0x64>)
 8001e6a:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <MX_TIM6_Init+0x68>)
 8001e6c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1080-1;
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <MX_TIM6_Init+0x64>)
 8001e70:	f240 4237 	movw	r2, #1079	; 0x437
 8001e74:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_TIM6_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_TIM6_Init+0x64>)
 8001e7e:	22c7      	movs	r2, #199	; 0xc7
 8001e80:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_TIM6_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e88:	480c      	ldr	r0, [pc, #48]	; (8001ebc <MX_TIM6_Init+0x64>)
 8001e8a:	f003 f851 	bl	8004f30 <HAL_TIM_Base_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e94:	f000 f8e4 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_TIM6_Init+0x64>)
 8001ea6:	f003 fafb 	bl	80054a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001eb0:	f000 f8d6 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000350 	.word	0x20000350
 8001ec0:	40001000 	.word	0x40001000

08001ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eda:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001ee0:	f043 0310 	orr.w	r3, r3, #16
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b44      	ldr	r3, [pc, #272]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001ef8:	f043 0320 	orr.w	r3, r3, #32
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a3a      	ldr	r2, [pc, #232]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a34      	ldr	r2, [pc, #208]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a2e      	ldr	r2, [pc, #184]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001f70:	4822      	ldr	r0, [pc, #136]	; (8001ffc <MX_GPIO_Init+0x138>)
 8001f72:	f001 fcc5 	bl	8003900 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4821      	ldr	r0, [pc, #132]	; (8002000 <MX_GPIO_Init+0x13c>)
 8001f7c:	f001 fcc0 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001f80:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001f84:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	4619      	mov	r1, r3
 8001f98:	4818      	ldr	r0, [pc, #96]	; (8001ffc <MX_GPIO_Init+0x138>)
 8001f9a:	f001 faed 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f9e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001fa2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4814      	ldr	r0, [pc, #80]	; (8002004 <MX_GPIO_Init+0x140>)
 8001fb4:	f001 fae0 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <MX_GPIO_Init+0x144>)
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <MX_GPIO_Init+0x140>)
 8001fce:	f001 fad3 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_GPIO_Init+0x13c>)
 8001fea:	f001 fac5 	bl	8003578 <HAL_GPIO_Init>

}
 8001fee:	bf00      	nop
 8001ff0:	3730      	adds	r7, #48	; 0x30
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40021800 	.word	0x40021800
 8002004:	40021400 	.word	0x40021400
 8002008:	10120000 	.word	0x10120000

0800200c <StopModeStart>:

/* USER CODE BEGIN 4 */
void StopModeStart()
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 8002012:	f000 fadb 	bl	80025cc <HAL_SuspendTick>

	__HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <StopModeStart+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <StopModeStart+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <StopModeStart+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
	   32768 / 16 = 2048Hz
	   1Hz = 0.00048828125 sec
	   10sec = 20,480Hz (0x5000)
	 */
//	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xF000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xCC, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800202e:	2200      	movs	r2, #0
 8002030:	21cc      	movs	r1, #204	; 0xcc
 8002032:	480a      	ldr	r0, [pc, #40]	; (800205c <StopModeStart+0x50>)
 8002034:	f002 fe2e 	bl	8004c94 <HAL_RTCEx_SetWakeUpTimer_IT>

	HAL_PWR_EnterSTOPMode(0, PWR_SLEEPENTRY_WFE);
 8002038:	2102      	movs	r1, #2
 800203a:	2000      	movs	r0, #0
 800203c:	f001 fc7a 	bl	8003934 <HAL_PWR_EnterSTOPMode>

	HAL_ResumeTick();
 8002040:	f000 fad4 	bl	80025ec <HAL_ResumeTick>

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002044:	4805      	ldr	r0, [pc, #20]	; (800205c <StopModeStart+0x50>)
 8002046:	f002 feed 	bl	8004e24 <HAL_RTCEx_DeactivateWakeUpTimer>

	SystemClock_Config();
 800204a:	f7ff fcf1 	bl	8001a30 <SystemClock_Config>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	20000330 	.word	0x20000330

08002060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002064:	b672      	cpsid	i
}
 8002066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  NVIC_SystemReset();
 8002068:	f7ff fc9c 	bl	80019a4 <__NVIC_SystemReset>

0800206c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_MspInit+0x44>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <HAL_MspInit+0x44>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <HAL_MspInit+0x44>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_MspInit+0x44>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_MspInit+0x44>)
 8002090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_MspInit+0x44>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800

080020b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b092      	sub	sp, #72	; 0x48
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a97      	ldr	r2, [pc, #604]	; (8002330 <HAL_CAN_MspInit+0x27c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d139      	bne.n	800214a <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80020d6:	4b97      	ldr	r3, [pc, #604]	; (8002334 <HAL_CAN_MspInit+0x280>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	4a95      	ldr	r2, [pc, #596]	; (8002334 <HAL_CAN_MspInit+0x280>)
 80020de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80020e0:	4b94      	ldr	r3, [pc, #592]	; (8002334 <HAL_CAN_MspInit+0x280>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d10b      	bne.n	8002100 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80020e8:	4b93      	ldr	r3, [pc, #588]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	4a92      	ldr	r2, [pc, #584]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80020ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020f2:	6413      	str	r3, [r2, #64]	; 0x40
 80020f4:	4b90      	ldr	r3, [pc, #576]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
 80020fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002100:	4b8d      	ldr	r3, [pc, #564]	; (8002338 <HAL_CAN_MspInit+0x284>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a8c      	ldr	r2, [pc, #560]	; (8002338 <HAL_CAN_MspInit+0x284>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6313      	str	r3, [r2, #48]	; 0x30
 800210c:	4b8a      	ldr	r3, [pc, #552]	; (8002338 <HAL_CAN_MspInit+0x284>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002118:	2303      	movs	r3, #3
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002128:	2309      	movs	r3, #9
 800212a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002130:	4619      	mov	r1, r3
 8002132:	4882      	ldr	r0, [pc, #520]	; (800233c <HAL_CAN_MspInit+0x288>)
 8002134:	f001 fa20 	bl	8003578 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002138:	2200      	movs	r2, #0
 800213a:	2100      	movs	r1, #0
 800213c:	2014      	movs	r0, #20
 800213e:	f001 f9e4 	bl	800350a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002142:	2014      	movs	r0, #20
 8002144:	f001 f9fd 	bl	8003542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 8002148:	e0ed      	b.n	8002326 <HAL_CAN_MspInit+0x272>
  else if(hcan->Instance==CAN2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7c      	ldr	r2, [pc, #496]	; (8002340 <HAL_CAN_MspInit+0x28c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d163      	bne.n	800221c <HAL_CAN_MspInit+0x168>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8002154:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <HAL_CAN_MspInit+0x290>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	4a7a      	ldr	r2, [pc, #488]	; (8002344 <HAL_CAN_MspInit+0x290>)
 800215c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 800215e:	4b79      	ldr	r3, [pc, #484]	; (8002344 <HAL_CAN_MspInit+0x290>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d10b      	bne.n	800217e <HAL_CAN_MspInit+0xca>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8002166:	4b74      	ldr	r3, [pc, #464]	; (8002338 <HAL_CAN_MspInit+0x284>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a73      	ldr	r2, [pc, #460]	; (8002338 <HAL_CAN_MspInit+0x284>)
 800216c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b71      	ldr	r3, [pc, #452]	; (8002338 <HAL_CAN_MspInit+0x284>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 800217e:	4b72      	ldr	r3, [pc, #456]	; (8002348 <HAL_CAN_MspInit+0x294>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	4a70      	ldr	r2, [pc, #448]	; (8002348 <HAL_CAN_MspInit+0x294>)
 8002186:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8002188:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_CAN_MspInit+0x294>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d10b      	bne.n	80021a8 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8002190:	4b69      	ldr	r3, [pc, #420]	; (8002338 <HAL_CAN_MspInit+0x284>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a68      	ldr	r2, [pc, #416]	; (8002338 <HAL_CAN_MspInit+0x284>)
 8002196:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <HAL_CAN_MspInit+0x284>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 80021a8:	4b62      	ldr	r3, [pc, #392]	; (8002334 <HAL_CAN_MspInit+0x280>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	4a61      	ldr	r2, [pc, #388]	; (8002334 <HAL_CAN_MspInit+0x280>)
 80021b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80021b2:	4b60      	ldr	r3, [pc, #384]	; (8002334 <HAL_CAN_MspInit+0x280>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d10b      	bne.n	80021d2 <HAL_CAN_MspInit+0x11e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80021ba:	4b5f      	ldr	r3, [pc, #380]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a5e      	ldr	r2, [pc, #376]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80021c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b5c      	ldr	r3, [pc, #368]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	623b      	str	r3, [r7, #32]
 80021d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	4b59      	ldr	r3, [pc, #356]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a58      	ldr	r2, [pc, #352]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b56      	ldr	r3, [pc, #344]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021ea:	2360      	movs	r3, #96	; 0x60
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80021fa:	2309      	movs	r3, #9
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002202:	4619      	mov	r1, r3
 8002204:	4851      	ldr	r0, [pc, #324]	; (800234c <HAL_CAN_MspInit+0x298>)
 8002206:	f001 f9b7 	bl	8003578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	2040      	movs	r0, #64	; 0x40
 8002210:	f001 f97b 	bl	800350a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002214:	2040      	movs	r0, #64	; 0x40
 8002216:	f001 f994 	bl	8003542 <HAL_NVIC_EnableIRQ>
}
 800221a:	e084      	b.n	8002326 <HAL_CAN_MspInit+0x272>
  else if(hcan->Instance==CAN3)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <HAL_CAN_MspInit+0x29c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d17f      	bne.n	8002326 <HAL_CAN_MspInit+0x272>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_CAN_MspInit+0x290>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	3301      	adds	r3, #1
 800222c:	4a45      	ldr	r2, [pc, #276]	; (8002344 <HAL_CAN_MspInit+0x290>)
 800222e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8002230:	4b44      	ldr	r3, [pc, #272]	; (8002344 <HAL_CAN_MspInit+0x290>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10b      	bne.n	8002250 <HAL_CAN_MspInit+0x19c>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8002238:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_CAN_MspInit+0x284>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	4a3e      	ldr	r2, [pc, #248]	; (8002338 <HAL_CAN_MspInit+0x284>)
 800223e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002242:	6413      	str	r3, [r2, #64]	; 0x40
 8002244:	4b3c      	ldr	r3, [pc, #240]	; (8002338 <HAL_CAN_MspInit+0x284>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 8002250:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_CAN_MspInit+0x294>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a3c      	ldr	r2, [pc, #240]	; (8002348 <HAL_CAN_MspInit+0x294>)
 8002258:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <HAL_CAN_MspInit+0x294>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10b      	bne.n	800227a <HAL_CAN_MspInit+0x1c6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8002262:	4b35      	ldr	r3, [pc, #212]	; (8002338 <HAL_CAN_MspInit+0x284>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4a34      	ldr	r2, [pc, #208]	; (8002338 <HAL_CAN_MspInit+0x284>)
 8002268:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_CAN_MspInit+0x284>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800227a:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_CAN_MspInit+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	4a2c      	ldr	r2, [pc, #176]	; (8002334 <HAL_CAN_MspInit+0x280>)
 8002282:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002284:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_CAN_MspInit+0x280>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10b      	bne.n	80022a4 <HAL_CAN_MspInit+0x1f0>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800228c:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_CAN_MspInit+0x284>)
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	4a29      	ldr	r2, [pc, #164]	; (8002338 <HAL_CAN_MspInit+0x284>)
 8002292:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002296:	6413      	str	r3, [r2, #64]	; 0x40
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_CAN_MspInit+0x284>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a4:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	4a23      	ldr	r2, [pc, #140]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6313      	str	r3, [r2, #48]	; 0x30
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	6313      	str	r3, [r2, #48]	; 0x30
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_CAN_MspInit+0x284>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80022e6:	230b      	movs	r3, #11
 80022e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ee:	4619      	mov	r1, r3
 80022f0:	4818      	ldr	r0, [pc, #96]	; (8002354 <HAL_CAN_MspInit+0x2a0>)
 80022f2:	f001 f941 	bl	8003578 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022f6:	2310      	movs	r3, #16
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8002306:	230b      	movs	r3, #11
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800230e:	4619      	mov	r1, r3
 8002310:	480e      	ldr	r0, [pc, #56]	; (800234c <HAL_CAN_MspInit+0x298>)
 8002312:	f001 f931 	bl	8003578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	2069      	movs	r0, #105	; 0x69
 800231c:	f001 f8f5 	bl	800350a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8002320:	2069      	movs	r0, #105	; 0x69
 8002322:	f001 f90e 	bl	8003542 <HAL_NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3748      	adds	r7, #72	; 0x48
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40006400 	.word	0x40006400
 8002334:	20000028 	.word	0x20000028
 8002338:	40023800 	.word	0x40023800
 800233c:	40020c00 	.word	0x40020c00
 8002340:	40006800 	.word	0x40006800
 8002344:	2000002c 	.word	0x2000002c
 8002348:	20000030 	.word	0x20000030
 800234c:	40020400 	.word	0x40020400
 8002350:	40003400 	.word	0x40003400
 8002354:	40020000 	.word	0x40020000

08002358 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_RTC_MspInit+0x38>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10d      	bne.n	8002386 <HAL_RTC_MspInit+0x2e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RTC_MspInit+0x3c>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_RTC_MspInit+0x3c>)
 8002370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002374:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2003      	movs	r0, #3
 800237c:	f001 f8c5 	bl	800350a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002380:	2003      	movs	r0, #3
 8002382:	f001 f8de 	bl	8003542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40002800 	.word	0x40002800
 8002394:	40023800 	.word	0x40023800

08002398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <HAL_TIM_Base_MspInit+0x44>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d113      	bne.n	80023d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_TIM_Base_MspInit+0x48>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <HAL_TIM_Base_MspInit+0x48>)
 80023b0:	f043 0310 	orr.w	r3, r3, #16
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_TIM_Base_MspInit+0x48>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2101      	movs	r1, #1
 80023c6:	2036      	movs	r0, #54	; 0x36
 80023c8:	f001 f89f 	bl	800350a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023cc:	2036      	movs	r0, #54	; 0x36
 80023ce:	f001 f8b8 	bl	8003542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40001000 	.word	0x40001000
 80023e0:	40023800 	.word	0x40023800

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <NMI_Handler+0x4>

080023ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <MemManage_Handler+0x4>

080023f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <UsageFault_Handler+0x4>

08002402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002430:	f000 f8ac 	bl	800258c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <RTC_WKUP_IRQHandler+0x10>)
 800243e:	f002 fd49 	bl	8004ed4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000330 	.word	0x20000330

0800244c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <CAN1_RX0_IRQHandler+0x10>)
 8002452:	f000 fd4f 	bl	8002ef4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000254 	.word	0x20000254

08002460 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <TIM6_DAC_IRQHandler+0x10>)
 8002466:	f002 fe33 	bl	80050d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000350 	.word	0x20000350

08002474 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <CAN2_RX0_IRQHandler+0x10>)
 800247a:	f000 fd3b 	bl	8002ef4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000148 	.word	0x20000148

08002488 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <CAN3_RX0_IRQHandler+0x10>)
 800248e:	f000 fd31 	bl	8002ef4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000110 	.word	0x20000110

0800249c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <SystemInit+0x20>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	4a05      	ldr	r2, [pc, #20]	; (80024bc <SystemInit+0x20>)
 80024a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80024c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c4:	480d      	ldr	r0, [pc, #52]	; (80024fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024c6:	490e      	ldr	r1, [pc, #56]	; (8002500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024cc:	e002      	b.n	80024d4 <LoopCopyDataInit>

080024ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d2:	3304      	adds	r3, #4

080024d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d8:	d3f9      	bcc.n	80024ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024dc:	4c0b      	ldr	r4, [pc, #44]	; (800250c <LoopFillZerobss+0x26>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e0:	e001      	b.n	80024e6 <LoopFillZerobss>

080024e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e4:	3204      	adds	r2, #4

080024e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e8:	d3fb      	bcc.n	80024e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024ea:	f7ff ffd7 	bl	800249c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ee:	f003 f883 	bl	80055f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f2:	f7ff fa6d 	bl	80019d0 <main>
  bx  lr    
 80024f6:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80024f8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002500:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002504:	080056a4 	.word	0x080056a4
  ldr r2, =_sbss
 8002508:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800250c:	200003c8 	.word	0x200003c8

08002510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002510:	e7fe      	b.n	8002510 <ADC_IRQHandler>

08002512 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002516:	2003      	movs	r0, #3
 8002518:	f000 ffec 	bl	80034f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251c:	2000      	movs	r0, #0
 800251e:	f000 f805 	bl	800252c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002522:	f7ff fda3 	bl	800206c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_InitTick+0x54>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x58>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002542:	fbb3 f3f1 	udiv	r3, r3, r1
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f001 f807 	bl	800355e <HAL_SYSTICK_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00e      	b.n	8002578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0f      	cmp	r3, #15
 800255e:	d80a      	bhi.n	8002576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002560:	2200      	movs	r2, #0
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f000 ffcf 	bl	800350a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800256c:	4a06      	ldr	r2, [pc, #24]	; (8002588 <HAL_InitTick+0x5c>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000000 	.word	0x20000000
 8002584:	20000008 	.word	0x20000008
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_IncTick+0x20>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x24>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_IncTick+0x24>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000008 	.word	0x20000008
 80025b0:	200003c4 	.word	0x200003c4

080025b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_GetTick+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	200003c4 	.word	0x200003c4

080025cc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_SuspendTick+0x1c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <HAL_SuspendTick+0x1c>)
 80025d6:	f023 0302 	bic.w	r3, r3, #2
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_ResumeTick+0x1c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a04      	ldr	r2, [pc, #16]	; (8002608 <HAL_ResumeTick+0x1c>)
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0ed      	b.n	80027fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fd42 	bl	80020b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0202 	bic.w	r2, r2, #2
 800263e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002640:	f7ff ffb8 	bl	80025b4 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002646:	e012      	b.n	800266e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002648:	f7ff ffb4 	bl	80025b4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b0a      	cmp	r3, #10
 8002654:	d90b      	bls.n	800266e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2205      	movs	r2, #5
 8002666:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0c5      	b.n	80027fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e5      	bne.n	8002648 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800268c:	f7ff ff92 	bl	80025b4 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002692:	e012      	b.n	80026ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002694:	f7ff ff8e 	bl	80025b4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b0a      	cmp	r3, #10
 80026a0:	d90b      	bls.n	80026ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2205      	movs	r2, #5
 80026b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e09f      	b.n	80027fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0e5      	beq.n	8002694 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7e1b      	ldrb	r3, [r3, #24]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d108      	bne.n	80026e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e007      	b.n	80026f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7e5b      	ldrb	r3, [r3, #25]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d108      	bne.n	800270c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e007      	b.n	800271c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7e9b      	ldrb	r3, [r3, #26]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d108      	bne.n	8002736 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0220 	orr.w	r2, r2, #32
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e007      	b.n	8002746 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0220 	bic.w	r2, r2, #32
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7edb      	ldrb	r3, [r3, #27]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d108      	bne.n	8002760 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0210 	bic.w	r2, r2, #16
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e007      	b.n	8002770 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0210 	orr.w	r2, r2, #16
 800276e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7f1b      	ldrb	r3, [r3, #28]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d108      	bne.n	800278a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0208 	orr.w	r2, r2, #8
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e007      	b.n	800279a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0208 	bic.w	r2, r2, #8
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7f5b      	ldrb	r3, [r3, #29]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d108      	bne.n	80027b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0204 	orr.w	r2, r2, #4
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e007      	b.n	80027c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0204 	bic.w	r2, r2, #4
 80027c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	ea42 0103 	orr.w	r1, r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800281a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d003      	beq.n	800282a <HAL_CAN_ConfigFilter+0x26>
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b02      	cmp	r3, #2
 8002826:	f040 80c7 	bne.w	80029b8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a69      	ldr	r2, [pc, #420]	; (80029d4 <HAL_CAN_ConfigFilter+0x1d0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d001      	beq.n	8002838 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002834:	4b68      	ldr	r3, [pc, #416]	; (80029d8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002836:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	4a63      	ldr	r2, [pc, #396]	; (80029d8 <HAL_CAN_ConfigFilter+0x1d4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d111      	bne.n	8002874 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002856:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	431a      	orrs	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2201      	movs	r2, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	43db      	mvns	r3, r3
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d123      	bne.n	80028e6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	401a      	ands	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3248      	adds	r2, #72	; 0x48
 80028c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028dc:	6979      	ldr	r1, [r7, #20]
 80028de:	3348      	adds	r3, #72	; 0x48
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d122      	bne.n	8002934 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800290e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3248      	adds	r2, #72	; 0x48
 8002914:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002928:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800292a:	6979      	ldr	r1, [r7, #20]
 800292c:	3348      	adds	r3, #72	; 0x48
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	43db      	mvns	r3, r3
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800294e:	e007      	b.n	8002960 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	431a      	orrs	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800297a:	e007      	b.n	800298c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	431a      	orrs	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d107      	bne.n	80029a4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	431a      	orrs	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029aa:	f023 0201 	bic.w	r2, r3, #1
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	e006      	b.n	80029c6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40003400 	.word	0x40003400
 80029d8:	40006400 	.word	0x40006400

080029dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d12e      	bne.n	8002a4e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a08:	f7ff fdd4 	bl	80025b4 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a0e:	e012      	b.n	8002a36 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a10:	f7ff fdd0 	bl	80025b4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b0a      	cmp	r3, #10
 8002a1c:	d90b      	bls.n	8002a36 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e012      	b.n	8002a5c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e5      	bne.n	8002a10 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e006      	b.n	8002a5c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a78:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a82:	7ffb      	ldrb	r3, [r7, #31]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d003      	beq.n	8002a90 <HAL_CAN_AddTxMessage+0x2c>
 8002a88:	7ffb      	ldrb	r3, [r7, #31]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	f040 80b8 	bne.w	8002c00 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80a0 	beq.w	8002bf0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	0e1b      	lsrs	r3, r3, #24
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d907      	bls.n	8002ad0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e09e      	b.n	8002c0e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10d      	bne.n	8002afe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002aec:	68f9      	ldr	r1, [r7, #12]
 8002aee:	6809      	ldr	r1, [r1, #0]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3318      	adds	r3, #24
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	440b      	add	r3, r1
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e00f      	b.n	8002b1e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b08:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b12:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3318      	adds	r3, #24
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	440b      	add	r3, r1
 8002b1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6819      	ldr	r1, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3318      	adds	r3, #24
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3304      	adds	r3, #4
 8002b30:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	7d1b      	ldrb	r3, [r3, #20]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d111      	bne.n	8002b5e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3318      	adds	r3, #24
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	4413      	add	r3, r2
 8002b46:	3304      	adds	r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	6811      	ldr	r1, [r2, #0]
 8002b4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3318      	adds	r3, #24
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	440b      	add	r3, r1
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3307      	adds	r3, #7
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	061a      	lsls	r2, r3, #24
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3306      	adds	r3, #6
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3305      	adds	r3, #5
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	3204      	adds	r2, #4
 8002b7e:	7812      	ldrb	r2, [r2, #0]
 8002b80:	4610      	mov	r0, r2
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6811      	ldr	r1, [r2, #0]
 8002b86:	ea43 0200 	orr.w	r2, r3, r0
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3303      	adds	r3, #3
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	061a      	lsls	r2, r3, #24
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3301      	adds	r3, #1
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	7812      	ldrb	r2, [r2, #0]
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	6811      	ldr	r1, [r2, #0]
 8002bbc:	ea43 0200 	orr.w	r2, r3, r0
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	440b      	add	r3, r1
 8002bc6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002bca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3318      	adds	r3, #24
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	4413      	add	r3, r2
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	6811      	ldr	r1, [r2, #0]
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3318      	adds	r3, #24
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	440b      	add	r3, r1
 8002bea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e00e      	b.n	8002c0e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e006      	b.n	8002c0e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b085      	sub	sp, #20
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c2c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c2e:	7afb      	ldrb	r3, [r7, #11]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d002      	beq.n	8002c3a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002c34:	7afb      	ldrb	r3, [r7, #11]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d11d      	bne.n	8002c76 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002c76:	68fb      	ldr	r3, [r7, #12]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c98:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d003      	beq.n	8002ca8 <HAL_CAN_GetRxMessage+0x24>
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	f040 80f3 	bne.w	8002e8e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10e      	bne.n	8002ccc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d116      	bne.n	8002cea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0e7      	b.n	8002e9c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d107      	bne.n	8002cea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0d8      	b.n	8002e9c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	331b      	adds	r3, #27
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	4413      	add	r3, r2
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0204 	and.w	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10c      	bne.n	8002d22 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	331b      	adds	r3, #27
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	4413      	add	r3, r2
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0d5b      	lsrs	r3, r3, #21
 8002d18:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e00b      	b.n	8002d3a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	331b      	adds	r3, #27
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	4413      	add	r3, r2
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	331b      	adds	r3, #27
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	4413      	add	r3, r2
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0202 	and.w	r2, r3, #2
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	331b      	adds	r3, #27
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 020f 	and.w	r2, r3, #15
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	331b      	adds	r3, #27
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4413      	add	r3, r2
 8002d74:	3304      	adds	r3, #4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	331b      	adds	r3, #27
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0a1a      	lsrs	r2, r3, #8
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0c1a      	lsrs	r2, r3, #16
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	3302      	adds	r3, #2
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	0e1a      	lsrs	r2, r3, #24
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	3303      	adds	r3, #3
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0a1a      	lsrs	r2, r3, #8
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	3305      	adds	r3, #5
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	0c1a      	lsrs	r2, r3, #16
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	3306      	adds	r3, #6
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0e1a      	lsrs	r2, r3, #24
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	3307      	adds	r3, #7
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d108      	bne.n	8002e7a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0220 	orr.w	r2, r2, #32
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	e007      	b.n	8002e8a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0220 	orr.w	r2, r2, #32
 8002e88:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e006      	b.n	8002e9c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
  }
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d002      	beq.n	8002ec6 <HAL_CAN_ActivateNotification+0x1e>
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d109      	bne.n	8002eda <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6959      	ldr	r1, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e006      	b.n	8002ee8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	; 0x28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d07c      	beq.n	8003034 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f983 	bl	8003262 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f5c:	e016      	b.n	8002f8c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f70:	e00c      	b.n	8002f8c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	e002      	b.n	8002f8c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f989 	bl	800329e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d024      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f963 	bl	8003276 <HAL_CAN_TxMailbox1CompleteCallback>
 8002fb0:	e016      	b.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	e00c      	b.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd8:	e002      	b.n	8002fe0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f969 	bl	80032b2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d024      	beq.n	8003034 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ff2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f943 	bl	800328a <HAL_CAN_TxMailbox2CompleteCallback>
 8003004:	e016      	b.n	8003034 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
 8003018:	e00c      	b.n	8003034 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
 800302c:	e002      	b.n	8003034 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f949 	bl	80032c6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00c      	beq.n	8003058 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2210      	movs	r2, #16
 8003056:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2208      	movs	r2, #8
 8003072:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f930 	bl	80032da <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d009      	beq.n	8003098 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd ff48 	bl	8000f28 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2210      	movs	r2, #16
 80030ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2208      	movs	r2, #8
 80030d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f912 	bl	8003302 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d009      	beq.n	80030fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8f9 	bl	80032ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d006      	beq.n	800311e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2210      	movs	r2, #16
 8003116:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f8fc 	bl	8003316 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2208      	movs	r2, #8
 8003138:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8f5 	bl	800332a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d07b      	beq.n	8003242 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d072      	beq.n	800323a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d043      	beq.n	800323a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d03e      	beq.n	800323a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031c2:	2b60      	cmp	r3, #96	; 0x60
 80031c4:	d02b      	beq.n	800321e <HAL_CAN_IRQHandler+0x32a>
 80031c6:	2b60      	cmp	r3, #96	; 0x60
 80031c8:	d82e      	bhi.n	8003228 <HAL_CAN_IRQHandler+0x334>
 80031ca:	2b50      	cmp	r3, #80	; 0x50
 80031cc:	d022      	beq.n	8003214 <HAL_CAN_IRQHandler+0x320>
 80031ce:	2b50      	cmp	r3, #80	; 0x50
 80031d0:	d82a      	bhi.n	8003228 <HAL_CAN_IRQHandler+0x334>
 80031d2:	2b40      	cmp	r3, #64	; 0x40
 80031d4:	d019      	beq.n	800320a <HAL_CAN_IRQHandler+0x316>
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d826      	bhi.n	8003228 <HAL_CAN_IRQHandler+0x334>
 80031da:	2b30      	cmp	r3, #48	; 0x30
 80031dc:	d010      	beq.n	8003200 <HAL_CAN_IRQHandler+0x30c>
 80031de:	2b30      	cmp	r3, #48	; 0x30
 80031e0:	d822      	bhi.n	8003228 <HAL_CAN_IRQHandler+0x334>
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d002      	beq.n	80031ec <HAL_CAN_IRQHandler+0x2f8>
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d005      	beq.n	80031f6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031ea:	e01d      	b.n	8003228 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f043 0308 	orr.w	r3, r3, #8
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031f4:	e019      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	f043 0310 	orr.w	r3, r3, #16
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031fe:	e014      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f043 0320 	orr.w	r3, r3, #32
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003208:	e00f      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003212:	e00a      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800321c:	e005      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003226:	e000      	b.n	800322a <HAL_CAN_IRQHandler+0x336>
            break;
 8003228:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699a      	ldr	r2, [r3, #24]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003238:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2204      	movs	r2, #4
 8003240:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f872 	bl	800333e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800325a:	bf00      	nop
 800325c:	3728      	adds	r7, #40	; 0x28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <__NVIC_SetPriorityGrouping>:
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <__NVIC_SetPriorityGrouping+0x40>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003370:	4013      	ands	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 800337e:	4313      	orrs	r3, r2
 8003380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003382:	4a04      	ldr	r2, [pc, #16]	; (8003394 <__NVIC_SetPriorityGrouping+0x40>)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	60d3      	str	r3, [r2, #12]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00
 8003398:	05fa0000 	.word	0x05fa0000

0800339c <__NVIC_GetPriorityGrouping>:
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <__NVIC_GetPriorityGrouping+0x18>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	f003 0307 	and.w	r3, r3, #7
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_EnableIRQ>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db0b      	blt.n	80033e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <__NVIC_EnableIRQ+0x38>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100

080033f4 <__NVIC_SetPriority>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	6039      	str	r1, [r7, #0]
 80033fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003404:	2b00      	cmp	r3, #0
 8003406:	db0a      	blt.n	800341e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	490c      	ldr	r1, [pc, #48]	; (8003440 <__NVIC_SetPriority+0x4c>)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	0112      	lsls	r2, r2, #4
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	440b      	add	r3, r1
 8003418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800341c:	e00a      	b.n	8003434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4908      	ldr	r1, [pc, #32]	; (8003444 <__NVIC_SetPriority+0x50>)
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	3b04      	subs	r3, #4
 800342c:	0112      	lsls	r2, r2, #4
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	440b      	add	r3, r1
 8003432:	761a      	strb	r2, [r3, #24]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000e100 	.word	0xe000e100
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <NVIC_EncodePriority>:
{
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f1c3 0307 	rsb	r3, r3, #7
 8003462:	2b04      	cmp	r3, #4
 8003464:	bf28      	it	cs
 8003466:	2304      	movcs	r3, #4
 8003468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3304      	adds	r3, #4
 800346e:	2b06      	cmp	r3, #6
 8003470:	d902      	bls.n	8003478 <NVIC_EncodePriority+0x30>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3b03      	subs	r3, #3
 8003476:	e000      	b.n	800347a <NVIC_EncodePriority+0x32>
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	401a      	ands	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003490:	f04f 31ff 	mov.w	r1, #4294967295
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43d9      	mvns	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	4313      	orrs	r3, r2
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c0:	d301      	bcc.n	80034c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c2:	2301      	movs	r3, #1
 80034c4:	e00f      	b.n	80034e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <SysTick_Config+0x40>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ce:	210f      	movs	r1, #15
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	f7ff ff8e 	bl	80033f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <SysTick_Config+0x40>)
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <SysTick_Config+0x40>)
 80034e0:	2207      	movs	r2, #7
 80034e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	e000e010 	.word	0xe000e010

080034f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff29 	bl	8003354 <__NVIC_SetPriorityGrouping>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	4603      	mov	r3, r0
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800351c:	f7ff ff3e 	bl	800339c <__NVIC_GetPriorityGrouping>
 8003520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	6978      	ldr	r0, [r7, #20]
 8003528:	f7ff ff8e 	bl	8003448 <NVIC_EncodePriority>
 800352c:	4602      	mov	r2, r0
 800352e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff5d 	bl	80033f4 <__NVIC_SetPriority>
}
 800353a:	bf00      	nop
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800354c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff ff31 	bl	80033b8 <__NVIC_EnableIRQ>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ffa2 	bl	80034b0 <SysTick_Config>
 800356c:	4603      	mov	r3, r0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	e175      	b.n	8003884 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003598:	2201      	movs	r2, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	f040 8164 	bne.w	800387e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d00b      	beq.n	80035d6 <HAL_GPIO_Init+0x5e>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d007      	beq.n	80035d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ca:	2b11      	cmp	r3, #17
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b12      	cmp	r3, #18
 80035d4:	d130      	bne.n	8003638 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	2203      	movs	r2, #3
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800360c:	2201      	movs	r2, #1
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 0201 	and.w	r2, r3, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x100>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b12      	cmp	r3, #18
 8003676:	d123      	bne.n	80036c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	08da      	lsrs	r2, r3, #3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3208      	adds	r2, #8
 8003680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	220f      	movs	r2, #15
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	08da      	lsrs	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3208      	adds	r2, #8
 80036ba:	69b9      	ldr	r1, [r7, #24]
 80036bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	2203      	movs	r2, #3
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0203 	and.w	r2, r3, #3
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80be 	beq.w	800387e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003702:	4b66      	ldr	r3, [pc, #408]	; (800389c <HAL_GPIO_Init+0x324>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	4a65      	ldr	r2, [pc, #404]	; (800389c <HAL_GPIO_Init+0x324>)
 8003708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800370c:	6453      	str	r3, [r2, #68]	; 0x44
 800370e:	4b63      	ldr	r3, [pc, #396]	; (800389c <HAL_GPIO_Init+0x324>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800371a:	4a61      	ldr	r2, [pc, #388]	; (80038a0 <HAL_GPIO_Init+0x328>)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	3302      	adds	r3, #2
 8003722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	220f      	movs	r2, #15
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a58      	ldr	r2, [pc, #352]	; (80038a4 <HAL_GPIO_Init+0x32c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d037      	beq.n	80037b6 <HAL_GPIO_Init+0x23e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a57      	ldr	r2, [pc, #348]	; (80038a8 <HAL_GPIO_Init+0x330>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d031      	beq.n	80037b2 <HAL_GPIO_Init+0x23a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a56      	ldr	r2, [pc, #344]	; (80038ac <HAL_GPIO_Init+0x334>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d02b      	beq.n	80037ae <HAL_GPIO_Init+0x236>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a55      	ldr	r2, [pc, #340]	; (80038b0 <HAL_GPIO_Init+0x338>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d025      	beq.n	80037aa <HAL_GPIO_Init+0x232>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a54      	ldr	r2, [pc, #336]	; (80038b4 <HAL_GPIO_Init+0x33c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01f      	beq.n	80037a6 <HAL_GPIO_Init+0x22e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a53      	ldr	r2, [pc, #332]	; (80038b8 <HAL_GPIO_Init+0x340>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d019      	beq.n	80037a2 <HAL_GPIO_Init+0x22a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_GPIO_Init+0x344>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_GPIO_Init+0x226>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_GPIO_Init+0x348>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00d      	beq.n	800379a <HAL_GPIO_Init+0x222>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a50      	ldr	r2, [pc, #320]	; (80038c4 <HAL_GPIO_Init+0x34c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <HAL_GPIO_Init+0x21e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4f      	ldr	r2, [pc, #316]	; (80038c8 <HAL_GPIO_Init+0x350>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_GPIO_Init+0x21a>
 800378e:	2309      	movs	r3, #9
 8003790:	e012      	b.n	80037b8 <HAL_GPIO_Init+0x240>
 8003792:	230a      	movs	r3, #10
 8003794:	e010      	b.n	80037b8 <HAL_GPIO_Init+0x240>
 8003796:	2308      	movs	r3, #8
 8003798:	e00e      	b.n	80037b8 <HAL_GPIO_Init+0x240>
 800379a:	2307      	movs	r3, #7
 800379c:	e00c      	b.n	80037b8 <HAL_GPIO_Init+0x240>
 800379e:	2306      	movs	r3, #6
 80037a0:	e00a      	b.n	80037b8 <HAL_GPIO_Init+0x240>
 80037a2:	2305      	movs	r3, #5
 80037a4:	e008      	b.n	80037b8 <HAL_GPIO_Init+0x240>
 80037a6:	2304      	movs	r3, #4
 80037a8:	e006      	b.n	80037b8 <HAL_GPIO_Init+0x240>
 80037aa:	2303      	movs	r3, #3
 80037ac:	e004      	b.n	80037b8 <HAL_GPIO_Init+0x240>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e002      	b.n	80037b8 <HAL_GPIO_Init+0x240>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <HAL_GPIO_Init+0x240>
 80037b6:	2300      	movs	r3, #0
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	f002 0203 	and.w	r2, r2, #3
 80037be:	0092      	lsls	r2, r2, #2
 80037c0:	4093      	lsls	r3, r2
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037c8:	4935      	ldr	r1, [pc, #212]	; (80038a0 <HAL_GPIO_Init+0x328>)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	3302      	adds	r3, #2
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d6:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_GPIO_Init+0x354>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037fa:	4a34      	ldr	r2, [pc, #208]	; (80038cc <HAL_GPIO_Init+0x354>)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003800:	4b32      	ldr	r3, [pc, #200]	; (80038cc <HAL_GPIO_Init+0x354>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003824:	4a29      	ldr	r2, [pc, #164]	; (80038cc <HAL_GPIO_Init+0x354>)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800382a:	4b28      	ldr	r3, [pc, #160]	; (80038cc <HAL_GPIO_Init+0x354>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	43db      	mvns	r3, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4013      	ands	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800384e:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HAL_GPIO_Init+0x354>)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_GPIO_Init+0x354>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003878:	4a14      	ldr	r2, [pc, #80]	; (80038cc <HAL_GPIO_Init+0x354>)
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3301      	adds	r3, #1
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b0f      	cmp	r3, #15
 8003888:	f67f ae86 	bls.w	8003598 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	3724      	adds	r7, #36	; 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	40013800 	.word	0x40013800
 80038a4:	40020000 	.word	0x40020000
 80038a8:	40020400 	.word	0x40020400
 80038ac:	40020800 	.word	0x40020800
 80038b0:	40020c00 	.word	0x40020c00
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40021400 	.word	0x40021400
 80038bc:	40021800 	.word	0x40021800
 80038c0:	40021c00 	.word	0x40021c00
 80038c4:	40022000 	.word	0x40022000
 80038c8:	40022400 	.word	0x40022400
 80038cc:	40013c00 	.word	0x40013c00

080038d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	887b      	ldrh	r3, [r7, #2]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	e001      	b.n	80038f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	807b      	strh	r3, [r7, #2]
 800390c:	4613      	mov	r3, r2
 800390e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003910:	787b      	ldrb	r3, [r7, #1]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003916:	887a      	ldrh	r2, [r7, #2]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800391c:	e003      	b.n	8003926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800391e:	887b      	ldrh	r3, [r7, #2]
 8003920:	041a      	lsls	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	619a      	str	r2, [r3, #24]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR1;
 8003944:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <HAL_PWR_EnterSTOPMode+0x6c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR1_PDDS | PWR_CR1_LPDS);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f023 0303 	bic.w	r3, r3, #3
 8003950:	60fb      	str	r3, [r7, #12]

  /* Set LPDS, MRLVDS and LPLVDS bits according to Regulator value */
  tmpreg |= Regulator;
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR1 = tmpreg;
 800395a:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <HAL_PWR_EnterSTOPMode+0x6c>)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <HAL_PWR_EnterSTOPMode+0x70>)
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	4a0f      	ldr	r2, [pc, #60]	; (80039a4 <HAL_PWR_EnterSTOPMode+0x70>)
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800396c:	f3bf 8f4f 	dsb	sy
}
 8003970:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003972:	f3bf 8f6f 	isb	sy
}
 8003976:	bf00      	nop
  /* Ensure that all instructions done before entering STOP mode */
  __DSB();
  __ISB();

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_PWR_EnterSTOPMode+0x4e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800397e:	bf30      	wfi
 8003980:	e002      	b.n	8003988 <HAL_PWR_EnterSTOPMode+0x54>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003982:	bf40      	sev
    __WFE();
 8003984:	bf20      	wfe
    __WFE();
 8003986:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_PWR_EnterSTOPMode+0x70>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	4a05      	ldr	r2, [pc, #20]	; (80039a4 <HAL_PWR_EnterSTOPMode+0x70>)
 800398e:	f023 0304 	bic.w	r3, r3, #4
 8003992:	6113      	str	r3, [r2, #16]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40007000 	.word	0x40007000
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <HAL_PWREx_EnableOverDrive+0x98>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <HAL_PWREx_EnableOverDrive+0x98>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6413      	str	r3, [r2, #64]	; 0x40
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <HAL_PWREx_EnableOverDrive+0x98>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d6:	f7fe fded 	bl	80025b4 <HAL_GetTick>
 80039da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039dc:	e009      	b.n	80039f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039de:	f7fe fde9 	bl	80025b4 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ec:	d901      	bls.n	80039f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e022      	b.n	8003a38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039f2:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fe:	d1ee      	bne.n	80039de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a00:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0f      	ldr	r2, [pc, #60]	; (8003a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a0c:	f7fe fdd2 	bl	80025b4 <HAL_GetTick>
 8003a10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a12:	e009      	b.n	8003a28 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a14:	f7fe fdce 	bl	80025b4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a22:	d901      	bls.n	8003a28 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e007      	b.n	8003a38 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a34:	d1ee      	bne.n	8003a14 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40007000 	.word	0x40007000

08003a48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a50:	2300      	movs	r3, #0
 8003a52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e29b      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8087 	beq.w	8003b7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a6c:	4b96      	ldr	r3, [pc, #600]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d00c      	beq.n	8003a92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a78:	4b93      	ldr	r3, [pc, #588]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d112      	bne.n	8003aaa <HAL_RCC_OscConfig+0x62>
 8003a84:	4b90      	ldr	r3, [pc, #576]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a90:	d10b      	bne.n	8003aaa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a92:	4b8d      	ldr	r3, [pc, #564]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d06c      	beq.n	8003b78 <HAL_RCC_OscConfig+0x130>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d168      	bne.n	8003b78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e275      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab2:	d106      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x7a>
 8003ab4:	4b84      	ldr	r3, [pc, #528]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a83      	ldr	r2, [pc, #524]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	e02e      	b.n	8003b20 <HAL_RCC_OscConfig+0xd8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x9c>
 8003aca:	4b7f      	ldr	r3, [pc, #508]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a7e      	ldr	r2, [pc, #504]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b7c      	ldr	r3, [pc, #496]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7b      	ldr	r2, [pc, #492]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e01d      	b.n	8003b20 <HAL_RCC_OscConfig+0xd8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0xc0>
 8003aee:	4b76      	ldr	r3, [pc, #472]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a75      	ldr	r2, [pc, #468]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b73      	ldr	r3, [pc, #460]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a72      	ldr	r2, [pc, #456]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0xd8>
 8003b08:	4b6f      	ldr	r3, [pc, #444]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a6e      	ldr	r2, [pc, #440]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b6c      	ldr	r3, [pc, #432]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a6b      	ldr	r2, [pc, #428]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fe fd44 	bl	80025b4 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fe fd40 	bl	80025b4 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e229      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	4b61      	ldr	r3, [pc, #388]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0xe8>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fe fd30 	bl	80025b4 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fe fd2c 	bl	80025b4 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e215      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	4b57      	ldr	r3, [pc, #348]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x110>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d069      	beq.n	8003c5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b86:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b92:	4b4d      	ldr	r3, [pc, #308]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x190>
 8003b9e:	4b4a      	ldr	r3, [pc, #296]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x17a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e1e9      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc2:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	493d      	ldr	r1, [pc, #244]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd6:	e040      	b.n	8003c5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d023      	beq.n	8003c28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be0:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a38      	ldr	r2, [pc, #224]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7fe fce2 	bl	80025b4 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf4:	f7fe fcde 	bl	80025b4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e1c7      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c06:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c12:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4929      	ldr	r1, [pc, #164]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
 8003c26:	e018      	b.n	8003c5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c28:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a26      	ldr	r2, [pc, #152]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe fcbe 	bl	80025b4 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3c:	f7fe fcba 	bl	80025b4 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e1a3      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d038      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d019      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c6e:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c72:	4a15      	ldr	r2, [pc, #84]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7a:	f7fe fc9b 	bl	80025b4 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c82:	f7fe fc97 	bl	80025b4 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e180      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x23a>
 8003ca0:	e01a      	b.n	8003cd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca6:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <HAL_RCC_OscConfig+0x280>)
 8003ca8:	f023 0301 	bic.w	r3, r3, #1
 8003cac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cae:	f7fe fc81 	bl	80025b4 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fe fc7d 	bl	80025b4 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d903      	bls.n	8003ccc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e166      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
 8003cc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ccc:	4b92      	ldr	r3, [pc, #584]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1ee      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80a4 	beq.w	8003e2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce6:	4b8c      	ldr	r3, [pc, #560]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10d      	bne.n	8003d0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	4b89      	ldr	r3, [pc, #548]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	4a88      	ldr	r2, [pc, #544]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfe:	4b86      	ldr	r3, [pc, #536]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d0e:	4b83      	ldr	r3, [pc, #524]	; (8003f1c <HAL_RCC_OscConfig+0x4d4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d118      	bne.n	8003d4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d1a:	4b80      	ldr	r3, [pc, #512]	; (8003f1c <HAL_RCC_OscConfig+0x4d4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a7f      	ldr	r2, [pc, #508]	; (8003f1c <HAL_RCC_OscConfig+0x4d4>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d26:	f7fe fc45 	bl	80025b4 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2e:	f7fe fc41 	bl	80025b4 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b64      	cmp	r3, #100	; 0x64
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e12a      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d40:	4b76      	ldr	r3, [pc, #472]	; (8003f1c <HAL_RCC_OscConfig+0x4d4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d106      	bne.n	8003d62 <HAL_RCC_OscConfig+0x31a>
 8003d54:	4b70      	ldr	r3, [pc, #448]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	4a6f      	ldr	r2, [pc, #444]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d60:	e02d      	b.n	8003dbe <HAL_RCC_OscConfig+0x376>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x33c>
 8003d6a:	4b6b      	ldr	r3, [pc, #428]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4a6a      	ldr	r2, [pc, #424]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70
 8003d76:	4b68      	ldr	r3, [pc, #416]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	4a67      	ldr	r2, [pc, #412]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	f023 0304 	bic.w	r3, r3, #4
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70
 8003d82:	e01c      	b.n	8003dbe <HAL_RCC_OscConfig+0x376>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d10c      	bne.n	8003da6 <HAL_RCC_OscConfig+0x35e>
 8003d8c:	4b62      	ldr	r3, [pc, #392]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	4a61      	ldr	r2, [pc, #388]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	6713      	str	r3, [r2, #112]	; 0x70
 8003d98:	4b5f      	ldr	r3, [pc, #380]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a5e      	ldr	r2, [pc, #376]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	e00b      	b.n	8003dbe <HAL_RCC_OscConfig+0x376>
 8003da6:	4b5c      	ldr	r3, [pc, #368]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a5b      	ldr	r2, [pc, #364]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70
 8003db2:	4b59      	ldr	r3, [pc, #356]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	4a58      	ldr	r2, [pc, #352]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d015      	beq.n	8003df2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fe fbf5 	bl	80025b4 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fe fbf1 	bl	80025b4 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0d8      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	4b4c      	ldr	r3, [pc, #304]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ee      	beq.n	8003dce <HAL_RCC_OscConfig+0x386>
 8003df0:	e014      	b.n	8003e1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df2:	f7fe fbdf 	bl	80025b4 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fe fbdb 	bl	80025b4 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e0c2      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e10:	4b41      	ldr	r3, [pc, #260]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ee      	bne.n	8003dfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4b3d      	ldr	r3, [pc, #244]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	4a3c      	ldr	r2, [pc, #240]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80ae 	beq.w	8003f94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e38:	4b37      	ldr	r3, [pc, #220]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d06d      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d14b      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4c:	4b32      	ldr	r3, [pc, #200]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a31      	ldr	r2, [pc, #196]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe fbac 	bl	80025b4 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fe fba8 	bl	80025b4 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e091      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e72:	4b29      	ldr	r3, [pc, #164]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1f0      	bne.n	8003e60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	019b      	lsls	r3, r3, #6
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	3b01      	subs	r3, #1
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	061b      	lsls	r3, r3, #24
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	071b      	lsls	r3, r3, #28
 8003eaa:	491b      	ldr	r1, [pc, #108]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb0:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fb7a 	bl	80025b4 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fe fb76 	bl	80025b4 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e05f      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x47c>
 8003ee2:	e057      	b.n	8003f94 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fb60 	bl	80025b4 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fe fb5c 	bl	80025b4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e045      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_OscConfig+0x4d0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x4b0>
 8003f16:	e03d      	b.n	8003f94 <HAL_RCC_OscConfig+0x54c>
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f20:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <HAL_RCC_OscConfig+0x558>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d030      	beq.n	8003f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d129      	bne.n	8003f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d122      	bne.n	8003f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f50:	4013      	ands	r3, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d119      	bne.n	8003f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d10f      	bne.n	8003f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d107      	bne.n	8003f90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0d0      	b.n	800415e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d910      	bls.n	8003fec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b67      	ldr	r3, [pc, #412]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 020f 	bic.w	r2, r3, #15
 8003fd2:	4965      	ldr	r1, [pc, #404]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b63      	ldr	r3, [pc, #396]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0b8      	b.n	800415e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d020      	beq.n	800403a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004004:	4b59      	ldr	r3, [pc, #356]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4a58      	ldr	r2, [pc, #352]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 800400a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800400e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800401c:	4b53      	ldr	r3, [pc, #332]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4a52      	ldr	r2, [pc, #328]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004026:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004028:	4b50      	ldr	r3, [pc, #320]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	494d      	ldr	r1, [pc, #308]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d040      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d107      	bne.n	800405e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404e:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d115      	bne.n	8004086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e07f      	b.n	800415e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e073      	b.n	800415e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004076:	4b3d      	ldr	r3, [pc, #244]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e06b      	b.n	800415e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004086:	4b39      	ldr	r3, [pc, #228]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f023 0203 	bic.w	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4936      	ldr	r1, [pc, #216]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004098:	f7fe fa8c 	bl	80025b4 <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a0:	f7fe fa88 	bl	80025b4 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e053      	b.n	800415e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	4b2d      	ldr	r3, [pc, #180]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 020c 	and.w	r2, r3, #12
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d1eb      	bne.n	80040a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c8:	4b27      	ldr	r3, [pc, #156]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d210      	bcs.n	80040f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 020f 	bic.w	r2, r3, #15
 80040de:	4922      	ldr	r1, [pc, #136]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b20      	ldr	r3, [pc, #128]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e032      	b.n	800415e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004104:	4b19      	ldr	r3, [pc, #100]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4916      	ldr	r1, [pc, #88]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	490e      	ldr	r1, [pc, #56]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004136:	f000 f821 	bl	800417c <HAL_RCC_GetSysClockFreq>
 800413a:	4602      	mov	r2, r0
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	490a      	ldr	r1, [pc, #40]	; (8004170 <HAL_RCC_ClockConfig+0x1cc>)
 8004148:	5ccb      	ldrb	r3, [r1, r3]
 800414a:	fa22 f303 	lsr.w	r3, r2, r3
 800414e:	4a09      	ldr	r2, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1d0>)
 8004150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCC_ClockConfig+0x1d4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe f9e8 	bl	800252c <HAL_InitTick>

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40023c00 	.word	0x40023c00
 800416c:	40023800 	.word	0x40023800
 8004170:	08005684 	.word	0x08005684
 8004174:	20000000 	.word	0x20000000
 8004178:	20000004 	.word	0x20000004

0800417c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800417c:	b5b0      	push	{r4, r5, r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004182:	2100      	movs	r1, #0
 8004184:	6079      	str	r1, [r7, #4]
 8004186:	2100      	movs	r1, #0
 8004188:	60f9      	str	r1, [r7, #12]
 800418a:	2100      	movs	r1, #0
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800418e:	2100      	movs	r1, #0
 8004190:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004192:	4952      	ldr	r1, [pc, #328]	; (80042dc <HAL_RCC_GetSysClockFreq+0x160>)
 8004194:	6889      	ldr	r1, [r1, #8]
 8004196:	f001 010c 	and.w	r1, r1, #12
 800419a:	2908      	cmp	r1, #8
 800419c:	d00d      	beq.n	80041ba <HAL_RCC_GetSysClockFreq+0x3e>
 800419e:	2908      	cmp	r1, #8
 80041a0:	f200 8094 	bhi.w	80042cc <HAL_RCC_GetSysClockFreq+0x150>
 80041a4:	2900      	cmp	r1, #0
 80041a6:	d002      	beq.n	80041ae <HAL_RCC_GetSysClockFreq+0x32>
 80041a8:	2904      	cmp	r1, #4
 80041aa:	d003      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x38>
 80041ac:	e08e      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ae:	4b4c      	ldr	r3, [pc, #304]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80041b0:	60bb      	str	r3, [r7, #8]
      break;
 80041b2:	e08e      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b4:	4b4b      	ldr	r3, [pc, #300]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80041b6:	60bb      	str	r3, [r7, #8]
      break;
 80041b8:	e08b      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041ba:	4948      	ldr	r1, [pc, #288]	; (80042dc <HAL_RCC_GetSysClockFreq+0x160>)
 80041bc:	6849      	ldr	r1, [r1, #4]
 80041be:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80041c2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041c4:	4945      	ldr	r1, [pc, #276]	; (80042dc <HAL_RCC_GetSysClockFreq+0x160>)
 80041c6:	6849      	ldr	r1, [r1, #4]
 80041c8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80041cc:	2900      	cmp	r1, #0
 80041ce:	d024      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d0:	4942      	ldr	r1, [pc, #264]	; (80042dc <HAL_RCC_GetSysClockFreq+0x160>)
 80041d2:	6849      	ldr	r1, [r1, #4]
 80041d4:	0989      	lsrs	r1, r1, #6
 80041d6:	4608      	mov	r0, r1
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80041e0:	f04f 0500 	mov.w	r5, #0
 80041e4:	ea00 0204 	and.w	r2, r0, r4
 80041e8:	ea01 0305 	and.w	r3, r1, r5
 80041ec:	493d      	ldr	r1, [pc, #244]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80041ee:	fb01 f003 	mul.w	r0, r1, r3
 80041f2:	2100      	movs	r1, #0
 80041f4:	fb01 f102 	mul.w	r1, r1, r2
 80041f8:	1844      	adds	r4, r0, r1
 80041fa:	493a      	ldr	r1, [pc, #232]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x168>)
 80041fc:	fba2 0101 	umull	r0, r1, r2, r1
 8004200:	1863      	adds	r3, r4, r1
 8004202:	4619      	mov	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	461a      	mov	r2, r3
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	f7fc f814 	bl	8000238 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4613      	mov	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e04a      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421a:	4b30      	ldr	r3, [pc, #192]	; (80042dc <HAL_RCC_GetSysClockFreq+0x160>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	099b      	lsrs	r3, r3, #6
 8004220:	461a      	mov	r2, r3
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	f240 10ff 	movw	r0, #511	; 0x1ff
 800422a:	f04f 0100 	mov.w	r1, #0
 800422e:	ea02 0400 	and.w	r4, r2, r0
 8004232:	ea03 0501 	and.w	r5, r3, r1
 8004236:	4620      	mov	r0, r4
 8004238:	4629      	mov	r1, r5
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	014b      	lsls	r3, r1, #5
 8004244:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004248:	0142      	lsls	r2, r0, #5
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	1b00      	subs	r0, r0, r4
 8004250:	eb61 0105 	sbc.w	r1, r1, r5
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	018b      	lsls	r3, r1, #6
 800425e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004262:	0182      	lsls	r2, r0, #6
 8004264:	1a12      	subs	r2, r2, r0
 8004266:	eb63 0301 	sbc.w	r3, r3, r1
 800426a:	f04f 0000 	mov.w	r0, #0
 800426e:	f04f 0100 	mov.w	r1, #0
 8004272:	00d9      	lsls	r1, r3, #3
 8004274:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004278:	00d0      	lsls	r0, r2, #3
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	1912      	adds	r2, r2, r4
 8004280:	eb45 0303 	adc.w	r3, r5, r3
 8004284:	f04f 0000 	mov.w	r0, #0
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	0299      	lsls	r1, r3, #10
 800428e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004292:	0290      	lsls	r0, r2, #10
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4610      	mov	r0, r2
 800429a:	4619      	mov	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	461a      	mov	r2, r3
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	f7fb ffc8 	bl	8000238 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4613      	mov	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_RCC_GetSysClockFreq+0x160>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	3301      	adds	r3, #1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	60bb      	str	r3, [r7, #8]
      break;
 80042ca:	e002      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80042ce:	60bb      	str	r3, [r7, #8]
      break;
 80042d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d2:	68bb      	ldr	r3, [r7, #8]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bdb0      	pop	{r4, r5, r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	00f42400 	.word	0x00f42400
 80042e4:	017d7840 	.word	0x017d7840

080042e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004310:	4b69      	ldr	r3, [pc, #420]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4a68      	ldr	r2, [pc, #416]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800431a:	6093      	str	r3, [r2, #8]
 800431c:	4b66      	ldr	r3, [pc, #408]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	4964      	ldr	r1, [pc, #400]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d017      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004342:	4b5d      	ldr	r3, [pc, #372]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	4959      	ldr	r1, [pc, #356]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004360:	d101      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004362:	2301      	movs	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800436e:	2301      	movs	r3, #1
 8004370:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d017      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800437e:	4b4e      	ldr	r3, [pc, #312]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004384:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	494a      	ldr	r1, [pc, #296]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439c:	d101      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043ba:	2301      	movs	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 808b 	beq.w	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043cc:	4b3a      	ldr	r3, [pc, #232]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	4a39      	ldr	r2, [pc, #228]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6413      	str	r3, [r2, #64]	; 0x40
 80043d8:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043e4:	4b35      	ldr	r3, [pc, #212]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a34      	ldr	r2, [pc, #208]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f0:	f7fe f8e0 	bl	80025b4 <HAL_GetTick>
 80043f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f8:	f7fe f8dc 	bl	80025b4 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	; 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e358      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800440a:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004416:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d035      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d02e      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004434:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800443e:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800444a:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a1a      	ldr	r2, [pc, #104]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004454:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800445c:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d114      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fe f8a4 	bl	80025b4 <HAL_GetTick>
 800446c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	e00a      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fe f8a0 	bl	80025b4 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e31a      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ee      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449e:	d111      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	4901      	ldr	r1, [pc, #4]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
 80044b6:	e00b      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40007000 	.word	0x40007000
 80044c0:	0ffffcff 	.word	0x0ffffcff
 80044c4:	4bb1      	ldr	r3, [pc, #708]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4ab0      	ldr	r2, [pc, #704]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044ce:	6093      	str	r3, [r2, #8]
 80044d0:	4bae      	ldr	r3, [pc, #696]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044dc:	49ab      	ldr	r1, [pc, #684]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d010      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ee:	4ba7      	ldr	r3, [pc, #668]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f4:	4aa5      	ldr	r2, [pc, #660]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044fe:	4ba3      	ldr	r3, [pc, #652]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004500:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	49a0      	ldr	r1, [pc, #640]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800451c:	4b9b      	ldr	r3, [pc, #620]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800452a:	4998      	ldr	r1, [pc, #608]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800453e:	4b93      	ldr	r3, [pc, #588]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454c:	498f      	ldr	r1, [pc, #572]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004560:	4b8a      	ldr	r3, [pc, #552]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800456e:	4987      	ldr	r1, [pc, #540]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004582:	4b82      	ldr	r3, [pc, #520]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	497e      	ldr	r1, [pc, #504]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045a4:	4b79      	ldr	r3, [pc, #484]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f023 0203 	bic.w	r2, r3, #3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	4976      	ldr	r1, [pc, #472]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045c6:	4b71      	ldr	r3, [pc, #452]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f023 020c 	bic.w	r2, r3, #12
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d4:	496d      	ldr	r1, [pc, #436]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045e8:	4b68      	ldr	r3, [pc, #416]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	4965      	ldr	r1, [pc, #404]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800460a:	4b60      	ldr	r3, [pc, #384]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004618:	495c      	ldr	r1, [pc, #368]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800462c:	4b57      	ldr	r3, [pc, #348]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	4954      	ldr	r1, [pc, #336]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800464e:	4b4f      	ldr	r3, [pc, #316]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	494b      	ldr	r1, [pc, #300]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004670:	4b46      	ldr	r3, [pc, #280]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467e:	4943      	ldr	r1, [pc, #268]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004692:	4b3e      	ldr	r3, [pc, #248]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004698:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a0:	493a      	ldr	r1, [pc, #232]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046b4:	4b35      	ldr	r3, [pc, #212]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046c2:	4932      	ldr	r1, [pc, #200]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d011      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046d6:	4b2d      	ldr	r3, [pc, #180]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e4:	4929      	ldr	r1, [pc, #164]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f4:	d101      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046f6:	2301      	movs	r3, #1
 80046f8:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004706:	4b21      	ldr	r3, [pc, #132]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004714:	491d      	ldr	r1, [pc, #116]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004728:	4b18      	ldr	r3, [pc, #96]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004738:	4914      	ldr	r1, [pc, #80]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800474c:	4b0f      	ldr	r3, [pc, #60]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475c:	490b      	ldr	r1, [pc, #44]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00f      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004776:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	4902      	ldr	r1, [pc, #8]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8004788:	e002      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00b      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800479c:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800479e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ac:	497d      	ldr	r1, [pc, #500]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d006      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80d6 	beq.w	8004974 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047c8:	4b76      	ldr	r3, [pc, #472]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a75      	ldr	r2, [pc, #468]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80047ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fd feee 	bl	80025b4 <HAL_GetTick>
 80047d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047dc:	f7fd feea 	bl	80025b4 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e166      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047ee:	4b6d      	ldr	r3, [pc, #436]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d021      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x562>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	2b00      	cmp	r3, #0
 800480c:	d11d      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800480e:	4b65      	ldr	r3, [pc, #404]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800481c:	4b61      	ldr	r3, [pc, #388]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	0e1b      	lsrs	r3, r3, #24
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	019a      	lsls	r2, r3, #6
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	431a      	orrs	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	071b      	lsls	r3, r3, #28
 8004842:	4958      	ldr	r1, [pc, #352]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d004      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x58e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02e      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x5e2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004874:	d129      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004876:	4b4b      	ldr	r3, [pc, #300]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004884:	4b47      	ldr	r3, [pc, #284]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488a:	0f1b      	lsrs	r3, r3, #28
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	019a      	lsls	r2, r3, #6
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	041b      	lsls	r3, r3, #16
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	061b      	lsls	r3, r3, #24
 80048a4:	431a      	orrs	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	071b      	lsls	r3, r3, #28
 80048aa:	493e      	ldr	r1, [pc, #248]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048b2:	4b3c      	ldr	r3, [pc, #240]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80048b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b8:	f023 021f 	bic.w	r2, r3, #31
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	3b01      	subs	r3, #1
 80048c2:	4938      	ldr	r1, [pc, #224]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01d      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048d6:	4b33      	ldr	r3, [pc, #204]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048dc:	0e1b      	lsrs	r3, r3, #24
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048e4:	4b2f      	ldr	r3, [pc, #188]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80048e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ea:	0f1b      	lsrs	r3, r3, #28
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	019a      	lsls	r2, r3, #6
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	431a      	orrs	r2, r3
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	061b      	lsls	r3, r3, #24
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	4926      	ldr	r1, [pc, #152]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d011      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	019a      	lsls	r2, r3, #6
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	071b      	lsls	r3, r3, #28
 800493a:	491a      	ldr	r1, [pc, #104]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004942:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a17      	ldr	r2, [pc, #92]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004948:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800494c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494e:	f7fd fe31 	bl	80025b4 <HAL_GetTick>
 8004952:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004954:	e008      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004956:	f7fd fe2d 	bl	80025b4 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b64      	cmp	r3, #100	; 0x64
 8004962:	d901      	bls.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e0a9      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004968:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b01      	cmp	r3, #1
 8004978:	f040 809f 	bne.w	8004aba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800497c:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8004982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004988:	f7fd fe14 	bl	80025b4 <HAL_GetTick>
 800498c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800498e:	e00b      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004990:	f7fd fe10 	bl	80025b4 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	; 0x64
 800499c:	d904      	bls.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e08c      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049a8:	4b46      	ldr	r3, [pc, #280]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049b4:	d0ec      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x6f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d02e      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x74c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d12a      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049de:	4b39      	ldr	r3, [pc, #228]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049ec:	4b35      	ldr	r3, [pc, #212]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	0f1b      	lsrs	r3, r3, #28
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	019a      	lsls	r2, r3, #6
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	061b      	lsls	r3, r3, #24
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	071b      	lsls	r3, r3, #28
 8004a12:	492c      	ldr	r1, [pc, #176]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a1a:	4b2a      	ldr	r3, [pc, #168]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	4925      	ldr	r1, [pc, #148]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d022      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a48:	d11d      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	0e1b      	lsrs	r3, r3, #24
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a58:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5e:	0f1b      	lsrs	r3, r3, #28
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	019a      	lsls	r2, r3, #6
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	431a      	orrs	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	061b      	lsls	r3, r3, #24
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	071b      	lsls	r3, r3, #28
 8004a7e:	4911      	ldr	r1, [pc, #68]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a92:	f7fd fd8f 	bl	80025b4 <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a98:	e008      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a9a:	f7fd fd8b 	bl	80025b4 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b64      	cmp	r3, #100	; 0x64
 8004aa6:	d901      	bls.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e007      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab8:	d1ef      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40023800 	.word	0x40023800

08004ac8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e081      	b.n	8004bde <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	7f5b      	ldrb	r3, [r3, #29]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d105      	bne.n	8004af0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fd fc34 	bl	8002358 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	22ca      	movs	r2, #202	; 0xca
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2253      	movs	r2, #83	; 0x53
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f898 	bl	8004c3c <RTC_EnterInitMode>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e05c      	b.n	8004bde <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6899      	ldr	r1, [r3, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b2e      	ldr	r3, [pc, #184]	; (8004be8 <HAL_RTC_Init+0x120>)
 8004b30:	400b      	ands	r3, r1
 8004b32:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6899      	ldr	r1, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68d2      	ldr	r2, [r2, #12]
 8004b5a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6919      	ldr	r1, [r3, #16]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	041a      	lsls	r2, r3, #16
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b7e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10e      	bne.n	8004bac <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f82c 	bl	8004bec <HAL_RTC_WaitForSynchro>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	22ff      	movs	r2, #255	; 0xff
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e018      	b.n	8004bde <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0208 	bic.w	r2, r2, #8
 8004bba:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	22ff      	movs	r2, #255	; 0xff
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
  }
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	ff8fffbf 	.word	0xff8fffbf

08004bec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c08:	f7fd fcd4 	bl	80025b4 <HAL_GetTick>
 8004c0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c0e:	e009      	b.n	8004c24 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c10:	f7fd fcd0 	bl	80025b4 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c1e:	d901      	bls.n	8004c24 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e007      	b.n	8004c34 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0ee      	beq.n	8004c10 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d119      	bne.n	8004c8a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c60:	f7fd fca8 	bl	80025b4 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c66:	e009      	b.n	8004c7c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c68:	f7fd fca4 	bl	80025b4 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c76:	d901      	bls.n	8004c7c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e007      	b.n	8004c8c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0ee      	beq.n	8004c68 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	7f1b      	ldrb	r3, [r3, #28]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e0ae      	b.n	8004e0a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	22ca      	movs	r2, #202	; 0xca
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2253      	movs	r2, #83	; 0x53
 8004cc6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd6:	609a      	str	r2, [r3, #8]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d022      	beq.n	8004d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x98>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8004ce6:	4b4c      	ldr	r3, [pc, #304]	; (8004e18 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a4c      	ldr	r2, [pc, #304]	; (8004e1c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8004cec:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf0:	0adb      	lsrs	r3, r3, #11
 8004cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cf6:	fb02 f303 	mul.w	r3, r2, r3
 8004cfa:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	1e5a      	subs	r2, r3, #1
 8004d00:	617a      	str	r2, [r7, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10b      	bne.n	8004d1e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	22ff      	movs	r2, #255	; 0xff
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2203      	movs	r2, #3
 8004d12:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e075      	b.n	8004e0a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e7      	bne.n	8004cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8004d3c:	4b36      	ldr	r3, [pc, #216]	; (8004e18 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a36      	ldr	r2, [pc, #216]	; (8004e1c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	0adb      	lsrs	r3, r3, #11
 8004d48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d4c:	fb02 f303 	mul.w	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	617a      	str	r2, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2203      	movs	r2, #3
 8004d68:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e04a      	b.n	8004e0a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0e7      	beq.n	8004d52 <HAL_RTCEx_SetWakeUpTimer_IT+0xbe>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0207 	bic.w	r2, r2, #7
 8004d98:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6899      	ldr	r1, [r3, #8]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004daa:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004db0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004db4:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8004db6:	4b1a      	ldr	r3, [pc, #104]	; (8004e20 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	4a19      	ldr	r2, [pc, #100]	; (8004e20 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8004dbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004dc0:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004dd2:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004de2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004df2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	22ff      	movs	r2, #255	; 0xff
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000000 	.word	0x20000000
 8004e1c:	10624dd3 	.word	0x10624dd3
 8004e20:	40013c00 	.word	0x40013c00

08004e24 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	7f1b      	ldrb	r3, [r3, #28]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e047      	b.n	8004ecc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2202      	movs	r2, #2
 8004e46:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	22ca      	movs	r2, #202	; 0xca
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2253      	movs	r2, #83	; 0x53
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e66:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e76:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e78:	f7fd fb9c 	bl	80025b4 <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004e7e:	e013      	b.n	8004ea8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e80:	f7fd fb98 	bl	80025b4 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e8e:	d90b      	bls.n	8004ea8 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	22ff      	movs	r2, #255	; 0xff
 8004e96:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e011      	b.n	8004ecc <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0e4      	beq.n	8004e80 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	22ff      	movs	r2, #255	; 0xff
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f816 	bl	8004f1c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004f00:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8004f04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004f08:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	775a      	strb	r2, [r3, #29]
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40013c00 	.word	0x40013c00

08004f1c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e049      	b.n	8004fd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fd fa1e 	bl	8002398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f000 f9f6 	bl	8005360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d001      	beq.n	8004ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e054      	b.n	80050a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d022      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005022:	d01d      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a22      	ldr	r2, [pc, #136]	; (80050b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d018      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a21      	ldr	r2, [pc, #132]	; (80050b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <HAL_TIM_Base_Start_IT+0xdc>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1e      	ldr	r2, [pc, #120]	; (80050c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x80>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d115      	bne.n	800508c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	4b19      	ldr	r3, [pc, #100]	; (80050cc <HAL_TIM_Base_Start_IT+0xec>)
 8005068:	4013      	ands	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b06      	cmp	r3, #6
 8005070:	d015      	beq.n	800509e <HAL_TIM_Base_Start_IT+0xbe>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005078:	d011      	beq.n	800509e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508a:	e008      	b.n	800509e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	e000      	b.n	80050a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40010000 	.word	0x40010000
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40000800 	.word	0x40000800
 80050bc:	40000c00 	.word	0x40000c00
 80050c0:	40010400 	.word	0x40010400
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40001800 	.word	0x40001800
 80050cc:	00010007 	.word	0x00010007

080050d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d122      	bne.n	800512c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d11b      	bne.n	800512c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0202 	mvn.w	r2, #2
 80050fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f905 	bl	8005322 <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8f7 	bl	800530e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f908 	bl	8005336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b04      	cmp	r3, #4
 8005138:	d122      	bne.n	8005180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d11b      	bne.n	8005180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0204 	mvn.w	r2, #4
 8005150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8db 	bl	8005322 <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f8cd 	bl	800530e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8de 	bl	8005336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b08      	cmp	r3, #8
 800518c:	d122      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b08      	cmp	r3, #8
 800519a:	d11b      	bne.n	80051d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0208 	mvn.w	r2, #8
 80051a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2204      	movs	r2, #4
 80051aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f8b1 	bl	8005322 <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f8a3 	bl	800530e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f8b4 	bl	8005336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d122      	bne.n	8005228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d11b      	bne.n	8005228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0210 	mvn.w	r2, #16
 80051f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2208      	movs	r2, #8
 80051fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f887 	bl	8005322 <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f879 	bl	800530e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f88a 	bl	8005336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b01      	cmp	r3, #1
 8005234:	d10e      	bne.n	8005254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d107      	bne.n	8005254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0201 	mvn.w	r2, #1
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fb fcba 	bl	8000bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525e:	2b80      	cmp	r3, #128	; 0x80
 8005260:	d10e      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d107      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f9a8 	bl	80055d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800528e:	d10e      	bne.n	80052ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529a:	2b80      	cmp	r3, #128	; 0x80
 800529c:	d107      	bne.n	80052ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f99b 	bl	80055e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b40      	cmp	r3, #64	; 0x40
 80052ba:	d10e      	bne.n	80052da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c6:	2b40      	cmp	r3, #64	; 0x40
 80052c8:	d107      	bne.n	80052da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f838 	bl	800534a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d10e      	bne.n	8005306 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	d107      	bne.n	8005306 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f06f 0220 	mvn.w	r2, #32
 80052fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f95b 	bl	80055bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a40      	ldr	r2, [pc, #256]	; (8005474 <TIM_Base_SetConfig+0x114>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d013      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537e:	d00f      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3d      	ldr	r2, [pc, #244]	; (8005478 <TIM_Base_SetConfig+0x118>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00b      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a3c      	ldr	r2, [pc, #240]	; (800547c <TIM_Base_SetConfig+0x11c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a3b      	ldr	r2, [pc, #236]	; (8005480 <TIM_Base_SetConfig+0x120>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3a      	ldr	r2, [pc, #232]	; (8005484 <TIM_Base_SetConfig+0x124>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d108      	bne.n	80053b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2f      	ldr	r2, [pc, #188]	; (8005474 <TIM_Base_SetConfig+0x114>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d02b      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c0:	d027      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2c      	ldr	r2, [pc, #176]	; (8005478 <TIM_Base_SetConfig+0x118>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d023      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2b      	ldr	r2, [pc, #172]	; (800547c <TIM_Base_SetConfig+0x11c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d01f      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2a      	ldr	r2, [pc, #168]	; (8005480 <TIM_Base_SetConfig+0x120>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d01b      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a29      	ldr	r2, [pc, #164]	; (8005484 <TIM_Base_SetConfig+0x124>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d017      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a28      	ldr	r2, [pc, #160]	; (8005488 <TIM_Base_SetConfig+0x128>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a27      	ldr	r2, [pc, #156]	; (800548c <TIM_Base_SetConfig+0x12c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00f      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a26      	ldr	r2, [pc, #152]	; (8005490 <TIM_Base_SetConfig+0x130>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00b      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a25      	ldr	r2, [pc, #148]	; (8005494 <TIM_Base_SetConfig+0x134>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d007      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a24      	ldr	r2, [pc, #144]	; (8005498 <TIM_Base_SetConfig+0x138>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a23      	ldr	r2, [pc, #140]	; (800549c <TIM_Base_SetConfig+0x13c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d108      	bne.n	8005424 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <TIM_Base_SetConfig+0x114>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_Base_SetConfig+0xf8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <TIM_Base_SetConfig+0x124>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d103      	bne.n	8005460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	615a      	str	r2, [r3, #20]
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40010000 	.word	0x40010000
 8005478:	40000400 	.word	0x40000400
 800547c:	40000800 	.word	0x40000800
 8005480:	40000c00 	.word	0x40000c00
 8005484:	40010400 	.word	0x40010400
 8005488:	40014000 	.word	0x40014000
 800548c:	40014400 	.word	0x40014400
 8005490:	40014800 	.word	0x40014800
 8005494:	40001800 	.word	0x40001800
 8005498:	40001c00 	.word	0x40001c00
 800549c:	40002000 	.word	0x40002000

080054a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e06d      	b.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a30      	ldr	r2, [pc, #192]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2f      	ldr	r2, [pc, #188]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d108      	bne.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a20      	ldr	r2, [pc, #128]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d022      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552a:	d01d      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1d      	ldr	r2, [pc, #116]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d018      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1a      	ldr	r2, [pc, #104]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00e      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a15      	ldr	r2, [pc, #84]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d009      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d10c      	bne.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800556e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	4313      	orrs	r3, r2
 8005578:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40010400 	.word	0x40010400
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40000c00 	.word	0x40000c00
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40001800 	.word	0x40001800

080055bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <__libc_init_array>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	4d0d      	ldr	r5, [pc, #52]	; (8005630 <__libc_init_array+0x38>)
 80055fc:	4c0d      	ldr	r4, [pc, #52]	; (8005634 <__libc_init_array+0x3c>)
 80055fe:	1b64      	subs	r4, r4, r5
 8005600:	10a4      	asrs	r4, r4, #2
 8005602:	2600      	movs	r6, #0
 8005604:	42a6      	cmp	r6, r4
 8005606:	d109      	bne.n	800561c <__libc_init_array+0x24>
 8005608:	4d0b      	ldr	r5, [pc, #44]	; (8005638 <__libc_init_array+0x40>)
 800560a:	4c0c      	ldr	r4, [pc, #48]	; (800563c <__libc_init_array+0x44>)
 800560c:	f000 f82e 	bl	800566c <_init>
 8005610:	1b64      	subs	r4, r4, r5
 8005612:	10a4      	asrs	r4, r4, #2
 8005614:	2600      	movs	r6, #0
 8005616:	42a6      	cmp	r6, r4
 8005618:	d105      	bne.n	8005626 <__libc_init_array+0x2e>
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005620:	4798      	blx	r3
 8005622:	3601      	adds	r6, #1
 8005624:	e7ee      	b.n	8005604 <__libc_init_array+0xc>
 8005626:	f855 3b04 	ldr.w	r3, [r5], #4
 800562a:	4798      	blx	r3
 800562c:	3601      	adds	r6, #1
 800562e:	e7f2      	b.n	8005616 <__libc_init_array+0x1e>
 8005630:	0800569c 	.word	0x0800569c
 8005634:	0800569c 	.word	0x0800569c
 8005638:	0800569c 	.word	0x0800569c
 800563c:	080056a0 	.word	0x080056a0

08005640 <memcpy>:
 8005640:	440a      	add	r2, r1
 8005642:	4291      	cmp	r1, r2
 8005644:	f100 33ff 	add.w	r3, r0, #4294967295
 8005648:	d100      	bne.n	800564c <memcpy+0xc>
 800564a:	4770      	bx	lr
 800564c:	b510      	push	{r4, lr}
 800564e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005656:	4291      	cmp	r1, r2
 8005658:	d1f9      	bne.n	800564e <memcpy+0xe>
 800565a:	bd10      	pop	{r4, pc}

0800565c <memset>:
 800565c:	4402      	add	r2, r0
 800565e:	4603      	mov	r3, r0
 8005660:	4293      	cmp	r3, r2
 8005662:	d100      	bne.n	8005666 <memset+0xa>
 8005664:	4770      	bx	lr
 8005666:	f803 1b01 	strb.w	r1, [r3], #1
 800566a:	e7f9      	b.n	8005660 <memset+0x4>

0800566c <_init>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr

08005678 <_fini>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr
