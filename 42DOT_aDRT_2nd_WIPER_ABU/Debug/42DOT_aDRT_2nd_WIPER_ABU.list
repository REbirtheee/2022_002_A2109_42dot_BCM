
42DOT_aDRT_2nd_WIPER_ABU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006658  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006830  08006830  00016830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006850  08006850  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006850  08006850  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006850  08006850  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  2000000c  08006864  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08006864  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aabf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c07  00000000  00000000  0003aafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0003d708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  0003ec10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c1e  00000000  00000000  0003ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e19  00000000  00000000  00066bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd808  00000000  00000000  0007ca07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017a20f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005994  00000000  00000000  0017a264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006818 	.word	0x08006818

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006818 	.word	0x08006818

08000218 <HAL_TIM_PeriodElapsedCallback>:

#include "ctrl_routine.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a4b      	ldr	r2, [pc, #300]	; (8000354 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000226:	4293      	cmp	r3, r2
 8000228:	f040 808f 	bne.w	800034a <HAL_TIM_PeriodElapsedCallback+0x132>
		if( timer6_cmd_num == 0 ) {
 800022c:	4b4a      	ldr	r3, [pc, #296]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d103      	bne.n	800023c <HAL_TIM_PeriodElapsedCallback+0x24>
			WiperSWRead(&Input_Status);
 8000234:	4849      	ldr	r0, [pc, #292]	; (800035c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000236:	f001 f853 	bl	80012e0 <WiperSWRead>
 800023a:	e046      	b.n	80002ca <HAL_TIM_PeriodElapsedCallback+0xb2>

		} else if( timer6_cmd_num == 1 ) {
 800023c:	4b46      	ldr	r3, [pc, #280]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d104      	bne.n	800024e <HAL_TIM_PeriodElapsedCallback+0x36>
			WiperControl(&Wiper_Status, &Input_Status);
 8000244:	4945      	ldr	r1, [pc, #276]	; (800035c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000246:	4846      	ldr	r0, [pc, #280]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000248:	f001 fa04 	bl	8001654 <WiperControl>
 800024c:	e03d      	b.n	80002ca <HAL_TIM_PeriodElapsedCallback+0xb2>

		} else if( timer6_cmd_num == 2 ) {
 800024e:	4b42      	ldr	r3, [pc, #264]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b02      	cmp	r3, #2
 8000254:	d104      	bne.n	8000260 <HAL_TIM_PeriodElapsedCallback+0x48>
			AutoWiperControl(&Wiper_Status, &Input_Status);
 8000256:	4941      	ldr	r1, [pc, #260]	; (800035c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000258:	4841      	ldr	r0, [pc, #260]	; (8000360 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800025a:	f001 fbcd 	bl	80019f8 <AutoWiperControl>
 800025e:	e034      	b.n	80002ca <HAL_TIM_PeriodElapsedCallback+0xb2>

		} else if( timer6_cmd_num == 3 ) {
 8000260:	4b3d      	ldr	r3, [pc, #244]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b03      	cmp	r3, #3
 8000266:	d030      	beq.n	80002ca <HAL_TIM_PeriodElapsedCallback+0xb2>

		} else if( timer6_cmd_num == 4 ) {
 8000268:	4b3b      	ldr	r3, [pc, #236]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b04      	cmp	r3, #4
 800026e:	d102      	bne.n	8000276 <HAL_TIM_PeriodElapsedCallback+0x5e>
			DimmerLampControl();
 8000270:	f001 fb5c 	bl	800192c <DimmerLampControl>
 8000274:	e029      	b.n	80002ca <HAL_TIM_PeriodElapsedCallback+0xb2>

		} else if( timer6_cmd_num == 5 ) {
 8000276:	4b38      	ldr	r3, [pc, #224]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b05      	cmp	r3, #5
 800027c:	d103      	bne.n	8000286 <HAL_TIM_PeriodElapsedCallback+0x6e>
			LampControl(&Lamp_Status);
 800027e:	4839      	ldr	r0, [pc, #228]	; (8000364 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000280:	f001 fcf8 	bl	8001c74 <LampControl>
 8000284:	e021      	b.n	80002ca <HAL_TIM_PeriodElapsedCallback+0xb2>

		} else if( timer6_cmd_num == 6 ) {
 8000286:	4b34      	ldr	r3, [pc, #208]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b06      	cmp	r3, #6
 800028c:	d01d      	beq.n	80002ca <HAL_TIM_PeriodElapsedCallback+0xb2>

		} else if( timer6_cmd_num == 7 ) {
 800028e:	4b32      	ldr	r3, [pc, #200]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b07      	cmp	r3, #7
 8000294:	d102      	bne.n	800029c <HAL_TIM_PeriodElapsedCallback+0x84>
			AnalogDataReceive();
 8000296:	f000 fd53 	bl	8000d40 <AnalogDataReceive>
 800029a:	e016      	b.n	80002ca <HAL_TIM_PeriodElapsedCallback+0xb2>

		} else if( timer6_cmd_num == 8 ) {
 800029c:	4b2e      	ldr	r3, [pc, #184]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b08      	cmp	r3, #8
 80002a2:	d10c      	bne.n	80002be <HAL_TIM_PeriodElapsedCallback+0xa6>
			WiperDataConv(wiper_tx_data, &wiper_tx_flag);
 80002a4:	4930      	ldr	r1, [pc, #192]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80002a6:	4831      	ldr	r0, [pc, #196]	; (800036c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80002a8:	f001 fd36 	bl	8001d18 <WiperDataConv>
			CanTxMessage(CAN_ID_WIPERINFO, FDCAN_DLC_BYTES_8, wiper_tx_data, &wiper_tx_flag);
 80002ac:	4b2e      	ldr	r3, [pc, #184]	; (8000368 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80002ae:	4a2f      	ldr	r2, [pc, #188]	; (800036c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80002b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80002b4:	f44f 7099 	mov.w	r0, #306	; 0x132
 80002b8:	f000 f982 	bl	80005c0 <CanTxMessage>
 80002bc:	e005      	b.n	80002ca <HAL_TIM_PeriodElapsedCallback+0xb2>

		} else if( timer6_cmd_num == 9 ) {
 80002be:	4b26      	ldr	r3, [pc, #152]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b09      	cmp	r3, #9
 80002c4:	d101      	bne.n	80002ca <HAL_TIM_PeriodElapsedCallback+0xb2>
			CANReStart();
 80002c6:	f000 f9a5 	bl	8000614 <CANReStart>
		}

		if( ++timer6_cmd_num == 10 ) {
 80002ca:	4b23      	ldr	r3, [pc, #140]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	b2da      	uxtb	r2, r3
 80002d2:	4b21      	ldr	r3, [pc, #132]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80002d4:	701a      	strb	r2, [r3, #0]
 80002d6:	4b20      	ldr	r3, [pc, #128]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b0a      	cmp	r3, #10
 80002dc:	d135      	bne.n	800034a <HAL_TIM_PeriodElapsedCallback+0x132>
			timer6_cmd_num = 0;
 80002de:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
			if( (ign1_status==0) && (door_open_status==0) && (charge_door_status==0) && (rke_lock_status==0)
 80002e4:	4b22      	ldr	r3, [pc, #136]	; (8000370 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d127      	bne.n	800033c <HAL_TIM_PeriodElapsedCallback+0x124>
 80002ec:	4b21      	ldr	r3, [pc, #132]	; (8000374 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d123      	bne.n	800033c <HAL_TIM_PeriodElapsedCallback+0x124>
 80002f4:	4b20      	ldr	r3, [pc, #128]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d11f      	bne.n	800033c <HAL_TIM_PeriodElapsedCallback+0x124>
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d11b      	bne.n	800033c <HAL_TIM_PeriodElapsedCallback+0x124>
					&& (rke_unlock_status==0) && (stop_lamp_on==0) ) {
 8000304:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d117      	bne.n	800033c <HAL_TIM_PeriodElapsedCallback+0x124>
 800030c:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d113      	bne.n	800033c <HAL_TIM_PeriodElapsedCallback+0x124>
				if( ++stop_mode_cnt > 1500 ) {
 8000314:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	3301      	adds	r3, #1
 800031a:	b29a      	uxth	r2, r3
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800031e:	801a      	strh	r2, [r3, #0]
 8000320:	4b19      	ldr	r3, [pc, #100]	; (8000388 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000328:	4293      	cmp	r3, r2
 800032a:	d90e      	bls.n	800034a <HAL_TIM_PeriodElapsedCallback+0x132>
//				if( ++stop_mode_cnt > 500 ) {
					stop_enable = 1;
 800032c:	4b17      	ldr	r3, [pc, #92]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800032e:	2201      	movs	r2, #1
 8000330:	701a      	strb	r2, [r3, #0]
					stop_mode_cnt = 1495;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000334:	f240 52d7 	movw	r2, #1495	; 0x5d7
 8000338:	801a      	strh	r2, [r3, #0]
				if( ++stop_mode_cnt > 1500 ) {
 800033a:	e006      	b.n	800034a <HAL_TIM_PeriodElapsedCallback+0x132>
//					stop_mode_cnt = 495;
				}
			} else {
				stop_mode_cnt = 0;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800033e:	2200      	movs	r2, #0
 8000340:	801a      	strh	r2, [r3, #0]
				stop_enable = 0;
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000348:	e7ff      	b.n	800034a <HAL_TIM_PeriodElapsedCallback+0x132>
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40001000 	.word	0x40001000
 8000358:	2000023f 	.word	0x2000023f
 800035c:	20000178 	.word	0x20000178
 8000360:	20000184 	.word	0x20000184
 8000364:	20000234 	.word	0x20000234
 8000368:	20000146 	.word	0x20000146
 800036c:	2000010c 	.word	0x2000010c
 8000370:	20000241 	.word	0x20000241
 8000374:	2000023d 	.word	0x2000023d
 8000378:	20000034 	.word	0x20000034
 800037c:	20000224 	.word	0x20000224
 8000380:	200002b6 	.word	0x200002b6
 8000384:	2000011d 	.word	0x2000011d
 8000388:	200002a8 	.word	0x200002a8
 800038c:	20000031 	.word	0x20000031

08000390 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
	if( hfdcan->Instance == FDCAN1 ) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <HAL_FDCAN_RxFifo0Callback+0x22>
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &can1_rx_header, can1_rx_data);
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <HAL_FDCAN_RxFifo0Callback+0x54>)
 80003a6:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80003a8:	2140      	movs	r1, #64	; 0x40
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f002 f9fe 	bl	80027ac <HAL_FDCAN_GetRxMessage>
	} else if ( hfdcan->Instance == FDCAN2 ) {
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &can2_rx_header, can2_rx_data);
		LocalToABU(&can2_rx_header, can2_rx_data);
		can_not_receive_cnt = 0;
	}
}
 80003b0:	e011      	b.n	80003d6 <HAL_FDCAN_RxFifo0Callback+0x46>
	} else if ( hfdcan->Instance == FDCAN2 ) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d10c      	bne.n	80003d6 <HAL_FDCAN_RxFifo0Callback+0x46>
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &can2_rx_header, can2_rx_data);
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80003be:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80003c0:	2140      	movs	r1, #64	; 0x40
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f002 f9f2 	bl	80027ac <HAL_FDCAN_GetRxMessage>
		LocalToABU(&can2_rx_header, can2_rx_data);
 80003c8:	4909      	ldr	r1, [pc, #36]	; (80003f0 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80003ca:	480a      	ldr	r0, [pc, #40]	; (80003f4 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80003cc:	f000 f816 	bl	80003fc <LocalToABU>
		can_not_receive_cnt = 0;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <HAL_FDCAN_RxFifo0Callback+0x68>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40006400 	.word	0x40006400
 80003e4:	20000228 	.word	0x20000228
 80003e8:	20000150 	.word	0x20000150
 80003ec:	40006800 	.word	0x40006800
 80003f0:	200002ac 	.word	0x200002ac
 80003f4:	200001fc 	.word	0x200001fc
 80003f8:	20000040 	.word	0x20000040

080003fc <LocalToABU>:

void LocalToABU(FDCAN_RxHeaderTypeDef *rxheader, uint8_t *rxdata) {
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
	switch(rxheader->Identifier) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f240 3233 	movw	r2, #819	; 0x333
 800040e:	4293      	cmp	r3, r2
 8000410:	d023      	beq.n	800045a <LocalToABU+0x5e>
 8000412:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8000416:	f080 80b7 	bcs.w	8000588 <LocalToABU+0x18c>
 800041a:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 800041e:	f000 8081 	beq.w	8000524 <LocalToABU+0x128>
 8000422:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8000426:	f200 80af 	bhi.w	8000588 <LocalToABU+0x18c>
 800042a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800042e:	d050      	beq.n	80004d2 <LocalToABU+0xd6>
 8000430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000434:	f200 80a8 	bhi.w	8000588 <LocalToABU+0x18c>
 8000438:	f240 1243 	movw	r2, #323	; 0x143
 800043c:	4293      	cmp	r3, r2
 800043e:	f000 80a2 	beq.w	8000586 <LocalToABU+0x18a>
 8000442:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000446:	f080 809f 	bcs.w	8000588 <LocalToABU+0x18c>
 800044a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800044e:	d00f      	beq.n	8000470 <LocalToABU+0x74>
 8000450:	f240 1221 	movw	r2, #289	; 0x121
 8000454:	4293      	cmp	r3, r2
 8000456:	d015      	beq.n	8000484 <LocalToABU+0x88>
		Akit_Command.wiper_high_on = (rxdata[3]&0x04) >> 2;
		Akit_Command.wiper_off = (rxdata[3]&0x08) >> 3;
		Akit_Command.washer_on = (rxdata[3]&0x10) >> 4;
		break;
	}
}
 8000458:	e096      	b.n	8000588 <LocalToABU+0x18c>
		pBrake_status = rxdata[0];
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	781a      	ldrb	r2, [r3, #0]
 800045e:	4b4d      	ldr	r3, [pc, #308]	; (8000594 <LocalToABU+0x198>)
 8000460:	701a      	strb	r2, [r3, #0]
		vehicle_vel = rxdata[1];
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	3301      	adds	r3, #1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	b21a      	sxth	r2, r3
 800046a:	4b4b      	ldr	r3, [pc, #300]	; (8000598 <LocalToABU+0x19c>)
 800046c:	801a      	strh	r2, [r3, #0]
		break;
 800046e:	e08b      	b.n	8000588 <LocalToABU+0x18c>
		stop_lamp_on = (rxdata[0]&0x10) >> 4;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	111b      	asrs	r3, r3, #4
 8000476:	b2db      	uxtb	r3, r3
 8000478:	f003 0301 	and.w	r3, r3, #1
 800047c:	b2da      	uxtb	r2, r3
 800047e:	4b47      	ldr	r3, [pc, #284]	; (800059c <LocalToABU+0x1a0>)
 8000480:	701a      	strb	r2, [r3, #0]
		break;
 8000482:	e081      	b.n	8000588 <LocalToABU+0x18c>
		taillamp_on = rxdata[0]&0x01;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b44      	ldr	r3, [pc, #272]	; (80005a0 <LocalToABU+0x1a4>)
 8000490:	701a      	strb	r2, [r3, #0]
		door_open_status = (rxdata[0]&0x40) >> 6;
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	119b      	asrs	r3, r3, #6
 8000498:	b2db      	uxtb	r3, r3
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	4b40      	ldr	r3, [pc, #256]	; (80005a4 <LocalToABU+0x1a8>)
 80004a2:	701a      	strb	r2, [r3, #0]
		charge_door_status = (rxdata[0]&0x80) >> 7;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	09db      	lsrs	r3, r3, #7
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	4b3e      	ldr	r3, [pc, #248]	; (80005a8 <LocalToABU+0x1ac>)
 80004ae:	701a      	strb	r2, [r3, #0]
		rke_unlock_status = rxdata[0]&0x01;
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	f003 0301 	and.w	r3, r3, #1
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b3c      	ldr	r3, [pc, #240]	; (80005ac <LocalToABU+0x1b0>)
 80004bc:	701a      	strb	r2, [r3, #0]
		rke_lock_status = (rxdata[0]&0x02) >> 1;
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	105b      	asrs	r3, r3, #1
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	4b38      	ldr	r3, [pc, #224]	; (80005b0 <LocalToABU+0x1b4>)
 80004ce:	701a      	strb	r2, [r3, #0]
		break;
 80004d0:	e05a      	b.n	8000588 <LocalToABU+0x18c>
		ign1_status = rxdata[0]&0x01;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b35      	ldr	r3, [pc, #212]	; (80005b4 <LocalToABU+0x1b8>)
 80004de:	701a      	strb	r2, [r3, #0]
		vehicle_vel = rxdata[1] | rxdata[2]<<8;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	3301      	adds	r3, #1
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b21a      	sxth	r2, r3
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	3302      	adds	r3, #2
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	021b      	lsls	r3, r3, #8
 80004f0:	b21b      	sxth	r3, r3
 80004f2:	4313      	orrs	r3, r2
 80004f4:	b21a      	sxth	r2, r3
 80004f6:	4b28      	ldr	r3, [pc, #160]	; (8000598 <LocalToABU+0x19c>)
 80004f8:	801a      	strh	r2, [r3, #0]
		pBrake_status = (rxdata[5]&0x38) >> 3;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	3305      	adds	r3, #5
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	10db      	asrs	r3, r3, #3
 8000502:	b2db      	uxtb	r3, r3
 8000504:	f003 0307 	and.w	r3, r3, #7
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b22      	ldr	r3, [pc, #136]	; (8000594 <LocalToABU+0x198>)
 800050c:	701a      	strb	r2, [r3, #0]
		auto_mode = (rxdata[6]&0x02) >> 1;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	3306      	adds	r3, #6
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	105b      	asrs	r3, r3, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <LocalToABU+0x1bc>)
 8000520:	701a      	strb	r2, [r3, #0]
		break;
 8000522:	e031      	b.n	8000588 <LocalToABU+0x18c>
		Akit_Command.wiper_int_on = rxdata[3]&0x01;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	3303      	adds	r3, #3
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <LocalToABU+0x1c0>)
 8000532:	701a      	strb	r2, [r3, #0]
		Akit_Command.wiper_low_on = (rxdata[3]&0x02) >> 1;
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	3303      	adds	r3, #3
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	105b      	asrs	r3, r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <LocalToABU+0x1c0>)
 8000546:	705a      	strb	r2, [r3, #1]
		Akit_Command.wiper_high_on = (rxdata[3]&0x04) >> 2;
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	3303      	adds	r3, #3
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	109b      	asrs	r3, r3, #2
 8000550:	b2db      	uxtb	r3, r3
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <LocalToABU+0x1c0>)
 800055a:	709a      	strb	r2, [r3, #2]
		Akit_Command.wiper_off = (rxdata[3]&0x08) >> 3;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	3303      	adds	r3, #3
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	10db      	asrs	r3, r3, #3
 8000564:	b2db      	uxtb	r3, r3
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <LocalToABU+0x1c0>)
 800056e:	70da      	strb	r2, [r3, #3]
		Akit_Command.washer_on = (rxdata[3]&0x10) >> 4;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	3303      	adds	r3, #3
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	111b      	asrs	r3, r3, #4
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <LocalToABU+0x1c0>)
 8000582:	711a      	strb	r2, [r3, #4]
		break;
 8000584:	e000      	b.n	8000588 <LocalToABU+0x18c>
		break;
 8000586:	bf00      	nop
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000240 	.word	0x20000240
 8000598:	200002b4 	.word	0x200002b4
 800059c:	2000011d 	.word	0x2000011d
 80005a0:	200001f2 	.word	0x200001f2
 80005a4:	2000023d 	.word	0x2000023d
 80005a8:	20000034 	.word	0x20000034
 80005ac:	200002b6 	.word	0x200002b6
 80005b0:	20000224 	.word	0x20000224
 80005b4:	20000241 	.word	0x20000241
 80005b8:	20000181 	.word	0x20000181
 80005bc:	20000238 	.word	0x20000238

080005c0 <CanTxMessage>:

void CanTxMessage(uint32_t id, uint32_t length, uint8_t *data, uint8_t *flag)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
 80005cc:	603b      	str	r3, [r7, #0]
	if( *flag ) {
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d013      	beq.n	80005fe <CanTxMessage+0x3e>
		can2_tx_header.Identifier = id;
 80005d6:	4a0d      	ldr	r2, [pc, #52]	; (800060c <CanTxMessage+0x4c>)
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	6013      	str	r3, [r2, #0]
		can2_tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <CanTxMessage+0x4c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
		can2_tx_header.IdType = FDCAN_STANDARD_ID;
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <CanTxMessage+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
		can2_tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <CanTxMessage+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
		can2_tx_header.DataLength = length;
 80005ee:	4a07      	ldr	r2, [pc, #28]	; (800060c <CanTxMessage+0x4c>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	60d3      	str	r3, [r2, #12]

		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &can2_tx_header, data);
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4905      	ldr	r1, [pc, #20]	; (800060c <CanTxMessage+0x4c>)
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <CanTxMessage+0x50>)
 80005fa:	f002 f892 	bl	8002722 <HAL_FDCAN_AddMessageToTxFifoQ>
	}

	(*flag) = 0;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000120 	.word	0x20000120
 8000610:	20000244 	.word	0x20000244

08000614 <CANReStart>:

void CANReStart()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	if( ++can_not_receive_cnt > 4 ) {
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <CANReStart+0x4c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <CANReStart+0x4c>)
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <CANReStart+0x4c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b04      	cmp	r3, #4
 800062a:	d916      	bls.n	800065a <CANReStart+0x46>
		if( can_not_receive_cnt == 5 ) {
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <CANReStart+0x4c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b05      	cmp	r3, #5
 8000632:	d103      	bne.n	800063c <CANReStart+0x28>
			HAL_FDCAN_Stop(&hfdcan2);
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <CANReStart+0x50>)
 8000636:	f002 f804 	bl	8002642 <HAL_FDCAN_Stop>
				Error_Handler();
			}
			can_not_receive_cnt = 0;
		}
	}
}
 800063a:	e00e      	b.n	800065a <CANReStart+0x46>
		} else if( can_not_receive_cnt > 5) {
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <CANReStart+0x4c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b05      	cmp	r3, #5
 8000642:	d90a      	bls.n	800065a <CANReStart+0x46>
			if( HAL_FDCAN_Start(&hfdcan2) != HAL_OK ) {
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <CANReStart+0x50>)
 8000646:	f001 ffd4 	bl	80025f2 <HAL_FDCAN_Start>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <CANReStart+0x40>
				Error_Handler();
 8000650:	f000 fc48 	bl	8000ee4 <Error_Handler>
			can_not_receive_cnt = 0;
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <CANReStart+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000040 	.word	0x20000040
 8000664:	20000244 	.word	0x20000244

08000668 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <__NVIC_SystemReset+0x24>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800067a:	4904      	ldr	r1, [pc, #16]	; (800068c <__NVIC_SystemReset+0x24>)
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_SystemReset+0x28>)
 800067e:	4313      	orrs	r3, r2
 8000680:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000682:	f3bf 8f4f 	dsb	sy
}
 8000686:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <__NVIC_SystemReset+0x20>
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	05fa0004 	.word	0x05fa0004

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f001 fbbf 	bl	8001e1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f828 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 fa86 	bl	8000bb0 <MX_GPIO_Init>
  MX_TIM6_Init();
 80006a4:	f000 fa4e 	bl	8000b44 <MX_TIM6_Init>
  MX_SPI2_Init();
 80006a8:	f000 f94a 	bl	8000940 <MX_SPI2_Init>
  MX_RTC_Init();
 80006ac:	f000 f912 	bl	80008d4 <MX_RTC_Init>
  MX_TIM3_Init();
 80006b0:	f000 f984 	bl	80009bc <MX_TIM3_Init>
  MX_TIM5_Init();
 80006b4:	f000 f9ea 	bl	8000a8c <MX_TIM5_Init>
  MX_FDCAN2_Init();
 80006b8:	f000 f88a 	bl	80007d0 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);		// SET /RST(ADC IC) 1 (Deactivate)
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <main+0x50>)
 80006c4:	f002 fe56 	bl	8003374 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <main+0x54>)
 80006ca:	f004 fe6f 	bl	80053ac <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if( stop_enable == 1 ) {
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <main+0x58>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d1fb      	bne.n	80006ce <main+0x3a>
		  stop_enable = 0;
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <main+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
		  StopModeStart();
 80006dc:	f000 fbd8 	bl	8000e90 <StopModeStart>
	  if( stop_enable == 1 ) {
 80006e0:	e7f5      	b.n	80006ce <main+0x3a>
 80006e2:	bf00      	nop
 80006e4:	48000400 	.word	0x48000400
 80006e8:	20000354 	.word	0x20000354
 80006ec:	20000031 	.word	0x20000031

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b0a8      	sub	sp, #160	; 0xa0
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006fa:	2238      	movs	r2, #56	; 0x38
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f006 f882 	bl	8006808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2254      	movs	r2, #84	; 0x54
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f006 f874 	bl	8006808 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000724:	f002 fe56 	bl	80033d4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000728:	230a      	movs	r3, #10
 800072a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000730:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000732:	2340      	movs	r3, #64	; 0x40
 8000734:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000736:	2301      	movs	r3, #1
 8000738:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000746:	2302      	movs	r3, #2
 8000748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 27;
 800074c:	231b      	movs	r3, #27
 800074e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075e:	2302      	movs	r3, #2
 8000760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000768:	4618      	mov	r0, r3
 800076a:	f002 ff3d 	bl	80035e8 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000774:	f000 fbb6 	bl	8000ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2303      	movs	r3, #3
 800077e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000788:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800078e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000792:	2103      	movs	r1, #3
 8000794:	4618      	mov	r0, r3
 8000796:	f003 fa3f 	bl	8003c18 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007a0:	f000 fba0 	bl	8000ee4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_FDCAN;
 80007a4:	f44f 2301 	mov.w	r3, #528384	; 0x81000
 80007a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80007aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fc11 	bl	8003fe0 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80007c4:	f000 fb8e 	bl	8000ee4 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	37a0      	adds	r7, #160	; 0xa0
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80007d6:	4b3c      	ldr	r3, [pc, #240]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 80007d8:	4a3c      	ldr	r2, [pc, #240]	; (80008cc <MX_FDCAN2_Init+0xfc>)
 80007da:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80007e2:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 80007fc:	2206      	movs	r2, #6
 80007fe:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000800:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 8000802:	2201      	movs	r2, #1
 8000804:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 15;
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 8000808:	220f      	movs	r2, #15
 800080a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800080c:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 800080e:	2202      	movs	r2, #2
 8000810:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 8000814:	2201      	movs	r2, #1
 8000816:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 800081a:	2201      	movs	r2, #1
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 8000820:	2201      	movs	r2, #1
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 8000826:	2201      	movs	r2, #1
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 800082c:	2201      	movs	r2, #1
 800082e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 8000832:	2200      	movs	r2, #0
 8000834:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000836:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 8000838:	2200      	movs	r2, #0
 800083a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800083c:	4822      	ldr	r0, [pc, #136]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 800083e:	f001 fcf3 	bl	8002228 <HAL_FDCAN_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_FDCAN2_Init+0x7c>
  {
    Error_Handler();
 8000848:	f000 fb4c 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  can2_filter.IdType = FDCAN_STANDARD_ID;
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_FDCAN2_Init+0x100>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
  can2_filter.FilterType = FDCAN_FILTER_MASK;
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_FDCAN2_Init+0x100>)
 8000854:	2202      	movs	r2, #2
 8000856:	609a      	str	r2, [r3, #8]
  can2_filter.FilterIndex = 0;
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_FDCAN2_Init+0x100>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  can2_filter.FilterID1 = 0x000;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_FDCAN2_Init+0x100>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  can2_filter.FilterID2 = 0x000;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_FDCAN2_Init+0x100>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  can2_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_FDCAN2_Init+0x100>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]

  if( HAL_FDCAN_ConfigFilter(&hfdcan2, &can2_filter) != HAL_OK ) {
 8000870:	4917      	ldr	r1, [pc, #92]	; (80008d0 <MX_FDCAN2_Init+0x100>)
 8000872:	4815      	ldr	r0, [pc, #84]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 8000874:	f001 fe32 	bl	80024dc <HAL_FDCAN_ConfigFilter>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_FDCAN2_Init+0xb2>
	  Error_Handler();
 800087e:	f000 fb31 	bl	8000ee4 <Error_Handler>
  }

  if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8000882:	2300      	movs	r3, #0
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2300      	movs	r3, #0
 8000888:	2202      	movs	r2, #2
 800088a:	2102      	movs	r1, #2
 800088c:	480e      	ldr	r0, [pc, #56]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 800088e:	f001 fe7f 	bl	8002590 <HAL_FDCAN_ConfigGlobalFilter>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_FDCAN2_Init+0xcc>
	  Error_Handler();
 8000898:	f000 fb24 	bl	8000ee4 <Error_Handler>
  }

  if( HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK ) {
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 80008a2:	f002 f85d 	bl	8002960 <HAL_FDCAN_ActivateNotification>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_FDCAN2_Init+0xe0>
	  Error_Handler();
 80008ac:	f000 fb1a 	bl	8000ee4 <Error_Handler>
  }

  if( HAL_FDCAN_Start(&hfdcan2) != HAL_OK ) {
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_FDCAN2_Init+0xf8>)
 80008b2:	f001 fe9e 	bl	80025f2 <HAL_FDCAN_Start>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_FDCAN2_Init+0xf0>
	  Error_Handler();
 80008bc:	f000 fb12 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000244 	.word	0x20000244
 80008cc:	40006800 	.word	0x40006800
 80008d0:	200003a0 	.word	0x200003a0

080008d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_RTC_Init+0x64>)
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <MX_RTC_Init+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_RTC_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_RTC_Init+0x64>)
 80008e6:	227f      	movs	r2, #127	; 0x7f
 80008e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_RTC_Init+0x64>)
 80008ec:	22ff      	movs	r2, #255	; 0xff
 80008ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_RTC_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_RTC_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_RTC_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <MX_RTC_Init+0x64>)
 8000904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000908:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_RTC_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <MX_RTC_Init+0x64>)
 8000912:	f003 fdb1 	bl	8004478 <HAL_RTC_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800091c:	f000 fae2 	bl	8000ee4 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_RTC_Init+0x64>)
 8000926:	f003 fead 	bl	8004684 <HAL_RTCEx_SetWakeUpTimer_IT>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000930:	f000 fad8 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000032c 	.word	0x2000032c
 800093c:	40002800 	.word	0x40002800

08000940 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_SPI2_Init+0x74>)
 8000946:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <MX_SPI2_Init+0x78>)
 8000948:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_SPI2_Init+0x74>)
 800094c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000950:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_SPI2_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI2_Init+0x74>)
 800095a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800095e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SPI2_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_SPI2_Init+0x74>)
 8000968:	2201      	movs	r2, #1
 800096a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI2_Init+0x74>)
 800096e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000972:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_SPI2_Init+0x74>)
 8000976:	2208      	movs	r2, #8
 8000978:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI2_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI2_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SPI2_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI2_Init+0x74>)
 800098e:	2207      	movs	r2, #7
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_SPI2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SPI2_Init+0x74>)
 80009a0:	f003 ff6e 	bl	8004880 <HAL_SPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009aa:	f000 fa9b 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200002c0 	.word	0x200002c0
 80009b8:	40003800 	.word	0x40003800

080009bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
 80009dc:	615a      	str	r2, [r3, #20]
 80009de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e0:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <MX_TIM3_Init+0xc8>)
 80009e2:	4a29      	ldr	r2, [pc, #164]	; (8000a88 <MX_TIM3_Init+0xcc>)
 80009e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 900-1;
 80009e6:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <MX_TIM3_Init+0xc8>)
 80009e8:	f240 3283 	movw	r2, #899	; 0x383
 80009ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <MX_TIM3_Init+0xc8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_TIM3_Init+0xc8>)
 80009f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_TIM3_Init+0xc8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <MX_TIM3_Init+0xc8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a08:	481e      	ldr	r0, [pc, #120]	; (8000a84 <MX_TIM3_Init+0xc8>)
 8000a0a:	f004 fd47 	bl	800549c <HAL_TIM_PWM_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000a14:	f000 fa66 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	4817      	ldr	r0, [pc, #92]	; (8000a84 <MX_TIM3_Init+0xc8>)
 8000a28:	f005 fdee 	bl	8006608 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000a32:	f000 fa57 	bl	8000ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a36:	2360      	movs	r3, #96	; 0x60
 8000a38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000a3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_TIM3_Init+0xc8>)
 8000a50:	f005 f8aa 	bl	8005ba8 <HAL_TIM_PWM_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000a5a:	f000 fa43 	bl	8000ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2204      	movs	r2, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <MX_TIM3_Init+0xc8>)
 8000a66:	f005 f89f 	bl	8005ba8 <HAL_TIM_PWM_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000a70:	f000 fa38 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <MX_TIM3_Init+0xc8>)
 8000a76:	f000 fb73 	bl	8001160 <HAL_TIM_MspPostInit>

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000c0 	.word	0x200000c0
 8000a88:	40000400 	.word	0x40000400

08000a8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
 8000aac:	615a      	str	r2, [r3, #20]
 8000aae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_TIM5_Init+0xb0>)
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <MX_TIM5_Init+0xb4>)
 8000ab4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 900-1;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_TIM5_Init+0xb0>)
 8000ab8:	f240 3283 	movw	r2, #899	; 0x383
 8000abc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_TIM5_Init+0xb0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_TIM5_Init+0xb0>)
 8000ac6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_TIM5_Init+0xb0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM5_Init+0xb0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ad8:	4818      	ldr	r0, [pc, #96]	; (8000b3c <MX_TIM5_Init+0xb0>)
 8000ada:	f004 fcdf 	bl	800549c <HAL_TIM_PWM_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8000ae4:	f000 f9fe 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_TIM5_Init+0xb0>)
 8000af8:	f005 fd86 	bl	8006608 <HAL_TIMEx_MasterConfigSynchronization>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8000b02:	f000 f9ef 	bl	8000ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b06:	2360      	movs	r3, #96	; 0x60
 8000b08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000b0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <MX_TIM5_Init+0xb0>)
 8000b20:	f005 f842 	bl	8005ba8 <HAL_TIM_PWM_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM5_Init+0xa2>
  {
    Error_Handler();
 8000b2a:	f000 f9db 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <MX_TIM5_Init+0xb0>)
 8000b30:	f000 fb16 	bl	8001160 <HAL_TIM_MspPostInit>

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000004c 	.word	0x2000004c
 8000b40:	40000c00 	.word	0x40000c00

08000b44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b56:	4a15      	ldr	r2, [pc, #84]	; (8000bac <MX_TIM6_Init+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1080-1;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b5c:	f240 4237 	movw	r2, #1079	; 0x437
 8000b60:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b6a:	22c7      	movs	r2, #199	; 0xc7
 8000b6c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b76:	f004 fbc1 	bl	80052fc <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b80:	f000 f9b0 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_TIM6_Init+0x64>)
 8000b92:	f005 fd39 	bl	8006608 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b9c:	f000 f9a2 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000354 	.word	0x20000354
 8000bac:	40001000 	.word	0x40001000

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	4b58      	ldr	r3, [pc, #352]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a57      	ldr	r2, [pc, #348]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b55      	ldr	r3, [pc, #340]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b52      	ldr	r3, [pc, #328]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4a51      	ldr	r2, [pc, #324]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4b4f      	ldr	r3, [pc, #316]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b4c      	ldr	r3, [pc, #304]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a4b      	ldr	r2, [pc, #300]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b49      	ldr	r3, [pc, #292]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b46      	ldr	r3, [pc, #280]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a45      	ldr	r2, [pc, #276]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	4b40      	ldr	r3, [pc, #256]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a3f      	ldr	r2, [pc, #252]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <MX_GPIO_Init+0x178>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000c44:	4839      	ldr	r0, [pc, #228]	; (8000d2c <MX_GPIO_Init+0x17c>)
 8000c46:	f002 fb95 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f64f 7104 	movw	r1, #65284	; 0xff04
 8000c50:	4837      	ldr	r0, [pc, #220]	; (8000d30 <MX_GPIO_Init+0x180>)
 8000c52:	f002 fb8f 	bl	8003374 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000c5c:	4835      	ldr	r0, [pc, #212]	; (8000d34 <MX_GPIO_Init+0x184>)
 8000c5e:	f002 fb89 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c62:	233c      	movs	r3, #60	; 0x3c
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4830      	ldr	r0, [pc, #192]	; (8000d38 <MX_GPIO_Init+0x188>)
 8000c76:	f002 f9e3 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4829      	ldr	r0, [pc, #164]	; (8000d34 <MX_GPIO_Init+0x184>)
 8000c8e:	f002 f9d7 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000c92:	23fe      	movs	r3, #254	; 0xfe
 8000c94:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f002 f9ca 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cac:	2310      	movs	r3, #16
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING_FALLING;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_GPIO_Init+0x18c>)
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481d      	ldr	r0, [pc, #116]	; (8000d34 <MX_GPIO_Init+0x184>)
 8000cc0:	f002 f9be 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4813      	ldr	r0, [pc, #76]	; (8000d2c <MX_GPIO_Init+0x17c>)
 8000cde:	f002 f9af 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ce2:	f64f 7304 	movw	r3, #65284	; 0xff04
 8000ce6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_GPIO_Init+0x180>)
 8000cfc:	f002 f9a0 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000d00:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_GPIO_Init+0x184>)
 8000d1a:	f002 f991 	bl	8003040 <HAL_GPIO_Init>

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48000400 	.word	0x48000400
 8000d30:	48000c00 	.word	0x48000c00
 8000d34:	48000800 	.word	0x48000800
 8000d38:	48001000 	.word	0x48001000
 8000d3c:	10320000 	.word	0x10320000

08000d40 <AnalogDataReceive>:

/* USER CODE BEGIN 4 */
void AnalogDataReceive(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af02      	add	r7, sp, #8
	float wiper_int_volt_f = 0;
 8000d46:	f04f 0300 	mov.w	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
	float dimmer_volt_f = 0;
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]

	spi2_tx_data[0] = ADC_DUMMY;
 8000d52:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <AnalogDataReceive+0x12c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
	spi2_tx_data[1] = ADC_CH1_ENABLE;
 8000d58:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <AnalogDataReceive+0x12c>)
 8000d5a:	22c0      	movs	r2, #192	; 0xc0
 8000d5c:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);		// SET /CS 0 (Active)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d64:	4842      	ldr	r0, [pc, #264]	; (8000e70 <AnalogDataReceive+0x130>)
 8000d66:	f002 fb05 	bl	8003374 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, spi2_tx_data, spi2_rx_data, 8, 100);
 8000d6a:	2364      	movs	r3, #100	; 0x64
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2308      	movs	r3, #8
 8000d70:	4a40      	ldr	r2, [pc, #256]	; (8000e74 <AnalogDataReceive+0x134>)
 8000d72:	493e      	ldr	r1, [pc, #248]	; (8000e6c <AnalogDataReceive+0x12c>)
 8000d74:	4840      	ldr	r0, [pc, #256]	; (8000e78 <AnalogDataReceive+0x138>)
 8000d76:	f003 fe2e 	bl	80049d6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);		// SET /CS 1 (Deactivate)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d80:	483b      	ldr	r0, [pc, #236]	; (8000e70 <AnalogDataReceive+0x130>)
 8000d82:	f002 faf7 	bl	8003374 <HAL_GPIO_WritePin>

	dimmer_volt_f = (spi2_rx_data[2]) | (spi2_rx_data[3]<<8);
 8000d86:	4b3b      	ldr	r3, [pc, #236]	; (8000e74 <AnalogDataReceive+0x134>)
 8000d88:	789b      	ldrb	r3, [r3, #2]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <AnalogDataReceive+0x134>)
 8000d8e:	78db      	ldrb	r3, [r3, #3]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	4313      	orrs	r3, r2
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9c:	edc7 7a00 	vstr	s15, [r7]
	dimmer_volt_f = (dimmer_volt_f-32765) / 13235 * 5 * 1000;
 8000da0:	edd7 7a00 	vldr	s15, [r7]
 8000da4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000e7c <AnalogDataReceive+0x13c>
 8000da8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000dac:	eddf 6a34 	vldr	s13, [pc, #208]	; 8000e80 <AnalogDataReceive+0x140>
 8000db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000db4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dbc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000e84 <AnalogDataReceive+0x144>
 8000dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc4:	edc7 7a00 	vstr	s15, [r7]


	spi2_tx_data[0] = ADC_DUMMY;
 8000dc8:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <AnalogDataReceive+0x12c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
	spi2_tx_data[1] = ADC_CH2_ENABLE;
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <AnalogDataReceive+0x12c>)
 8000dd0:	22c4      	movs	r2, #196	; 0xc4
 8000dd2:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);		// SET /CS 0 (Active)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dda:	4825      	ldr	r0, [pc, #148]	; (8000e70 <AnalogDataReceive+0x130>)
 8000ddc:	f002 faca 	bl	8003374 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, spi2_tx_data, spi2_rx_data, 8, 100);
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2308      	movs	r3, #8
 8000de6:	4a23      	ldr	r2, [pc, #140]	; (8000e74 <AnalogDataReceive+0x134>)
 8000de8:	4920      	ldr	r1, [pc, #128]	; (8000e6c <AnalogDataReceive+0x12c>)
 8000dea:	4823      	ldr	r0, [pc, #140]	; (8000e78 <AnalogDataReceive+0x138>)
 8000dec:	f003 fdf3 	bl	80049d6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);		// SET /CS 1 (Deactivate)
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	481e      	ldr	r0, [pc, #120]	; (8000e70 <AnalogDataReceive+0x130>)
 8000df8:	f002 fabc 	bl	8003374 <HAL_GPIO_WritePin>

	wiper_int_volt_f = (spi2_rx_data[2]) | (spi2_rx_data[3]<<8);
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <AnalogDataReceive+0x134>)
 8000dfe:	789b      	ldrb	r3, [r3, #2]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <AnalogDataReceive+0x134>)
 8000e04:	78db      	ldrb	r3, [r3, #3]
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	ee07 3a90 	vmov	s15, r3
 8000e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	wiper_int_volt_f = (wiper_int_volt_f-32765) / 13235 * 5 * 1000;
 8000e16:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e1a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000e7c <AnalogDataReceive+0x13c>
 8000e1e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000e22:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000e80 <AnalogDataReceive+0x140>
 8000e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e2a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e32:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000e84 <AnalogDataReceive+0x144>
 8000e36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e3a:	edc7 7a01 	vstr	s15, [r7, #4]


	wiper_int_volt = (uint16_t)wiper_int_volt_f;
 8000e3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e46:	ee17 3a90 	vmov	r3, s15
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <AnalogDataReceive+0x148>)
 8000e4e:	801a      	strh	r2, [r3, #0]
	dimmer_volt = (uint16_t)dimmer_volt_f;
 8000e50:	edd7 7a00 	vldr	s15, [r7]
 8000e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e58:	ee17 3a90 	vmov	r3, s15
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <AnalogDataReceive+0x14c>)
 8000e60:	801a      	strh	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000114 	.word	0x20000114
 8000e70:	48000400 	.word	0x48000400
 8000e74:	20000324 	.word	0x20000324
 8000e78:	200002c0 	.word	0x200002c0
 8000e7c:	46fffa00 	.word	0x46fffa00
 8000e80:	464ecc00 	.word	0x464ecc00
 8000e84:	447a0000 	.word	0x447a0000
 8000e88:	20000036 	.word	0x20000036
 8000e8c:	20000226 	.word	0x20000226

08000e90 <StopModeStart>:

void StopModeStart()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
	HAL_SuspendTick();
 8000e96:	f001 f831 	bl	8001efc <HAL_SuspendTick>

	__HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <StopModeStart+0x4c>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <StopModeStart+0x4c>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <StopModeStart+0x4c>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
	   32768 / 16 = 2048Hz
	   1Hz = 0.00048828125 sec
	   10sec = 20,480Hz (0x5000)
	 */
//	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xF000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);		// Wake-up time : 30s
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xCC, RTC_WAKEUPCLOCK_RTCCLK_DIV16);		// Wake-up time : 100ms
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	21cc      	movs	r1, #204	; 0xcc
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <StopModeStart+0x50>)
 8000eb8:	f003 fbe4 	bl	8004684 <HAL_RTCEx_SetWakeUpTimer_IT>

	HAL_PWR_EnterSTOPMode(0, PWR_SLEEPENTRY_WFE);
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f002 fa70 	bl	80033a4 <HAL_PWR_EnterSTOPMode>

	HAL_ResumeTick();
 8000ec4:	f001 f82a 	bl	8001f1c <HAL_ResumeTick>

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <StopModeStart+0x50>)
 8000eca:	f003 fc59 	bl	8004780 <HAL_RTCEx_DeactivateWakeUpTimer>

	SystemClock_Config();
 8000ece:	f7ff fc0f 	bl	80006f0 <SystemClock_Config>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	2000032c 	.word	0x2000032c

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  NVIC_SystemReset();
 8000eec:	f7ff fbbc 	bl	8000668 <__NVIC_SystemReset>

08000ef0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_MspInit+0x44>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_MspInit+0x44>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6613      	str	r3, [r2, #96]	; 0x60
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_MspInit+0x44>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_MspInit+0x44>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_MspInit+0x44>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_MspInit+0x44>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f26:	f002 fb4f 	bl	80035c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <HAL_FDCAN_MspInit+0x8c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d12f      	bne.n	8000fba <HAL_FDCAN_MspInit+0x82>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_FDCAN_MspInit+0x90>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	4a1a      	ldr	r2, [pc, #104]	; (8000fc8 <HAL_FDCAN_MspInit+0x90>)
 8000f60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f64:	6593      	str	r3, [r2, #88]	; 0x58
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_FDCAN_MspInit+0x90>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_FDCAN_MspInit+0x90>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_FDCAN_MspInit+0x90>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_FDCAN_MspInit+0x90>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f8a:	2360      	movs	r3, #96	; 0x60
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000f9a:	2309      	movs	r3, #9
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <HAL_FDCAN_MspInit+0x94>)
 8000fa6:	f002 f84b 	bl	8003040 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2056      	movs	r0, #86	; 0x56
 8000fb0:	f001 f89f 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8000fb4:	2056      	movs	r0, #86	; 0x56
 8000fb6:	f001 f8b6 	bl	8002126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40006800 	.word	0x40006800
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <HAL_RTC_MspInit+0x3c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d10f      	bne.n	8001002 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_RTC_MspInit+0x40>)
 8000fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fe8:	4a09      	ldr	r2, [pc, #36]	; (8001010 <HAL_RTC_MspInit+0x40>)
 8000fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	f001 f87b 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f001 f892 	bl	8002126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40002800 	.word	0x40002800
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <HAL_SPI_MspInit+0x8c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d130      	bne.n	8001098 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_SPI_MspInit+0x90>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <HAL_SPI_MspInit+0x90>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6593      	str	r3, [r2, #88]	; 0x58
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_SPI_MspInit+0x90>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_SPI_MspInit+0x90>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <HAL_SPI_MspInit+0x90>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_SPI_MspInit+0x90>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001066:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001078:	2305      	movs	r3, #5
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <HAL_SPI_MspInit+0x94>)
 8001084:	f001 ffdc 	bl	8003040 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2101      	movs	r1, #1
 800108c:	2024      	movs	r0, #36	; 0x24
 800108e:	f001 f830 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001092:	2024      	movs	r0, #36	; 0x24
 8001094:	f001 f847 	bl	8002126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	; 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40003800 	.word	0x40003800
 80010a4:	40021000 	.word	0x40021000
 80010a8:	48000400 	.word	0x48000400

080010ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a13      	ldr	r2, [pc, #76]	; (8001108 <HAL_TIM_PWM_MspInit+0x5c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d10c      	bne.n	80010d8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <HAL_TIM_PWM_MspInit+0x60>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <HAL_TIM_PWM_MspInit+0x60>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <HAL_TIM_PWM_MspInit+0x60>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80010d6:	e010      	b.n	80010fa <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM5)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <HAL_TIM_PWM_MspInit+0x64>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d10b      	bne.n	80010fa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_TIM_PWM_MspInit+0x60>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a09      	ldr	r2, [pc, #36]	; (800110c <HAL_TIM_PWM_MspInit+0x60>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <HAL_TIM_PWM_MspInit+0x60>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40000400 	.word	0x40000400
 800110c:	40021000 	.word	0x40021000
 8001110:	40000c00 	.word	0x40000c00

08001114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_TIM_Base_MspInit+0x44>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d113      	bne.n	800114e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <HAL_TIM_Base_MspInit+0x48>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	4a0c      	ldr	r2, [pc, #48]	; (800115c <HAL_TIM_Base_MspInit+0x48>)
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	6593      	str	r3, [r2, #88]	; 0x58
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_TIM_Base_MspInit+0x48>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2101      	movs	r1, #1
 8001142:	2036      	movs	r0, #54	; 0x36
 8001144:	f000 ffd5 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001148:	2036      	movs	r0, #54	; 0x36
 800114a:	f000 ffec 	bl	8002126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40001000 	.word	0x40001000
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_TIM_MspPostInit+0xa8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d11c      	bne.n	80011bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_TIM_MspPostInit+0xac>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a21      	ldr	r2, [pc, #132]	; (800120c <HAL_TIM_MspPostInit+0xac>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_TIM_MspPostInit+0xac>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800119a:	23c0      	movs	r3, #192	; 0xc0
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011aa:	2302      	movs	r3, #2
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4816      	ldr	r0, [pc, #88]	; (8001210 <HAL_TIM_MspPostInit+0xb0>)
 80011b6:	f001 ff43 	bl	8003040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80011ba:	e021      	b.n	8001200 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <HAL_TIM_MspPostInit+0xb4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d11c      	bne.n	8001200 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_TIM_MspPostInit+0xac>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_TIM_MspPostInit+0xac>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_TIM_MspPostInit+0xac>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80011f0:	2301      	movs	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_TIM_MspPostInit+0xb0>)
 80011fc:	f001 ff20 	bl	8003040 <HAL_GPIO_Init>
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40000400 	.word	0x40000400
 800120c:	40021000 	.word	0x40021000
 8001210:	48000800 	.word	0x48000800
 8001214:	40000c00 	.word	0x40000c00

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001264:	f000 fe2c 	bl	8001ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <RTC_WKUP_IRQHandler+0x10>)
 8001272:	f003 fadb 	bl	800482c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000032c 	.word	0x2000032c

08001280 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <SPI2_IRQHandler+0x10>)
 8001286:	f003 fdb9 	bl	8004dfc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200002c0 	.word	0x200002c0

08001294 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <TIM6_DAC_IRQHandler+0x10>)
 800129a:	f004 fb05 	bl	80058a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000354 	.word	0x20000354

080012a8 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <FDCAN2_IT0_IRQHandler+0x10>)
 80012ae:	f001 fc3d 	bl	8002b2c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000244 	.word	0x20000244

080012bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <SystemInit+0x20>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <SystemInit+0x20>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <WiperSWRead>:

#include "wiper_ctrl.h"


void WiperSWRead(struct InputStatusW_s *input_status)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	static uint8_t washer_prev = 0;

	if( auto_mode == 1 ) {
 80012e8:	4b73      	ldr	r3, [pc, #460]	; (80014b8 <WiperSWRead+0x1d8>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d110      	bne.n	8001312 <WiperSWRead+0x32>
		Input_Status_Raw.wiper_int = Akit_Command.wiper_int_on;
 80012f0:	4b72      	ldr	r3, [pc, #456]	; (80014bc <WiperSWRead+0x1dc>)
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	4b72      	ldr	r3, [pc, #456]	; (80014c0 <WiperSWRead+0x1e0>)
 80012f6:	701a      	strb	r2, [r3, #0]
		Input_Status_Raw.wiper_low = Akit_Command.wiper_low_on;
 80012f8:	4b70      	ldr	r3, [pc, #448]	; (80014bc <WiperSWRead+0x1dc>)
 80012fa:	785a      	ldrb	r2, [r3, #1]
 80012fc:	4b70      	ldr	r3, [pc, #448]	; (80014c0 <WiperSWRead+0x1e0>)
 80012fe:	705a      	strb	r2, [r3, #1]
		Input_Status_Raw.wiper_high = Akit_Command.wiper_high_on;
 8001300:	4b6e      	ldr	r3, [pc, #440]	; (80014bc <WiperSWRead+0x1dc>)
 8001302:	789a      	ldrb	r2, [r3, #2]
 8001304:	4b6e      	ldr	r3, [pc, #440]	; (80014c0 <WiperSWRead+0x1e0>)
 8001306:	709a      	strb	r2, [r3, #2]
		Input_Status_Raw.washer = Akit_Command.washer_on;
 8001308:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <WiperSWRead+0x1dc>)
 800130a:	791a      	ldrb	r2, [r3, #4]
 800130c:	4b6c      	ldr	r3, [pc, #432]	; (80014c0 <WiperSWRead+0x1e0>)
 800130e:	70da      	strb	r2, [r3, #3]
 8001310:	e023      	b.n	800135a <WiperSWRead+0x7a>
	} else if( auto_mode == 0 ) {
 8001312:	4b69      	ldr	r3, [pc, #420]	; (80014b8 <WiperSWRead+0x1d8>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d11f      	bne.n	800135a <WiperSWRead+0x7a>
		Input_Status_Raw.wiper_int = READ_PIN_DI_0;			// DI 0
 800131a:	2101      	movs	r1, #1
 800131c:	4869      	ldr	r0, [pc, #420]	; (80014c4 <WiperSWRead+0x1e4>)
 800131e:	f002 f811 	bl	8003344 <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <WiperSWRead+0x1e0>)
 8001328:	701a      	strb	r2, [r3, #0]
		Input_Status_Raw.wiper_low = READ_PIN_DI_1;			// DI 1
 800132a:	2102      	movs	r1, #2
 800132c:	4865      	ldr	r0, [pc, #404]	; (80014c4 <WiperSWRead+0x1e4>)
 800132e:	f002 f809 	bl	8003344 <HAL_GPIO_ReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <WiperSWRead+0x1e0>)
 8001338:	705a      	strb	r2, [r3, #1]
		Input_Status_Raw.wiper_high = READ_PIN_DI_2;		// DI 2
 800133a:	2104      	movs	r1, #4
 800133c:	4861      	ldr	r0, [pc, #388]	; (80014c4 <WiperSWRead+0x1e4>)
 800133e:	f002 f801 	bl	8003344 <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b5e      	ldr	r3, [pc, #376]	; (80014c0 <WiperSWRead+0x1e0>)
 8001348:	709a      	strb	r2, [r3, #2]
		Input_Status_Raw.washer = READ_PIN_DI_3;				// DI 3
 800134a:	2108      	movs	r1, #8
 800134c:	485d      	ldr	r0, [pc, #372]	; (80014c4 <WiperSWRead+0x1e4>)
 800134e:	f001 fff9 	bl	8003344 <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b5a      	ldr	r3, [pc, #360]	; (80014c0 <WiperSWRead+0x1e0>)
 8001358:	70da      	strb	r2, [r3, #3]
	}
	Input_Status_Raw.wiper_parking = READ_PIN_DI_7;			// DI 7
 800135a:	2110      	movs	r1, #16
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f001 fff0 	bl	8003344 <HAL_GPIO_ReadPin>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	4b55      	ldr	r3, [pc, #340]	; (80014c0 <WiperSWRead+0x1e0>)
 800136a:	715a      	strb	r2, [r3, #5]
	Input_Status_Raw.key_in = READ_PIN_DI_14;				// DI 14
 800136c:	2110      	movs	r1, #16
 800136e:	4856      	ldr	r0, [pc, #344]	; (80014c8 <WiperSWRead+0x1e8>)
 8001370:	f001 ffe8 	bl	8003344 <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b51      	ldr	r3, [pc, #324]	; (80014c0 <WiperSWRead+0x1e0>)
 800137a:	719a      	strb	r2, [r3, #6]
	Input_Status_Raw.accessory = READ_PIN_DI_15;			// DI 15
 800137c:	2120      	movs	r1, #32
 800137e:	4852      	ldr	r0, [pc, #328]	; (80014c8 <WiperSWRead+0x1e8>)
 8001380:	f001 ffe0 	bl	8003344 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <WiperSWRead+0x1e0>)
 800138a:	71da      	strb	r2, [r3, #7]

	WiperSWChatt(input_status);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f8af 	bl	80014f0 <WiperSWChatt>

	/*
	 * Washer Control
	 */
	if( (washer_prev==0) && (Input_Status.washer==1) ) {
 8001392:	4b4e      	ldr	r3, [pc, #312]	; (80014cc <WiperSWRead+0x1ec>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10e      	bne.n	80013b8 <WiperSWRead+0xd8>
 800139a:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <WiperSWRead+0x1f0>)
 800139c:	78db      	ldrb	r3, [r3, #3]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d10a      	bne.n	80013b8 <WiperSWRead+0xd8>
		washer_on_cnt = washer_off = 0;
 80013a2:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <WiperSWRead+0x1f4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <WiperSWRead+0x1f4>)
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <WiperSWRead+0x1f8>)
 80013ae:	701a      	strb	r2, [r3, #0]
		washer_on = 1;
 80013b0:	4b4a      	ldr	r3, [pc, #296]	; (80014dc <WiperSWRead+0x1fc>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	e011      	b.n	80013dc <WiperSWRead+0xfc>
	} else if( (washer_prev==1) && (Input_Status.washer==0) ) {
 80013b8:	4b44      	ldr	r3, [pc, #272]	; (80014cc <WiperSWRead+0x1ec>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d10d      	bne.n	80013dc <WiperSWRead+0xfc>
 80013c0:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <WiperSWRead+0x1f0>)
 80013c2:	78db      	ldrb	r3, [r3, #3]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <WiperSWRead+0xfc>
		washer_off_cnt = washer_on = 0;
 80013c8:	4b44      	ldr	r3, [pc, #272]	; (80014dc <WiperSWRead+0x1fc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	4b43      	ldr	r3, [pc, #268]	; (80014dc <WiperSWRead+0x1fc>)
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <WiperSWRead+0x200>)
 80013d4:	701a      	strb	r2, [r3, #0]
		washer_off = 1;
 80013d6:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <WiperSWRead+0x1f4>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
	}

	if( washer_on == 1 ) {
 80013dc:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <WiperSWRead+0x1fc>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d127      	bne.n	8001434 <WiperSWRead+0x154>
		if( Input_Status.washer == 1 ) {
 80013e4:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <WiperSWRead+0x1f0>)
 80013e6:	78db      	ldrb	r3, [r3, #3]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d11c      	bne.n	8001426 <WiperSWRead+0x146>
			if( ++washer_on_cnt > 15 ) {
 80013ec:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <WiperSWRead+0x1f8>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <WiperSWRead+0x1f8>)
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <WiperSWRead+0x1f8>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d93b      	bls.n	8001478 <WiperSWRead+0x198>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);		// Wiper Low Drive
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001406:	4837      	ldr	r0, [pc, #220]	; (80014e4 <WiperSWRead+0x204>)
 8001408:	f001 ffb4 	bl	8003374 <HAL_GPIO_WritePin>
				washer_on = 0;
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <WiperSWRead+0x1fc>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
				washer_on_cnt = 0;
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <WiperSWRead+0x1f8>)
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
				washer_off_cnt = 0;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <WiperSWRead+0x200>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
				Wiper_Status.wiper_low = 1;
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <WiperSWRead+0x208>)
 8001420:	2201      	movs	r2, #1
 8001422:	705a      	strb	r2, [r3, #1]
 8001424:	e028      	b.n	8001478 <WiperSWRead+0x198>
			}
		} else {
			washer_on = 0;
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <WiperSWRead+0x1fc>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
			washer_on_cnt = 0;
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <WiperSWRead+0x1f8>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	e021      	b.n	8001478 <WiperSWRead+0x198>
		}
	} else if( washer_off == 1 ) {
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <WiperSWRead+0x1f4>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d11d      	bne.n	8001478 <WiperSWRead+0x198>
		if( Input_Status.washer == 0 ) {
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <WiperSWRead+0x1f0>)
 800143e:	78db      	ldrb	r3, [r3, #3]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d119      	bne.n	8001478 <WiperSWRead+0x198>
			if( ++washer_off_cnt > 120 ) {
 8001444:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <WiperSWRead+0x200>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <WiperSWRead+0x200>)
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <WiperSWRead+0x200>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b78      	cmp	r3, #120	; 0x78
 8001456:	d90f      	bls.n	8001478 <WiperSWRead+0x198>
				if( Input_Status_Raw.wiper_parking == 1 ) {
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <WiperSWRead+0x1e0>)
 800145a:	795b      	ldrb	r3, [r3, #5]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d10b      	bne.n	8001478 <WiperSWRead+0x198>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);		// Wiper Low OFF
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001466:	481f      	ldr	r0, [pc, #124]	; (80014e4 <WiperSWRead+0x204>)
 8001468:	f001 ff84 	bl	8003374 <HAL_GPIO_WritePin>
					washer_off = 0;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <WiperSWRead+0x1f4>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
					Wiper_Status.wiper_low = 0;
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <WiperSWRead+0x208>)
 8001474:	2200      	movs	r2, #0
 8001476:	705a      	strb	r2, [r3, #1]
				}
			}
		}
	}

	Input_Status_Prev.wiper_int = Input_Status_Raw.wiper_int;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <WiperSWRead+0x1e0>)
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <WiperSWRead+0x20c>)
 800147e:	701a      	strb	r2, [r3, #0]
	Input_Status_Prev.wiper_low = Input_Status_Raw.wiper_low;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <WiperSWRead+0x1e0>)
 8001482:	785a      	ldrb	r2, [r3, #1]
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <WiperSWRead+0x20c>)
 8001486:	705a      	strb	r2, [r3, #1]
	Input_Status_Prev.wiper_high = Input_Status_Raw.wiper_high;
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <WiperSWRead+0x1e0>)
 800148a:	789a      	ldrb	r2, [r3, #2]
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <WiperSWRead+0x20c>)
 800148e:	709a      	strb	r2, [r3, #2]
	Input_Status_Prev.washer = Input_Status_Raw.washer;
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <WiperSWRead+0x1e0>)
 8001492:	78da      	ldrb	r2, [r3, #3]
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <WiperSWRead+0x20c>)
 8001496:	70da      	strb	r2, [r3, #3]
	Input_Status_Prev.key_in = Input_Status_Raw.key_in;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <WiperSWRead+0x1e0>)
 800149a:	799a      	ldrb	r2, [r3, #6]
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <WiperSWRead+0x20c>)
 800149e:	719a      	strb	r2, [r3, #6]
	Input_Status_Prev.accessory = Input_Status_Raw.accessory;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <WiperSWRead+0x1e0>)
 80014a2:	79da      	ldrb	r2, [r3, #7]
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <WiperSWRead+0x20c>)
 80014a6:	71da      	strb	r2, [r3, #7]
//	Input_Status_Prev.wiper_parking = Input_Status_Raw.wiper_parking;

	washer_prev = Input_Status.washer;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <WiperSWRead+0x1f0>)
 80014aa:	78da      	ldrb	r2, [r3, #3]
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <WiperSWRead+0x1ec>)
 80014ae:	701a      	strb	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000181 	.word	0x20000181
 80014bc:	20000238 	.word	0x20000238
 80014c0:	200002b8 	.word	0x200002b8
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48001000 	.word	0x48001000
 80014cc:	20000028 	.word	0x20000028
 80014d0:	20000178 	.word	0x20000178
 80014d4:	20000225 	.word	0x20000225
 80014d8:	20000033 	.word	0x20000033
 80014dc:	2000011c 	.word	0x2000011c
 80014e0:	20000098 	.word	0x20000098
 80014e4:	48000c00 	.word	0x48000c00
 80014e8:	20000184 	.word	0x20000184
 80014ec:	20000044 	.word	0x20000044

080014f0 <WiperSWChatt>:

void WiperSWChatt(struct InputStatusW_s *input_status)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	if( Input_Status_Prev.wiper_int == Input_Status_Raw.wiper_int ) {
 80014f8:	4b53      	ldr	r3, [pc, #332]	; (8001648 <WiperSWChatt+0x158>)
 80014fa:	781a      	ldrb	r2, [r3, #0]
 80014fc:	4b53      	ldr	r3, [pc, #332]	; (800164c <WiperSWChatt+0x15c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d111      	bne.n	8001528 <WiperSWChatt+0x38>
		if( ++Chattering.wiper_int_cnt >= 2 ) {
 8001504:	4b52      	ldr	r3, [pc, #328]	; (8001650 <WiperSWChatt+0x160>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b50      	ldr	r3, [pc, #320]	; (8001650 <WiperSWChatt+0x160>)
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <WiperSWChatt+0x160>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d90a      	bls.n	800152e <WiperSWChatt+0x3e>
			input_status->wiper_int = Input_Status_Raw.wiper_int;
 8001518:	4b4c      	ldr	r3, [pc, #304]	; (800164c <WiperSWChatt+0x15c>)
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	701a      	strb	r2, [r3, #0]
			Chattering.wiper_int_cnt = 3;
 8001520:	4b4b      	ldr	r3, [pc, #300]	; (8001650 <WiperSWChatt+0x160>)
 8001522:	2203      	movs	r2, #3
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	e002      	b.n	800152e <WiperSWChatt+0x3e>
		}
	} else {
		Chattering.wiper_int_cnt = 0;
 8001528:	4b49      	ldr	r3, [pc, #292]	; (8001650 <WiperSWChatt+0x160>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
	}

	if( Input_Status_Prev.wiper_low == Input_Status_Raw.wiper_low ) {
 800152e:	4b46      	ldr	r3, [pc, #280]	; (8001648 <WiperSWChatt+0x158>)
 8001530:	785a      	ldrb	r2, [r3, #1]
 8001532:	4b46      	ldr	r3, [pc, #280]	; (800164c <WiperSWChatt+0x15c>)
 8001534:	785b      	ldrb	r3, [r3, #1]
 8001536:	429a      	cmp	r2, r3
 8001538:	d111      	bne.n	800155e <WiperSWChatt+0x6e>
		if( ++Chattering.wiper_low_cnt >= 2 ) {
 800153a:	4b45      	ldr	r3, [pc, #276]	; (8001650 <WiperSWChatt+0x160>)
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	3301      	adds	r3, #1
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <WiperSWChatt+0x160>)
 8001544:	705a      	strb	r2, [r3, #1]
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <WiperSWChatt+0x160>)
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d90a      	bls.n	8001564 <WiperSWChatt+0x74>
			input_status->wiper_low = Input_Status_Raw.wiper_low;
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <WiperSWChatt+0x15c>)
 8001550:	785a      	ldrb	r2, [r3, #1]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	705a      	strb	r2, [r3, #1]
			Chattering.wiper_low_cnt = 3;
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <WiperSWChatt+0x160>)
 8001558:	2203      	movs	r2, #3
 800155a:	705a      	strb	r2, [r3, #1]
 800155c:	e002      	b.n	8001564 <WiperSWChatt+0x74>
		}
	} else {
		Chattering.wiper_low_cnt = 0;
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <WiperSWChatt+0x160>)
 8001560:	2200      	movs	r2, #0
 8001562:	705a      	strb	r2, [r3, #1]
	}

	if( Input_Status_Prev.wiper_high == Input_Status_Raw.wiper_high ) {
 8001564:	4b38      	ldr	r3, [pc, #224]	; (8001648 <WiperSWChatt+0x158>)
 8001566:	789a      	ldrb	r2, [r3, #2]
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <WiperSWChatt+0x15c>)
 800156a:	789b      	ldrb	r3, [r3, #2]
 800156c:	429a      	cmp	r2, r3
 800156e:	d111      	bne.n	8001594 <WiperSWChatt+0xa4>
		if( ++Chattering.wiper_high_cnt >= 2 ) {
 8001570:	4b37      	ldr	r3, [pc, #220]	; (8001650 <WiperSWChatt+0x160>)
 8001572:	789b      	ldrb	r3, [r3, #2]
 8001574:	3301      	adds	r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <WiperSWChatt+0x160>)
 800157a:	709a      	strb	r2, [r3, #2]
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <WiperSWChatt+0x160>)
 800157e:	789b      	ldrb	r3, [r3, #2]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d90a      	bls.n	800159a <WiperSWChatt+0xaa>
			input_status->wiper_high = Input_Status_Raw.wiper_high;
 8001584:	4b31      	ldr	r3, [pc, #196]	; (800164c <WiperSWChatt+0x15c>)
 8001586:	789a      	ldrb	r2, [r3, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	709a      	strb	r2, [r3, #2]
			Chattering.wiper_high_cnt = 3;
 800158c:	4b30      	ldr	r3, [pc, #192]	; (8001650 <WiperSWChatt+0x160>)
 800158e:	2203      	movs	r2, #3
 8001590:	709a      	strb	r2, [r3, #2]
 8001592:	e002      	b.n	800159a <WiperSWChatt+0xaa>
		}
	} else {
		Chattering.wiper_high_cnt = 0;
 8001594:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <WiperSWChatt+0x160>)
 8001596:	2200      	movs	r2, #0
 8001598:	709a      	strb	r2, [r3, #2]
	}

	if( Input_Status_Prev.washer == Input_Status_Raw.washer ) {
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <WiperSWChatt+0x158>)
 800159c:	78da      	ldrb	r2, [r3, #3]
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <WiperSWChatt+0x15c>)
 80015a0:	78db      	ldrb	r3, [r3, #3]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d111      	bne.n	80015ca <WiperSWChatt+0xda>
		if( ++Chattering.washer_cnt >= 2 ) {
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <WiperSWChatt+0x160>)
 80015a8:	78db      	ldrb	r3, [r3, #3]
 80015aa:	3301      	adds	r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b28      	ldr	r3, [pc, #160]	; (8001650 <WiperSWChatt+0x160>)
 80015b0:	70da      	strb	r2, [r3, #3]
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <WiperSWChatt+0x160>)
 80015b4:	78db      	ldrb	r3, [r3, #3]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d90a      	bls.n	80015d0 <WiperSWChatt+0xe0>
			input_status->washer = Input_Status_Raw.washer;
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <WiperSWChatt+0x15c>)
 80015bc:	78da      	ldrb	r2, [r3, #3]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	70da      	strb	r2, [r3, #3]
			Chattering.washer_cnt = 3;
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <WiperSWChatt+0x160>)
 80015c4:	2203      	movs	r2, #3
 80015c6:	70da      	strb	r2, [r3, #3]
 80015c8:	e002      	b.n	80015d0 <WiperSWChatt+0xe0>
		}
	} else {
		Chattering.washer_cnt = 0;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <WiperSWChatt+0x160>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	70da      	strb	r2, [r3, #3]
	}

	if( Input_Status_Prev.key_in == Input_Status_Raw.key_in ) {
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <WiperSWChatt+0x158>)
 80015d2:	799a      	ldrb	r2, [r3, #6]
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <WiperSWChatt+0x15c>)
 80015d6:	799b      	ldrb	r3, [r3, #6]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d111      	bne.n	8001600 <WiperSWChatt+0x110>
		if( ++Chattering.key_in_cnt >= 2 ) {
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <WiperSWChatt+0x160>)
 80015de:	799b      	ldrb	r3, [r3, #6]
 80015e0:	3301      	adds	r3, #1
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <WiperSWChatt+0x160>)
 80015e6:	719a      	strb	r2, [r3, #6]
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <WiperSWChatt+0x160>)
 80015ea:	799b      	ldrb	r3, [r3, #6]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d90a      	bls.n	8001606 <WiperSWChatt+0x116>
			input_status->key_in = Input_Status_Raw.key_in;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <WiperSWChatt+0x15c>)
 80015f2:	799a      	ldrb	r2, [r3, #6]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	719a      	strb	r2, [r3, #6]
			Chattering.key_in_cnt = 3;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <WiperSWChatt+0x160>)
 80015fa:	2203      	movs	r2, #3
 80015fc:	719a      	strb	r2, [r3, #6]
 80015fe:	e002      	b.n	8001606 <WiperSWChatt+0x116>
		}
	} else {
		Chattering.key_in_cnt = 0;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <WiperSWChatt+0x160>)
 8001602:	2200      	movs	r2, #0
 8001604:	719a      	strb	r2, [r3, #6]
	}

	if( Input_Status_Prev.accessory == Input_Status_Raw.accessory ) {
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <WiperSWChatt+0x158>)
 8001608:	79da      	ldrb	r2, [r3, #7]
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <WiperSWChatt+0x15c>)
 800160c:	79db      	ldrb	r3, [r3, #7]
 800160e:	429a      	cmp	r2, r3
 8001610:	d111      	bne.n	8001636 <WiperSWChatt+0x146>
		if( ++Chattering.accessory_cnt >= 2 ) {
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <WiperSWChatt+0x160>)
 8001614:	79db      	ldrb	r3, [r3, #7]
 8001616:	3301      	adds	r3, #1
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <WiperSWChatt+0x160>)
 800161c:	71da      	strb	r2, [r3, #7]
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <WiperSWChatt+0x160>)
 8001620:	79db      	ldrb	r3, [r3, #7]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d90a      	bls.n	800163c <WiperSWChatt+0x14c>
			input_status->accessory = Input_Status_Raw.accessory;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <WiperSWChatt+0x15c>)
 8001628:	79da      	ldrb	r2, [r3, #7]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	71da      	strb	r2, [r3, #7]
			Chattering.accessory_cnt = 3;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <WiperSWChatt+0x160>)
 8001630:	2203      	movs	r2, #3
 8001632:	71da      	strb	r2, [r3, #7]
		}
	} else {
		Chattering.wiper_parking_cnt = 0;
	}
#endif
}
 8001634:	e002      	b.n	800163c <WiperSWChatt+0x14c>
		Chattering.accessory_cnt = 0;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <WiperSWChatt+0x160>)
 8001638:	2200      	movs	r2, #0
 800163a:	71da      	strb	r2, [r3, #7]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	20000044 	.word	0x20000044
 800164c:	200002b8 	.word	0x200002b8
 8001650:	200001f4 	.word	0x200001f4

08001654 <WiperControl>:

void WiperControl(struct WiperStatus_W_s *wiper_status, struct InputStatusW_s *input_status)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	/*
	 * cluster ign function
	 */
	if( (ign1_status==1) || (charge_door_status==1) ) {
 800165e:	4baa      	ldr	r3, [pc, #680]	; (8001908 <WiperControl+0x2b4>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d003      	beq.n	800166e <WiperControl+0x1a>
 8001666:	4ba9      	ldr	r3, [pc, #676]	; (800190c <WiperControl+0x2b8>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d106      	bne.n	800167c <WiperControl+0x28>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);			// Cluster IGN Signal Drv
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001674:	48a6      	ldr	r0, [pc, #664]	; (8001910 <WiperControl+0x2bc>)
 8001676:	f001 fe7d 	bl	8003374 <HAL_GPIO_WritePin>
 800167a:	e00d      	b.n	8001698 <WiperControl+0x44>
	} else if( (ign1_status==0) && (charge_door_status==0) ){
 800167c:	4ba2      	ldr	r3, [pc, #648]	; (8001908 <WiperControl+0x2b4>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d109      	bne.n	8001698 <WiperControl+0x44>
 8001684:	4ba1      	ldr	r3, [pc, #644]	; (800190c <WiperControl+0x2b8>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <WiperControl+0x44>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);		// Cluster IGN Signal Drv
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	489f      	ldr	r0, [pc, #636]	; (8001910 <WiperControl+0x2bc>)
 8001694:	f001 fe6e 	bl	8003374 <HAL_GPIO_WritePin>
	}

	if( ign1_status == 1 ) {
 8001698:	4b9b      	ldr	r3, [pc, #620]	; (8001908 <WiperControl+0x2b4>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	f040 8104 	bne.w	80018aa <WiperControl+0x256>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);		// SENS 5+ Power Drv
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a8:	489a      	ldr	r0, [pc, #616]	; (8001914 <WiperControl+0x2c0>)
 80016aa:	f001 fe63 	bl	8003374 <HAL_GPIO_WritePin>

		if( input_status->washer==0 ) {
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	78db      	ldrb	r3, [r3, #3]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 80e5 	bne.w	8001882 <WiperControl+0x22e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);	// Washer OFF
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016be:	4894      	ldr	r0, [pc, #592]	; (8001910 <WiperControl+0x2bc>)
 80016c0:	f001 fe58 	bl	8003374 <HAL_GPIO_WritePin>
			wiper_status->washer = 0;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	70da      	strb	r2, [r3, #3]

			if( washer_off == 0 ) {
 80016ca:	4b93      	ldr	r3, [pc, #588]	; (8001918 <WiperControl+0x2c4>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 8116 	bne.w	8001900 <WiperControl+0x2ac>
				if( input_status->auto_wiper == 0 ) {
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	791b      	ldrb	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f040 8111 	bne.w	8001900 <WiperControl+0x2ac>
					if( Input_Status.wiper_int == 1 ) {
 80016de:	4b8f      	ldr	r3, [pc, #572]	; (800191c <WiperControl+0x2c8>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d17c      	bne.n	80017e0 <WiperControl+0x18c>
						/*
						 * Wiper INT Function
						 */
						wiper_status->wiper_int = 1;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
						if( wiper_int_volt < 1666 ) {
 80016ec:	4b8c      	ldr	r3, [pc, #560]	; (8001920 <WiperControl+0x2cc>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	f240 6281 	movw	r2, #1665	; 0x681
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d823      	bhi.n	8001740 <WiperControl+0xec>
							if( ++wiper_int_on_cnt < 40) {
 80016f8:	4b8a      	ldr	r3, [pc, #552]	; (8001924 <WiperControl+0x2d0>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b88      	ldr	r3, [pc, #544]	; (8001924 <WiperControl+0x2d0>)
 8001702:	801a      	strh	r2, [r3, #0]
 8001704:	4b87      	ldr	r3, [pc, #540]	; (8001924 <WiperControl+0x2d0>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	2b27      	cmp	r3, #39	; 0x27
 800170a:	d806      	bhi.n	800171a <WiperControl+0xc6>
								HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);			// Wiper Low Drive
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001712:	487f      	ldr	r0, [pc, #508]	; (8001910 <WiperControl+0x2bc>)
 8001714:	f001 fe2e 	bl	8003374 <HAL_GPIO_WritePin>
 8001718:	e06c      	b.n	80017f4 <WiperControl+0x1a0>
							} else if( wiper_int_on_cnt < 140 ) {
 800171a:	4b82      	ldr	r3, [pc, #520]	; (8001924 <WiperControl+0x2d0>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	2b8b      	cmp	r3, #139	; 0x8b
 8001720:	d80a      	bhi.n	8001738 <WiperControl+0xe4>
								if( Input_Status_Raw.wiper_parking == 1 ) {
 8001722:	4b81      	ldr	r3, [pc, #516]	; (8001928 <WiperControl+0x2d4>)
 8001724:	795b      	ldrb	r3, [r3, #5]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d164      	bne.n	80017f4 <WiperControl+0x1a0>
									HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);	// Wiper Low Drive
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001730:	4877      	ldr	r0, [pc, #476]	; (8001910 <WiperControl+0x2bc>)
 8001732:	f001 fe1f 	bl	8003374 <HAL_GPIO_WritePin>
 8001736:	e05d      	b.n	80017f4 <WiperControl+0x1a0>
								}
							} else {
								wiper_int_on_cnt = 0;
 8001738:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <WiperControl+0x2d0>)
 800173a:	2200      	movs	r2, #0
 800173c:	801a      	strh	r2, [r3, #0]
 800173e:	e059      	b.n	80017f4 <WiperControl+0x1a0>
							}

						} else if( wiper_int_volt < 3333 ) {
 8001740:	4b77      	ldr	r3, [pc, #476]	; (8001920 <WiperControl+0x2cc>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	f640 5204 	movw	r2, #3332	; 0xd04
 8001748:	4293      	cmp	r3, r2
 800174a:	d824      	bhi.n	8001796 <WiperControl+0x142>
							if( ++wiper_int_on_cnt < 40) {
 800174c:	4b75      	ldr	r3, [pc, #468]	; (8001924 <WiperControl+0x2d0>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b73      	ldr	r3, [pc, #460]	; (8001924 <WiperControl+0x2d0>)
 8001756:	801a      	strh	r2, [r3, #0]
 8001758:	4b72      	ldr	r3, [pc, #456]	; (8001924 <WiperControl+0x2d0>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	2b27      	cmp	r3, #39	; 0x27
 800175e:	d806      	bhi.n	800176e <WiperControl+0x11a>
								HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);			// Wiper Low Drive
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001766:	486a      	ldr	r0, [pc, #424]	; (8001910 <WiperControl+0x2bc>)
 8001768:	f001 fe04 	bl	8003374 <HAL_GPIO_WritePin>
 800176c:	e042      	b.n	80017f4 <WiperControl+0x1a0>
							} else if( wiper_int_on_cnt < 540 ) {
 800176e:	4b6d      	ldr	r3, [pc, #436]	; (8001924 <WiperControl+0x2d0>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8001776:	d20a      	bcs.n	800178e <WiperControl+0x13a>
								if( Input_Status_Raw.wiper_parking == 1 ) {
 8001778:	4b6b      	ldr	r3, [pc, #428]	; (8001928 <WiperControl+0x2d4>)
 800177a:	795b      	ldrb	r3, [r3, #5]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d139      	bne.n	80017f4 <WiperControl+0x1a0>
									HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);	// Wiper Low Drive
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001786:	4862      	ldr	r0, [pc, #392]	; (8001910 <WiperControl+0x2bc>)
 8001788:	f001 fdf4 	bl	8003374 <HAL_GPIO_WritePin>
 800178c:	e032      	b.n	80017f4 <WiperControl+0x1a0>
								}
							} else {
								wiper_int_on_cnt = 0;
 800178e:	4b65      	ldr	r3, [pc, #404]	; (8001924 <WiperControl+0x2d0>)
 8001790:	2200      	movs	r2, #0
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	e02e      	b.n	80017f4 <WiperControl+0x1a0>
							}

						} else {
							if( ++wiper_int_on_cnt < 40) {
 8001796:	4b63      	ldr	r3, [pc, #396]	; (8001924 <WiperControl+0x2d0>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b61      	ldr	r3, [pc, #388]	; (8001924 <WiperControl+0x2d0>)
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	4b60      	ldr	r3, [pc, #384]	; (8001924 <WiperControl+0x2d0>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	2b27      	cmp	r3, #39	; 0x27
 80017a8:	d806      	bhi.n	80017b8 <WiperControl+0x164>
								HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);			// Wiper Low Drive
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b0:	4857      	ldr	r0, [pc, #348]	; (8001910 <WiperControl+0x2bc>)
 80017b2:	f001 fddf 	bl	8003374 <HAL_GPIO_WritePin>
 80017b6:	e01d      	b.n	80017f4 <WiperControl+0x1a0>
							} else if( wiper_int_on_cnt < 1040 ) {
 80017b8:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <WiperControl+0x2d0>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80017c0:	d20a      	bcs.n	80017d8 <WiperControl+0x184>
								if( Input_Status_Raw.wiper_parking == 1 ) {
 80017c2:	4b59      	ldr	r3, [pc, #356]	; (8001928 <WiperControl+0x2d4>)
 80017c4:	795b      	ldrb	r3, [r3, #5]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d114      	bne.n	80017f4 <WiperControl+0x1a0>
									HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);	// Wiper Low Drive
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d0:	484f      	ldr	r0, [pc, #316]	; (8001910 <WiperControl+0x2bc>)
 80017d2:	f001 fdcf 	bl	8003374 <HAL_GPIO_WritePin>
 80017d6:	e00d      	b.n	80017f4 <WiperControl+0x1a0>
								}
							} else {
								wiper_int_on_cnt = 0;
 80017d8:	4b52      	ldr	r3, [pc, #328]	; (8001924 <WiperControl+0x2d0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	e009      	b.n	80017f4 <WiperControl+0x1a0>
							}
						}

					} else if( input_status->wiper_int == 0 ) {
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d105      	bne.n	80017f4 <WiperControl+0x1a0>
						wiper_status->wiper_int = 0;		// Wiper INT OFF
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
						wiper_int_on_cnt = 0;
 80017ee:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <WiperControl+0x2d0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	801a      	strh	r2, [r3, #0]
					}

					/*
					 * Wiper Low Control
					 */
					if( input_status->wiper_low == 1 ) {
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d109      	bne.n	8001810 <WiperControl+0x1bc>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);				// Wiper Low Drive
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001802:	4843      	ldr	r0, [pc, #268]	; (8001910 <WiperControl+0x2bc>)
 8001804:	f001 fdb6 	bl	8003374 <HAL_GPIO_WritePin>
						wiper_status->wiper_low = 1;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	705a      	strb	r2, [r3, #1]
 800180e:	e018      	b.n	8001842 <WiperControl+0x1ee>
					} else if( input_status->wiper_low == 0 ) {
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	785b      	ldrb	r3, [r3, #1]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d114      	bne.n	8001842 <WiperControl+0x1ee>
						wiper_status->wiper_low = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	705a      	strb	r2, [r3, #1]
						if( (input_status->wiper_int==0) && (input_status->wiper_high==0) ) {
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10d      	bne.n	8001842 <WiperControl+0x1ee>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	789b      	ldrb	r3, [r3, #2]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <WiperControl+0x1ee>
							if( Input_Status_Raw.wiper_parking == 1 ) {
 800182e:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <WiperControl+0x2d4>)
 8001830:	795b      	ldrb	r3, [r3, #5]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d105      	bne.n	8001842 <WiperControl+0x1ee>
								HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);	// Wiper Low OFF
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800183c:	4834      	ldr	r0, [pc, #208]	; (8001910 <WiperControl+0x2bc>)
 800183e:	f001 fd99 	bl	8003374 <HAL_GPIO_WritePin>
					}

					/*
					 * Wiper High Control
					 */
					if( input_status->wiper_high == 1 ) {
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	789b      	ldrb	r3, [r3, #2]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d109      	bne.n	800185e <WiperControl+0x20a>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9 | GPIO_PIN_10, SET);		// Wiper Low, High Drive
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001850:	482f      	ldr	r0, [pc, #188]	; (8001910 <WiperControl+0x2bc>)
 8001852:	f001 fd8f 	bl	8003374 <HAL_GPIO_WritePin>
						wiper_status->wiper_high = 1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9 | GPIO_PIN_10, RESET);		// Wiper Low, High OFF
		}
		wiper_status->wiper_int = wiper_status->wiper_low = wiper_status->wiper_high = 0;
		wiper_int_on_cnt = 0;
	}
}
 800185c:	e050      	b.n	8001900 <WiperControl+0x2ac>
					} else if( input_status->wiper_high == 0 ) {
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	789b      	ldrb	r3, [r3, #2]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d14c      	bne.n	8001900 <WiperControl+0x2ac>
						wiper_status->wiper_high = 0;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	709a      	strb	r2, [r3, #2]
						if( Input_Status_Raw.wiper_parking == 1 ) {
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <WiperControl+0x2d4>)
 800186e:	795b      	ldrb	r3, [r3, #5]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d145      	bne.n	8001900 <WiperControl+0x2ac>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);				// Wiper High OFF
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800187a:	4825      	ldr	r0, [pc, #148]	; (8001910 <WiperControl+0x2bc>)
 800187c:	f001 fd7a 	bl	8003374 <HAL_GPIO_WritePin>
}
 8001880:	e03e      	b.n	8001900 <WiperControl+0x2ac>
		} else if( input_status->washer == 1 ) {
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	78db      	ldrb	r3, [r3, #3]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d13a      	bne.n	8001900 <WiperControl+0x2ac>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);	// Wiper High OFF
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001890:	481f      	ldr	r0, [pc, #124]	; (8001910 <WiperControl+0x2bc>)
 8001892:	f001 fd6f 	bl	8003374 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);		// Washer ON
 8001896:	2201      	movs	r2, #1
 8001898:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800189c:	481c      	ldr	r0, [pc, #112]	; (8001910 <WiperControl+0x2bc>)
 800189e:	f001 fd69 	bl	8003374 <HAL_GPIO_WritePin>
			wiper_status->washer = 1;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	70da      	strb	r2, [r3, #3]
}
 80018a8:	e02a      	b.n	8001900 <WiperControl+0x2ac>
	} else if( ign1_status == 0 ) {
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <WiperControl+0x2b4>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d126      	bne.n	8001900 <WiperControl+0x2ac>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);						// Washer  OFF
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b8:	4815      	ldr	r0, [pc, #84]	; (8001910 <WiperControl+0x2bc>)
 80018ba:	f001 fd5b 	bl	8003374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);						// 5+ Power OFF
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c4:	4813      	ldr	r0, [pc, #76]	; (8001914 <WiperControl+0x2c0>)
 80018c6:	f001 fd55 	bl	8003374 <HAL_GPIO_WritePin>
		wiper_status->washer = 0;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	70da      	strb	r2, [r3, #3]
		if( Input_Status_Raw.wiper_parking == 1 ) {
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <WiperControl+0x2d4>)
 80018d2:	795b      	ldrb	r3, [r3, #5]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <WiperControl+0x290>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9 | GPIO_PIN_10, RESET);		// Wiper Low, High OFF
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <WiperControl+0x2bc>)
 80018e0:	f001 fd48 	bl	8003374 <HAL_GPIO_WritePin>
		wiper_status->wiper_int = wiper_status->wiper_low = wiper_status->wiper_high = 0;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	709a      	strb	r2, [r3, #2]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	789a      	ldrb	r2, [r3, #2]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	705a      	strb	r2, [r3, #1]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	785a      	ldrb	r2, [r3, #1]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	701a      	strb	r2, [r3, #0]
		wiper_int_on_cnt = 0;
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <WiperControl+0x2d0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	801a      	strh	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000241 	.word	0x20000241
 800190c:	20000034 	.word	0x20000034
 8001910:	48000c00 	.word	0x48000c00
 8001914:	48000800 	.word	0x48000800
 8001918:	20000225 	.word	0x20000225
 800191c:	20000178 	.word	0x20000178
 8001920:	20000036 	.word	0x20000036
 8001924:	200001f0 	.word	0x200001f0
 8001928:	200002b8 	.word	0x200002b8

0800192c <DimmerLampControl>:

void DimmerLampControl()
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);		// Cluster Brightness PWM Off
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);	// Dimmer Control High OFF
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);	// RSI Brightness Control OFF
	}
#else
	if( ign1_status == 1 ) {
 8001930:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <DimmerLampControl+0xb8>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d106      	bne.n	8001946 <DimmerLampControl+0x1a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, SET);		// Cluster ILL(+) ON
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193e:	482a      	ldr	r0, [pc, #168]	; (80019e8 <DimmerLampControl+0xbc>)
 8001940:	f001 fd18 	bl	8003374 <HAL_GPIO_WritePin>
 8001944:	e009      	b.n	800195a <DimmerLampControl+0x2e>
	} else if( ign1_status == 0 ) {
 8001946:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <DimmerLampControl+0xb8>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <DimmerLampControl+0x2e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET);	// Cluster ILL(+) OFF
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001954:	4824      	ldr	r0, [pc, #144]	; (80019e8 <DimmerLampControl+0xbc>)
 8001956:	f001 fd0d 	bl	8003374 <HAL_GPIO_WritePin>
	}

	if( taillamp_on == 1 ) {
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <DimmerLampControl+0xc0>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d11c      	bne.n	800199c <DimmerLampControl+0x70>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);		// Dimmer Control High Drv
 8001962:	2201      	movs	r2, #1
 8001964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001968:	4821      	ldr	r0, [pc, #132]	; (80019f0 <DimmerLampControl+0xc4>)
 800196a:	f001 fd03 	bl	8003374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);		// RSI Brightness Control Drv
 800196e:	2201      	movs	r2, #1
 8001970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001974:	481c      	ldr	r0, [pc, #112]	; (80019e8 <DimmerLampControl+0xbc>)
 8001976:	f001 fcfd 	bl	8003374 <HAL_GPIO_WritePin>

		htim3.Instance->CCR1 = 100;						// Dimmer Output PWM Duty
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <DimmerLampControl+0xc8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2264      	movs	r2, #100	; 0x64
 8001980:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = 100;						// Cluster Brightness Signal PWM Duty
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <DimmerLampControl+0xc8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2264      	movs	r2, #100	; 0x64
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		// Dimmer Output Drv
 800198a:	2100      	movs	r1, #0
 800198c:	4819      	ldr	r0, [pc, #100]	; (80019f4 <DimmerLampControl+0xc8>)
 800198e:	f003 fddd 	bl	800554c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);		// Cluster Brightness Signal Drv
 8001992:	2104      	movs	r1, #4
 8001994:	4817      	ldr	r0, [pc, #92]	; (80019f4 <DimmerLampControl+0xc8>)
 8001996:	f003 fdd9 	bl	800554c <HAL_TIM_PWM_Start>
		htim3.Instance->CCR2 = 900;						// Cluster Brightness Signal PWM Duty
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		// Dimmer Output Drv
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);		// Cluster Brightness Signal Drv
	}
#endif
}
 800199a:	e021      	b.n	80019e0 <DimmerLampControl+0xb4>
	} else if( taillamp_on == 0 ) {
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <DimmerLampControl+0xc0>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11d      	bne.n	80019e0 <DimmerLampControl+0xb4>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);	// Dimmer Control High OFF
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019aa:	4811      	ldr	r0, [pc, #68]	; (80019f0 <DimmerLampControl+0xc4>)
 80019ac:	f001 fce2 	bl	8003374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);	// RSI Brightness Control OFF
 80019b0:	2200      	movs	r2, #0
 80019b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b6:	480c      	ldr	r0, [pc, #48]	; (80019e8 <DimmerLampControl+0xbc>)
 80019b8:	f001 fcdc 	bl	8003374 <HAL_GPIO_WritePin>
		htim3.Instance->CCR1 = 900;						// Dimmer Output PWM Duty
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <DimmerLampControl+0xc8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = 900;						// Cluster Brightness Signal PWM Duty
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <DimmerLampControl+0xc8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f44f 7261 	mov.w	r2, #900	; 0x384
 80019ce:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		// Dimmer Output Drv
 80019d0:	2100      	movs	r1, #0
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <DimmerLampControl+0xc8>)
 80019d4:	f003 fdba 	bl	800554c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);		// Cluster Brightness Signal Drv
 80019d8:	2104      	movs	r1, #4
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <DimmerLampControl+0xc8>)
 80019dc:	f003 fdb6 	bl	800554c <HAL_TIM_PWM_Start>
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000241 	.word	0x20000241
 80019e8:	48000800 	.word	0x48000800
 80019ec:	200001f2 	.word	0x200001f2
 80019f0:	48000c00 	.word	0x48000c00
 80019f4:	200000c0 	.word	0x200000c0

080019f8 <AutoWiperControl>:

void AutoWiperControl(struct WiperStatus_W_s *wiper_status, struct InputStatusW_s *input_status)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	static uint8_t rain_sens_wiper_low_on = 0;
	static uint8_t rain_sens_wiper_low_on_cnt = 0;
	static uint8_t rain_sens_wiper_high_on = 0;
	static uint8_t rain_sens_wiper_high_on_cnt = 0;

	if( ign1_status == 1 ) {
 8001a02:	4b8f      	ldr	r3, [pc, #572]	; (8001c40 <AutoWiperControl+0x248>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	f040 8105 	bne.w	8001c16 <AutoWiperControl+0x21e>
		if( (input_status->wiper_int==0) && (input_status->wiper_low==0) && (input_status->wiper_high==0) && (Akit_Command.wiper_off==0) ) {
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10f      	bne.n	8001a34 <AutoWiperControl+0x3c>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	785b      	ldrb	r3, [r3, #1]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <AutoWiperControl+0x3c>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	789b      	ldrb	r3, [r3, #2]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <AutoWiperControl+0x3c>
 8001a24:	4b87      	ldr	r3, [pc, #540]	; (8001c44 <AutoWiperControl+0x24c>)
 8001a26:	78db      	ldrb	r3, [r3, #3]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <AutoWiperControl+0x3c>
			input_status->auto_wiper = 1;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	711a      	strb	r2, [r3, #4]
 8001a32:	e005      	b.n	8001a40 <AutoWiperControl+0x48>
		} else {
			input_status->auto_wiper = 0;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	711a      	strb	r2, [r3, #4]
			auto_wiper_delay = 0;
 8001a3a:	4b83      	ldr	r3, [pc, #524]	; (8001c48 <AutoWiperControl+0x250>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		}

		if( input_status->auto_wiper == 1 ) {
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	791b      	ldrb	r3, [r3, #4]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	f040 80db 	bne.w	8001c00 <AutoWiperControl+0x208>
			if( (washer_off==0) && (washer_on==0) && (input_status->washer==0) ) {
 8001a4a:	4b80      	ldr	r3, [pc, #512]	; (8001c4c <AutoWiperControl+0x254>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 80f1 	bne.w	8001c36 <AutoWiperControl+0x23e>
 8001a54:	4b7e      	ldr	r3, [pc, #504]	; (8001c50 <AutoWiperControl+0x258>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f040 80ec 	bne.w	8001c36 <AutoWiperControl+0x23e>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	78db      	ldrb	r3, [r3, #3]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f040 80e7 	bne.w	8001c36 <AutoWiperControl+0x23e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);						// Rain Sensor Power ON
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6e:	4879      	ldr	r0, [pc, #484]	; (8001c54 <AutoWiperControl+0x25c>)
 8001a70:	f001 fc80 	bl	8003374 <HAL_GPIO_WritePin>
				if( ++auto_wiper_delay > 10 ) {
 8001a74:	4b74      	ldr	r3, [pc, #464]	; (8001c48 <AutoWiperControl+0x250>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b72      	ldr	r3, [pc, #456]	; (8001c48 <AutoWiperControl+0x250>)
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	4b71      	ldr	r3, [pc, #452]	; (8001c48 <AutoWiperControl+0x250>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b0a      	cmp	r3, #10
 8001a86:	d94e      	bls.n	8001b26 <AutoWiperControl+0x12e>
					rain_sens_wiper_low = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);	// read rain sensor output (wiper low)
 8001a88:	2102      	movs	r1, #2
 8001a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8e:	f001 fc59 	bl	8003344 <HAL_GPIO_ReadPin>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b70      	ldr	r3, [pc, #448]	; (8001c58 <AutoWiperControl+0x260>)
 8001a98:	701a      	strb	r2, [r3, #0]
					rain_sens_wiper_high = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);	// read rain sensor output (wiper high)
 8001a9a:	2104      	movs	r1, #4
 8001a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa0:	f001 fc50 	bl	8003344 <HAL_GPIO_ReadPin>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b6c      	ldr	r3, [pc, #432]	; (8001c5c <AutoWiperControl+0x264>)
 8001aaa:	701a      	strb	r2, [r3, #0]

#if 1
					if( rain_sens_wiper_low == 1 ) {
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <AutoWiperControl+0x260>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10d      	bne.n	8001ad0 <AutoWiperControl+0xd8>
						if( ++rain_sens_wiper_low_on_cnt > 5 ) { //220523 100 -> 50
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <AutoWiperControl+0x268>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <AutoWiperControl+0x268>)
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <AutoWiperControl+0x268>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d90e      	bls.n	8001ae6 <AutoWiperControl+0xee>
							rain_sens_wiper_low_on = 1;
 8001ac8:	4b66      	ldr	r3, [pc, #408]	; (8001c64 <AutoWiperControl+0x26c>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e00a      	b.n	8001ae6 <AutoWiperControl+0xee>
						}
					} else if( rain_sens_wiper_low == 0 ) {
 8001ad0:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <AutoWiperControl+0x260>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d106      	bne.n	8001ae6 <AutoWiperControl+0xee>
						rain_sens_wiper_low_on = rain_sens_wiper_low_on_cnt = 0;
 8001ad8:	4b61      	ldr	r3, [pc, #388]	; (8001c60 <AutoWiperControl+0x268>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	4b60      	ldr	r3, [pc, #384]	; (8001c60 <AutoWiperControl+0x268>)
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	4b60      	ldr	r3, [pc, #384]	; (8001c64 <AutoWiperControl+0x26c>)
 8001ae4:	701a      	strb	r2, [r3, #0]
					}
					if( rain_sens_wiper_high == 1 ) {
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <AutoWiperControl+0x264>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d10d      	bne.n	8001b0a <AutoWiperControl+0x112>
						if( ++rain_sens_wiper_high_on_cnt > 5 ) { //220523 100 -> 50
 8001aee:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <AutoWiperControl+0x270>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	3301      	adds	r3, #1
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <AutoWiperControl+0x270>)
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <AutoWiperControl+0x270>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d90e      	bls.n	8001b20 <AutoWiperControl+0x128>
							rain_sens_wiper_high_on = 1;
 8001b02:	4b5a      	ldr	r3, [pc, #360]	; (8001c6c <AutoWiperControl+0x274>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	e00a      	b.n	8001b20 <AutoWiperControl+0x128>
						}
					} else if( rain_sens_wiper_high == 0 ) {
 8001b0a:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <AutoWiperControl+0x264>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <AutoWiperControl+0x128>
						rain_sens_wiper_high_on = rain_sens_wiper_high_on_cnt = 0;
 8001b12:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <AutoWiperControl+0x270>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <AutoWiperControl+0x270>)
 8001b1a:	781a      	ldrb	r2, [r3, #0]
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <AutoWiperControl+0x274>)
 8001b1e:	701a      	strb	r2, [r3, #0]
					if( rain_sens_wiper_high == 1 ) {
							rain_sens_wiper_high_on = 1;
						}
#endif

					auto_wiper_delay = 50;
 8001b20:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <AutoWiperControl+0x250>)
 8001b22:	2232      	movs	r2, #50	; 0x32
 8001b24:	701a      	strb	r2, [r3, #0]
				}

				if( Input_Status_Raw.wiper_parking == 1 ) {
 8001b26:	4b52      	ldr	r3, [pc, #328]	; (8001c70 <AutoWiperControl+0x278>)
 8001b28:	795b      	ldrb	r3, [r3, #5]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d106      	bne.n	8001b3c <AutoWiperControl+0x144>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);				// Rain Sens Parking Sig drv
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b34:	4847      	ldr	r0, [pc, #284]	; (8001c54 <AutoWiperControl+0x25c>)
 8001b36:	f001 fc1d 	bl	8003374 <HAL_GPIO_WritePin>
 8001b3a:	e009      	b.n	8001b50 <AutoWiperControl+0x158>
				} else if( Input_Status_Raw.wiper_parking == 0 ) {
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <AutoWiperControl+0x278>)
 8001b3e:	795b      	ldrb	r3, [r3, #5]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <AutoWiperControl+0x158>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);					// Rain Sens Parking Sig off
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b4a:	4842      	ldr	r0, [pc, #264]	; (8001c54 <AutoWiperControl+0x25c>)
 8001b4c:	f001 fc12 	bl	8003374 <HAL_GPIO_WritePin>
				}

				if( rain_sens_wiper_high_on == 1 ) {
 8001b50:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <AutoWiperControl+0x274>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d108      	bne.n	8001b6a <AutoWiperControl+0x172>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);				// Wiper Low OFF
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5e:	483d      	ldr	r0, [pc, #244]	; (8001c54 <AutoWiperControl+0x25c>)
 8001b60:	f001 fc08 	bl	8003374 <HAL_GPIO_WritePin>
					rain_sens_wiper_low_on = 0;
 8001b64:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <AutoWiperControl+0x26c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
				}

				if( rain_sens_wiper_low_on == 1 ) {
 8001b6a:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <AutoWiperControl+0x26c>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d10f      	bne.n	8001b92 <AutoWiperControl+0x19a>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);				// Wiper High OFF
 8001b72:	2200      	movs	r2, #0
 8001b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b78:	4836      	ldr	r0, [pc, #216]	; (8001c54 <AutoWiperControl+0x25c>)
 8001b7a:	f001 fbfb 	bl	8003374 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);					// Wiper Low Drive
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b84:	4833      	ldr	r0, [pc, #204]	; (8001c54 <AutoWiperControl+0x25c>)
 8001b86:	f001 fbf5 	bl	8003374 <HAL_GPIO_WritePin>
					wiper_status->wiper_low = 1;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	705a      	strb	r2, [r3, #1]
	} else if( ign1_status == 0 ) {
		input_status->auto_wiper = 0;
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);						// Rain Sensor Power OFF
		auto_wiper_delay = 0;
	}
}
 8001b90:	e051      	b.n	8001c36 <AutoWiperControl+0x23e>
				} else if( rain_sens_wiper_low_on == 0 ) {
 8001b92:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <AutoWiperControl+0x26c>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d14d      	bne.n	8001c36 <AutoWiperControl+0x23e>
					if( Input_Status_Raw.wiper_parking == 1 ) {
 8001b9a:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <AutoWiperControl+0x278>)
 8001b9c:	795b      	ldrb	r3, [r3, #5]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d105      	bne.n	8001bae <AutoWiperControl+0x1b6>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);			// Wiper Low OFF
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba8:	482a      	ldr	r0, [pc, #168]	; (8001c54 <AutoWiperControl+0x25c>)
 8001baa:	f001 fbe3 	bl	8003374 <HAL_GPIO_WritePin>
					wiper_status->wiper_low = 0;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	705a      	strb	r2, [r3, #1]
					if( rain_sens_wiper_high_on == 1 ) {
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <AutoWiperControl+0x274>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10f      	bne.n	8001bdc <AutoWiperControl+0x1e4>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);			// Wiper Low OFF
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bc2:	4824      	ldr	r0, [pc, #144]	; (8001c54 <AutoWiperControl+0x25c>)
 8001bc4:	f001 fbd6 	bl	8003374 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);				// Wiper High Drive
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bce:	4821      	ldr	r0, [pc, #132]	; (8001c54 <AutoWiperControl+0x25c>)
 8001bd0:	f001 fbd0 	bl	8003374 <HAL_GPIO_WritePin>
						wiper_status->wiper_high = 1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	709a      	strb	r2, [r3, #2]
}
 8001bda:	e02c      	b.n	8001c36 <AutoWiperControl+0x23e>
					} else if( rain_sens_wiper_high_on == 0 ) {
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <AutoWiperControl+0x274>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d128      	bne.n	8001c36 <AutoWiperControl+0x23e>
						if( Input_Status_Raw.wiper_parking == 1 ) {
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <AutoWiperControl+0x278>)
 8001be6:	795b      	ldrb	r3, [r3, #5]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <AutoWiperControl+0x200>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);		// Wiper High OFF
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf2:	4818      	ldr	r0, [pc, #96]	; (8001c54 <AutoWiperControl+0x25c>)
 8001bf4:	f001 fbbe 	bl	8003374 <HAL_GPIO_WritePin>
						wiper_status->wiper_high = 0;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	709a      	strb	r2, [r3, #2]
}
 8001bfe:	e01a      	b.n	8001c36 <AutoWiperControl+0x23e>
		} else if( input_status->auto_wiper == 0 ) {
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	791b      	ldrb	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d116      	bne.n	8001c36 <AutoWiperControl+0x23e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);					// Rain Sensor Power OFF
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c0e:	4811      	ldr	r0, [pc, #68]	; (8001c54 <AutoWiperControl+0x25c>)
 8001c10:	f001 fbb0 	bl	8003374 <HAL_GPIO_WritePin>
}
 8001c14:	e00f      	b.n	8001c36 <AutoWiperControl+0x23e>
	} else if( ign1_status == 0 ) {
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <AutoWiperControl+0x248>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10b      	bne.n	8001c36 <AutoWiperControl+0x23e>
		input_status->auto_wiper = 0;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);						// Rain Sensor Power OFF
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c2a:	480a      	ldr	r0, [pc, #40]	; (8001c54 <AutoWiperControl+0x25c>)
 8001c2c:	f001 fba2 	bl	8003374 <HAL_GPIO_WritePin>
		auto_wiper_delay = 0;
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <AutoWiperControl+0x250>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000241 	.word	0x20000241
 8001c44:	20000238 	.word	0x20000238
 8001c48:	20000029 	.word	0x20000029
 8001c4c:	20000225 	.word	0x20000225
 8001c50:	2000011c 	.word	0x2000011c
 8001c54:	48000c00 	.word	0x48000c00
 8001c58:	20000030 	.word	0x20000030
 8001c5c:	2000023e 	.word	0x2000023e
 8001c60:	2000002a 	.word	0x2000002a
 8001c64:	2000002b 	.word	0x2000002b
 8001c68:	2000002c 	.word	0x2000002c
 8001c6c:	2000002d 	.word	0x2000002d
 8001c70:	200002b8 	.word	0x200002b8

08001c74 <LampControl>:

void LampControl(struct LampStatus_s *lamp_status)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	/*
	 * Courtesy Lamp Control
	 */
	if( door_open_status == 1 ) {
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <LampControl+0x98>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d110      	bne.n	8001ca6 <LampControl+0x32>
		lamp_status->courtesy_lamp = 1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
		if( door_open_status_prev == 0 ) {
 8001c8a:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <LampControl+0x9c>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d134      	bne.n	8001cfc <LampControl+0x88>
			htim5.Instance->CCR2 = 1000;
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <LampControl+0xa0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001c9c:	2104      	movs	r1, #4
 8001c9e:	481d      	ldr	r0, [pc, #116]	; (8001d14 <LampControl+0xa0>)
 8001ca0:	f003 fc54 	bl	800554c <HAL_TIM_PWM_Start>
 8001ca4:	e02a      	b.n	8001cfc <LampControl+0x88>
		}
	} else if( door_open_status == 0 ) {
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <LampControl+0x98>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d126      	bne.n	8001cfc <LampControl+0x88>
		lamp_status->courtesy_lamp = 0;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
		if( door_open_status_prev == 1 ) {
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <LampControl+0x9c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d108      	bne.n	8001cce <LampControl+0x5a>
			htim5.Instance->CCR2 = 700;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <LampControl+0xa0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001cc4:	639a      	str	r2, [r3, #56]	; 0x38
//			htim8.Instance->CCR2 = 500;		// origin
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001cc6:	2104      	movs	r1, #4
 8001cc8:	4812      	ldr	r0, [pc, #72]	; (8001d14 <LampControl+0xa0>)
 8001cca:	f003 fc3f 	bl	800554c <HAL_TIM_PWM_Start>
		}
		htim5.Instance->CCR2 = htim5.Instance->CCR2 - 6;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <LampControl+0xa0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <LampControl+0xa0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3a06      	subs	r2, #6
 8001cda:	639a      	str	r2, [r3, #56]	; 0x38
		if( htim5.Instance->CCR2 <= 100 ) {
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <LampControl+0xa0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d80a      	bhi.n	8001cfc <LampControl+0x88>
			htim5.Instance->CCR2 = 100;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <LampControl+0xa0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2264      	movs	r2, #100	; 0x64
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
 8001cee:	2104      	movs	r1, #4
 8001cf0:	4808      	ldr	r0, [pc, #32]	; (8001d14 <LampControl+0xa0>)
 8001cf2:	f003 fd3d 	bl	8005770 <HAL_TIM_PWM_Stop>
			lamp_status->courtesy_lamp = 0;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
		}
	}
	door_open_status_prev = door_open_status;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <LampControl+0x98>)
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <LampControl+0x9c>)
 8001d02:	701a      	strb	r2, [r3, #0]
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	2000023d 	.word	0x2000023d
 8001d10:	20000041 	.word	0x20000041
 8001d14:	2000004c 	.word	0x2000004c

08001d18 <WiperDataConv>:

void WiperDataConv(uint8_t *txdata, uint8_t *flag)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	txdata[0] = Wiper_Status.wiper_int | (Wiper_Status.wiper_low<<1) | (Wiper_Status.wiper_high<<2) | (Wiper_Status.washer<<3) |
 8001d22:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <WiperDataConv+0x9c>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b25a      	sxtb	r2, r3
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <WiperDataConv+0x9c>)
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b25a      	sxtb	r2, r3
 8001d34:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <WiperDataConv+0x9c>)
 8001d36:	789b      	ldrb	r3, [r3, #2]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	b25b      	sxtb	r3, r3
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <WiperDataConv+0x9c>)
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	b25b      	sxtb	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b25a      	sxtb	r2, r3
			(Input_Status.auto_wiper<<4) | (Lamp_Status.courtesy_lamp<<5);
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <WiperDataConv+0xa0>)
 8001d4e:	791b      	ldrb	r3, [r3, #4]
 8001d50:	011b      	lsls	r3, r3, #4
	txdata[0] = Wiper_Status.wiper_int | (Wiper_Status.wiper_low<<1) | (Wiper_Status.wiper_high<<2) | (Wiper_Status.washer<<3) |
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b25a      	sxtb	r2, r3
			(Input_Status.auto_wiper<<4) | (Lamp_Status.courtesy_lamp<<5);
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <WiperDataConv+0xa4>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	015b      	lsls	r3, r3, #5
 8001d5e:	b25b      	sxtb	r3, r3
 8001d60:	4313      	orrs	r3, r2
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	b2da      	uxtb	r2, r3
	txdata[0] = Wiper_Status.wiper_int | (Wiper_Status.wiper_low<<1) | (Wiper_Status.wiper_high<<2) | (Wiper_Status.washer<<3) |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	701a      	strb	r2, [r3, #0]
	txdata[1] = wiper_int_volt;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <WiperDataConv+0xa8>)
 8001d6c:	881a      	ldrh	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]
	txdata[2] = wiper_int_volt >> 8;
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <WiperDataConv+0xa8>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3302      	adds	r3, #2
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	701a      	strb	r2, [r3, #0]
	txdata[3] = dimmer_volt;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <WiperDataConv+0xac>)
 8001d88:	881a      	ldrh	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3303      	adds	r3, #3
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]
	txdata[4] = dimmer_volt >> 8;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <WiperDataConv+0xac>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]

	(*flag) = 1;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	20000184 	.word	0x20000184
 8001db8:	20000178 	.word	0x20000178
 8001dbc:	20000234 	.word	0x20000234
 8001dc0:	20000036 	.word	0x20000036
 8001dc4:	20000226 	.word	0x20000226

08001dc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dce:	490e      	ldr	r1, [pc, #56]	; (8001e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dd0:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <LoopForever+0xe>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001dd4:	e002      	b.n	8001ddc <LoopCopyDataInit>

08001dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dda:	3304      	adds	r3, #4

08001ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de0:	d3f9      	bcc.n	8001dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de2:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001de4:	4c0b      	ldr	r4, [pc, #44]	; (8001e14 <LoopForever+0x16>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de8:	e001      	b.n	8001dee <LoopFillZerobss>

08001dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dec:	3204      	adds	r2, #4

08001dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df0:	d3fb      	bcc.n	8001dea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001df2:	f7ff fa63 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001df6:	f004 fce3 	bl	80067c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dfa:	f7fe fc4b 	bl	8000694 <main>

08001dfe <LoopForever>:

LoopForever:
    b LoopForever
 8001dfe:	e7fe      	b.n	8001dfe <LoopForever>
  ldr   r0, =_estack
 8001e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e0c:	08006858 	.word	0x08006858
  ldr r2, =_sbss
 8001e10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e14:	200003bc 	.word	0x200003bc

08001e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e18:	e7fe      	b.n	8001e18 <ADC1_2_IRQHandler>

08001e1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f000 f959 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f000 f80e 	bl	8001e4c <HAL_InitTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	71fb      	strb	r3, [r7, #7]
 8001e3a:	e001      	b.n	8001e40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e3c:	f7ff f858 	bl	8000ef0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e40:	79fb      	ldrb	r3, [r7, #7]

}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HAL_InitTick+0x68>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d022      	beq.n	8001ea6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_InitTick+0x6c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_InitTick+0x68>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f964 	bl	8002142 <HAL_SYSTICK_Config>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10f      	bne.n	8001ea0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	d809      	bhi.n	8001e9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e86:	2200      	movs	r2, #0
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8e:	f000 f930 	bl	80020f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <HAL_InitTick+0x70>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e007      	b.n	8001eaa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	e004      	b.n	8001eaa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e001      	b.n	8001eaa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	20000004 	.word	0x20000004

08001ec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_IncTick+0x1c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_IncTick+0x20>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a03      	ldr	r2, [pc, #12]	; (8001edc <HAL_IncTick+0x1c>)
 8001ed0:	6013      	str	r3, [r2, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	200003b8 	.word	0x200003b8
 8001ee0:	20000008 	.word	0x20000008

08001ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_GetTick+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	200003b8 	.word	0x200003b8

08001efc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_SuspendTick+0x1c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_SuspendTick+0x1c>)
 8001f06:	f023 0302 	bic.w	r3, r3, #2
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_ResumeTick+0x1c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_ResumeTick+0x1c>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <__NVIC_SetPriorityGrouping>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002100:	f7ff ff40 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	f7ff ff90 	bl	8002030 <NVIC_EncodePriority>
 8002110:	4602      	mov	r2, r0
 8002112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff5f 	bl	8001fdc <__NVIC_SetPriority>
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff33 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ffa4 	bl	8002098 <SysTick_Config>
 8002150:	4603      	mov	r3, r0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d00d      	beq.n	800218e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2204      	movs	r2, #4
 8002176:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e047      	b.n	800221e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 020e 	bic.w	r2, r2, #14
 800219c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f003 021f 	and.w	r2, r3, #31
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00c      	beq.n	80021fe <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
    }
  }
  return status;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e147      	b.n	80024ca <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fe72 	bl	8000f38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0210 	bic.w	r2, r2, #16
 8002262:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002264:	f7ff fe3e 	bl	8001ee4 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800226a:	e012      	b.n	8002292 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800226c:	f7ff fe3a 	bl	8001ee4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b0a      	cmp	r3, #10
 8002278:	d90b      	bls.n	8002292 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e11b      	b.n	80024ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b08      	cmp	r3, #8
 800229e:	d0e5      	beq.n	800226c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b0:	f7ff fe18 	bl	8001ee4 <HAL_GetTick>
 80022b4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80022b6:	e012      	b.n	80022de <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80022b8:	f7ff fe14 	bl	8001ee4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b0a      	cmp	r3, #10
 80022c4:	d90b      	bls.n	80022de <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2203      	movs	r2, #3
 80022d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0f5      	b.n	80024ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0e5      	beq.n	80022b8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0202 	orr.w	r2, r2, #2
 80022fa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a74      	ldr	r2, [pc, #464]	; (80024d4 <HAL_FDCAN_Init+0x2ac>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d103      	bne.n	800230e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002306:	4a74      	ldr	r2, [pc, #464]	; (80024d8 <HAL_FDCAN_Init+0x2b0>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7c1b      	ldrb	r3, [r3, #16]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d108      	bne.n	8002328 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699a      	ldr	r2, [r3, #24]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002324:	619a      	str	r2, [r3, #24]
 8002326:	e007      	b.n	8002338 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002336:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7c5b      	ldrb	r3, [r3, #17]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d108      	bne.n	8002352 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800234e:	619a      	str	r2, [r3, #24]
 8002350:	e007      	b.n	8002362 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002360:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7c9b      	ldrb	r3, [r3, #18]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d108      	bne.n	800237c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002378:	619a      	str	r2, [r3, #24]
 800237a:	e007      	b.n	800238c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800238a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80023b0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0210 	bic.w	r2, r2, #16
 80023c0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d108      	bne.n	80023dc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0204 	orr.w	r2, r2, #4
 80023d8:	619a      	str	r2, [r3, #24]
 80023da:	e02c      	b.n	8002436 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d028      	beq.n	8002436 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d01c      	beq.n	8002426 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023fa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0210 	orr.w	r2, r2, #16
 800240a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d110      	bne.n	8002436 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0220 	orr.w	r2, r2, #32
 8002422:	619a      	str	r2, [r3, #24]
 8002424:	e007      	b.n	8002436 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0220 	orr.w	r2, r2, #32
 8002434:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	3b01      	subs	r3, #1
 800243c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	3b01      	subs	r3, #1
 8002444:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002446:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800244e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	3b01      	subs	r3, #1
 8002458:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800245e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002460:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800246a:	d115      	bne.n	8002498 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	3b01      	subs	r3, #1
 8002478:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800247a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	3b01      	subs	r3, #1
 8002482:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002484:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	3b01      	subs	r3, #1
 800248e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002494:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002496:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fcde 	bl	8002e70 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40006400 	.word	0x40006400
 80024d8:	40006500 	.word	0x40006500

080024dc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024ec:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d002      	beq.n	80024fa <HAL_FDCAN_ConfigFilter+0x1e>
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d13d      	bne.n	8002576 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d119      	bne.n	8002536 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800250e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002516:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e01d      	b.n	8002572 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	075a      	lsls	r2, r3, #29
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	079a      	lsls	r2, r3, #30
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3304      	adds	r3, #4
 800256a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e006      	b.n	8002584 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257a:	f043 0202 	orr.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d116      	bne.n	80025d8 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	011a      	lsls	r2, r3, #4
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	431a      	orrs	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	431a      	orrs	r2, r3
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e006      	b.n	80025e6 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025dc:	f043 0204 	orr.w	r2, r3, #4
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d110      	bne.n	8002628 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2202      	movs	r2, #2
 800260a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e006      	b.n	8002636 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	f043 0204 	orr.w	r2, r3, #4
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8002642:	b480      	push	{r7}
 8002644:	b085      	sub	sp, #20
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d156      	bne.n	8002708 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800266a:	e011      	b.n	8002690 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b0a      	cmp	r3, #10
 8002670:	d90b      	bls.n	800268a <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2203      	movs	r2, #3
 8002682:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e045      	b.n	8002716 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3301      	adds	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0e6      	beq.n	800266c <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0210 	bic.w	r2, r2, #16
 80026b0:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80026b2:	e011      	b.n	80026d8 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b0a      	cmp	r3, #10
 80026b8:	d90b      	bls.n	80026d2 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e021      	b.n	8002716 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d0e6      	beq.n	80026b4 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0202 	orr.w	r2, r2, #2
 80026f4:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e006      	b.n	8002716 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270c:	f043 0208 	orr.w	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
  }
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d12c      	bne.n	8002794 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e023      	b.n	80027a2 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fbe9 	bl	8002f48 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2101      	movs	r1, #1
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002786:	2201      	movs	r2, #1
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	e006      	b.n	80027a2 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	f043 0208 	orr.w	r2, r3, #8
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b08b      	sub	sp, #44	; 0x2c
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027c0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80027c2:	7efb      	ldrb	r3, [r7, #27]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	f040 80bc 	bne.w	8002942 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d121      	bne.n	8002814 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d107      	bne.n	80027f0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0af      	b.n	8002950 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	440b      	add	r3, r1
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	e020      	b.n	8002856 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002828:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e08d      	b.n	8002950 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0c9b      	lsrs	r3, r3, #18
 8002870:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e005      	b.n	8002886 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	3304      	adds	r3, #4
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	0e1b      	lsrs	r3, r3, #24
 80028d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0fda      	lsrs	r2, r3, #31
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	3304      	adds	r3, #4
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
 80028f8:	e00a      	b.n	8002910 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	441a      	add	r2, r3
 8002900:	6839      	ldr	r1, [r7, #0]
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	440b      	add	r3, r1
 8002906:	7812      	ldrb	r2, [r2, #0]
 8002908:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	3301      	adds	r3, #1
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	4a11      	ldr	r2, [pc, #68]	; (800295c <HAL_FDCAN_GetRxMessage+0x1b0>)
 8002918:	5cd3      	ldrb	r3, [r2, r3]
 800291a:	461a      	mov	r2, r3
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	4293      	cmp	r3, r2
 8002920:	d3eb      	bcc.n	80028fa <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d105      	bne.n	8002934 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002932:	e004      	b.n	800293e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e006      	b.n	8002950 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002946:	f043 0208 	orr.w	r2, r3, #8
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
  }
}
 8002950:	4618      	mov	r0, r3
 8002952:	372c      	adds	r7, #44	; 0x2c
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	08006840 	.word	0x08006840

08002960 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002972:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d003      	beq.n	8002982 <HAL_FDCAN_ActivateNotification+0x22>
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b02      	cmp	r3, #2
 800297e:	f040 80c8 	bne.w	8002b12 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	2b00      	cmp	r3, #0
 8002992:	d004      	beq.n	800299e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03b      	beq.n	8002a16 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d031      	beq.n	8002a16 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d027      	beq.n	8002a16 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d01d      	beq.n	8002a16 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d013      	beq.n	8002a16 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d004      	beq.n	8002a02 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d009      	beq.n	8002a16 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00c      	beq.n	8002a26 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d107      	bne.n	8002a26 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d13b      	bne.n	8002ab2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d131      	bne.n	8002ab2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d127      	bne.n	8002ab2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11d      	bne.n	8002ab2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d113      	bne.n	8002ab2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00c      	beq.n	8002ac2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0202 	orr.w	r2, r2, #2
 8002ac0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e006      	b.n	8002b20 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b16:	f043 0202 	orr.w	r2, r3, #2
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
  }
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	4013      	ands	r3, r2
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	6a3a      	ldr	r2, [r7, #32]
 8002b60:	4013      	ands	r3, r2
 8002b62:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b6e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b82:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8002b86:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b9e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2240      	movs	r2, #64	; 0x40
 8002bce:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f92e 	bl	8002e32 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01b      	beq.n	8002c1c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d014      	beq.n	8002c1c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bfa:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c12:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002c14:	6939      	ldr	r1, [r7, #16]
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8ec 	bl	8002df4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c28:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8b6 	bl	8002d9e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a3a      	ldr	r2, [r7, #32]
 8002c3e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002c40:	6a39      	ldr	r1, [r7, #32]
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd fba4 	bl	8000390 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d007      	beq.n	8002c5e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002c56:	69f9      	ldr	r1, [r7, #28]
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f8ab 	bl	8002db4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c82:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f8a0 	bl	8002dca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01a      	beq.n	8002cce <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d013      	beq.n	8002cce <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002cae:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f888 	bl	8002dde <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cf2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f888 	bl	8002e0a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d1e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f87c 	bl	8002e1e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d011      	beq.n	8002d58 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002d66:	6979      	ldr	r1, [r7, #20]
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f876 	bl	8002e5a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d009      	beq.n	8002d88 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f858 	bl	8002e46 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002d96:	bf00      	nop
 8002d98:	3728      	adds	r7, #40	; 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002e78:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002e7a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2f      	ldr	r2, [pc, #188]	; (8002f40 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d103      	bne.n	8002e8e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002e8c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2c      	ldr	r2, [pc, #176]	; (8002f44 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d103      	bne.n	8002ea0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8002e9e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eae:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	041a      	lsls	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	061a      	lsls	r2, r3, #24
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	e005      	b.n	8002f22 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d3f3      	bcc.n	8002f16 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002f2e:	bf00      	nop
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	4000a400 	.word	0x4000a400
 8002f40:	40006800 	.word	0x40006800
 8002f44:	40006c00 	.word	0x40006c00

08002f48 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002f66:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	e00a      	b.n	8002f8a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002f7c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002f82:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f88:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002f94:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002f9a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002fa0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	440b      	add	r3, r1
 8002fba:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	e020      	b.n	800301c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3303      	adds	r3, #3
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	3302      	adds	r3, #2
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	440b      	add	r3, r1
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002ff2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	440b      	add	r3, r1
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003000:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	440a      	add	r2, r1
 8003008:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800300a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	3304      	adds	r3, #4
 8003014:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	3304      	adds	r3, #4
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	4a06      	ldr	r2, [pc, #24]	; (800303c <FDCAN_CopyMessageToRAM+0xf4>)
 8003024:	5cd3      	ldrb	r3, [r2, r3]
 8003026:	461a      	mov	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	4293      	cmp	r3, r2
 800302c:	d3d5      	bcc.n	8002fda <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	3724      	adds	r7, #36	; 0x24
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	08006840 	.word	0x08006840

08003040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800304e:	e15a      	b.n	8003306 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 814c 	beq.w	8003300 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d00b      	beq.n	8003088 <HAL_GPIO_Init+0x48>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d007      	beq.n	8003088 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800307c:	2b11      	cmp	r3, #17
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b12      	cmp	r3, #18
 8003086:	d130      	bne.n	80030ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030be:	2201      	movs	r2, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f003 0201 	and.w	r2, r3, #1
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d003      	beq.n	800312a <HAL_GPIO_Init+0xea>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b12      	cmp	r3, #18
 8003128:	d123      	bne.n	8003172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	08da      	lsrs	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3208      	adds	r2, #8
 800316c:	6939      	ldr	r1, [r7, #16]
 800316e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0203 	and.w	r2, r3, #3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80a6 	beq.w	8003300 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b4:	4b5b      	ldr	r3, [pc, #364]	; (8003324 <HAL_GPIO_Init+0x2e4>)
 80031b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b8:	4a5a      	ldr	r2, [pc, #360]	; (8003324 <HAL_GPIO_Init+0x2e4>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6613      	str	r3, [r2, #96]	; 0x60
 80031c0:	4b58      	ldr	r3, [pc, #352]	; (8003324 <HAL_GPIO_Init+0x2e4>)
 80031c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031cc:	4a56      	ldr	r2, [pc, #344]	; (8003328 <HAL_GPIO_Init+0x2e8>)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	089b      	lsrs	r3, r3, #2
 80031d2:	3302      	adds	r3, #2
 80031d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	220f      	movs	r2, #15
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031f6:	d01f      	beq.n	8003238 <HAL_GPIO_Init+0x1f8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a4c      	ldr	r2, [pc, #304]	; (800332c <HAL_GPIO_Init+0x2ec>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d019      	beq.n	8003234 <HAL_GPIO_Init+0x1f4>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a4b      	ldr	r2, [pc, #300]	; (8003330 <HAL_GPIO_Init+0x2f0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <HAL_GPIO_Init+0x1f0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a4a      	ldr	r2, [pc, #296]	; (8003334 <HAL_GPIO_Init+0x2f4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00d      	beq.n	800322c <HAL_GPIO_Init+0x1ec>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a49      	ldr	r2, [pc, #292]	; (8003338 <HAL_GPIO_Init+0x2f8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d007      	beq.n	8003228 <HAL_GPIO_Init+0x1e8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a48      	ldr	r2, [pc, #288]	; (800333c <HAL_GPIO_Init+0x2fc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_GPIO_Init+0x1e4>
 8003220:	2305      	movs	r3, #5
 8003222:	e00a      	b.n	800323a <HAL_GPIO_Init+0x1fa>
 8003224:	2306      	movs	r3, #6
 8003226:	e008      	b.n	800323a <HAL_GPIO_Init+0x1fa>
 8003228:	2304      	movs	r3, #4
 800322a:	e006      	b.n	800323a <HAL_GPIO_Init+0x1fa>
 800322c:	2303      	movs	r3, #3
 800322e:	e004      	b.n	800323a <HAL_GPIO_Init+0x1fa>
 8003230:	2302      	movs	r3, #2
 8003232:	e002      	b.n	800323a <HAL_GPIO_Init+0x1fa>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_GPIO_Init+0x1fa>
 8003238:	2300      	movs	r3, #0
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	f002 0203 	and.w	r2, r2, #3
 8003240:	0092      	lsls	r2, r2, #2
 8003242:	4093      	lsls	r3, r2
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800324a:	4937      	ldr	r1, [pc, #220]	; (8003328 <HAL_GPIO_Init+0x2e8>)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	089b      	lsrs	r3, r3, #2
 8003250:	3302      	adds	r3, #2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003258:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_GPIO_Init+0x300>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	43db      	mvns	r3, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800327c:	4a30      	ldr	r2, [pc, #192]	; (8003340 <HAL_GPIO_Init+0x300>)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003282:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <HAL_GPIO_Init+0x300>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	43db      	mvns	r3, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032a6:	4a26      	ldr	r2, [pc, #152]	; (8003340 <HAL_GPIO_Init+0x300>)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ac:	4b24      	ldr	r3, [pc, #144]	; (8003340 <HAL_GPIO_Init+0x300>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032d0:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <HAL_GPIO_Init+0x300>)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032d6:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <HAL_GPIO_Init+0x300>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032fa:	4a11      	ldr	r2, [pc, #68]	; (8003340 <HAL_GPIO_Init+0x300>)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3301      	adds	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	f47f ae9d 	bne.w	8003050 <HAL_GPIO_Init+0x10>
  }
}
 8003316:	bf00      	nop
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40021000 	.word	0x40021000
 8003328:	40010000 	.word	0x40010000
 800332c:	48000400 	.word	0x48000400
 8003330:	48000800 	.word	0x48000800
 8003334:	48000c00 	.word	0x48000c00
 8003338:	48001000 	.word	0x48001000
 800333c:	48001400 	.word	0x48001400
 8003340:	40010400 	.word	0x40010400

08003344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	887b      	ldrh	r3, [r7, #2]
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	e001      	b.n	8003366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
 8003380:	4613      	mov	r3, r2
 8003382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003384:	787b      	ldrb	r3, [r7, #1]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003390:	e002      	b.n	8003398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b6:	d104      	bne.n	80033c2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f8d8 	bl	8003570 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80033c0:	e003      	b.n	80033ca <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f8a9 	bl	800351c <HAL_PWREx_EnterSTOP0Mode>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d141      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033e2:	4b4b      	ldr	r3, [pc, #300]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d131      	bne.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f0:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f6:	4a46      	ldr	r2, [pc, #280]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003408:	4a41      	ldr	r2, [pc, #260]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800340e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003410:	4b40      	ldr	r3, [pc, #256]	; (8003514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2232      	movs	r2, #50	; 0x32
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	4a3f      	ldr	r2, [pc, #252]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	0c9b      	lsrs	r3, r3, #18
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003426:	e002      	b.n	800342e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3b01      	subs	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800342e:	4b38      	ldr	r3, [pc, #224]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343a:	d102      	bne.n	8003442 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f2      	bne.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003442:	4b33      	ldr	r3, [pc, #204]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d158      	bne.n	8003502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e057      	b.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003454:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800345a:	4a2d      	ldr	r2, [pc, #180]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003464:	e04d      	b.n	8003502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346c:	d141      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800346e:	4b28      	ldr	r3, [pc, #160]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347a:	d131      	bne.n	80034e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003482:	4a23      	ldr	r2, [pc, #140]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003488:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800348c:	4b20      	ldr	r3, [pc, #128]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003494:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800349a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2232      	movs	r2, #50	; 0x32
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	0c9b      	lsrs	r3, r3, #18
 80034ae:	3301      	adds	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034b2:	e002      	b.n	80034ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c6:	d102      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f2      	bne.n	80034b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034da:	d112      	bne.n	8003502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e011      	b.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034f0:	e007      	b.n	8003502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034fa:	4a05      	ldr	r2, [pc, #20]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003500:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40007000 	.word	0x40007000
 8003514:	20000000 	.word	0x20000000
 8003518:	431bde83 	.word	0x431bde83

0800351c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800352c:	f023 0307 	bic.w	r3, r3, #7
 8003530:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003532:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	4a0d      	ldr	r2, [pc, #52]	; (800356c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003538:	f043 0304 	orr.w	r3, r3, #4
 800353c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003544:	bf30      	wfi
 8003546:	e002      	b.n	800354e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003548:	bf40      	sev
    __WFE();
 800354a:	bf20      	wfe
    __WFE();
 800354c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	4a06      	ldr	r2, [pc, #24]	; (800356c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	6113      	str	r3, [r2, #16]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40007000 	.word	0x40007000
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 800357a:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 0307 	bic.w	r3, r3, #7
 8003582:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	4a0d      	ldr	r2, [pc, #52]	; (80035c4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800359c:	bf30      	wfi
 800359e:	e002      	b.n	80035a6 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80035a0:	bf40      	sev
    __WFE();
 80035a2:	bf20      	wfe
    __WFE();
 80035a4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	6113      	str	r3, [r2, #16]
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40007000 	.word	0x40007000
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a04      	ldr	r2, [pc, #16]	; (80035e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d6:	6093      	str	r3, [r2, #8]
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40007000 	.word	0x40007000

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e308      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d075      	beq.n	80036f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003606:	4ba3      	ldr	r3, [pc, #652]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003610:	4ba0      	ldr	r3, [pc, #640]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d102      	bne.n	8003626 <HAL_RCC_OscConfig+0x3e>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d002      	beq.n	800362c <HAL_RCC_OscConfig+0x44>
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d10b      	bne.n	8003644 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	4b99      	ldr	r3, [pc, #612]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d05b      	beq.n	80036f0 <HAL_RCC_OscConfig+0x108>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d157      	bne.n	80036f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e2e3      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364c:	d106      	bne.n	800365c <HAL_RCC_OscConfig+0x74>
 800364e:	4b91      	ldr	r3, [pc, #580]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a90      	ldr	r2, [pc, #576]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x98>
 8003666:	4b8b      	ldr	r3, [pc, #556]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a8a      	ldr	r2, [pc, #552]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b88      	ldr	r3, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a87      	ldr	r2, [pc, #540]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 8003680:	4b84      	ldr	r3, [pc, #528]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a83      	ldr	r2, [pc, #524]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b81      	ldr	r3, [pc, #516]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a80      	ldr	r2, [pc, #512]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe fc20 	bl	8001ee4 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fe fc1c 	bl	8001ee4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e2a8      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ba:	4b76      	ldr	r3, [pc, #472]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xc0>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe fc0c 	bl	8001ee4 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fe fc08 	bl	8001ee4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e294      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036e2:	4b6c      	ldr	r3, [pc, #432]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0xe8>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d075      	beq.n	80037ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036fe:	4b65      	ldr	r3, [pc, #404]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003708:	4b62      	ldr	r3, [pc, #392]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	2b0c      	cmp	r3, #12
 8003716:	d102      	bne.n	800371e <HAL_RCC_OscConfig+0x136>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d002      	beq.n	8003724 <HAL_RCC_OscConfig+0x13c>
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d11f      	bne.n	8003764 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003724:	4b5b      	ldr	r3, [pc, #364]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_OscConfig+0x154>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e267      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b55      	ldr	r3, [pc, #340]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	4952      	ldr	r1, [pc, #328]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003750:	4b51      	ldr	r3, [pc, #324]	; (8003898 <HAL_RCC_OscConfig+0x2b0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fb79 	bl	8001e4c <HAL_InitTick>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d043      	beq.n	80037e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e253      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d023      	beq.n	80037b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800376c:	4b49      	ldr	r3, [pc, #292]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a48      	ldr	r2, [pc, #288]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe fbb4 	bl	8001ee4 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003780:	f7fe fbb0 	bl	8001ee4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e23c      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003792:	4b40      	ldr	r3, [pc, #256]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	061b      	lsls	r3, r3, #24
 80037ac:	4939      	ldr	r1, [pc, #228]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
 80037b2:	e01a      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b4:	4b37      	ldr	r3, [pc, #220]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a36      	ldr	r2, [pc, #216]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fe fb90 	bl	8001ee4 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c8:	f7fe fb8c 	bl	8001ee4 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e218      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037da:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x1e0>
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03c      	beq.n	8003870 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01c      	beq.n	8003838 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037fe:	4b25      	ldr	r3, [pc, #148]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003804:	4a23      	ldr	r2, [pc, #140]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fe fb69 	bl	8001ee4 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003816:	f7fe fb65 	bl	8001ee4 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1f1      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800382a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ef      	beq.n	8003816 <HAL_RCC_OscConfig+0x22e>
 8003836:	e01b      	b.n	8003870 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003838:	4b16      	ldr	r3, [pc, #88]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800383a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383e:	4a15      	ldr	r2, [pc, #84]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fe fb4c 	bl	8001ee4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003850:	f7fe fb48 	bl	8001ee4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1d4      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1ef      	bne.n	8003850 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80ab 	beq.w	80039d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800387e:	2300      	movs	r3, #0
 8003880:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_RCC_OscConfig+0x2b4>
 800388e:	2301      	movs	r3, #1
 8003890:	e005      	b.n	800389e <HAL_RCC_OscConfig+0x2b6>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	20000004 	.word	0x20000004
 800389c:	2300      	movs	r3, #0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4baf      	ldr	r3, [pc, #700]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	4aae      	ldr	r2, [pc, #696]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6593      	str	r3, [r2, #88]	; 0x58
 80038ae:	4bac      	ldr	r3, [pc, #688]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038be:	4ba9      	ldr	r3, [pc, #676]	; (8003b64 <HAL_RCC_OscConfig+0x57c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d118      	bne.n	80038fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ca:	4ba6      	ldr	r3, [pc, #664]	; (8003b64 <HAL_RCC_OscConfig+0x57c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4aa5      	ldr	r2, [pc, #660]	; (8003b64 <HAL_RCC_OscConfig+0x57c>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7fe fb05 	bl	8001ee4 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7fe fb01 	bl	8001ee4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e18d      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f0:	4b9c      	ldr	r3, [pc, #624]	; (8003b64 <HAL_RCC_OscConfig+0x57c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d108      	bne.n	8003916 <HAL_RCC_OscConfig+0x32e>
 8003904:	4b96      	ldr	r3, [pc, #600]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	4a95      	ldr	r2, [pc, #596]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003914:	e024      	b.n	8003960 <HAL_RCC_OscConfig+0x378>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b05      	cmp	r3, #5
 800391c:	d110      	bne.n	8003940 <HAL_RCC_OscConfig+0x358>
 800391e:	4b90      	ldr	r3, [pc, #576]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003924:	4a8e      	ldr	r2, [pc, #568]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800392e:	4b8c      	ldr	r3, [pc, #560]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	4a8a      	ldr	r2, [pc, #552]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393e:	e00f      	b.n	8003960 <HAL_RCC_OscConfig+0x378>
 8003940:	4b87      	ldr	r3, [pc, #540]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	4a86      	ldr	r2, [pc, #536]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003950:	4b83      	ldr	r3, [pc, #524]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	4a82      	ldr	r2, [pc, #520]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d016      	beq.n	8003996 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fe fabc 	bl	8001ee4 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800396e:	e00a      	b.n	8003986 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fe fab8 	bl	8001ee4 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e142      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003986:	4b76      	ldr	r3, [pc, #472]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ed      	beq.n	8003970 <HAL_RCC_OscConfig+0x388>
 8003994:	e015      	b.n	80039c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003996:	f7fe faa5 	bl	8001ee4 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fe faa1 	bl	8001ee4 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e12b      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039b4:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ed      	bne.n	800399e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c8:	4b65      	ldr	r3, [pc, #404]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	4a64      	ldr	r2, [pc, #400]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d03c      	beq.n	8003a5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039e8:	4b5d      	ldr	r3, [pc, #372]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80039ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ee:	4a5c      	ldr	r2, [pc, #368]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fe fa74 	bl	8001ee4 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a00:	f7fe fa70 	bl	8001ee4 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e0fc      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a12:	4b53      	ldr	r3, [pc, #332]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ef      	beq.n	8003a00 <HAL_RCC_OscConfig+0x418>
 8003a20:	e01b      	b.n	8003a5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a22:	4b4f      	ldr	r3, [pc, #316]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a28:	4a4d      	ldr	r2, [pc, #308]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fe fa57 	bl	8001ee4 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a3a:	f7fe fa53 	bl	8001ee4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0df      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a4c:	4b44      	ldr	r3, [pc, #272]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1ef      	bne.n	8003a3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80d3 	beq.w	8003c0a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a64:	4b3e      	ldr	r3, [pc, #248]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 030c 	and.w	r3, r3, #12
 8003a6c:	2b0c      	cmp	r3, #12
 8003a6e:	f000 808d 	beq.w	8003b8c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d15a      	bne.n	8003b30 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a38      	ldr	r2, [pc, #224]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fe fa2d 	bl	8001ee4 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fe fa29 	bl	8001ee4 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e0b5      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aac:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	4b2d      	ldr	r3, [pc, #180]	; (8003b68 <HAL_RCC_OscConfig+0x580>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6a11      	ldr	r1, [r2, #32]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003abc:	3a01      	subs	r2, #1
 8003abe:	0112      	lsls	r2, r2, #4
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ac6:	0212      	lsls	r2, r2, #8
 8003ac8:	4311      	orrs	r1, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ace:	0852      	lsrs	r2, r2, #1
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	0552      	lsls	r2, r2, #21
 8003ad4:	4311      	orrs	r1, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ada:	0852      	lsrs	r2, r2, #1
 8003adc:	3a01      	subs	r2, #1
 8003ade:	0652      	lsls	r2, r2, #25
 8003ae0:	4311      	orrs	r1, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ae6:	06d2      	lsls	r2, r2, #27
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	491d      	ldr	r1, [pc, #116]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a17      	ldr	r2, [pc, #92]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe f9ec 	bl	8001ee4 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fe f9e8 	bl	8001ee4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e074      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x528>
 8003b2e:	e06c      	b.n	8003c0a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a07      	ldr	r2, [pc, #28]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <HAL_RCC_OscConfig+0x578>)
 8003b4e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe f9c4 	bl	8001ee4 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5e:	e00e      	b.n	8003b7e <HAL_RCC_OscConfig+0x596>
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40007000 	.word	0x40007000
 8003b68:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fe f9ba 	bl	8001ee4 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e046      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7e:	4b25      	ldr	r3, [pc, #148]	; (8003c14 <HAL_RCC_OscConfig+0x62c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x584>
 8003b8a:	e03e      	b.n	8003c0a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e039      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b98:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <HAL_RCC_OscConfig+0x62c>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f003 0203 	and.w	r2, r3, #3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d12c      	bne.n	8003c06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d123      	bne.n	8003c06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d11b      	bne.n	8003c06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d113      	bne.n	8003c06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	3b01      	subs	r3, #1
 8003bec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d109      	bne.n	8003c06 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000

08003c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e11e      	b.n	8003e6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b91      	ldr	r3, [pc, #580]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d910      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b8e      	ldr	r3, [pc, #568]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 020f 	bic.w	r2, r3, #15
 8003c46:	498c      	ldr	r1, [pc, #560]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b8a      	ldr	r3, [pc, #552]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e106      	b.n	8003e6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d073      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d129      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c74:	4b81      	ldr	r3, [pc, #516]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0f4      	b.n	8003e6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c84:	f000 f966 	bl	8003f54 <RCC_GetSysClockFreqFromPLLSource>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4a7c      	ldr	r2, [pc, #496]	; (8003e80 <HAL_RCC_ClockConfig+0x268>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d93f      	bls.n	8003d12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c92:	4b7a      	ldr	r3, [pc, #488]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d033      	beq.n	8003d12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d12f      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cb2:	4b72      	ldr	r3, [pc, #456]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cba:	4a70      	ldr	r2, [pc, #448]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e024      	b.n	8003d12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d107      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cd0:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0c6      	b.n	8003e6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce0:	4b66      	ldr	r3, [pc, #408]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0be      	b.n	8003e6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003cf0:	f000 f8ce 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4a61      	ldr	r2, [pc, #388]	; (8003e80 <HAL_RCC_ClockConfig+0x268>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d909      	bls.n	8003d12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cfe:	4b5f      	ldr	r3, [pc, #380]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d06:	4a5d      	ldr	r2, [pc, #372]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d12:	4b5a      	ldr	r3, [pc, #360]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 0203 	bic.w	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4957      	ldr	r1, [pc, #348]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d24:	f7fe f8de 	bl	8001ee4 <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2c:	f7fe f8da 	bl	8001ee4 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e095      	b.n	8003e6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d42:	4b4e      	ldr	r3, [pc, #312]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 020c 	and.w	r2, r3, #12
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d1eb      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d023      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d6c:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4a42      	ldr	r2, [pc, #264]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d84:	4b3d      	ldr	r3, [pc, #244]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d8c:	4a3b      	ldr	r2, [pc, #236]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003d8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d94:	4b39      	ldr	r3, [pc, #228]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4936      	ldr	r1, [pc, #216]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]
 8003da6:	e008      	b.n	8003dba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d105      	bne.n	8003dba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003dae:	4b33      	ldr	r3, [pc, #204]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	4a32      	ldr	r2, [pc, #200]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003db4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003db8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dba:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d21d      	bcs.n	8003e04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc8:	4b2b      	ldr	r3, [pc, #172]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 020f 	bic.w	r2, r3, #15
 8003dd0:	4929      	ldr	r1, [pc, #164]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dd8:	f7fe f884 	bl	8001ee4 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de0:	f7fe f880 	bl	8001ee4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e03b      	b.n	8003e6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCC_ClockConfig+0x260>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d1ed      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4917      	ldr	r1, [pc, #92]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e2e:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	490f      	ldr	r1, [pc, #60]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e42:	f000 f825 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8003e46:	4602      	mov	r2, r0
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_RCC_ClockConfig+0x264>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	490c      	ldr	r1, [pc, #48]	; (8003e84 <HAL_RCC_ClockConfig+0x26c>)
 8003e54:	5ccb      	ldrb	r3, [r1, r3]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <HAL_RCC_ClockConfig+0x270>)
 8003e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_RCC_ClockConfig+0x274>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd fff0 	bl	8001e4c <HAL_InitTick>
 8003e6c:	4603      	mov	r3, r0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	04c4b400 	.word	0x04c4b400
 8003e84:	08006830 	.word	0x08006830
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	20000004 	.word	0x20000004

08003e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d102      	bne.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	e047      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ea8:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d102      	bne.n	8003eba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eb4:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	e03e      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003eba:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b0c      	cmp	r3, #12
 8003ec4:	d136      	bne.n	8003f34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ec6:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	3301      	adds	r3, #1
 8003edc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d10c      	bne.n	8003efe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ee4:	4a1a      	ldr	r2, [pc, #104]	; (8003f50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	4a16      	ldr	r2, [pc, #88]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eee:	68d2      	ldr	r2, [r2, #12]
 8003ef0:	0a12      	lsrs	r2, r2, #8
 8003ef2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	617b      	str	r3, [r7, #20]
      break;
 8003efc:	e00c      	b.n	8003f18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003efe:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	4a10      	ldr	r2, [pc, #64]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f08:	68d2      	ldr	r2, [r2, #12]
 8003f0a:	0a12      	lsrs	r2, r2, #8
 8003f0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
      break;
 8003f16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	0e5b      	lsrs	r3, r3, #25
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	3301      	adds	r3, #1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e001      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f38:	693b      	ldr	r3, [r7, #16]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	371c      	adds	r7, #28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	007a1200 	.word	0x007a1200

08003f54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3301      	adds	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d10c      	bne.n	8003f92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f78:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f82:	68d2      	ldr	r2, [r2, #12]
 8003f84:	0a12      	lsrs	r2, r2, #8
 8003f86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	617b      	str	r3, [r7, #20]
    break;
 8003f90:	e00c      	b.n	8003fac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f92:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	; (8003fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	0a12      	lsrs	r2, r2, #8
 8003fa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fa4:	fb02 f303 	mul.w	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]
    break;
 8003faa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fac:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	0e5b      	lsrs	r3, r3, #25
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fc6:	687b      	ldr	r3, [r7, #4]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	007a1200 	.word	0x007a1200
 8003fdc:	00f42400 	.word	0x00f42400

08003fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fe8:	2300      	movs	r3, #0
 8003fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fec:	2300      	movs	r3, #0
 8003fee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8098 	beq.w	800412e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004002:	4b43      	ldr	r3, [pc, #268]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10d      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	4b40      	ldr	r3, [pc, #256]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	4a3f      	ldr	r2, [pc, #252]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004018:	6593      	str	r3, [r2, #88]	; 0x58
 800401a:	4b3d      	ldr	r3, [pc, #244]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004026:	2301      	movs	r3, #1
 8004028:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800402a:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a39      	ldr	r2, [pc, #228]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004034:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004036:	f7fd ff55 	bl	8001ee4 <HAL_GetTick>
 800403a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800403c:	e009      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403e:	f7fd ff51 	bl	8001ee4 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d902      	bls.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	74fb      	strb	r3, [r7, #19]
        break;
 8004050:	e005      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004052:	4b30      	ldr	r3, [pc, #192]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ef      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d159      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004064:	4b2a      	ldr	r3, [pc, #168]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01e      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	429a      	cmp	r2, r3
 800407e:	d019      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004080:	4b23      	ldr	r3, [pc, #140]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800408c:	4b20      	ldr	r3, [pc, #128]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800409c:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ac:	4a18      	ldr	r2, [pc, #96]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d016      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040be:	f7fd ff11 	bl	8001ee4 <HAL_GetTick>
 80040c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c4:	e00b      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fd ff0d 	bl	8001ee4 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d902      	bls.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	74fb      	strb	r3, [r7, #19]
            break;
 80040dc:	e006      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0ec      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10b      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f2:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004100:	4903      	ldr	r1, [pc, #12]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004108:	e008      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	74bb      	strb	r3, [r7, #18]
 800410e:	e005      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004110:	40021000 	.word	0x40021000
 8004114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800411c:	7c7b      	ldrb	r3, [r7, #17]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d105      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004122:	4baf      	ldr	r3, [pc, #700]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	4aae      	ldr	r2, [pc, #696]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800413a:	4ba9      	ldr	r3, [pc, #676]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f023 0203 	bic.w	r2, r3, #3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	49a5      	ldr	r1, [pc, #660]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800415c:	4ba0      	ldr	r3, [pc, #640]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f023 020c 	bic.w	r2, r3, #12
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	499d      	ldr	r1, [pc, #628]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800417e:	4b98      	ldr	r3, [pc, #608]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4994      	ldr	r1, [pc, #592]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041a0:	4b8f      	ldr	r3, [pc, #572]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	498c      	ldr	r1, [pc, #560]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041c2:	4b87      	ldr	r3, [pc, #540]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	4983      	ldr	r1, [pc, #524]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041e4:	4b7e      	ldr	r3, [pc, #504]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	497b      	ldr	r1, [pc, #492]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004206:	4b76      	ldr	r3, [pc, #472]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	4972      	ldr	r1, [pc, #456]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004228:	4b6d      	ldr	r3, [pc, #436]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	496a      	ldr	r1, [pc, #424]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800424a:	4b65      	ldr	r3, [pc, #404]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	4961      	ldr	r1, [pc, #388]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800426c:	4b5c      	ldr	r3, [pc, #368]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800426e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004272:	f023 0203 	bic.w	r2, r3, #3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	4959      	ldr	r1, [pc, #356]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800428e:	4b54      	ldr	r3, [pc, #336]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	4950      	ldr	r1, [pc, #320]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d015      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042b0:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	4948      	ldr	r1, [pc, #288]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ce:	d105      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d0:	4b43      	ldr	r3, [pc, #268]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a42      	ldr	r2, [pc, #264]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80042d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d015      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042e8:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	493a      	ldr	r1, [pc, #232]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004306:	d105      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004308:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a34      	ldr	r2, [pc, #208]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800430e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004312:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d015      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004320:	4b2f      	ldr	r3, [pc, #188]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	492c      	ldr	r1, [pc, #176]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800433e:	d105      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004340:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800434a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d015      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004358:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	491e      	ldr	r1, [pc, #120]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004376:	d105      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004378:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800437e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004382:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d015      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4910      	ldr	r1, [pc, #64]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ae:	d105      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80043b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d018      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	4902      	ldr	r1, [pc, #8]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043de:	e001      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80043e0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ec:	d105      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043ee:	4b21      	ldr	r3, [pc, #132]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4a20      	ldr	r2, [pc, #128]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d015      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004414:	4917      	ldr	r1, [pc, #92]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004424:	d105      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004426:	4b13      	ldr	r3, [pc, #76]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d015      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004440:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444c:	4909      	ldr	r1, [pc, #36]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800445c:	d105      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	4a04      	ldr	r2, [pc, #16]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004468:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800446a:	7cbb      	ldrb	r3, [r7, #18]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40021000 	.word	0x40021000

08004478 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d05c      	beq.n	8004544 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc fd96 	bl	8000fd0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044ac:	4b28      	ldr	r3, [pc, #160]	; (8004550 <HAL_RTC_Init+0xd8>)
 80044ae:	22ca      	movs	r2, #202	; 0xca
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24
 80044b2:	4b27      	ldr	r3, [pc, #156]	; (8004550 <HAL_RTC_Init+0xd8>)
 80044b4:	2253      	movs	r2, #83	; 0x53
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f871 	bl	80045a0 <RTC_EnterInitMode>
 80044be:	4603      	mov	r3, r0
 80044c0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d133      	bne.n	8004530 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80044c8:	4b21      	ldr	r3, [pc, #132]	; (8004550 <HAL_RTC_Init+0xd8>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	4a20      	ldr	r2, [pc, #128]	; (8004550 <HAL_RTC_Init+0xd8>)
 80044ce:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80044d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d6:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80044d8:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <HAL_RTC_Init+0xd8>)
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6859      	ldr	r1, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	4319      	orrs	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	430b      	orrs	r3, r1
 80044ec:	4918      	ldr	r1, [pc, #96]	; (8004550 <HAL_RTC_Init+0xd8>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	4914      	ldr	r1, [pc, #80]	; (8004550 <HAL_RTC_Init+0xd8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f880 	bl	8004608 <RTC_ExitInitMode>
 8004508:	4603      	mov	r3, r0
 800450a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10e      	bne.n	8004530 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8004512:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <HAL_RTC_Init+0xd8>)
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a19      	ldr	r1, [r3, #32]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	4319      	orrs	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	430b      	orrs	r3, r1
 800452a:	4909      	ldr	r1, [pc, #36]	; (8004550 <HAL_RTC_Init+0xd8>)
 800452c:	4313      	orrs	r3, r2
 800452e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <HAL_RTC_Init+0xd8>)
 8004532:	22ff      	movs	r2, #255	; 0xff
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d103      	bne.n	8004544 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40002800 	.word	0x40002800

08004554 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <HAL_RTC_WaitForSynchro+0x48>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a0e      	ldr	r2, [pc, #56]	; (800459c <HAL_RTC_WaitForSynchro+0x48>)
 8004562:	f023 0320 	bic.w	r3, r3, #32
 8004566:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004568:	f7fd fcbc 	bl	8001ee4 <HAL_GetTick>
 800456c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800456e:	e009      	b.n	8004584 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004570:	f7fd fcb8 	bl	8001ee4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800457e:	d901      	bls.n	8004584 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e006      	b.n	8004592 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RTC_WaitForSynchro+0x48>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0ef      	beq.n	8004570 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40002800 	.word	0x40002800

080045a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80045ac:	4b15      	ldr	r3, [pc, #84]	; (8004604 <RTC_EnterInitMode+0x64>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d120      	bne.n	80045fa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <RTC_EnterInitMode+0x64>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4a11      	ldr	r2, [pc, #68]	; (8004604 <RTC_EnterInitMode+0x64>)
 80045be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80045c4:	f7fd fc8e 	bl	8001ee4 <HAL_GetTick>
 80045c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045ca:	e00d      	b.n	80045e8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045cc:	f7fd fc8a 	bl	8001ee4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045da:	d905      	bls.n	80045e8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2203      	movs	r2, #3
 80045e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <RTC_EnterInitMode+0x64>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <RTC_EnterInitMode+0x5a>
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d1e8      	bne.n	80045cc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40002800 	.word	0x40002800

08004608 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004614:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <RTC_ExitInitMode+0x78>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <RTC_ExitInitMode+0x78>)
 800461a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800461e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004620:	4b17      	ldr	r3, [pc, #92]	; (8004680 <RTC_ExitInitMode+0x78>)
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10c      	bne.n	8004646 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff91 	bl	8004554 <HAL_RTC_WaitForSynchro>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01e      	beq.n	8004676 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2203      	movs	r2, #3
 800463c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	73fb      	strb	r3, [r7, #15]
 8004644:	e017      	b.n	8004676 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004646:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <RTC_ExitInitMode+0x78>)
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	4a0d      	ldr	r2, [pc, #52]	; (8004680 <RTC_ExitInitMode+0x78>)
 800464c:	f023 0320 	bic.w	r3, r3, #32
 8004650:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff ff7e 	bl	8004554 <HAL_RTC_WaitForSynchro>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2203      	movs	r2, #3
 8004662:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <RTC_ExitInitMode+0x78>)
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	4a04      	ldr	r2, [pc, #16]	; (8004680 <RTC_ExitInitMode+0x78>)
 8004670:	f043 0320 	orr.w	r3, r3, #32
 8004674:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40002800 	.word	0x40002800

08004684 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800469a:	2302      	movs	r3, #2
 800469c:	e068      	b.n	8004770 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046ae:	4b32      	ldr	r3, [pc, #200]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 80046b0:	22ca      	movs	r2, #202	; 0xca
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24
 80046b4:	4b30      	ldr	r3, [pc, #192]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 80046b6:	2253      	movs	r2, #83	; 0x53
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c8:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80046ca:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 80046cc:	2204      	movs	r2, #4
 80046ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d11f      	bne.n	800471e <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    tickstart = HAL_GetTick();
 80046de:	f7fd fc01 	bl	8001ee4 <HAL_GetTick>
 80046e2:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80046e4:	e014      	b.n	8004710 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046e6:	f7fd fbfd 	bl	8001ee4 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046f4:	d90c      	bls.n	8004710 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 80046f8:	22ff      	movs	r2, #255	; 0xff
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2203      	movs	r2, #3
 8004700:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e02f      	b.n	8004770 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0e3      	beq.n	80046e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x62>
      }
    }
  }
  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 800471e:	4a16      	ldr	r2, [pc, #88]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6153      	str	r3, [r2, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f023 0207 	bic.w	r2, r3, #7
 800472c:	4912      	ldr	r1, [pc, #72]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4313      	orrs	r3, r2
 8004732:	618b      	str	r3, [r1, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a10      	ldr	r2, [pc, #64]	; (800477c <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 800473a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800473e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_RISING_IT();
 8004740:	4b0e      	ldr	r3, [pc, #56]	; (800477c <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a0d      	ldr	r2, [pc, #52]	; (800477c <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8004746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800474a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer */ 
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	4a09      	ldr	r2, [pc, #36]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8004752:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8004756:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004758:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 800475a:	22ff      	movs	r2, #255	; 0xff
 800475c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40002800 	.word	0x40002800
 800477c:	40010400 	.word	0x40010400

08004780 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8004792:	2302      	movs	r3, #2
 8004794:	e042      	b.n	800481c <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047a6:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80047a8:	22ca      	movs	r2, #202	; 0xca
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24
 80047ac:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80047ae:	2253      	movs	r2, #83	; 0x53
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE | RTC_CR_WUTIE);
 80047b2:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80047b8:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 80047bc:	6193      	str	r3, [r2, #24]

  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 80047be:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>)
 80047c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047c4:	615a      	str	r2, [r3, #20]

  tickstart = HAL_GetTick();
 80047c6:	f7fd fb8d 	bl	8001ee4 <HAL_GetTick>
 80047ca:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80047cc:	e014      	b.n	80047f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047ce:	f7fd fb89 	bl	8001ee4 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047dc:	d90c      	bls.n	80047f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047de:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80047e0:	22ff      	movs	r2, #255	; 0xff
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2203      	movs	r2, #3
 80047e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e011      	b.n	800481c <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0e4      	beq.n	80047ce <HAL_RTCEx_DeactivateWakeUpTimer+0x4e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004804:	4b07      	ldr	r3, [pc, #28]	; (8004824 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8004806:	22ff      	movs	r2, #255	; 0xff
 8004808:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40002800 	.word	0x40002800
 8004828:	40010400 	.word	0x40010400

0800482c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->SR, RTC_SR_WUTF) != 0U)
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RTCEx_WakeUpTimerIRQHandler+0x38>)
 8004836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <HAL_RTCEx_WakeUpTimerIRQHandler+0x28>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8004840:	4b08      	ldr	r3, [pc, #32]	; (8004864 <HAL_RTCEx_WakeUpTimerIRQHandler+0x38>)
 8004842:	2204      	movs	r2, #4
 8004844:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_IT();
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>)
 8004848:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800484c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f80c 	bl	800486c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800485c:	bf00      	nop
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40002800 	.word	0x40002800
 8004868:	40010400 	.word	0x40010400

0800486c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e09d      	b.n	80049ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2b00      	cmp	r3, #0
 8004898:	d108      	bne.n	80048ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a2:	d009      	beq.n	80048b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	61da      	str	r2, [r3, #28]
 80048aa:	e005      	b.n	80048b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fc fb9e 	bl	8001014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048f8:	d902      	bls.n	8004900 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e002      	b.n	8004906 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004904:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800490e:	d007      	beq.n	8004920 <HAL_SPI_Init+0xa0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004918:	d002      	beq.n	8004920 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	ea42 0103 	orr.w	r1, r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	f003 0204 	and.w	r2, r3, #4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800499c:	ea42 0103 	orr.w	r1, r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b08a      	sub	sp, #40	; 0x28
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049e4:	2301      	movs	r3, #1
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x26>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e1fb      	b.n	8004df4 <HAL_SPI_TransmitReceive+0x41e>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a04:	f7fd fa6e 	bl	8001ee4 <HAL_GetTick>
 8004a08:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a10:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004a18:	887b      	ldrh	r3, [r7, #2]
 8004a1a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004a1c:	887b      	ldrh	r3, [r7, #2]
 8004a1e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a20:	7efb      	ldrb	r3, [r7, #27]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d00e      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x6e>
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2c:	d106      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x66>
 8004a36:	7efb      	ldrb	r3, [r7, #27]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d003      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a42:	e1cd      	b.n	8004de0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_SPI_TransmitReceive+0x80>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_SPI_TransmitReceive+0x80>
 8004a50:	887b      	ldrh	r3, [r7, #2]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a5c:	e1c0      	b.n	8004de0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d003      	beq.n	8004a72 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2205      	movs	r2, #5
 8004a6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	887a      	ldrh	r2, [r7, #2]
 8004a82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	887a      	ldrh	r2, [r7, #2]
 8004a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	887a      	ldrh	r2, [r7, #2]
 8004a98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	887a      	ldrh	r2, [r7, #2]
 8004a9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ab4:	d802      	bhi.n	8004abc <HAL_SPI_TransmitReceive+0xe6>
 8004ab6:	8a3b      	ldrh	r3, [r7, #16]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d908      	bls.n	8004ace <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004aca:	605a      	str	r2, [r3, #4]
 8004acc:	e007      	b.n	8004ade <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004adc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d007      	beq.n	8004afc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b04:	d97c      	bls.n	8004c00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x13e>
 8004b0e:	8a7b      	ldrh	r3, [r7, #18]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d169      	bne.n	8004be8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	881a      	ldrh	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	1c9a      	adds	r2, r3, #2
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b38:	e056      	b.n	8004be8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d11b      	bne.n	8004b80 <HAL_SPI_TransmitReceive+0x1aa>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d016      	beq.n	8004b80 <HAL_SPI_TransmitReceive+0x1aa>
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d113      	bne.n	8004b80 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	881a      	ldrh	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	1c9a      	adds	r2, r3, #2
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d11c      	bne.n	8004bc8 <HAL_SPI_TransmitReceive+0x1f2>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	b292      	uxth	r2, r2
 8004ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bc8:	f7fd f98c 	bl	8001ee4 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d807      	bhi.n	8004be8 <HAL_SPI_TransmitReceive+0x212>
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d003      	beq.n	8004be8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004be6:	e0fb      	b.n	8004de0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1a3      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x164>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d19d      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x164>
 8004bfe:	e0df      	b.n	8004dc0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_SPI_TransmitReceive+0x23a>
 8004c08:	8a7b      	ldrh	r3, [r7, #18]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	f040 80cb 	bne.w	8004da6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d912      	bls.n	8004c40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	881a      	ldrh	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	1c9a      	adds	r2, r3, #2
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b02      	subs	r3, #2
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c3e:	e0b2      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	7812      	ldrb	r2, [r2, #0]
 8004c4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c66:	e09e      	b.n	8004da6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d134      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x30a>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d02f      	beq.n	8004ce0 <HAL_SPI_TransmitReceive+0x30a>
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d12c      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d912      	bls.n	8004cb6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	881a      	ldrh	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	1c9a      	adds	r2, r3, #2
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b02      	subs	r3, #2
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cb4:	e012      	b.n	8004cdc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	7812      	ldrb	r2, [r2, #0]
 8004cc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d148      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x3aa>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d042      	beq.n	8004d80 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d923      	bls.n	8004d4e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	b292      	uxth	r2, r2
 8004d12:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	1c9a      	adds	r2, r3, #2
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b02      	subs	r3, #2
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d81f      	bhi.n	8004d7c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d4a:	605a      	str	r2, [r3, #4]
 8004d4c:	e016      	b.n	8004d7c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f103 020c 	add.w	r2, r3, #12
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	7812      	ldrb	r2, [r2, #0]
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d80:	f7fd f8b0 	bl	8001ee4 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d803      	bhi.n	8004d98 <HAL_SPI_TransmitReceive+0x3c2>
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d96:	d102      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x3c8>
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004da4:	e01c      	b.n	8004de0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f47f af5b 	bne.w	8004c68 <HAL_SPI_TransmitReceive+0x292>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f47f af54 	bne.w	8004c68 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fa53 	bl	8005270 <SPI_EndRxTxTransaction>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d006      	beq.n	8004dde <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60
 8004ddc:	e000      	b.n	8004de0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004dde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3728      	adds	r7, #40	; 0x28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10f      	bne.n	8004e40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	099b      	lsrs	r3, r3, #6
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	4798      	blx	r3
    return;
 8004e3e:	e0d7      	b.n	8004ff0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	085b      	lsrs	r3, r3, #1
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_SPI_IRQHandler+0x66>
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	09db      	lsrs	r3, r3, #7
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
    return;
 8004e60:	e0c6      	b.n	8004ff0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10c      	bne.n	8004e88 <HAL_SPI_IRQHandler+0x8c>
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	099b      	lsrs	r3, r3, #6
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80b4 	beq.w	8004ff0 <HAL_SPI_IRQHandler+0x1f4>
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80ad 	beq.w	8004ff0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d023      	beq.n	8004eea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d011      	beq.n	8004ed2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb2:	f043 0204 	orr.w	r2, r3, #4
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	e00b      	b.n	8004eea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	693b      	ldr	r3, [r7, #16]
        return;
 8004ee8:	e082      	b.n	8004ff0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d014      	beq.n	8004f20 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efa:	f043 0201 	orr.w	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	0a1b      	lsrs	r3, r3, #8
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00c      	beq.n	8004f46 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f30:	f043 0208 	orr.w	r2, r3, #8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]
 8004f44:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d04f      	beq.n	8004fee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f5c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <HAL_SPI_IRQHandler+0x17e>
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d034      	beq.n	8004fe4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0203 	bic.w	r2, r2, #3
 8004f88:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d011      	beq.n	8004fb6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f96:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <HAL_SPI_IRQHandler+0x1fc>)
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fd f8db 	bl	800215a <HAL_DMA_Abort_IT>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d016      	beq.n	8004fec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <HAL_SPI_IRQHandler+0x1fc>)
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fd f8c5 	bl	800215a <HAL_DMA_Abort_IT>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004fe2:	e003      	b.n	8004fec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f809 	bl	8004ffc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004fea:	e000      	b.n	8004fee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004fec:	bf00      	nop
    return;
 8004fee:	bf00      	nop
  }
}
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	08005011 	.word	0x08005011

08004ffc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7ff ffe5 	bl	8004ffc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800504c:	f7fc ff4a 	bl	8001ee4 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	4413      	add	r3, r2
 800505a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800505c:	f7fc ff42 	bl	8001ee4 <HAL_GetTick>
 8005060:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005062:	4b39      	ldr	r3, [pc, #228]	; (8005148 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	015b      	lsls	r3, r3, #5
 8005068:	0d1b      	lsrs	r3, r3, #20
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	fb02 f303 	mul.w	r3, r2, r3
 8005070:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005072:	e054      	b.n	800511e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d050      	beq.n	800511e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800507c:	f7fc ff32 	bl	8001ee4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	429a      	cmp	r2, r3
 800508a:	d902      	bls.n	8005092 <SPI_WaitFlagStateUntilTimeout+0x56>
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d13d      	bne.n	800510e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050aa:	d111      	bne.n	80050d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b4:	d004      	beq.n	80050c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050be:	d107      	bne.n	80050d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d8:	d10f      	bne.n	80050fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e017      	b.n	800513e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	3b01      	subs	r3, #1
 800511c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4013      	ands	r3, r2
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	429a      	cmp	r2, r3
 800512c:	bf0c      	ite	eq
 800512e:	2301      	moveq	r3, #1
 8005130:	2300      	movne	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	429a      	cmp	r2, r3
 800513a:	d19b      	bne.n	8005074 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000000 	.word	0x20000000

0800514c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800515a:	f7fc fec3 	bl	8001ee4 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	4413      	add	r3, r2
 8005168:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800516a:	f7fc febb 	bl	8001ee4 <HAL_GetTick>
 800516e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005170:	4b3e      	ldr	r3, [pc, #248]	; (800526c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	00da      	lsls	r2, r3, #3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	0d1b      	lsrs	r3, r3, #20
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	fb02 f303 	mul.w	r3, r2, r3
 8005186:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005188:	e062      	b.n	8005250 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005190:	d109      	bne.n	80051a6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80051a4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d050      	beq.n	8005250 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051ae:	f7fc fe99 	bl	8001ee4 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d902      	bls.n	80051c4 <SPI_WaitFifoStateUntilTimeout+0x78>
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d13d      	bne.n	8005240 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051dc:	d111      	bne.n	8005202 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e6:	d004      	beq.n	80051f2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f0:	d107      	bne.n	8005202 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005200:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520a:	d10f      	bne.n	800522c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800522a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e010      	b.n	8005262 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	3b01      	subs	r3, #1
 800524e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	429a      	cmp	r2, r3
 800525e:	d194      	bne.n	800518a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000000 	.word	0x20000000

08005270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2200      	movs	r2, #0
 8005284:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff ff5f 	bl	800514c <SPI_WaitFifoStateUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d007      	beq.n	80052a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005298:	f043 0220 	orr.w	r2, r3, #32
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e027      	b.n	80052f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2200      	movs	r2, #0
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff fec4 	bl	800503c <SPI_WaitFlagStateUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e014      	b.n	80052f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f7ff ff38 	bl	800514c <SPI_WaitFifoStateUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e6:	f043 0220 	orr.w	r2, r3, #32
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e000      	b.n	80052f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e049      	b.n	80053a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fb fef6 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 fd6c 	bl	8005e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d001      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e054      	b.n	800546e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a26      	ldr	r2, [pc, #152]	; (800547c <HAL_TIM_Base_Start_IT+0xd0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d022      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ee:	d01d      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a22      	ldr	r2, [pc, #136]	; (8005480 <HAL_TIM_Base_Start_IT+0xd4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d018      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a21      	ldr	r2, [pc, #132]	; (8005484 <HAL_TIM_Base_Start_IT+0xd8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d013      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <HAL_TIM_Base_Start_IT+0xdc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00e      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1e      	ldr	r2, [pc, #120]	; (800548c <HAL_TIM_Base_Start_IT+0xe0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d009      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1c      	ldr	r2, [pc, #112]	; (8005490 <HAL_TIM_Base_Start_IT+0xe4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d004      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x80>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1b      	ldr	r2, [pc, #108]	; (8005494 <HAL_TIM_Base_Start_IT+0xe8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d115      	bne.n	8005458 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	4b19      	ldr	r3, [pc, #100]	; (8005498 <HAL_TIM_Base_Start_IT+0xec>)
 8005434:	4013      	ands	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b06      	cmp	r3, #6
 800543c:	d015      	beq.n	800546a <HAL_TIM_Base_Start_IT+0xbe>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d011      	beq.n	800546a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005456:	e008      	b.n	800546a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e000      	b.n	800546c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40014000 	.word	0x40014000
 8005494:	40015000 	.word	0x40015000
 8005498:	00010007 	.word	0x00010007

0800549c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e049      	b.n	8005542 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fb fdf2 	bl	80010ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4619      	mov	r1, r3
 80054da:	4610      	mov	r0, r2
 80054dc:	f000 fc9c 	bl	8005e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d109      	bne.n	8005570 <HAL_TIM_PWM_Start+0x24>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e03c      	b.n	80055ea <HAL_TIM_PWM_Start+0x9e>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b04      	cmp	r3, #4
 8005574:	d109      	bne.n	800558a <HAL_TIM_PWM_Start+0x3e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	e02f      	b.n	80055ea <HAL_TIM_PWM_Start+0x9e>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d109      	bne.n	80055a4 <HAL_TIM_PWM_Start+0x58>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e022      	b.n	80055ea <HAL_TIM_PWM_Start+0x9e>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b0c      	cmp	r3, #12
 80055a8:	d109      	bne.n	80055be <HAL_TIM_PWM_Start+0x72>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	bf14      	ite	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	2300      	moveq	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	e015      	b.n	80055ea <HAL_TIM_PWM_Start+0x9e>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d109      	bne.n	80055d8 <HAL_TIM_PWM_Start+0x8c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	e008      	b.n	80055ea <HAL_TIM_PWM_Start+0x9e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e0a6      	b.n	8005740 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_PWM_Start+0xb6>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005600:	e023      	b.n	800564a <HAL_TIM_PWM_Start+0xfe>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b04      	cmp	r3, #4
 8005606:	d104      	bne.n	8005612 <HAL_TIM_PWM_Start+0xc6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005610:	e01b      	b.n	800564a <HAL_TIM_PWM_Start+0xfe>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b08      	cmp	r3, #8
 8005616:	d104      	bne.n	8005622 <HAL_TIM_PWM_Start+0xd6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005620:	e013      	b.n	800564a <HAL_TIM_PWM_Start+0xfe>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b0c      	cmp	r3, #12
 8005626:	d104      	bne.n	8005632 <HAL_TIM_PWM_Start+0xe6>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005630:	e00b      	b.n	800564a <HAL_TIM_PWM_Start+0xfe>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b10      	cmp	r3, #16
 8005636:	d104      	bne.n	8005642 <HAL_TIM_PWM_Start+0xf6>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005640:	e003      	b.n	800564a <HAL_TIM_PWM_Start+0xfe>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2202      	movs	r2, #2
 8005646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2201      	movs	r2, #1
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 ffb2 	bl	80065bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a3a      	ldr	r2, [pc, #232]	; (8005748 <HAL_TIM_PWM_Start+0x1fc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d018      	beq.n	8005694 <HAL_TIM_PWM_Start+0x148>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a39      	ldr	r2, [pc, #228]	; (800574c <HAL_TIM_PWM_Start+0x200>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <HAL_TIM_PWM_Start+0x148>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a37      	ldr	r2, [pc, #220]	; (8005750 <HAL_TIM_PWM_Start+0x204>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00e      	beq.n	8005694 <HAL_TIM_PWM_Start+0x148>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a36      	ldr	r2, [pc, #216]	; (8005754 <HAL_TIM_PWM_Start+0x208>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d009      	beq.n	8005694 <HAL_TIM_PWM_Start+0x148>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a34      	ldr	r2, [pc, #208]	; (8005758 <HAL_TIM_PWM_Start+0x20c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_TIM_PWM_Start+0x148>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a33      	ldr	r2, [pc, #204]	; (800575c <HAL_TIM_PWM_Start+0x210>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d101      	bne.n	8005698 <HAL_TIM_PWM_Start+0x14c>
 8005694:	2301      	movs	r3, #1
 8005696:	e000      	b.n	800569a <HAL_TIM_PWM_Start+0x14e>
 8005698:	2300      	movs	r3, #0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a25      	ldr	r2, [pc, #148]	; (8005748 <HAL_TIM_PWM_Start+0x1fc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d022      	beq.n	80056fe <HAL_TIM_PWM_Start+0x1b2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d01d      	beq.n	80056fe <HAL_TIM_PWM_Start+0x1b2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a26      	ldr	r2, [pc, #152]	; (8005760 <HAL_TIM_PWM_Start+0x214>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d018      	beq.n	80056fe <HAL_TIM_PWM_Start+0x1b2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a24      	ldr	r2, [pc, #144]	; (8005764 <HAL_TIM_PWM_Start+0x218>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d013      	beq.n	80056fe <HAL_TIM_PWM_Start+0x1b2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a23      	ldr	r2, [pc, #140]	; (8005768 <HAL_TIM_PWM_Start+0x21c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00e      	beq.n	80056fe <HAL_TIM_PWM_Start+0x1b2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a19      	ldr	r2, [pc, #100]	; (800574c <HAL_TIM_PWM_Start+0x200>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_TIM_PWM_Start+0x1b2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a18      	ldr	r2, [pc, #96]	; (8005750 <HAL_TIM_PWM_Start+0x204>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <HAL_TIM_PWM_Start+0x1b2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <HAL_TIM_PWM_Start+0x210>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d115      	bne.n	800572a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	4b19      	ldr	r3, [pc, #100]	; (800576c <HAL_TIM_PWM_Start+0x220>)
 8005706:	4013      	ands	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b06      	cmp	r3, #6
 800570e:	d015      	beq.n	800573c <HAL_TIM_PWM_Start+0x1f0>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005716:	d011      	beq.n	800573c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005728:	e008      	b.n	800573c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e000      	b.n	800573e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40012c00 	.word	0x40012c00
 800574c:	40013400 	.word	0x40013400
 8005750:	40014000 	.word	0x40014000
 8005754:	40014400 	.word	0x40014400
 8005758:	40014800 	.word	0x40014800
 800575c:	40015000 	.word	0x40015000
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	00010007 	.word	0x00010007

08005770 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2200      	movs	r2, #0
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f000 ff1a 	bl	80065bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a40      	ldr	r2, [pc, #256]	; (8005890 <HAL_TIM_PWM_Stop+0x120>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_TIM_PWM_Stop+0x54>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a3f      	ldr	r2, [pc, #252]	; (8005894 <HAL_TIM_PWM_Stop+0x124>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <HAL_TIM_PWM_Stop+0x54>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a3d      	ldr	r2, [pc, #244]	; (8005898 <HAL_TIM_PWM_Stop+0x128>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_TIM_PWM_Stop+0x54>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a3c      	ldr	r2, [pc, #240]	; (800589c <HAL_TIM_PWM_Stop+0x12c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_TIM_PWM_Stop+0x54>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a3a      	ldr	r2, [pc, #232]	; (80058a0 <HAL_TIM_PWM_Stop+0x130>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIM_PWM_Stop+0x54>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a39      	ldr	r2, [pc, #228]	; (80058a4 <HAL_TIM_PWM_Stop+0x134>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d101      	bne.n	80057c8 <HAL_TIM_PWM_Stop+0x58>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_TIM_PWM_Stop+0x5a>
 80057c8:	2300      	movs	r3, #0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d017      	beq.n	80057fe <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6a1a      	ldr	r2, [r3, #32]
 80057d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10f      	bne.n	80057fe <HAL_TIM_PWM_Stop+0x8e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	f244 4344 	movw	r3, #17476	; 0x4444
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d107      	bne.n	80057fe <HAL_TIM_PWM_Stop+0x8e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6a1a      	ldr	r2, [r3, #32]
 8005804:	f241 1311 	movw	r3, #4369	; 0x1111
 8005808:	4013      	ands	r3, r2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10f      	bne.n	800582e <HAL_TIM_PWM_Stop+0xbe>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a1a      	ldr	r2, [r3, #32]
 8005814:	f244 4344 	movw	r3, #17476	; 0x4444
 8005818:	4013      	ands	r3, r2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d107      	bne.n	800582e <HAL_TIM_PWM_Stop+0xbe>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0201 	bic.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <HAL_TIM_PWM_Stop+0xce>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800583c:	e023      	b.n	8005886 <HAL_TIM_PWM_Stop+0x116>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b04      	cmp	r3, #4
 8005842:	d104      	bne.n	800584e <HAL_TIM_PWM_Stop+0xde>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800584c:	e01b      	b.n	8005886 <HAL_TIM_PWM_Stop+0x116>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b08      	cmp	r3, #8
 8005852:	d104      	bne.n	800585e <HAL_TIM_PWM_Stop+0xee>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800585c:	e013      	b.n	8005886 <HAL_TIM_PWM_Stop+0x116>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b0c      	cmp	r3, #12
 8005862:	d104      	bne.n	800586e <HAL_TIM_PWM_Stop+0xfe>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800586c:	e00b      	b.n	8005886 <HAL_TIM_PWM_Stop+0x116>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b10      	cmp	r3, #16
 8005872:	d104      	bne.n	800587e <HAL_TIM_PWM_Stop+0x10e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800587c:	e003      	b.n	8005886 <HAL_TIM_PWM_Stop+0x116>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40013400 	.word	0x40013400
 8005898:	40014000 	.word	0x40014000
 800589c:	40014400 	.word	0x40014400
 80058a0:	40014800 	.word	0x40014800
 80058a4:	40015000 	.word	0x40015000

080058a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d122      	bne.n	8005904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d11b      	bne.n	8005904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0202 	mvn.w	r2, #2
 80058d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fa76 	bl	8005ddc <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa68 	bl	8005dc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fa79 	bl	8005df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b04      	cmp	r3, #4
 8005910:	d122      	bne.n	8005958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b04      	cmp	r3, #4
 800591e:	d11b      	bne.n	8005958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0204 	mvn.w	r2, #4
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa4c 	bl	8005ddc <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fa3e 	bl	8005dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fa4f 	bl	8005df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b08      	cmp	r3, #8
 8005964:	d122      	bne.n	80059ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b08      	cmp	r3, #8
 8005972:	d11b      	bne.n	80059ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0208 	mvn.w	r2, #8
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2204      	movs	r2, #4
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fa22 	bl	8005ddc <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fa14 	bl	8005dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fa25 	bl	8005df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b10      	cmp	r3, #16
 80059b8:	d122      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d11b      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0210 	mvn.w	r2, #16
 80059d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2208      	movs	r2, #8
 80059d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f9f8 	bl	8005ddc <HAL_TIM_IC_CaptureCallback>
 80059ec:	e005      	b.n	80059fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f9ea 	bl	8005dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f9fb 	bl	8005df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d10e      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d107      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0201 	mvn.w	r2, #1
 8005a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fa fbf6 	bl	8000218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a36:	2b80      	cmp	r3, #128	; 0x80
 8005a38:	d10e      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a44:	2b80      	cmp	r3, #128	; 0x80
 8005a46:	d107      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fe78 	bl	8006748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a66:	d10e      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d107      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fe6b 	bl	800675c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d10e      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d107      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f9a9 	bl	8005e04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d10e      	bne.n	8005ade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d107      	bne.n	8005ade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f06f 0220 	mvn.w	r2, #32
 8005ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fe2b 	bl	8006734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aec:	d10f      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005afc:	d107      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fe31 	bl	8006770 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b1c:	d10f      	bne.n	8005b3e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b2c:	d107      	bne.n	8005b3e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fe23 	bl	8006784 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b4c:	d10f      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b5c:	d107      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fe15 	bl	8006798 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b7c:	d10f      	bne.n	8005b9e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b8c:	d107      	bne.n	8005b9e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fe07 	bl	80067ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b9e:	bf00      	nop
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e0fd      	b.n	8005dbe <HAL_TIM_PWM_ConfigChannel+0x216>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b14      	cmp	r3, #20
 8005bce:	f200 80f0 	bhi.w	8005db2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005bd2:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005c2d 	.word	0x08005c2d
 8005bdc:	08005db3 	.word	0x08005db3
 8005be0:	08005db3 	.word	0x08005db3
 8005be4:	08005db3 	.word	0x08005db3
 8005be8:	08005c6d 	.word	0x08005c6d
 8005bec:	08005db3 	.word	0x08005db3
 8005bf0:	08005db3 	.word	0x08005db3
 8005bf4:	08005db3 	.word	0x08005db3
 8005bf8:	08005caf 	.word	0x08005caf
 8005bfc:	08005db3 	.word	0x08005db3
 8005c00:	08005db3 	.word	0x08005db3
 8005c04:	08005db3 	.word	0x08005db3
 8005c08:	08005cef 	.word	0x08005cef
 8005c0c:	08005db3 	.word	0x08005db3
 8005c10:	08005db3 	.word	0x08005db3
 8005c14:	08005db3 	.word	0x08005db3
 8005c18:	08005d31 	.word	0x08005d31
 8005c1c:	08005db3 	.word	0x08005db3
 8005c20:	08005db3 	.word	0x08005db3
 8005c24:	08005db3 	.word	0x08005db3
 8005c28:	08005d71 	.word	0x08005d71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 f998 	bl	8005f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0208 	orr.w	r2, r2, #8
 8005c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0204 	bic.w	r2, r2, #4
 8005c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6999      	ldr	r1, [r3, #24]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	619a      	str	r2, [r3, #24]
      break;
 8005c6a:	e0a3      	b.n	8005db4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fa12 	bl	800609c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6999      	ldr	r1, [r3, #24]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	021a      	lsls	r2, r3, #8
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	619a      	str	r2, [r3, #24]
      break;
 8005cac:	e082      	b.n	8005db4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fa85 	bl	80061c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0208 	orr.w	r2, r2, #8
 8005cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0204 	bic.w	r2, r2, #4
 8005cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69d9      	ldr	r1, [r3, #28]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	61da      	str	r2, [r3, #28]
      break;
 8005cec:	e062      	b.n	8005db4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 faf7 	bl	80062e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69d9      	ldr	r1, [r3, #28]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	021a      	lsls	r2, r3, #8
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	61da      	str	r2, [r3, #28]
      break;
 8005d2e:	e041      	b.n	8005db4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fb6a 	bl	8006410 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0208 	orr.w	r2, r2, #8
 8005d4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0204 	bic.w	r2, r2, #4
 8005d5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005d6e:	e021      	b.n	8005db4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fbb4 	bl	80064e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d9a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	021a      	lsls	r2, r3, #8
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005db0:	e000      	b.n	8005db4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005db2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop

08005dc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a46      	ldr	r2, [pc, #280]	; (8005f44 <TIM_Base_SetConfig+0x12c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d017      	beq.n	8005e60 <TIM_Base_SetConfig+0x48>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e36:	d013      	beq.n	8005e60 <TIM_Base_SetConfig+0x48>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a43      	ldr	r2, [pc, #268]	; (8005f48 <TIM_Base_SetConfig+0x130>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00f      	beq.n	8005e60 <TIM_Base_SetConfig+0x48>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a42      	ldr	r2, [pc, #264]	; (8005f4c <TIM_Base_SetConfig+0x134>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00b      	beq.n	8005e60 <TIM_Base_SetConfig+0x48>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a41      	ldr	r2, [pc, #260]	; (8005f50 <TIM_Base_SetConfig+0x138>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d007      	beq.n	8005e60 <TIM_Base_SetConfig+0x48>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a40      	ldr	r2, [pc, #256]	; (8005f54 <TIM_Base_SetConfig+0x13c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d003      	beq.n	8005e60 <TIM_Base_SetConfig+0x48>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a3f      	ldr	r2, [pc, #252]	; (8005f58 <TIM_Base_SetConfig+0x140>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d108      	bne.n	8005e72 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a33      	ldr	r2, [pc, #204]	; (8005f44 <TIM_Base_SetConfig+0x12c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d023      	beq.n	8005ec2 <TIM_Base_SetConfig+0xaa>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e80:	d01f      	beq.n	8005ec2 <TIM_Base_SetConfig+0xaa>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a30      	ldr	r2, [pc, #192]	; (8005f48 <TIM_Base_SetConfig+0x130>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d01b      	beq.n	8005ec2 <TIM_Base_SetConfig+0xaa>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a2f      	ldr	r2, [pc, #188]	; (8005f4c <TIM_Base_SetConfig+0x134>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d017      	beq.n	8005ec2 <TIM_Base_SetConfig+0xaa>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2e      	ldr	r2, [pc, #184]	; (8005f50 <TIM_Base_SetConfig+0x138>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <TIM_Base_SetConfig+0xaa>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2d      	ldr	r2, [pc, #180]	; (8005f54 <TIM_Base_SetConfig+0x13c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00f      	beq.n	8005ec2 <TIM_Base_SetConfig+0xaa>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a2d      	ldr	r2, [pc, #180]	; (8005f5c <TIM_Base_SetConfig+0x144>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00b      	beq.n	8005ec2 <TIM_Base_SetConfig+0xaa>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a2c      	ldr	r2, [pc, #176]	; (8005f60 <TIM_Base_SetConfig+0x148>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d007      	beq.n	8005ec2 <TIM_Base_SetConfig+0xaa>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a2b      	ldr	r2, [pc, #172]	; (8005f64 <TIM_Base_SetConfig+0x14c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <TIM_Base_SetConfig+0xaa>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a26      	ldr	r2, [pc, #152]	; (8005f58 <TIM_Base_SetConfig+0x140>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d108      	bne.n	8005ed4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a12      	ldr	r2, [pc, #72]	; (8005f44 <TIM_Base_SetConfig+0x12c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d013      	beq.n	8005f28 <TIM_Base_SetConfig+0x110>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <TIM_Base_SetConfig+0x13c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00f      	beq.n	8005f28 <TIM_Base_SetConfig+0x110>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a14      	ldr	r2, [pc, #80]	; (8005f5c <TIM_Base_SetConfig+0x144>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00b      	beq.n	8005f28 <TIM_Base_SetConfig+0x110>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a13      	ldr	r2, [pc, #76]	; (8005f60 <TIM_Base_SetConfig+0x148>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <TIM_Base_SetConfig+0x110>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a12      	ldr	r2, [pc, #72]	; (8005f64 <TIM_Base_SetConfig+0x14c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_Base_SetConfig+0x110>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a0d      	ldr	r2, [pc, #52]	; (8005f58 <TIM_Base_SetConfig+0x140>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d103      	bne.n	8005f30 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	615a      	str	r2, [r3, #20]
}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40012c00 	.word	0x40012c00
 8005f48:	40000400 	.word	0x40000400
 8005f4c:	40000800 	.word	0x40000800
 8005f50:	40000c00 	.word	0x40000c00
 8005f54:	40013400 	.word	0x40013400
 8005f58:	40015000 	.word	0x40015000
 8005f5c:	40014000 	.word	0x40014000
 8005f60:	40014400 	.word	0x40014400
 8005f64:	40014800 	.word	0x40014800

08005f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f023 0201 	bic.w	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0303 	bic.w	r3, r3, #3
 8005fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f023 0302 	bic.w	r3, r3, #2
 8005fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a30      	ldr	r2, [pc, #192]	; (8006084 <TIM_OC1_SetConfig+0x11c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d013      	beq.n	8005ff0 <TIM_OC1_SetConfig+0x88>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a2f      	ldr	r2, [pc, #188]	; (8006088 <TIM_OC1_SetConfig+0x120>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00f      	beq.n	8005ff0 <TIM_OC1_SetConfig+0x88>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a2e      	ldr	r2, [pc, #184]	; (800608c <TIM_OC1_SetConfig+0x124>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00b      	beq.n	8005ff0 <TIM_OC1_SetConfig+0x88>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a2d      	ldr	r2, [pc, #180]	; (8006090 <TIM_OC1_SetConfig+0x128>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d007      	beq.n	8005ff0 <TIM_OC1_SetConfig+0x88>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a2c      	ldr	r2, [pc, #176]	; (8006094 <TIM_OC1_SetConfig+0x12c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_OC1_SetConfig+0x88>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a2b      	ldr	r2, [pc, #172]	; (8006098 <TIM_OC1_SetConfig+0x130>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d10c      	bne.n	800600a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f023 0308 	bic.w	r3, r3, #8
 8005ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f023 0304 	bic.w	r3, r3, #4
 8006008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <TIM_OC1_SetConfig+0x11c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <TIM_OC1_SetConfig+0xd2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a1c      	ldr	r2, [pc, #112]	; (8006088 <TIM_OC1_SetConfig+0x120>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00f      	beq.n	800603a <TIM_OC1_SetConfig+0xd2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a1b      	ldr	r2, [pc, #108]	; (800608c <TIM_OC1_SetConfig+0x124>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00b      	beq.n	800603a <TIM_OC1_SetConfig+0xd2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a1a      	ldr	r2, [pc, #104]	; (8006090 <TIM_OC1_SetConfig+0x128>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <TIM_OC1_SetConfig+0xd2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a19      	ldr	r2, [pc, #100]	; (8006094 <TIM_OC1_SetConfig+0x12c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_OC1_SetConfig+0xd2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a18      	ldr	r2, [pc, #96]	; (8006098 <TIM_OC1_SetConfig+0x130>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d111      	bne.n	800605e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	621a      	str	r2, [r3, #32]
}
 8006078:	bf00      	nop
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40013400 	.word	0x40013400
 800608c:	40014000 	.word	0x40014000
 8006090:	40014400 	.word	0x40014400
 8006094:	40014800 	.word	0x40014800
 8006098:	40015000 	.word	0x40015000

0800609c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	f023 0210 	bic.w	r2, r3, #16
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f023 0320 	bic.w	r3, r3, #32
 80060ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a2c      	ldr	r2, [pc, #176]	; (80061ac <TIM_OC2_SetConfig+0x110>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d007      	beq.n	8006110 <TIM_OC2_SetConfig+0x74>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a2b      	ldr	r2, [pc, #172]	; (80061b0 <TIM_OC2_SetConfig+0x114>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_OC2_SetConfig+0x74>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a2a      	ldr	r2, [pc, #168]	; (80061b4 <TIM_OC2_SetConfig+0x118>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d10d      	bne.n	800612c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800612a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a1f      	ldr	r2, [pc, #124]	; (80061ac <TIM_OC2_SetConfig+0x110>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d013      	beq.n	800615c <TIM_OC2_SetConfig+0xc0>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a1e      	ldr	r2, [pc, #120]	; (80061b0 <TIM_OC2_SetConfig+0x114>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00f      	beq.n	800615c <TIM_OC2_SetConfig+0xc0>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a1e      	ldr	r2, [pc, #120]	; (80061b8 <TIM_OC2_SetConfig+0x11c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00b      	beq.n	800615c <TIM_OC2_SetConfig+0xc0>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a1d      	ldr	r2, [pc, #116]	; (80061bc <TIM_OC2_SetConfig+0x120>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d007      	beq.n	800615c <TIM_OC2_SetConfig+0xc0>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a1c      	ldr	r2, [pc, #112]	; (80061c0 <TIM_OC2_SetConfig+0x124>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC2_SetConfig+0xc0>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <TIM_OC2_SetConfig+0x118>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d113      	bne.n	8006184 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800616a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40013400 	.word	0x40013400
 80061b4:	40015000 	.word	0x40015000
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0303 	bic.w	r3, r3, #3
 80061fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a2b      	ldr	r2, [pc, #172]	; (80062d0 <TIM_OC3_SetConfig+0x10c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d007      	beq.n	8006236 <TIM_OC3_SetConfig+0x72>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a2a      	ldr	r2, [pc, #168]	; (80062d4 <TIM_OC3_SetConfig+0x110>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_OC3_SetConfig+0x72>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a29      	ldr	r2, [pc, #164]	; (80062d8 <TIM_OC3_SetConfig+0x114>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d10d      	bne.n	8006252 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800623c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a1e      	ldr	r2, [pc, #120]	; (80062d0 <TIM_OC3_SetConfig+0x10c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <TIM_OC3_SetConfig+0xbe>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <TIM_OC3_SetConfig+0x110>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00f      	beq.n	8006282 <TIM_OC3_SetConfig+0xbe>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a1d      	ldr	r2, [pc, #116]	; (80062dc <TIM_OC3_SetConfig+0x118>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00b      	beq.n	8006282 <TIM_OC3_SetConfig+0xbe>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <TIM_OC3_SetConfig+0x11c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_OC3_SetConfig+0xbe>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a1b      	ldr	r2, [pc, #108]	; (80062e4 <TIM_OC3_SetConfig+0x120>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_OC3_SetConfig+0xbe>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a16      	ldr	r2, [pc, #88]	; (80062d8 <TIM_OC3_SetConfig+0x114>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d113      	bne.n	80062aa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	621a      	str	r2, [r3, #32]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40013400 	.word	0x40013400
 80062d8:	40015000 	.word	0x40015000
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800

080062e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	031b      	lsls	r3, r3, #12
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a2c      	ldr	r2, [pc, #176]	; (80063f8 <TIM_OC4_SetConfig+0x110>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d007      	beq.n	800635c <TIM_OC4_SetConfig+0x74>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a2b      	ldr	r2, [pc, #172]	; (80063fc <TIM_OC4_SetConfig+0x114>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_OC4_SetConfig+0x74>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a2a      	ldr	r2, [pc, #168]	; (8006400 <TIM_OC4_SetConfig+0x118>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d10d      	bne.n	8006378 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	031b      	lsls	r3, r3, #12
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006376:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <TIM_OC4_SetConfig+0x110>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <TIM_OC4_SetConfig+0xc0>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <TIM_OC4_SetConfig+0x114>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00f      	beq.n	80063a8 <TIM_OC4_SetConfig+0xc0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a1e      	ldr	r2, [pc, #120]	; (8006404 <TIM_OC4_SetConfig+0x11c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00b      	beq.n	80063a8 <TIM_OC4_SetConfig+0xc0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a1d      	ldr	r2, [pc, #116]	; (8006408 <TIM_OC4_SetConfig+0x120>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d007      	beq.n	80063a8 <TIM_OC4_SetConfig+0xc0>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a1c      	ldr	r2, [pc, #112]	; (800640c <TIM_OC4_SetConfig+0x124>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_OC4_SetConfig+0xc0>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a17      	ldr	r2, [pc, #92]	; (8006400 <TIM_OC4_SetConfig+0x118>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d113      	bne.n	80063d0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	019b      	lsls	r3, r3, #6
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	019b      	lsls	r3, r3, #6
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40012c00 	.word	0x40012c00
 80063fc:	40013400 	.word	0x40013400
 8006400:	40015000 	.word	0x40015000
 8006404:	40014000 	.word	0x40014000
 8006408:	40014400 	.word	0x40014400
 800640c:	40014800 	.word	0x40014800

08006410 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800643e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006454:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	041b      	lsls	r3, r3, #16
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a19      	ldr	r2, [pc, #100]	; (80064cc <TIM_OC5_SetConfig+0xbc>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <TIM_OC5_SetConfig+0x82>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a18      	ldr	r2, [pc, #96]	; (80064d0 <TIM_OC5_SetConfig+0xc0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00f      	beq.n	8006492 <TIM_OC5_SetConfig+0x82>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a17      	ldr	r2, [pc, #92]	; (80064d4 <TIM_OC5_SetConfig+0xc4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00b      	beq.n	8006492 <TIM_OC5_SetConfig+0x82>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <TIM_OC5_SetConfig+0xc8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d007      	beq.n	8006492 <TIM_OC5_SetConfig+0x82>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a15      	ldr	r2, [pc, #84]	; (80064dc <TIM_OC5_SetConfig+0xcc>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d003      	beq.n	8006492 <TIM_OC5_SetConfig+0x82>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a14      	ldr	r2, [pc, #80]	; (80064e0 <TIM_OC5_SetConfig+0xd0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d109      	bne.n	80064a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006498:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	621a      	str	r2, [r3, #32]
}
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	40012c00 	.word	0x40012c00
 80064d0:	40013400 	.word	0x40013400
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800
 80064e0:	40015000 	.word	0x40015000

080064e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4313      	orrs	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800652a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	051b      	lsls	r3, r3, #20
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <TIM_OC6_SetConfig+0xc0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <TIM_OC6_SetConfig+0x84>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a19      	ldr	r2, [pc, #100]	; (80065a8 <TIM_OC6_SetConfig+0xc4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00f      	beq.n	8006568 <TIM_OC6_SetConfig+0x84>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a18      	ldr	r2, [pc, #96]	; (80065ac <TIM_OC6_SetConfig+0xc8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00b      	beq.n	8006568 <TIM_OC6_SetConfig+0x84>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a17      	ldr	r2, [pc, #92]	; (80065b0 <TIM_OC6_SetConfig+0xcc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <TIM_OC6_SetConfig+0x84>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a16      	ldr	r2, [pc, #88]	; (80065b4 <TIM_OC6_SetConfig+0xd0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d003      	beq.n	8006568 <TIM_OC6_SetConfig+0x84>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <TIM_OC6_SetConfig+0xd4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d109      	bne.n	800657c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800656e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	029b      	lsls	r3, r3, #10
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	621a      	str	r2, [r3, #32]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40012c00 	.word	0x40012c00
 80065a8:	40013400 	.word	0x40013400
 80065ac:	40014000 	.word	0x40014000
 80065b0:	40014400 	.word	0x40014400
 80065b4:	40014800 	.word	0x40014800
 80065b8:	40015000 	.word	0x40015000

080065bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f003 031f 	and.w	r3, r3, #31
 80065ce:	2201      	movs	r2, #1
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1a      	ldr	r2, [r3, #32]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	43db      	mvns	r3, r3
 80065de:	401a      	ands	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a1a      	ldr	r2, [r3, #32]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 031f 	and.w	r3, r3, #31
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	fa01 f303 	lsl.w	r3, r1, r3
 80065f4:	431a      	orrs	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
	...

08006608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800661c:	2302      	movs	r3, #2
 800661e:	e074      	b.n	800670a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a34      	ldr	r2, [pc, #208]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d009      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a33      	ldr	r2, [pc, #204]	; (800671c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d004      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a31      	ldr	r2, [pc, #196]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d108      	bne.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006664:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a21      	ldr	r2, [pc, #132]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d022      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a0:	d01d      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1f      	ldr	r2, [pc, #124]	; (8006724 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d018      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a1d      	ldr	r2, [pc, #116]	; (8006728 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d013      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1c      	ldr	r2, [pc, #112]	; (800672c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00e      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a15      	ldr	r2, [pc, #84]	; (800671c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d009      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a18      	ldr	r2, [pc, #96]	; (8006730 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d004      	beq.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a11      	ldr	r2, [pc, #68]	; (8006720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d10c      	bne.n	80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40013400 	.word	0x40013400
 8006720:	40015000 	.word	0x40015000
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800
 800672c:	40000c00 	.word	0x40000c00
 8006730:	40014000 	.word	0x40014000

08006734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <__libc_init_array>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	4d0d      	ldr	r5, [pc, #52]	; (80067f8 <__libc_init_array+0x38>)
 80067c4:	4c0d      	ldr	r4, [pc, #52]	; (80067fc <__libc_init_array+0x3c>)
 80067c6:	1b64      	subs	r4, r4, r5
 80067c8:	10a4      	asrs	r4, r4, #2
 80067ca:	2600      	movs	r6, #0
 80067cc:	42a6      	cmp	r6, r4
 80067ce:	d109      	bne.n	80067e4 <__libc_init_array+0x24>
 80067d0:	4d0b      	ldr	r5, [pc, #44]	; (8006800 <__libc_init_array+0x40>)
 80067d2:	4c0c      	ldr	r4, [pc, #48]	; (8006804 <__libc_init_array+0x44>)
 80067d4:	f000 f820 	bl	8006818 <_init>
 80067d8:	1b64      	subs	r4, r4, r5
 80067da:	10a4      	asrs	r4, r4, #2
 80067dc:	2600      	movs	r6, #0
 80067de:	42a6      	cmp	r6, r4
 80067e0:	d105      	bne.n	80067ee <__libc_init_array+0x2e>
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e8:	4798      	blx	r3
 80067ea:	3601      	adds	r6, #1
 80067ec:	e7ee      	b.n	80067cc <__libc_init_array+0xc>
 80067ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f2:	4798      	blx	r3
 80067f4:	3601      	adds	r6, #1
 80067f6:	e7f2      	b.n	80067de <__libc_init_array+0x1e>
 80067f8:	08006850 	.word	0x08006850
 80067fc:	08006850 	.word	0x08006850
 8006800:	08006850 	.word	0x08006850
 8006804:	08006854 	.word	0x08006854

08006808 <memset>:
 8006808:	4402      	add	r2, r0
 800680a:	4603      	mov	r3, r0
 800680c:	4293      	cmp	r3, r2
 800680e:	d100      	bne.n	8006812 <memset+0xa>
 8006810:	4770      	bx	lr
 8006812:	f803 1b01 	strb.w	r1, [r3], #1
 8006816:	e7f9      	b.n	800680c <memset+0x4>

08006818 <_init>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	bf00      	nop
 800681c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681e:	bc08      	pop	{r3}
 8006820:	469e      	mov	lr, r3
 8006822:	4770      	bx	lr

08006824 <_fini>:
 8006824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006826:	bf00      	nop
 8006828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682a:	bc08      	pop	{r3}
 800682c:	469e      	mov	lr, r3
 800682e:	4770      	bx	lr
